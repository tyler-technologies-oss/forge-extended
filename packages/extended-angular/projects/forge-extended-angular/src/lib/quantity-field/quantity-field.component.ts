// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  QuantityFieldComponent as QuantityFieldComponentCustomElement,
  defineQuantityFieldComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-quantity-field',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class QuantityFieldComponent {
  protected elementRef = inject<ElementRef<QuantityFieldComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-quantity-field element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Indicates whether the field is invalid. */
  @Input({ transform: booleanAttribute })
  public set invalid(value: QuantityFieldComponentCustomElement['invalid']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.invalid = value;
    });
  }
  public get invalid(): QuantityFieldComponentCustomElement['invalid'] {
    return this.nativeElement.invalid;
  }

  /** Indicates whether the field is required. */
  @Input({ transform: booleanAttribute })
  public set required(value: QuantityFieldComponentCustomElement['required']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.required = value;
    });
  }
  public get required(): QuantityFieldComponentCustomElement['required'] {
    return this.nativeElement.required;
  }

  /** The accessible label for the decrement button. */
  @Input()
  public set decrementLabel(value: QuantityFieldComponentCustomElement['decrementLabel']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.decrementLabel = value;
    });
  }
  public get decrementLabel(): QuantityFieldComponentCustomElement['decrementLabel'] {
    return this.nativeElement.decrementLabel;
  }

  /** The accessible label for the increment button. */
  @Input()
  public set incrementLabel(value: QuantityFieldComponentCustomElement['incrementLabel']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.incrementLabel = value;
    });
  }
  public get incrementLabel(): QuantityFieldComponentCustomElement['incrementLabel'] {
    return this.nativeElement.incrementLabel;
  }

  constructor() {
    defineQuantityFieldComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

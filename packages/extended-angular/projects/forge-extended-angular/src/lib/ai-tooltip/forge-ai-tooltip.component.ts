// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  numberAttribute,
  Input,
  inject
} from '@angular/core';
import {
  ForgeAiTooltipComponent as ForgeAiTooltipComponentCustomElement,
  defineForgeAiTooltipComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-tooltip',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class ForgeAiTooltipComponent {
  protected elementRef = inject<ElementRef<ForgeAiTooltipComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-tooltip element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** The ID of the anchor element to attach the tooltip to. */
  @Input()
  public set for(value: ForgeAiTooltipComponentCustomElement['for']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.for = value;
    });
  }
  public get for(): ForgeAiTooltipComponentCustomElement['for'] {
    return this.nativeElement.for;
  }

  /** The text content of the tooltip (alternative to slotted content). */
  @Input()
  public set text(value: ForgeAiTooltipComponentCustomElement['text']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.text = value;
    });
  }
  public get text(): ForgeAiTooltipComponentCustomElement['text'] {
    return this.nativeElement.text;
  }

  /** The placement of the tooltip relative to the anchor. */
  @Input()
  public set placement(value: ForgeAiTooltipComponentCustomElement['placement']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.placement = value;
    });
  }
  public get placement(): ForgeAiTooltipComponentCustomElement['placement'] {
    return this.nativeElement.placement;
  }

  /** How the tooltip should be triggered. */
  @Input()
  public set trigger(value: ForgeAiTooltipComponentCustomElement['trigger']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.trigger = value;
    });
  }
  public get trigger(): ForgeAiTooltipComponentCustomElement['trigger'] {
    return this.nativeElement.trigger;
  }

  /** Whether the tooltip is open. */
  @Input({ transform: booleanAttribute })
  public set open(value: ForgeAiTooltipComponentCustomElement['open']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.open = value;
    });
  }
  public get open(): ForgeAiTooltipComponentCustomElement['open'] {
    return this.nativeElement.open;
  }

  /** Delay in milliseconds before showing the tooltip. */
  @Input({ transform: numberAttribute })
  public set delay(value: ForgeAiTooltipComponentCustomElement['delay']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.delay = value;
    });
  }
  public get delay(): ForgeAiTooltipComponentCustomElement['delay'] {
    return this.nativeElement.delay;
  }

  /** Delay in milliseconds before hiding the tooltip. */
  @Input({ transform: numberAttribute })
  public set hideDelay(value: ForgeAiTooltipComponentCustomElement['hideDelay']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.hideDelay = value;
    });
  }
  public get hideDelay(): ForgeAiTooltipComponentCustomElement['hideDelay'] {
    return this.nativeElement.hideDelay;
  }

  /** Show the tooltip programmatically. */
  public show(
    ...args: Parameters<ForgeAiTooltipComponentCustomElement['show']>
  ): ReturnType<ForgeAiTooltipComponentCustomElement['show']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.show(...args));
  }

  /** Hide the tooltip programmatically. */
  public hide(
    ...args: Parameters<ForgeAiTooltipComponentCustomElement['hide']>
  ): ReturnType<ForgeAiTooltipComponentCustomElement['hide']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.hide(...args));
  }

  /** Toggle the tooltip programmatically. */
  public toggle(
    ...args: Parameters<ForgeAiTooltipComponentCustomElement['toggle']>
  ): ReturnType<ForgeAiTooltipComponentCustomElement['toggle']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.toggle(...args));
  }

  constructor() {
    defineForgeAiTooltipComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

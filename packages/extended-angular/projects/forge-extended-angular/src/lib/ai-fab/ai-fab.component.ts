// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import { AiFabComponent as AiFabComponentCustomElement, defineAiFabComponent } from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-fab',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AiFabComponent {
  protected elementRef = inject<ElementRef<AiFabComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-fab element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Whether the button is disabled */
  @Input({ transform: booleanAttribute })
  public set disabled(value: AiFabComponentCustomElement['disabled']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.disabled = value;
    });
  }
  public get disabled(): AiFabComponentCustomElement['disabled'] {
    return this.nativeElement.disabled;
  }

  /** Whether the button is extended */
  @Input({ transform: booleanAttribute })
  public set extended(value: AiFabComponentCustomElement['extended']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.extended = value;
    });
  }
  public get extended(): AiFabComponentCustomElement['extended'] {
    return this.nativeElement.extended;
  }

  constructor() {
    defineAiFabComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  AiEmbeddedChatComponent as AiEmbeddedChatComponentCustomElement,
  defineAiEmbeddedChatComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-embedded-chat',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AiEmbeddedChatComponent {
  protected elementRef = inject<ElementRef<AiEmbeddedChatComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-embedded-chat element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Controls whether the modal view is open when expanded. */
  @Input({ transform: booleanAttribute })
  public set expanded(value: AiEmbeddedChatComponentCustomElement['expanded']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.expanded = value;
    });
  }
  public get expanded(): AiEmbeddedChatComponentCustomElement['expanded'] {
    return this.nativeElement.expanded;
  }

  /** Controls the gradient variant applied to the container. */
  @Input()
  public set gradientVariant(value: AiEmbeddedChatComponentCustomElement['gradientVariant']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.gradientVariant = value;
    });
  }
  public get gradientVariant(): AiEmbeddedChatComponentCustomElement['gradientVariant'] {
    return this.nativeElement.gradientVariant;
  }

  /** Expands the chat to modal view. */
  public expand(
    ...args: Parameters<AiEmbeddedChatComponentCustomElement['expand']>
  ): ReturnType<AiEmbeddedChatComponentCustomElement['expand']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.expand(...args));
  }

  /** Collapses the chat from modal view back to embedded view. */
  public collapse(
    ...args: Parameters<AiEmbeddedChatComponentCustomElement['collapse']>
  ): ReturnType<AiEmbeddedChatComponentCustomElement['collapse']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.collapse(...args));
  }

  constructor() {
    defineAiEmbeddedChatComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

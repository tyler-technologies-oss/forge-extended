// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  AiPromptComponent as AiPromptComponentCustomElement,
  defineAiPromptComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-prompt',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AiPromptComponent {
  protected elementRef = inject<ElementRef<AiPromptComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-prompt element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Placeholder text for the input field */
  @Input()
  public set placeholder(value: AiPromptComponentCustomElement['placeholder']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.placeholder = value;
    });
  }
  public get placeholder(): AiPromptComponentCustomElement['placeholder'] {
    return this.nativeElement.placeholder;
  }

  /** Current value of the input field */
  @Input()
  public set value(value: AiPromptComponentCustomElement['value']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.value = value;
    });
  }
  public get value(): AiPromptComponentCustomElement['value'] {
    return this.nativeElement.value;
  }

  /** Layout variant for the prompt component */
  @Input()
  public set variant(value: AiPromptComponentCustomElement['variant']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.variant = value;
    });
  }
  public get variant(): AiPromptComponentCustomElement['variant'] {
    return this.nativeElement.variant;
  }

  constructor() {
    defineAiPromptComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  AiChainOfThoughtComponent as AiChainOfThoughtComponentCustomElement,
  defineAiChainOfThoughtComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-chain-of-thought',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AiChainOfThoughtComponent {
  protected elementRef = inject<ElementRef<AiChainOfThoughtComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-chain-of-thought element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Whether the chain of thought is expanded */
  @Input({ transform: booleanAttribute })
  public set expanded(value: AiChainOfThoughtComponentCustomElement['expanded']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.expanded = value;
    });
  }
  public get expanded(): AiChainOfThoughtComponentCustomElement['expanded'] {
    return this.nativeElement.expanded;
  }

  /** Title for the chain of thought section */
  @Input()
  public set title(value: AiChainOfThoughtComponentCustomElement['title']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.title = value;
    });
  }
  public get title(): AiChainOfThoughtComponentCustomElement['title'] {
    return this.nativeElement.title;
  }

  constructor() {
    defineAiChainOfThoughtComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  numberAttribute,
  Input,
  inject
} from '@angular/core';
import {
  ForgeAiDropdownMenuItemComponent as ForgeAiDropdownMenuItemComponentCustomElement,
  defineForgeAiDropdownMenuItemComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-dropdown-menu-item',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class ForgeAiDropdownMenuItemComponent {
  protected elementRef = inject<ElementRef<ForgeAiDropdownMenuItemComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-dropdown-menu-item element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** The value associated with this menu item. */
  @Input()
  public set value(value: ForgeAiDropdownMenuItemComponentCustomElement['value']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.value = value;
    });
  }
  public get value(): ForgeAiDropdownMenuItemComponentCustomElement['value'] {
    return this.nativeElement.value;
  }

  /** Whether this menu item is selected. */
  @Input({ transform: booleanAttribute })
  public set selected(value: ForgeAiDropdownMenuItemComponentCustomElement['selected']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.selected = value;
    });
  }
  public get selected(): ForgeAiDropdownMenuItemComponentCustomElement['selected'] {
    return this.nativeElement.selected;
  }

  /** Whether this menu item is disabled. */
  @Input({ transform: booleanAttribute })
  public set disabled(value: ForgeAiDropdownMenuItemComponentCustomElement['disabled']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.disabled = value;
    });
  }
  public get disabled(): ForgeAiDropdownMenuItemComponentCustomElement['disabled'] {
    return this.nativeElement.disabled;
  }

  /**
   * The selection mode for this menu item.
   * This is typically set by the parent dropdown menu component.
   */
  @Input()
  public set selectionMode(value: ForgeAiDropdownMenuItemComponentCustomElement['selectionMode']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.selectionMode = value;
    });
  }
  public get selectionMode(): ForgeAiDropdownMenuItemComponentCustomElement['selectionMode'] {
    return this.nativeElement.selectionMode;
  }

  /**
   * The trigger behavior for submenu opening.
   * - 'hover': Opens on mouse hover (default)
   * - 'click': Opens on click
   * - 'both': Opens on both hover and click
   */
  @Input()
  public set submenuTrigger(value: ForgeAiDropdownMenuItemComponentCustomElement['submenuTrigger']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.submenuTrigger = value;
    });
  }
  public get submenuTrigger(): ForgeAiDropdownMenuItemComponentCustomElement['submenuTrigger'] {
    return this.nativeElement.submenuTrigger;
  }

  /** The delay in milliseconds before opening a submenu on hover. */
  @Input({ transform: numberAttribute })
  public set submenuOpenDelay(value: ForgeAiDropdownMenuItemComponentCustomElement['submenuOpenDelay']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.submenuOpenDelay = value;
    });
  }
  public get submenuOpenDelay(): ForgeAiDropdownMenuItemComponentCustomElement['submenuOpenDelay'] {
    return this.nativeElement.submenuOpenDelay;
  }

  /** The delay in milliseconds before closing a submenu when mouse leaves. */
  @Input({ transform: numberAttribute })
  public set submenuCloseDelay(value: ForgeAiDropdownMenuItemComponentCustomElement['submenuCloseDelay']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.submenuCloseDelay = value;
    });
  }
  public get submenuCloseDelay(): ForgeAiDropdownMenuItemComponentCustomElement['submenuCloseDelay'] {
    return this.nativeElement.submenuCloseDelay;
  }

  /** Gets the text content from the default slot (label text only). */
  public get labelText(): ForgeAiDropdownMenuItemComponentCustomElement['labelText'] {
    return this.nativeElement.labelText;
  }

  constructor() {
    defineForgeAiDropdownMenuItemComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

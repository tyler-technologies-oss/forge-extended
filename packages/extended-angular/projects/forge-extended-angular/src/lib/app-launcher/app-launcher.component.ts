// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  numberAttribute,
  Input,
  inject
} from '@angular/core';
import {
  AppLauncherComponent as AppLauncherComponentCustomElement,
  defineAppLauncherComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-app-launcher',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AppLauncherComponent {
  protected elementRef = inject<ElementRef<AppLauncherComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-app-launcher element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Indicates whether the dialog or popover is open. */
  @Input({ transform: booleanAttribute })
  public set open(value: AppLauncherComponentCustomElement['open']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.open = value;
    });
  }
  public get open(): AppLauncherComponentCustomElement['open'] {
    return this.nativeElement.open;
  }

  /** An array of related apps for the related apps view. */
  @Input()
  public set relatedApps(value: AppLauncherComponentCustomElement['relatedApps']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.relatedApps = value;
    });
  }
  public get relatedApps(): AppLauncherComponentCustomElement['relatedApps'] {
    return this.nativeElement.relatedApps;
  }

  /** An array of all available apps for the all apps view. */
  @Input()
  public set allApps(value: AppLauncherComponentCustomElement['allApps']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.allApps = value;
    });
  }
  public get allApps(): AppLauncherComponentCustomElement['allApps'] {
    return this.nativeElement.allApps;
  }

  /** The breakpoint in pixels for responsive behavior. Below this value, the component will display as a dialog instead of a popover. */
  @Input({ transform: numberAttribute })
  public set breakpoint(value: AppLauncherComponentCustomElement['breakpoint']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.breakpoint = value;
    });
  }
  public get breakpoint(): AppLauncherComponentCustomElement['breakpoint'] {
    return this.nativeElement.breakpoint;
  }

  /** ARIA label for the app launcher trigger button */
  @Input()
  public set launcherAriaLabel(value: AppLauncherComponentCustomElement['launcherAriaLabel']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.launcherAriaLabel = value;
    });
  }
  public get launcherAriaLabel(): AppLauncherComponentCustomElement['launcherAriaLabel'] {
    return this.nativeElement.launcherAriaLabel;
  }

  /** ARIA label for the back button */
  @Input()
  public set backAriaLabel(value: AppLauncherComponentCustomElement['backAriaLabel']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.backAriaLabel = value;
    });
  }
  public get backAriaLabel(): AppLauncherComponentCustomElement['backAriaLabel'] {
    return this.nativeElement.backAriaLabel;
  }

  /** ARIA label for the close button */
  @Input()
  public set closeAriaLabel(value: AppLauncherComponentCustomElement['closeAriaLabel']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.closeAriaLabel = value;
    });
  }
  public get closeAriaLabel(): AppLauncherComponentCustomElement['closeAriaLabel'] {
    return this.nativeElement.closeAriaLabel;
  }

  /** Indicates whether the app launcher is in a loading state. */
  @Input({ transform: booleanAttribute })
  public set loading(value: AppLauncherComponentCustomElement['loading']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.loading = value;
    });
  }
  public get loading(): AppLauncherComponentCustomElement['loading'] {
    return this.nativeElement.loading;
  }

  /** Number of skeleton items to show in the loading state. */
  @Input({ transform: numberAttribute })
  public set numberOfSkeletons(value: AppLauncherComponentCustomElement['numberOfSkeletons']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.numberOfSkeletons = value;
    });
  }
  public get numberOfSkeletons(): AppLauncherComponentCustomElement['numberOfSkeletons'] {
    return this.nativeElement.numberOfSkeletons;
  }

  constructor() {
    defineAppLauncherComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  AppLauncherComponent as AppLauncherComponentCustomElement,
  defineAppLauncherComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-app-launcher',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AppLauncherComponent {
  protected elementRef = inject<ElementRef<AppLauncherComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-app-launcher element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Indicates whether the dialog or popover is open. */
  @Input({ transform: booleanAttribute })
  public set open(value: AppLauncherComponentCustomElement['open']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.open = value;
    });
  }
  public get open(): AppLauncherComponentCustomElement['open'] {
    return this.nativeElement.open;
  }

  /** The current view of the app launcher, either 'related' or 'all' */
  @Input()
  public set appView(value: AppLauncherComponentCustomElement['appView']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.appView = value;
    });
  }
  public get appView(): AppLauncherComponentCustomElement['appView'] {
    return this.nativeElement.appView;
  }

  /** An array of related apps for the related apps view */
  @Input()
  public set relatedApps(value: AppLauncherComponentCustomElement['relatedApps']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.relatedApps = value;
    });
  }
  public get relatedApps(): AppLauncherComponentCustomElement['relatedApps'] {
    return this.nativeElement.relatedApps;
  }

  /** An array of custom links for the custom-links slot */
  @Input()
  public set customLinks(value: AppLauncherComponentCustomElement['customLinks']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.customLinks = value;
    });
  }
  public get customLinks(): AppLauncherComponentCustomElement['customLinks'] {
    return this.nativeElement.customLinks;
  }

  @Input()
  public set allApps(value: AppLauncherComponentCustomElement['allApps']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.allApps = value;
    });
  }
  public get allApps(): AppLauncherComponentCustomElement['allApps'] {
    return this.nativeElement.allApps;
  }

  @Input({ transform: booleanAttribute })
  public set smallScreen(value: AppLauncherComponentCustomElement['smallScreen']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.smallScreen = value;
    });
  }
  public get smallScreen(): AppLauncherComponentCustomElement['smallScreen'] {
    return this.nativeElement.smallScreen;
  }

  @Input({ transform: booleanAttribute })
  public set fullscreen(value: AppLauncherComponentCustomElement['fullscreen']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.fullscreen = value;
    });
  }
  public get fullscreen(): AppLauncherComponentCustomElement['fullscreen'] {
    return this.nativeElement.fullscreen;
  }

  @Input()
  public set filteredApps(value: AppLauncherComponentCustomElement['filteredApps']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.filteredApps = value;
    });
  }
  public get filteredApps(): AppLauncherComponentCustomElement['filteredApps'] {
    return this.nativeElement.filteredApps;
  }

  constructor() {
    defineAppLauncherComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  UserProfileComponent as UserProfileComponentCustomElement,
  defineUserProfileComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-user-profile',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class UserProfileComponent {
  protected elementRef = inject<ElementRef<UserProfileComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-user-profile element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** The full name of the user */
  @Input()
  public set fullName(value: UserProfileComponentCustomElement['fullName']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.fullName = value;
    });
  }
  public get fullName(): UserProfileComponentCustomElement['fullName'] {
    return this.nativeElement.fullName;
  }

  /** The email address of the user */
  @Input()
  public set email(value: UserProfileComponentCustomElement['email']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.email = value;
    });
  }
  public get email(): UserProfileComponentCustomElement['email'] {
    return this.nativeElement.email;
  }

  /** The image URL for the user avatar */
  @Input()
  public set imageUrl(value: UserProfileComponentCustomElement['imageUrl']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.imageUrl = value;
    });
  }
  public get imageUrl(): UserProfileComponentCustomElement['imageUrl'] {
    return this.nativeElement.imageUrl;
  }

  /** ARIA label for the user profile avatar button */
  @Input()
  public set buttonLabel(value: UserProfileComponentCustomElement['buttonLabel']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.buttonLabel = value;
    });
  }
  public get buttonLabel(): UserProfileComponentCustomElement['buttonLabel'] {
    return this.nativeElement.buttonLabel;
  }

  /** Indicates whether the theme toggle is visible */
  @Input({ transform: booleanAttribute })
  public set themeToggle(value: UserProfileComponentCustomElement['themeToggle']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.themeToggle = value;
    });
  }
  public get themeToggle(): UserProfileComponentCustomElement['themeToggle'] {
    return this.nativeElement.themeToggle;
  }

  /** Controls whether the user profile popover is open */
  @Input({ transform: booleanAttribute })
  public set open(value: UserProfileComponentCustomElement['open']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.open = value;
    });
  }
  public get open(): UserProfileComponentCustomElement['open'] {
    return this.nativeElement.open;
  }

  /** Sets the theme for the theme toggle. */
  public setTheme(
    ...args: Parameters<UserProfileComponentCustomElement['setTheme']>
  ): ReturnType<UserProfileComponentCustomElement['setTheme']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.setTheme(...args));
  }

  constructor() {
    defineUserProfileComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

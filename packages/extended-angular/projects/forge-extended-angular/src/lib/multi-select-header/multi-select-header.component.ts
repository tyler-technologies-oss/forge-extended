// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  MultiSelectHeaderComponent as MultiSelectHeaderComponentCustomElement,
  defineMultiSelectHeaderComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-multi-select-header',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class MultiSelectHeaderComponent {
  protected elementRef = inject<ElementRef<MultiSelectHeaderComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-multi-select-header element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** The text to display in the header (typically showing selection count) */
  @Input()
  public set text(value: MultiSelectHeaderComponentCustomElement['text']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.text = value;
    });
  }
  public get text(): MultiSelectHeaderComponentCustomElement['text'] {
    return this.nativeElement.text;
  }

  /** Hides the bottom border */
  @Input({ transform: booleanAttribute })
  public set noBorder(value: MultiSelectHeaderComponentCustomElement['noBorder']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.noBorder = value;
    });
  }
  public get noBorder(): MultiSelectHeaderComponentCustomElement['noBorder'] {
    return this.nativeElement.noBorder;
  }

  constructor() {
    defineMultiSelectHeaderComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

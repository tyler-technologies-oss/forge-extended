// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  AiSuggestionsComponent as AiSuggestionsComponentCustomElement,
  defineAiSuggestionsComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-suggestions',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AiSuggestionsComponent {
  protected elementRef = inject<ElementRef<AiSuggestionsComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-suggestions element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Array of suggestion objects to display */
  @Input()
  public set suggestions(value: AiSuggestionsComponentCustomElement['suggestions']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.suggestions = value;
    });
  }
  public get suggestions(): AiSuggestionsComponentCustomElement['suggestions'] {
    return this.nativeElement.suggestions;
  }

  /** Display variant for suggestions layout */
  @Input()
  public set variant(value: AiSuggestionsComponentCustomElement['variant']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.variant = value;
    });
  }
  public get variant(): AiSuggestionsComponentCustomElement['variant'] {
    return this.nativeElement.variant;
  }

  constructor() {
    defineAiSuggestionsComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

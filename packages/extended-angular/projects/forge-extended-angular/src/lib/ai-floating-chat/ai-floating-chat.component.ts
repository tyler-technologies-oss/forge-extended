// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  AiFloatingChatComponent as AiFloatingChatComponentCustomElement,
  defineAiFloatingChatComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-floating-chat',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AiFloatingChatComponent {
  protected elementRef = inject<ElementRef<AiFloatingChatComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-floating-chat element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Indicates whether the chat is open. */
  @Input({ transform: booleanAttribute })
  public set open(value: AiFloatingChatComponentCustomElement['open']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.open = value;
    });
  }
  public get open(): AiFloatingChatComponentCustomElement['open'] {
    return this.nativeElement.open;
  }

  /**
   * Controls the chat's positioning and size behavior.
   * When true, the chat will have an expanded width and be centered on the screen.
   * When false, the chat will be positioned at the bottom-right corner with a fixed width.
   */
  @Input({ transform: booleanAttribute })
  public set expanded(value: AiFloatingChatComponentCustomElement['expanded']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.expanded = value;
    });
  }
  public get expanded(): AiFloatingChatComponentCustomElement['expanded'] {
    return this.nativeElement.expanded;
  }

  /** Opens the chat. */
  public show(
    ...args: Parameters<AiFloatingChatComponentCustomElement['show']>
  ): ReturnType<AiFloatingChatComponentCustomElement['show']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.show(...args));
  }

  /** Closes the chat. */
  public close(
    ...args: Parameters<AiFloatingChatComponentCustomElement['close']>
  ): ReturnType<AiFloatingChatComponentCustomElement['close']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.close(...args));
  }

  /** Toggles the chat open state. */
  public toggle(
    ...args: Parameters<AiFloatingChatComponentCustomElement['toggle']>
  ): ReturnType<AiFloatingChatComponentCustomElement['toggle']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.toggle(...args));
  }

  /** Expands the chat to full width. */
  public expand(
    ...args: Parameters<AiFloatingChatComponentCustomElement['expand']>
  ): ReturnType<AiFloatingChatComponentCustomElement['expand']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.expand(...args));
  }

  /** Collapses the chat to normal width. */
  public collapse(
    ...args: Parameters<AiFloatingChatComponentCustomElement['collapse']>
  ): ReturnType<AiFloatingChatComponentCustomElement['collapse']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.collapse(...args));
  }

  constructor() {
    defineAiFloatingChatComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  AiChatHeaderComponent as AiChatHeaderComponentCustomElement,
  defineAiChatHeaderComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-chat-header',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AiChatHeaderComponent {
  protected elementRef = inject<ElementRef<AiChatHeaderComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-chat-header element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Controls whether the expand button is visible */
  @Input({ transform: booleanAttribute })
  public set showExpandButton(value: AiChatHeaderComponentCustomElement['showExpandButton']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.showExpandButton = value;
    });
  }
  public get showExpandButton(): AiChatHeaderComponentCustomElement['showExpandButton'] {
    return this.nativeElement.showExpandButton;
  }

  /** Controls whether the minimize button is visible */
  @Input({ transform: booleanAttribute })
  public set showMinimizeButton(value: AiChatHeaderComponentCustomElement['showMinimizeButton']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.showMinimizeButton = value;
    });
  }
  public get showMinimizeButton(): AiChatHeaderComponentCustomElement['showMinimizeButton'] {
    return this.nativeElement.showMinimizeButton;
  }

  /** Indicates the current expanded state for displaying the appropriate expand/collapse icon */
  @Input({ transform: booleanAttribute })
  public set expanded(value: AiChatHeaderComponentCustomElement['expanded']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.expanded = value;
    });
  }
  public get expanded(): AiChatHeaderComponentCustomElement['expanded'] {
    return this.nativeElement.expanded;
  }

  /** Controls which minimize icon to display */
  @Input()
  public set minimizeIcon(value: AiChatHeaderComponentCustomElement['minimizeIcon']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.minimizeIcon = value;
    });
  }
  public get minimizeIcon(): AiChatHeaderComponentCustomElement['minimizeIcon'] {
    return this.nativeElement.minimizeIcon;
  }

  constructor() {
    defineAiChatHeaderComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

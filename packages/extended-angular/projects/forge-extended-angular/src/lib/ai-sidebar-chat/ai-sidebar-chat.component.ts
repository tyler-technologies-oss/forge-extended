// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  AiSidebarChatComponent as AiSidebarChatComponentCustomElement,
  defineAiSidebarChatComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-sidebar-chat',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AiSidebarChatComponent {
  protected elementRef = inject<ElementRef<AiSidebarChatComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-sidebar-chat element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Indicates whether the sidebar chat is open. */
  @Input({ transform: booleanAttribute })
  public set open(value: AiSidebarChatComponentCustomElement['open']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.open = value;
    });
  }
  public get open(): AiSidebarChatComponentCustomElement['open'] {
    return this.nativeElement.open;
  }

  /**
   * Controls whether the chat is displayed in an expanded modal state.
   * When true, the chat content will be shown in a fullscreen modal.
   * When false, the chat will be displayed in the sidebar.
   */
  @Input({ transform: booleanAttribute })
  public set expanded(value: AiSidebarChatComponentCustomElement['expanded']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.expanded = value;
    });
  }
  public get expanded(): AiSidebarChatComponentCustomElement['expanded'] {
    return this.nativeElement.expanded;
  }

  /** Opens the sidebar chat. */
  public show(
    ...args: Parameters<AiSidebarChatComponentCustomElement['show']>
  ): ReturnType<AiSidebarChatComponentCustomElement['show']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.show(...args));
  }

  /** Closes the sidebar chat. */
  public close(
    ...args: Parameters<AiSidebarChatComponentCustomElement['close']>
  ): ReturnType<AiSidebarChatComponentCustomElement['close']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.close(...args));
  }

  /** Toggles the sidebar chat open state. */
  public toggle(
    ...args: Parameters<AiSidebarChatComponentCustomElement['toggle']>
  ): ReturnType<AiSidebarChatComponentCustomElement['toggle']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.toggle(...args));
  }

  /** Expands the chat to fullscreen modal. */
  public expand(
    ...args: Parameters<AiSidebarChatComponentCustomElement['expand']>
  ): ReturnType<AiSidebarChatComponentCustomElement['expand']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.expand(...args));
  }

  /** Collapses the chat from fullscreen modal back to sidebar. */
  public collapse(
    ...args: Parameters<AiSidebarChatComponentCustomElement['collapse']>
  ): ReturnType<AiSidebarChatComponentCustomElement['collapse']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.collapse(...args));
  }

  constructor() {
    defineAiSidebarChatComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

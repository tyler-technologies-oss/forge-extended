// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  ForgeAiDropdownMenuComponent as ForgeAiDropdownMenuComponentCustomElement,
  defineForgeAiDropdownMenuComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-dropdown-menu',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class ForgeAiDropdownMenuComponent {
  protected elementRef = inject<ElementRef<ForgeAiDropdownMenuComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-dropdown-menu element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** The variant of the dropdown menu trigger button. */
  @Input()
  public set variant(value: ForgeAiDropdownMenuComponentCustomElement['variant']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.variant = value;
    });
  }
  public get variant(): ForgeAiDropdownMenuComponentCustomElement['variant'] {
    return this.nativeElement.variant;
  }

  /** Whether the dropdown is open. */
  @Input({ transform: booleanAttribute })
  public set open(value: ForgeAiDropdownMenuComponentCustomElement['open']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.open = value;
    });
  }
  public get open(): ForgeAiDropdownMenuComponentCustomElement['open'] {
    return this.nativeElement.open;
  }

  /** Whether the dropdown menu is disabled. */
  @Input({ transform: booleanAttribute })
  public set disabled(value: ForgeAiDropdownMenuComponentCustomElement['disabled']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.disabled = value;
    });
  }
  public get disabled(): ForgeAiDropdownMenuComponentCustomElement['disabled'] {
    return this.nativeElement.disabled;
  }

  /**
   * The selection mode for the dropdown menu.
   * - 'none': No selection state, items act as actions only
   * - 'single': Single selection with radio button behavior
   * - 'multi': Multiple selection with checkbox behavior
   */
  @Input()
  public set selectionMode(value: ForgeAiDropdownMenuComponentCustomElement['selectionMode']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.selectionMode = value;
    });
  }
  public get selectionMode(): ForgeAiDropdownMenuComponentCustomElement['selectionMode'] {
    return this.nativeElement.selectionMode;
  }

  /**
   * The currently selected value(s).
   * For single selection: string or null
   * For multi selection: string array
   * For none mode: null
   */
  @Input()
  public set value(value: ForgeAiDropdownMenuComponentCustomElement['value']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.value = value;
    });
  }
  public get value(): ForgeAiDropdownMenuComponentCustomElement['value'] {
    return this.nativeElement.value;
  }

  public focusFirstItem(
    ...args: Parameters<ForgeAiDropdownMenuComponentCustomElement['focusFirstItem']>
  ): ReturnType<ForgeAiDropdownMenuComponentCustomElement['focusFirstItem']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.focusFirstItem(...args));
  }

  constructor() {
    defineForgeAiDropdownMenuComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import { AiModalComponent as AiModalComponentCustomElement, defineAiModalComponent } from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-modal',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AiModalComponent {
  protected elementRef = inject<ElementRef<AiModalComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-modal element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Controls whether the modal is open or closed. */
  @Input({ transform: booleanAttribute })
  public set open(value: AiModalComponentCustomElement['open']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.open = value;
    });
  }
  public get open(): AiModalComponentCustomElement['open'] {
    return this.nativeElement.open;
  }

  /** Controls whether the modal is displayed in fullscreen mode. */
  @Input({ transform: booleanAttribute })
  public set fullscreen(value: AiModalComponentCustomElement['fullscreen']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.fullscreen = value;
    });
  }
  public get fullscreen(): AiModalComponentCustomElement['fullscreen'] {
    return this.nativeElement.fullscreen;
  }

  /** Shows the modal dialog. */
  public show(
    ...args: Parameters<AiModalComponentCustomElement['show']>
  ): ReturnType<AiModalComponentCustomElement['show']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.show(...args));
  }

  /** Closes the modal dialog. */
  public close(
    ...args: Parameters<AiModalComponentCustomElement['close']>
  ): ReturnType<AiModalComponentCustomElement['close']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.close(...args));
  }

  constructor() {
    defineAiModalComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

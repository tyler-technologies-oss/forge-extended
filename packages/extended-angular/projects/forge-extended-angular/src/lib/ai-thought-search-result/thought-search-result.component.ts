// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  ThoughtSearchResultComponent as ThoughtSearchResultComponentCustomElement,
  defineThoughtSearchResultComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-thought-search-result',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class ThoughtSearchResultComponent {
  protected elementRef = inject<ElementRef<ThoughtSearchResultComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-thought-search-result element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** The step number for this thought search result */
  @Input()
  public set step(value: ThoughtSearchResultComponentCustomElement['step']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.step = value;
    });
  }
  public get step(): ThoughtSearchResultComponentCustomElement['step'] {
    return this.nativeElement.step;
  }

  /** Array of sources for the search result */
  @Input()
  public set sources(value: ThoughtSearchResultComponentCustomElement['sources']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.sources = value;
    });
  }
  public get sources(): ThoughtSearchResultComponentCustomElement['sources'] {
    return this.nativeElement.sources;
  }

  constructor() {
    defineThoughtSearchResultComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

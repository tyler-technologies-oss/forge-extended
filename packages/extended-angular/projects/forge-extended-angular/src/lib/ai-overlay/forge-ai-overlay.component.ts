// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  ForgeAiOverlayComponent as ForgeAiOverlayComponentCustomElement,
  defineForgeAiOverlayComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-overlay',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class ForgeAiOverlayComponent {
  protected elementRef = inject<ElementRef<ForgeAiOverlayComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-overlay element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** The anchor element to position the overlay relative to. */
  @Input()
  public set anchor(value: ForgeAiOverlayComponentCustomElement['anchor']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.anchor = value;
    });
  }
  public get anchor(): ForgeAiOverlayComponentCustomElement['anchor'] {
    return this.nativeElement.anchor;
  }

  /** The placement of the overlay relative to the anchor. */
  @Input()
  public set placement(value: ForgeAiOverlayComponentCustomElement['placement']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.placement = value;
    });
  }
  public get placement(): ForgeAiOverlayComponentCustomElement['placement'] {
    return this.nativeElement.placement;
  }

  /** Whether the overlay should flip to the opposite side when there's no space. */
  @Input({ transform: booleanAttribute })
  public set flip(value: ForgeAiOverlayComponentCustomElement['flip']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.flip = value;
    });
  }
  public get flip(): ForgeAiOverlayComponentCustomElement['flip'] {
    return this.nativeElement.flip;
  }

  /** Whether the overlay should shift to stay in view. */
  @Input({ transform: booleanAttribute })
  public set shift(value: ForgeAiOverlayComponentCustomElement['shift']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.shift = value;
    });
  }
  public get shift(): ForgeAiOverlayComponentCustomElement['shift'] {
    return this.nativeElement.shift;
  }

  /** Whether the overlay is open. */
  @Input({ transform: booleanAttribute })
  public set open(value: ForgeAiOverlayComponentCustomElement['open']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.open = value;
    });
  }
  public get open(): ForgeAiOverlayComponentCustomElement['open'] {
    return this.nativeElement.open;
  }

  constructor() {
    defineForgeAiOverlayComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

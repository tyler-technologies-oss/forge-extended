// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import {
  booleanAttribute,
  Component,
  ElementRef,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  NgZone,
  Input,
  inject
} from '@angular/core';
import {
  AiSidebarComponent as AiSidebarComponentCustomElement,
  defineAiSidebarComponent
} from '@tylertech/forge-extended';

/**  */
@Component({
  selector: 'forge-ai-sidebar',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>',
  standalone: false
})
export class AiSidebarComponent {
  protected elementRef = inject<ElementRef<AiSidebarComponentCustomElement>>(ElementRef);
  protected zone = inject(NgZone);

  /** The forge-ai-sidebar element. */
  public readonly nativeElement = this.elementRef.nativeElement;

  /** Indicates whether the sidebar is open. */
  @Input({ transform: booleanAttribute })
  public set open(value: AiSidebarComponentCustomElement['open']) {
    this.zone.runOutsideAngular(() => {
      this.nativeElement.open = value;
    });
  }
  public get open(): AiSidebarComponentCustomElement['open'] {
    return this.nativeElement.open;
  }

  /** Opens the sidebar. */
  public show(
    ...args: Parameters<AiSidebarComponentCustomElement['show']>
  ): ReturnType<AiSidebarComponentCustomElement['show']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.show(...args));
  }

  /** Closes the sidebar. */
  public close(
    ...args: Parameters<AiSidebarComponentCustomElement['close']>
  ): ReturnType<AiSidebarComponentCustomElement['close']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.close(...args));
  }

  /** Toggles the sidebar open state. */
  public toggle(
    ...args: Parameters<AiSidebarComponentCustomElement['toggle']>
  ): ReturnType<AiSidebarComponentCustomElement['toggle']> {
    return this.zone.runOutsideAngular(() => this.nativeElement.toggle(...args));
  }

  constructor() {
    defineAiSidebarComponent();
    const changeDetectorRef = inject(ChangeDetectorRef);
    changeDetectorRef.detach();
  }
}

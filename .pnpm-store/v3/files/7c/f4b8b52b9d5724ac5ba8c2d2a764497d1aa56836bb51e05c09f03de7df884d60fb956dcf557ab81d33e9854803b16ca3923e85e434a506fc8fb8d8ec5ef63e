export interface IEvent<T> {
    type: string;
    data: T | undefined;
}
export interface IEventAware {
    hasListeners(type?: string): boolean;
    addListener(type: string, listener: (evt: IEvent<any>) => void): void;
    removeListener(type: string, listener: (evt: IEvent<any>) => void): void;
}
export declare abstract class EventAware implements IEventAware {
    private _listenerMap;
    protected _emit<T>(type: string, data?: T): void;
    hasListeners(type?: string): boolean;
    addListener(type: string, listener: (evt: IEvent<any>) => void): void;
    removeListener(type: string, listener: (evt: IEvent<any>) => void): void;
}

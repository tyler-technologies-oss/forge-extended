// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineMiniDrawerComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class MiniDrawerComponent {
    /** The drawer will expand open when hovered. */
    set hover(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.hover = value;
        });
    }
    get hover() {
        return this.nativeElement.hover;
    }
    /** Toggles whether the drawer is visible or not. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Controls the layout and animation direction of the drawer for positioning on the left vs. right side of the screen when toggling the `open` attribute. */
    set direction(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.direction = value;
        });
    }
    get direction() {
        return this.nativeElement.direction;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-mini-drawer element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineMiniDrawerComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: MiniDrawerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: MiniDrawerComponent, selector: "forge-mini-drawer", inputs: { hover: ["hover", "hover", booleanAttribute], open: ["open", "open", booleanAttribute], direction: "direction" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: MiniDrawerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-mini-drawer',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { hover: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], direction: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluaS1kcmF3ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL21pbmktZHJhd2VyL21pbmktZHJhd2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBMkQseUJBQXlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFdEgsT0FBTztBQU1QLE1BQU0sT0FBTyxtQkFBbUI7SUFLL0IsZ0RBQWdEO0lBQ2hELElBQ1csS0FBSyxDQUFDLEtBQWdEO1FBQ2hFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLEtBQUs7UUFDZixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxvREFBb0Q7SUFDcEQsSUFDVyxJQUFJLENBQUMsS0FBK0M7UUFDOUQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsSUFBSTtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7SUFDaEMsQ0FBQztJQUVELDZKQUE2SjtJQUM3SixJQUNXLFNBQVMsQ0FBQyxLQUFvRDtRQUN4RSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxTQUFTO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDckMsQ0FBQztJQUVELFlBQ0MsaUJBQW9DLEVBQzFCLFVBQXdELEVBQ3hELElBQVk7UUFEWixlQUFVLEdBQVYsVUFBVSxDQUE4QztRQUN4RCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBdkN2QixxQ0FBcUM7UUFDckIsa0JBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQXdDN0QseUJBQXlCLEVBQUUsQ0FBQztRQUM1QixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QixDQUFDOzhHQTdDVyxtQkFBbUI7a0dBQW5CLG1CQUFtQixxRUFNWCxnQkFBZ0IsMEJBV2hCLGdCQUFnQixxREFuQnpCLDJCQUEyQjs7MkZBRTFCLG1CQUFtQjtrQkFML0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7b0lBUVcsS0FBSztzQkFEZixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQVkzQixJQUFJO3NCQURkLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLFNBQVM7c0JBRG5CLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGNvZGUgd2FzIGdlbmVyYXRlZCBieSB0aGUgYW5ndWxhci1jdXN0b20tZWxlbWVudHMtc2NoZW1hdGljLiAgQW55IGNoYW5nZXMgd2lsbCBiZSBvdmVyd3JpdHRlbiBuZXh0IHRpbWUgaXQgcnVucy5cbmltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBOZ1pvbmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNaW5pRHJhd2VyQ29tcG9uZW50IGFzIE1pbmlEcmF3ZXJDb21wb25lbnRDdXN0b21FbGVtZW50LCBkZWZpbmVNaW5pRHJhd2VyQ29tcG9uZW50IH0gZnJvbSAnQHR5bGVydGVjaC9mb3JnZSc7XG5cbi8qKiAgKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZvcmdlLW1pbmktZHJhd2VyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgTWluaURyYXdlckNvbXBvbmVudCB7XG5cblx0LyoqIFRoZSBmb3JnZS1taW5pLWRyYXdlciBlbGVtZW50LiAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgbmF0aXZlRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG5cdC8qKiBUaGUgZHJhd2VyIHdpbGwgZXhwYW5kIG9wZW4gd2hlbiBob3ZlcmVkLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBob3Zlcih2YWx1ZTogTWluaURyYXdlckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2hvdmVyJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmhvdmVyID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBob3ZlcigpOiBNaW5pRHJhd2VyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaG92ZXInXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5ob3Zlcjtcblx0fVxuXG5cdC8qKiBUb2dnbGVzIHdoZXRoZXIgdGhlIGRyYXdlciBpcyB2aXNpYmxlIG9yIG5vdC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgb3Blbih2YWx1ZTogTWluaURyYXdlckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ29wZW4nXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQub3BlbiA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgb3BlbigpOiBNaW5pRHJhd2VyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnb3BlbiddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50Lm9wZW47XG5cdH1cblxuXHQvKiogQ29udHJvbHMgdGhlIGxheW91dCBhbmQgYW5pbWF0aW9uIGRpcmVjdGlvbiBvZiB0aGUgZHJhd2VyIGZvciBwb3NpdGlvbmluZyBvbiB0aGUgbGVmdCB2cy4gcmlnaHQgc2lkZSBvZiB0aGUgc2NyZWVuIHdoZW4gdG9nZ2xpbmcgdGhlIGBvcGVuYCBhdHRyaWJ1dGUuICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgZGlyZWN0aW9uKHZhbHVlOiBNaW5pRHJhd2VyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZGlyZWN0aW9uJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmRpcmVjdGlvbiA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgZGlyZWN0aW9uKCk6IE1pbmlEcmF3ZXJDb21wb25lbnRDdXN0b21FbGVtZW50WydkaXJlY3Rpb24nXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5kaXJlY3Rpb247XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG5cdFx0cHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8TWluaURyYXdlckNvbXBvbmVudEN1c3RvbUVsZW1lbnQ+LFxuXHRcdHByb3RlY3RlZCB6b25lOiBOZ1pvbmVcblx0KSB7XG5cdFx0ZGVmaW5lTWluaURyYXdlckNvbXBvbmVudCgpO1xuXHRcdGNoYW5nZURldGVjdG9yUmVmLmRldGFjaCgpO1xuXHR9XG59XG4iXX0=
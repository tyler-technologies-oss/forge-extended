import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { SelectComponent as SelectComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class SelectComponent {
    protected elementRef: ElementRef<SelectComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-select element. */
    readonly nativeElement: SelectComponentCustomElement;
    /** Controls the label text. */
    set label(value: SelectComponentCustomElement['label']);
    get label(): SelectComponentCustomElement['label'];
    /** Controls the placeholder text. */
    set placeholder(value: SelectComponentCustomElement['placeholder']);
    get placeholder(): SelectComponentCustomElement['placeholder'];
    set readonly(value: SelectComponentCustomElement['readonly']);
    get readonly(): SelectComponentCustomElement['readonly'];
    /** Whether the label floats above the field. */
    set floatLabel(value: SelectComponentCustomElement['floatLabel']);
    get floatLabel(): SelectComponentCustomElement['floatLabel'];
    /** The density of the field. */
    set density(value: SelectComponentCustomElement['density']);
    get density(): SelectComponentCustomElement['density'];
    /** Whether the field is dense. */
    set dense(value: SelectComponentCustomElement['dense']);
    get dense(): SelectComponentCustomElement['dense'];
    /** Whether the field is disabled. */
    set disabled(value: SelectComponentCustomElement['disabled']);
    get disabled(): SelectComponentCustomElement['disabled'];
    /** Whether the field is required. */
    set required(value: SelectComponentCustomElement['required']);
    get required(): SelectComponentCustomElement['required'];
    /** The position of the label. */
    set labelPosition(value: SelectComponentCustomElement['labelPosition']);
    get labelPosition(): SelectComponentCustomElement['labelPosition'];
    /** Gets/sets the value. */
    set value(value: SelectComponentCustomElement['value']);
    get value(): SelectComponentCustomElement['value'];
    /** Gets/sets the selected index. */
    set selectedIndex(value: SelectComponentCustomElement['selectedIndex']);
    get selectedIndex(): SelectComponentCustomElement['selectedIndex'];
    /** Gets/sets the available options. */
    set options(value: SelectComponentCustomElement['options']);
    get options(): SelectComponentCustomElement['options'];
    /** Gets/sets the multiple select state. */
    set multiple(value: SelectComponentCustomElement['multiple']);
    get multiple(): SelectComponentCustomElement['multiple'];
    /** Gets/sets the open state. */
    set open(value: SelectComponentCustomElement['open']);
    get open(): SelectComponentCustomElement['open'];
    /** Gets/sets the option builder function. */
    set optionBuilder(value: SelectComponentCustomElement['optionBuilder']);
    get optionBuilder(): SelectComponentCustomElement['optionBuilder'];
    /** Gets/sets the selected text builder function. */
    set selectedTextBuilder(value: SelectComponentCustomElement['selectedTextBuilder']);
    get selectedTextBuilder(): SelectComponentCustomElement['selectedTextBuilder'];
    /** Gets/sets the before value change callback. */
    set beforeValueChange(value: SelectComponentCustomElement['beforeValueChange']);
    get beforeValueChange(): SelectComponentCustomElement['beforeValueChange'];
    /** The alignment of the label. */
    set labelAlignment(value: SelectComponentCustomElement['labelAlignment']);
    get labelAlignment(): SelectComponentCustomElement['labelAlignment'];
    /** Whether the field is invalid. */
    set invalid(value: SelectComponentCustomElement['invalid']);
    get invalid(): SelectComponentCustomElement['invalid'];
    /** Whether the field is optional. */
    set optional(value: SelectComponentCustomElement['optional']);
    get optional(): SelectComponentCustomElement['optional'];
    /** The variant of the field. */
    set variant(value: SelectComponentCustomElement['variant']);
    get variant(): SelectComponentCustomElement['variant'];
    /** The theme of the field. */
    set theme(value: SelectComponentCustomElement['theme']);
    get theme(): SelectComponentCustomElement['theme'];
    /** The shape of the field. */
    set shape(value: SelectComponentCustomElement['shape']);
    get shape(): SelectComponentCustomElement['shape'];
    /** Whether the popover icon is displayed. */
    set popoverIcon(value: SelectComponentCustomElement['popoverIcon']);
    get popoverIcon(): SelectComponentCustomElement['popoverIcon'];
    /** The inset of the support text. */
    set supportTextInset(value: SelectComponentCustomElement['supportTextInset']);
    get supportTextInset(): SelectComponentCustomElement['supportTextInset'];
    setFormValue(...args: Parameters<SelectComponentCustomElement['setFormValue']>): ReturnType<SelectComponentCustomElement['setFormValue']>;
    /** Floats the label without an animation. Only applies when the label is inset. */
    floatLabelWithoutAnimation(...args: Parameters<SelectComponentCustomElement['floatLabelWithoutAnimation']>): ReturnType<SelectComponentCustomElement['floatLabelWithoutAnimation']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<SelectComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SelectComponent, "forge-select", never, { "label": { "alias": "label"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "floatLabel": { "alias": "floatLabel"; "required": false; }; "density": { "alias": "density"; "required": false; }; "dense": { "alias": "dense"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; "labelPosition": { "alias": "labelPosition"; "required": false; }; "value": { "alias": "value"; "required": false; }; "selectedIndex": { "alias": "selectedIndex"; "required": false; }; "options": { "alias": "options"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "open": { "alias": "open"; "required": false; }; "optionBuilder": { "alias": "optionBuilder"; "required": false; }; "selectedTextBuilder": { "alias": "selectedTextBuilder"; "required": false; }; "beforeValueChange": { "alias": "beforeValueChange"; "required": false; }; "labelAlignment": { "alias": "labelAlignment"; "required": false; }; "invalid": { "alias": "invalid"; "required": false; }; "optional": { "alias": "optional"; "required": false; }; "variant": { "alias": "variant"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; "shape": { "alias": "shape"; "required": false; }; "popoverIcon": { "alias": "popoverIcon"; "required": false; }; "supportTextInset": { "alias": "supportTextInset"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_readonly: unknown;
    static ngAcceptInputType_floatLabel: unknown;
    static ngAcceptInputType_dense: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_multiple: unknown;
    static ngAcceptInputType_open: unknown;
    static ngAcceptInputType_invalid: unknown;
    static ngAcceptInputType_optional: unknown;
    static ngAcceptInputType_popoverIcon: unknown;
}

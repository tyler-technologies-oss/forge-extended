import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { CalendarComponent as CalendarComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class CalendarComponent {
    protected elementRef: ElementRef<CalendarComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-calendar element. */
    readonly nativeElement: CalendarComponentCustomElement;
    /** The currently active date in the calendar. */
    get activeDate(): CalendarComponentCustomElement['activeDate'];
    /** Whether to allow a single date range to be selected. */
    set allowSingleDateRange(value: CalendarComponentCustomElement['allowSingleDateRange']);
    get allowSingleDateRange(): CalendarComponentCustomElement['allowSingleDateRange'];
    /** Whether to show a button to clear the selected date(s). */
    set clearButton(value: CalendarComponentCustomElement['clearButton']);
    get clearButton(): CalendarComponentCustomElement['clearButton'];
    /** Callback function to call when the clear button is clicked. */
    set clearCallback(value: CalendarComponentCustomElement['clearCallback']);
    get clearCallback(): CalendarComponentCustomElement['clearCallback'];
    /** Whether to constrain the selected date(s) to the enabled dates. */
    set constrainToEnabled(value: CalendarComponentCustomElement['constrainToEnabled']);
    get constrainToEnabled(): CalendarComponentCustomElement['constrainToEnabled'];
    /** Function to build the date content. */
    set dateBuilder(value: CalendarComponentCustomElement['dateBuilder']);
    get dateBuilder(): CalendarComponentCustomElement['dateBuilder'];
    /** Callback function to call when a date is selected. */
    set dateSelectCallback(value: CalendarComponentCustomElement['dateSelectCallback']);
    get dateSelectCallback(): CalendarComponentCustomElement['dateSelectCallback'];
    /** Function to build the day content. */
    set dayBuilder(value: CalendarComponentCustomElement['dayBuilder']);
    get dayBuilder(): CalendarComponentCustomElement['dayBuilder'];
    /** Function to determine if a date is disabled. */
    set disabledDateBuilder(value: CalendarComponentCustomElement['disabledDateBuilder']);
    get disabledDateBuilder(): CalendarComponentCustomElement['disabledDateBuilder'];
    /** Dates that are disabled from being selected. */
    set disabledDates(value: CalendarComponentCustomElement['disabledDates']);
    get disabledDates(): CalendarComponentCustomElement['disabledDates'];
    /** Days of the week that are disabled from being selected. */
    set disabledDaysOfWeek(value: CalendarComponentCustomElement['disabledDaysOfWeek']);
    get disabledDaysOfWeek(): CalendarComponentCustomElement['disabledDaysOfWeek'];
    /** Function to build the event content. */
    set eventBuilder(value: CalendarComponentCustomElement['eventBuilder']);
    get eventBuilder(): CalendarComponentCustomElement['eventBuilder'];
    /** Events to display on the calendar. */
    set events(value: CalendarComponentCustomElement['events']);
    get events(): CalendarComponentCustomElement['events'];
    /** The first day of the week. */
    set firstDayOfWeek(value: CalendarComponentCustomElement['firstDayOfWeek']);
    get firstDayOfWeek(): CalendarComponentCustomElement['firstDayOfWeek'];
    /** Whether to fix the height of the calendar. */
    set fixedHeight(value: CalendarComponentCustomElement['fixedHeight']);
    get fixedHeight(): CalendarComponentCustomElement['fixedHeight'];
    /** Whether to list the years in the year view. */
    set listYears(value: CalendarComponentCustomElement['listYears']);
    get listYears(): CalendarComponentCustomElement['listYears'];
    /** The locale to use for formatting dates. */
    set locale(value: CalendarComponentCustomElement['locale']);
    get locale(): CalendarComponentCustomElement['locale'];
    /** The maximum date that can be selected. */
    set max(value: CalendarComponentCustomElement['max']);
    get max(): CalendarComponentCustomElement['max'];
    /** The animation to use for the menu. */
    set menuAnimation(value: CalendarComponentCustomElement['menuAnimation']);
    get menuAnimation(): CalendarComponentCustomElement['menuAnimation'];
    /** The minimum date that can be selected. */
    set min(value: CalendarComponentCustomElement['min']);
    get min(): CalendarComponentCustomElement['min'];
    /** The mode of the calendar. */
    set mode(value: CalendarComponentCustomElement['mode']);
    get mode(): CalendarComponentCustomElement['mode'];
    /** The month to display. */
    set month(value: CalendarComponentCustomElement['month']);
    get month(): CalendarComponentCustomElement['month'];
    /** Whether to prevent the calendar from taking focus. */
    set preventFocus(value: CalendarComponentCustomElement['preventFocus']);
    get preventFocus(): CalendarComponentCustomElement['preventFocus'];
    /** Whether the calendar is readonly. */
    set readonly(value: CalendarComponentCustomElement['readonly']);
    get readonly(): CalendarComponentCustomElement['readonly'];
    /** Whether the selection follows the month. */
    set selectionFollowsMonth(value: CalendarComponentCustomElement['selectionFollowsMonth']);
    get selectionFollowsMonth(): CalendarComponentCustomElement['selectionFollowsMonth'];
    /** Whether to show the header. */
    set showHeader(value: CalendarComponentCustomElement['showHeader']);
    get showHeader(): CalendarComponentCustomElement['showHeader'];
    /** Whether to show days from other months. */
    set showOtherMonths(value: CalendarComponentCustomElement['showOtherMonths']);
    get showOtherMonths(): CalendarComponentCustomElement['showOtherMonths'];
    /** Whether to show the today button. */
    set showToday(value: CalendarComponentCustomElement['showToday']);
    get showToday(): CalendarComponentCustomElement['showToday'];
    /** Whether to show a button to select today. */
    set todayButton(value: CalendarComponentCustomElement['todayButton']);
    get todayButton(): CalendarComponentCustomElement['todayButton'];
    /** Callback function to call when the today button is clicked. */
    set todayCallback(value: CalendarComponentCustomElement['todayCallback']);
    get todayCallback(): CalendarComponentCustomElement['todayCallback'];
    /** Function to build the tooltip content. */
    set tooltipBuilder(value: CalendarComponentCustomElement['tooltipBuilder']);
    get tooltipBuilder(): CalendarComponentCustomElement['tooltipBuilder'];
    /** The selected date(s). */
    set value(value: CalendarComponentCustomElement['value']);
    get value(): CalendarComponentCustomElement['value'];
    /** The view of the calendar. */
    set view(value: CalendarComponentCustomElement['view']);
    get view(): CalendarComponentCustomElement['view'];
    /** The days of the week that are considered weekends. */
    set weekendDays(value: CalendarComponentCustomElement['weekendDays']);
    get weekendDays(): CalendarComponentCustomElement['weekendDays'];
    /** The year to display. */
    set year(value: CalendarComponentCustomElement['year']);
    get year(): CalendarComponentCustomElement['year'];
    /** The range of years to display. */
    set yearRange(value: CalendarComponentCustomElement['yearRange']);
    get yearRange(): CalendarComponentCustomElement['yearRange'];
    /** Clears the selected date(s). */
    clear(...args: Parameters<CalendarComponentCustomElement['clear']>): ReturnType<CalendarComponentCustomElement['clear']>;
    /** Deselects a date. */
    deselectDate(...args: Parameters<CalendarComponentCustomElement['deselectDate']>): ReturnType<CalendarComponentCustomElement['deselectDate']>;
    /** Navigates to a specific date. */
    goToDate(...args: Parameters<CalendarComponentCustomElement['goToDate']>): ReturnType<CalendarComponentCustomElement['goToDate']>;
    /** Handles a keyboard event. */
    handleKey(...args: Parameters<CalendarComponentCustomElement['handleKey']>): ReturnType<CalendarComponentCustomElement['handleKey']>;
    /** Lays out the calendar. */
    layout(...args: Parameters<CalendarComponentCustomElement['layout']>): ReturnType<CalendarComponentCustomElement['layout']>;
    /** Selects a date. */
    selectDate(...args: Parameters<CalendarComponentCustomElement['selectDate']>): ReturnType<CalendarComponentCustomElement['selectDate']>;
    /** Sets the active date. */
    setActiveDate(...args: Parameters<CalendarComponentCustomElement['setActiveDate']>): ReturnType<CalendarComponentCustomElement['setActiveDate']>;
    /** Sets the calendar to today. */
    today(...args: Parameters<CalendarComponentCustomElement['today']>): ReturnType<CalendarComponentCustomElement['today']>;
    /** Toggles a date selection. */
    toggleDate(...args: Parameters<CalendarComponentCustomElement['toggleDate']>): ReturnType<CalendarComponentCustomElement['toggleDate']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<CalendarComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<CalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CalendarComponent, "forge-calendar", never, { "allowSingleDateRange": { "alias": "allowSingleDateRange"; "required": false; }; "clearButton": { "alias": "clearButton"; "required": false; }; "clearCallback": { "alias": "clearCallback"; "required": false; }; "constrainToEnabled": { "alias": "constrainToEnabled"; "required": false; }; "dateBuilder": { "alias": "dateBuilder"; "required": false; }; "dateSelectCallback": { "alias": "dateSelectCallback"; "required": false; }; "dayBuilder": { "alias": "dayBuilder"; "required": false; }; "disabledDateBuilder": { "alias": "disabledDateBuilder"; "required": false; }; "disabledDates": { "alias": "disabledDates"; "required": false; }; "disabledDaysOfWeek": { "alias": "disabledDaysOfWeek"; "required": false; }; "eventBuilder": { "alias": "eventBuilder"; "required": false; }; "events": { "alias": "events"; "required": false; }; "firstDayOfWeek": { "alias": "firstDayOfWeek"; "required": false; }; "fixedHeight": { "alias": "fixedHeight"; "required": false; }; "listYears": { "alias": "listYears"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "max": { "alias": "max"; "required": false; }; "menuAnimation": { "alias": "menuAnimation"; "required": false; }; "min": { "alias": "min"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; "month": { "alias": "month"; "required": false; }; "preventFocus": { "alias": "preventFocus"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "selectionFollowsMonth": { "alias": "selectionFollowsMonth"; "required": false; }; "showHeader": { "alias": "showHeader"; "required": false; }; "showOtherMonths": { "alias": "showOtherMonths"; "required": false; }; "showToday": { "alias": "showToday"; "required": false; }; "todayButton": { "alias": "todayButton"; "required": false; }; "todayCallback": { "alias": "todayCallback"; "required": false; }; "tooltipBuilder": { "alias": "tooltipBuilder"; "required": false; }; "value": { "alias": "value"; "required": false; }; "view": { "alias": "view"; "required": false; }; "weekendDays": { "alias": "weekendDays"; "required": false; }; "year": { "alias": "year"; "required": false; }; "yearRange": { "alias": "yearRange"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_allowSingleDateRange: unknown;
    static ngAcceptInputType_clearButton: unknown;
    static ngAcceptInputType_constrainToEnabled: unknown;
    static ngAcceptInputType_fixedHeight: unknown;
    static ngAcceptInputType_listYears: unknown;
    static ngAcceptInputType_month: unknown;
    static ngAcceptInputType_preventFocus: unknown;
    static ngAcceptInputType_readonly: unknown;
    static ngAcceptInputType_selectionFollowsMonth: unknown;
    static ngAcceptInputType_showHeader: unknown;
    static ngAcceptInputType_showOtherMonths: unknown;
    static ngAcceptInputType_showToday: unknown;
    static ngAcceptInputType_todayButton: unknown;
    static ngAcceptInputType_year: unknown;
}

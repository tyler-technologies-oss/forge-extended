/**
 * Represents a message list of any type. This class can be used to attach a string message to
 * a generic identifier.
 */
export declare class MessageList<T> {
    private _messages;
    private _useAutoEllipsis;
    /**
       * True if ellipsis management occurs automatically. Default is true.
       */
    get useAutoEllipsis(): boolean;
    set useAutoEllipsis(value: boolean);
    /**
       * The message that is made up of all messages in the entries.
       */
    message: string;
    constructor(useAutoEllipsis?: boolean);
    /**
       * Adds a message to the entry map.
       * @param {string} message The message string.
       * @param {T} identifier The message identifier.
       * @returns {MessageList<T>} A reference to `this` for chaining.
       */
    add(message: string, identifier: T): MessageList<T>;
    /**
       * Removes a message using the provided identifier.
       * @param {T} identifier The message identifier.
       * @returns {MessageList<T>} A reference to `this` for chaining.
       */
    remove(identifier: T): MessageList<T>;
    /**
       * Updates an existing message value.
       * @param {string} message The message string.
       * @param {T} identifier The existing message identifier.
       * @returns {MessageList<T>} A reference to `this` for chaining.
       */
    update(message: string, identifier: T): MessageList<T>;
    /**
       * Gets the number of messages in the list.
       * @returns {number}
       */
    get messageCount(): number;
    /**
       * Resets the message list to it's original state and removes all messages.
       */
    reset(): void;
    /**
       * Determines if a message with the provided identifier exists.
       * @param {T} identifier The message identifier.
       */
    hasMessage(identifier: T): boolean;
    private _updateMessage;
    private _getMessageIndex;
}

import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { DateRangePickerComponent as DateRangePickerComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class DateRangePickerComponent {
    protected elementRef: ElementRef<DateRangePickerComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-date-range-picker element. */
    readonly nativeElement: DateRangePickerComponentCustomElement;
    /** Gets/sets the "from" date range value. */
    set from(value: DateRangePickerComponentCustomElement['from']);
    get from(): DateRangePickerComponentCustomElement['from'];
    /** Gets/sets the "to" date range value. */
    set to(value: DateRangePickerComponentCustomElement['to']);
    get to(): DateRangePickerComponentCustomElement['to'];
    /** Gets/sets the date range value. */
    set value(value: DateRangePickerComponentCustomElement['value']);
    get value(): DateRangePickerComponentCustomElement['value'];
    /** Gets/sets the minimum date range value. */
    set min(value: DateRangePickerComponentCustomElement['min']);
    get min(): DateRangePickerComponentCustomElement['min'];
    /** Gets/sets the maximum date range value. */
    set max(value: DateRangePickerComponentCustomElement['max']);
    get max(): DateRangePickerComponentCustomElement['max'];
    /** Gets/sets the disabled date range values. */
    set disabledDates(value: DateRangePickerComponentCustomElement['disabledDates']);
    get disabledDates(): DateRangePickerComponentCustomElement['disabledDates'];
    /** Gets/sets the open state of the date range picker. */
    set open(value: DateRangePickerComponentCustomElement['open']);
    get open(): DateRangePickerComponentCustomElement['open'];
    /** Gets/sets the callback used to parse date strings. */
    set parseCallback(value: DateRangePickerComponentCustomElement['parseCallback']);
    get parseCallback(): DateRangePickerComponentCustomElement['parseCallback'];
    /** Gets/sets the callback used to format date strings. */
    set formatCallback(value: DateRangePickerComponentCustomElement['formatCallback']);
    get formatCallback(): DateRangePickerComponentCustomElement['formatCallback'];
    /** Gets/sets the callback used to prepare the mask for the date input. */
    set prepareMaskCallback(value: DateRangePickerComponentCustomElement['prepareMaskCallback']);
    get prepareMaskCallback(): DateRangePickerComponentCustomElement['prepareMaskCallback'];
    /** Gets/sets the callback used to disable days in the calendar. */
    set disableDayCallback(value: DateRangePickerComponentCustomElement['disableDayCallback']);
    get disableDayCallback(): DateRangePickerComponentCustomElement['disableDayCallback'];
    /** Gets/sets the classes to apply to the date range picker popup. */
    set popupClasses(value: DateRangePickerComponentCustomElement['popupClasses']);
    get popupClasses(): DateRangePickerComponentCustomElement['popupClasses'];
    /** Gets/sets the disabled state of the date range picker. */
    set disabled(value: DateRangePickerComponentCustomElement['disabled']);
    get disabled(): DateRangePickerComponentCustomElement['disabled'];
    /** Gets/sets the masked state of the date range picker. */
    set masked(value: DateRangePickerComponentCustomElement['masked']);
    get masked(): DateRangePickerComponentCustomElement['masked'];
    /** Gets/sets the mask format for the date input. */
    set maskFormat(value: DateRangePickerComponentCustomElement['maskFormat']);
    get maskFormat(): DateRangePickerComponentCustomElement['maskFormat'];
    /** Gets/sets the state of whether to show the mask format in the date input. */
    set showMaskFormat(value: DateRangePickerComponentCustomElement['showMaskFormat']);
    get showMaskFormat(): DateRangePickerComponentCustomElement['showMaskFormat'];
    /** Gets/sets the value mode of the date range picker. */
    set valueMode(value: DateRangePickerComponentCustomElement['valueMode']);
    get valueMode(): DateRangePickerComponentCustomElement['valueMode'];
    /** Gets/sets the state of whether to notify input value changes. */
    set notifyInputValueChanges(value: DateRangePickerComponentCustomElement['notifyInputValueChanges']);
    get notifyInputValueChanges(): DateRangePickerComponentCustomElement['notifyInputValueChanges'];
    /** Gets/sets the state of whether to allow invalid dates. */
    set allowInvalidDate(value: DateRangePickerComponentCustomElement['allowInvalidDate']);
    get allowInvalidDate(): DateRangePickerComponentCustomElement['allowInvalidDate'];
    /** Gets/sets the state of whether to show the "Today" button. */
    set showToday(value: DateRangePickerComponentCustomElement['showToday']);
    get showToday(): DateRangePickerComponentCustomElement['showToday'];
    /** Gets/sets the state of whether to show the "Clear" button. */
    set showClear(value: DateRangePickerComponentCustomElement['showClear']);
    get showClear(): DateRangePickerComponentCustomElement['showClear'];
    /** Gets/sets the disabled days of the week. */
    set disabledDaysOfWeek(value: DateRangePickerComponentCustomElement['disabledDaysOfWeek']);
    get disabledDaysOfWeek(): DateRangePickerComponentCustomElement['disabledDaysOfWeek'];
    /** Gets/sets the year range for the date range picker. */
    set yearRange(value: DateRangePickerComponentCustomElement['yearRange']);
    get yearRange(): DateRangePickerComponentCustomElement['yearRange'];
    /** Gets/sets the locale for the date range picker. */
    set locale(value: DateRangePickerComponentCustomElement['locale']);
    get locale(): DateRangePickerComponentCustomElement['locale'];
    /** Customized strings to display in the calendar dropdown UI. */
    set calendarText(value: DateRangePickerComponentCustomElement['calendarText']);
    get calendarText(): DateRangePickerComponentCustomElement['calendarText'];
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<DateRangePickerComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<DateRangePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DateRangePickerComponent, "forge-date-range-picker", never, { "from": { "alias": "from"; "required": false; }; "to": { "alias": "to"; "required": false; }; "value": { "alias": "value"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "disabledDates": { "alias": "disabledDates"; "required": false; }; "open": { "alias": "open"; "required": false; }; "parseCallback": { "alias": "parseCallback"; "required": false; }; "formatCallback": { "alias": "formatCallback"; "required": false; }; "prepareMaskCallback": { "alias": "prepareMaskCallback"; "required": false; }; "disableDayCallback": { "alias": "disableDayCallback"; "required": false; }; "popupClasses": { "alias": "popupClasses"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "masked": { "alias": "masked"; "required": false; }; "maskFormat": { "alias": "maskFormat"; "required": false; }; "showMaskFormat": { "alias": "showMaskFormat"; "required": false; }; "valueMode": { "alias": "valueMode"; "required": false; }; "notifyInputValueChanges": { "alias": "notifyInputValueChanges"; "required": false; }; "allowInvalidDate": { "alias": "allowInvalidDate"; "required": false; }; "showToday": { "alias": "showToday"; "required": false; }; "showClear": { "alias": "showClear"; "required": false; }; "disabledDaysOfWeek": { "alias": "disabledDaysOfWeek"; "required": false; }; "yearRange": { "alias": "yearRange"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "calendarText": { "alias": "calendarText"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_open: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_masked: unknown;
    static ngAcceptInputType_showMaskFormat: unknown;
    static ngAcceptInputType_notifyInputValueChanges: unknown;
    static ngAcceptInputType_allowInvalidDate: unknown;
    static ngAcceptInputType_showToday: unknown;
    static ngAcceptInputType_showClear: unknown;
}

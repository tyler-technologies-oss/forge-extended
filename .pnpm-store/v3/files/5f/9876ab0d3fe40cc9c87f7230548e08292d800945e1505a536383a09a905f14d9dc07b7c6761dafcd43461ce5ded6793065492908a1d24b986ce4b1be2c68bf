/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { __decorate } from "tslib";
import { coerceBoolean, coreProperty } from '@tylertech/forge-core';
import { BaseComponent } from '../../core/base/base-component';
import { OVERLAY_CONSTANTS } from '../overlay-constants';
import { coerceStringToArray } from '../../core/utils';
export class BaseOverlay extends BaseComponent {
    constructor() {
        super();
    }
    position() {
        this._core.position();
    }
    attributeChangedCallback(name, _oldValue, newValue) {
        switch (name) {
            case OVERLAY_CONSTANTS.observedAttributes.ANCHOR:
                this.anchor = newValue;
                break;
            case OVERLAY_CONSTANTS.observedAttributes.NO_ANCHOR:
                this.noAnchor = coerceBoolean(newValue);
                break;
            case OVERLAY_CONSTANTS.observedAttributes.OPEN:
                this.open = coerceBoolean(newValue);
                break;
            case OVERLAY_CONSTANTS.observedAttributes.INLINE:
                this.inline = coerceBoolean(newValue);
                break;
            case OVERLAY_CONSTANTS.observedAttributes.PLACEMENT:
                this.placement = newValue;
                break;
            case OVERLAY_CONSTANTS.observedAttributes.POSITION_STRATEGY:
                this.positionStrategy = newValue;
                break;
            case OVERLAY_CONSTANTS.observedAttributes.HIDE:
                this.hide = newValue;
                break;
            case OVERLAY_CONSTANTS.observedAttributes.PERSISTENT:
                this.persistent = coerceBoolean(newValue);
                break;
            case OVERLAY_CONSTANTS.observedAttributes.SHIFT:
                this.shift = coerceBoolean(newValue);
                break;
            case OVERLAY_CONSTANTS.observedAttributes.FLIP:
                this.flip = newValue;
                break;
            case OVERLAY_CONSTANTS.observedAttributes.BOUNDARY:
                this.boundary = newValue;
                break;
            case OVERLAY_CONSTANTS.observedAttributes.FALLBACK_PLACEMENTS:
                this.fallbackPlacements = newValue?.trim() ? coerceStringToArray(newValue) : null;
                break;
        }
    }
}
__decorate([
    coreProperty()
], BaseOverlay.prototype, "anchorElement", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "anchor", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "noAnchor", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "open", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "inline", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "placement", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "positionStrategy", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "offset", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "shift", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "hide", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "persistent", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "flip", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "boundary", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "boundaryElement", void 0);
__decorate([
    coreProperty()
], BaseOverlay.prototype, "fallbackPlacements", void 0);

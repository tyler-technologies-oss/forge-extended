// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineCardComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class CardComponent {
    /** Whether the card has elevation or not. */
    set raised(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.raised = value;
        });
    }
    get raised() {
        return this.nativeElement.raised;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-card element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineCardComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: CardComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: CardComponent, selector: "forge-card", inputs: { raised: ["raised", "raised", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: CardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-card',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { raised: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9mb3JnZS1hbmd1bGFyL3NyYy9saWIvY2FyZC9jYXJkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBK0MsbUJBQW1CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFcEcsT0FBTztBQU1QLE1BQU0sT0FBTyxhQUFhO0lBS3pCLDZDQUE2QztJQUM3QyxJQUNXLE1BQU0sQ0FBQyxLQUEyQztRQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxNQUFNO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7SUFDbEMsQ0FBQztJQUVELFlBQ0MsaUJBQW9DLEVBQzFCLFVBQWtELEVBQ2xELElBQVk7UUFEWixlQUFVLEdBQVYsVUFBVSxDQUF3QztRQUNsRCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBakJ2Qiw4QkFBOEI7UUFDZCxrQkFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBa0I3RCxtQkFBbUIsRUFBRSxDQUFDO1FBQ3RCLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7OEdBdkJXLGFBQWE7a0dBQWIsYUFBYSxpRUFNTCxnQkFBZ0IsNkJBUnpCLDJCQUEyQjs7MkZBRTFCLGFBQWE7a0JBTHpCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0QztvSUFRVyxNQUFNO3NCQURoQixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBjb2RlIHdhcyBnZW5lcmF0ZWQgYnkgdGhlIGFuZ3VsYXItY3VzdG9tLWVsZW1lbnRzLXNjaGVtYXRpYy4gIEFueSBjaGFuZ2VzIHdpbGwgYmUgb3ZlcndyaXR0ZW4gbmV4dCB0aW1lIGl0IHJ1bnMuXG5pbXBvcnQgeyBib29sZWFuQXR0cmlidXRlLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FyZENvbXBvbmVudCBhcyBDYXJkQ29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lQ2FyZENvbXBvbmVudCB9IGZyb20gJ0B0eWxlcnRlY2gvZm9yZ2UnO1xuXG4vKiogICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JnZS1jYXJkJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgQ2FyZENvbXBvbmVudCB7XG5cblx0LyoqIFRoZSBmb3JnZS1jYXJkIGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIFdoZXRoZXIgdGhlIGNhcmQgaGFzIGVsZXZhdGlvbiBvciBub3QuICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IHJhaXNlZCh2YWx1ZTogQ2FyZENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3JhaXNlZCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5yYWlzZWQgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHJhaXNlZCgpOiBDYXJkQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncmFpc2VkJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQucmFpc2VkO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPENhcmRDb21wb25lbnRDdXN0b21FbGVtZW50Pixcblx0XHRwcm90ZWN0ZWQgem9uZTogTmdab25lXG5cdCkge1xuXHRcdGRlZmluZUNhcmRDb21wb25lbnQoKTtcblx0XHRjaGFuZ2VEZXRlY3RvclJlZi5kZXRhY2goKTtcblx0fVxufVxuIl19
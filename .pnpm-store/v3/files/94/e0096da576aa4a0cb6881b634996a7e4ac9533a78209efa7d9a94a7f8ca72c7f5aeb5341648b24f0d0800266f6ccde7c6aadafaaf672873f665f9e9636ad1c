import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { ChipFieldComponent as ChipFieldComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class ChipFieldComponent {
    protected elementRef: ElementRef<ChipFieldComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-chip-field element. */
    readonly nativeElement: ChipFieldComponentCustomElement;
    /** Whether or not to add chip when blur event */
    set addOnBlur(value: ChipFieldComponentCustomElement['addOnBlur']);
    get addOnBlur(): ChipFieldComponentCustomElement['addOnBlur'];
    /** The target element for the popover. */
    get popoverTargetElement(): ChipFieldComponentCustomElement['popoverTargetElement'];
    /** The position of the label relative to the field. */
    set labelPosition(value: ChipFieldComponentCustomElement['labelPosition']);
    get labelPosition(): ChipFieldComponentCustomElement['labelPosition'];
    /** The alignment of the label relative to the field. */
    set labelAlignment(value: ChipFieldComponentCustomElement['labelAlignment']);
    get labelAlignment(): ChipFieldComponentCustomElement['labelAlignment'];
    /** Whether the field is in an invalid state. */
    set invalid(value: ChipFieldComponentCustomElement['invalid']);
    get invalid(): ChipFieldComponentCustomElement['invalid'];
    /** Whether the field is required. */
    set required(value: ChipFieldComponentCustomElement['required']);
    get required(): ChipFieldComponentCustomElement['required'];
    /** Whether the field is optional. */
    set optional(value: ChipFieldComponentCustomElement['optional']);
    get optional(): ChipFieldComponentCustomElement['optional'];
    /** Whether the field is disabled. */
    set disabled(value: ChipFieldComponentCustomElement['disabled']);
    get disabled(): ChipFieldComponentCustomElement['disabled'];
    /** Whether the label should float above the field. Only applies when the label is inset. */
    set floatLabel(value: ChipFieldComponentCustomElement['floatLabel']);
    get floatLabel(): ChipFieldComponentCustomElement['floatLabel'];
    /** The variant of the field. */
    set variant(value: ChipFieldComponentCustomElement['variant']);
    get variant(): ChipFieldComponentCustomElement['variant'];
    /** The theme of the field. */
    set theme(value: ChipFieldComponentCustomElement['theme']);
    get theme(): ChipFieldComponentCustomElement['theme'];
    /** The shape of the field. */
    set shape(value: ChipFieldComponentCustomElement['shape']);
    get shape(): ChipFieldComponentCustomElement['shape'];
    /** The density of the field. */
    set density(value: ChipFieldComponentCustomElement['density']);
    get density(): ChipFieldComponentCustomElement['density'];
    /** Whether the field is dense. */
    set dense(value: ChipFieldComponentCustomElement['dense']);
    get dense(): ChipFieldComponentCustomElement['dense'];
    /** Whether the field has a popover icon. */
    set popoverIcon(value: ChipFieldComponentCustomElement['popoverIcon']);
    get popoverIcon(): ChipFieldComponentCustomElement['popoverIcon'];
    /** Whether the field's popover is expanded. */
    set popoverExpanded(value: ChipFieldComponentCustomElement['popoverExpanded']);
    get popoverExpanded(): ChipFieldComponentCustomElement['popoverExpanded'];
    /** The inset of the support text. */
    set supportTextInset(value: ChipFieldComponentCustomElement['supportTextInset']);
    get supportTextInset(): ChipFieldComponentCustomElement['supportTextInset'];
    click(...args: Parameters<ChipFieldComponentCustomElement['click']>): ReturnType<ChipFieldComponentCustomElement['click']>;
    /** Floats the label immediately. Only applies when the label is inset. */
    floatLabelWithoutAnimation(...args: Parameters<ChipFieldComponentCustomElement['floatLabelWithoutAnimation']>): ReturnType<ChipFieldComponentCustomElement['floatLabelWithoutAnimation']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<ChipFieldComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<ChipFieldComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ChipFieldComponent, "forge-chip-field", never, { "addOnBlur": { "alias": "addOnBlur"; "required": false; }; "labelPosition": { "alias": "labelPosition"; "required": false; }; "labelAlignment": { "alias": "labelAlignment"; "required": false; }; "invalid": { "alias": "invalid"; "required": false; }; "required": { "alias": "required"; "required": false; }; "optional": { "alias": "optional"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "floatLabel": { "alias": "floatLabel"; "required": false; }; "variant": { "alias": "variant"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; "shape": { "alias": "shape"; "required": false; }; "density": { "alias": "density"; "required": false; }; "dense": { "alias": "dense"; "required": false; }; "popoverIcon": { "alias": "popoverIcon"; "required": false; }; "popoverExpanded": { "alias": "popoverExpanded"; "required": false; }; "supportTextInset": { "alias": "supportTextInset"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_addOnBlur: unknown;
    static ngAcceptInputType_invalid: unknown;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_optional: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_floatLabel: unknown;
    static ngAcceptInputType_dense: unknown;
    static ngAcceptInputType_popoverIcon: unknown;
    static ngAcceptInputType_popoverExpanded: unknown;
}

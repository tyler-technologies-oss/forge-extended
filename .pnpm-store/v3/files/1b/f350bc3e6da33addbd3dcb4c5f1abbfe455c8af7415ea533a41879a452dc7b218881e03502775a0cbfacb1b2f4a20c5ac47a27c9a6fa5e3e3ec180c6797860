// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineTextFieldComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class TextFieldComponent {
    /** Gets a reference to the element that the popover should target for best alignment. */
    get popoverTargetElement() {
        return this.nativeElement.popoverTargetElement;
    }
    /** Whether the clear button appears when text has been entered. */
    set showClear(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showClear = value;
        });
    }
    get showClear() {
        return this.nativeElement.showClear;
    }
    /** The position of the label relative to the field. */
    set labelPosition(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelPosition = value;
        });
    }
    get labelPosition() {
        return this.nativeElement.labelPosition;
    }
    /** The alignment of the label relative to the field. */
    set labelAlignment(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelAlignment = value;
        });
    }
    get labelAlignment() {
        return this.nativeElement.labelAlignment;
    }
    /** Whether the field is in an invalid state. */
    set invalid(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.invalid = value;
        });
    }
    get invalid() {
        return this.nativeElement.invalid;
    }
    /** Whether the field is required. */
    set required(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.required = value;
        });
    }
    get required() {
        return this.nativeElement.required;
    }
    /** Whether the field is optional. */
    set optional(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optional = value;
        });
    }
    get optional() {
        return this.nativeElement.optional;
    }
    /** Whether the field is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether the label should float above the field. Only applies when the label is inset. */
    set floatLabel(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.floatLabel = value;
        });
    }
    get floatLabel() {
        return this.nativeElement.floatLabel;
    }
    /** The variant of the field. */
    set variant(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.variant = value;
        });
    }
    get variant() {
        return this.nativeElement.variant;
    }
    /** The theme of the field. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** The shape of the field. */
    set shape(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.shape = value;
        });
    }
    get shape() {
        return this.nativeElement.shape;
    }
    /** The density of the field. */
    set density(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.density = value;
        });
    }
    get density() {
        return this.nativeElement.density;
    }
    /** Whether the field is dense. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Whether the field has a popover icon. */
    set popoverIcon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popoverIcon = value;
        });
    }
    get popoverIcon() {
        return this.nativeElement.popoverIcon;
    }
    /** Whether the field's popover is expanded. */
    set popoverExpanded(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popoverExpanded = value;
        });
    }
    get popoverExpanded() {
        return this.nativeElement.popoverExpanded;
    }
    /** The inset of the support text. */
    set supportTextInset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.supportTextInset = value;
        });
    }
    get supportTextInset() {
        return this.nativeElement.supportTextInset;
    }
    /** Floats the label immediately. Only applies when the label is inset. */
    floatLabelWithoutAnimation(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.floatLabelWithoutAnimation(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-text-field element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineTextFieldComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: TextFieldComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: TextFieldComponent, selector: "forge-text-field", inputs: { showClear: ["showClear", "showClear", booleanAttribute], labelPosition: "labelPosition", labelAlignment: "labelAlignment", invalid: ["invalid", "invalid", booleanAttribute], required: ["required", "required", booleanAttribute], optional: ["optional", "optional", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], floatLabel: ["floatLabel", "floatLabel", booleanAttribute], variant: "variant", theme: "theme", shape: "shape", density: "density", dense: ["dense", "dense", booleanAttribute], popoverIcon: ["popoverIcon", "popoverIcon", booleanAttribute], popoverExpanded: ["popoverExpanded", "popoverExpanded", booleanAttribute], supportTextInset: "supportTextInset" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: TextFieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-text-field',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { showClear: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], labelPosition: [{
                type: Input
            }], labelAlignment: [{
                type: Input
            }], invalid: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], optional: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], floatLabel: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], variant: [{
                type: Input
            }], theme: [{
                type: Input
            }], shape: [{
                type: Input
            }], density: [{
                type: Input
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popoverIcon: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popoverExpanded: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], supportTextInset: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
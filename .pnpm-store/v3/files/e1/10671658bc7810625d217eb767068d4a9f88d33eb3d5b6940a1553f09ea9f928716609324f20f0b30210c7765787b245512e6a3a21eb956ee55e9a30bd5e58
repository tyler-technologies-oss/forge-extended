// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineMenuComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class MenuComponent {
    /** Gets/sets the open state. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Gets/sets the array of options to display in the menu. */
    set options(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.options = value;
        });
    }
    get options() {
        return this.nativeElement.options;
    }
    /** Gets/sets the selected option to the index. Does not support cascading menus. */
    set selectedIndex(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectedIndex = value;
        });
    }
    get selectedIndex() {
        return this.nativeElement.selectedIndex;
    }
    /** Gets/sets the value of the option to select. */
    set selectedValue(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectedValue = value;
        });
    }
    get selectedValue() {
        return this.nativeElement.selectedValue;
    }
    /** Gets/sets the menu placement (default is bottom-left). */
    set placement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.placement = value;
        });
    }
    get placement() {
        return this.nativeElement.placement;
    }
    /** Gets/sets the fallback menu placement for overriding the default of any side. */
    set fallbackPlacements(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fallbackPlacements = value;
        });
    }
    get fallbackPlacements() {
        return this.nativeElement.fallbackPlacements;
    }
    /** Gets/sets dense state of the list options used in the menu popup. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Gets/sets the class name to use for option icons. */
    set iconClass(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.iconClass = value;
        });
    }
    get iconClass() {
        return this.nativeElement.iconClass;
    }
    /** Gets/sets whether selection of menu items is persisted. */
    set persistSelection(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.persistSelection = value;
        });
    }
    get persistSelection() {
        return this.nativeElement.persistSelection;
    }
    /** Gets/sets the mode that this menu is using. */
    set mode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.mode = value;
        });
    }
    get mode() {
        return this.nativeElement.mode;
    }
    /** Sets the position adjustment on the internal popup element. */
    set popupOffset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupOffset = value;
        });
    }
    get popupOffset() {
        return this.nativeElement.popupOffset;
    }
    /** Sets the callback that will be executed for each option in the dropdown for producing custom option templates. */
    set optionBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optionBuilder = value;
        });
    }
    get optionBuilder() {
        return this.nativeElement.optionBuilder;
    }
    /** Gets the currently active popup element when the dropdown is open. */
    get popupElement() {
        return this.nativeElement.popupElement;
    }
    /** Gets/sets the list of classes to apply to the popup element. */
    set popupClasses(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupClasses = value;
        });
    }
    get popupClasses() {
        return this.nativeElement.popupClasses;
    }
    /** Gets/sets the callback function for generating header content within the popup. */
    set popupHeaderBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupHeaderBuilder = value;
        });
    }
    get popupHeaderBuilder() {
        return this.nativeElement.popupHeaderBuilder;
    }
    /** Gets/sets the callback function for generating header content within the popup. */
    set popupFooterBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupFooterBuilder = value;
        });
    }
    get popupFooterBuilder() {
        return this.nativeElement.popupFooterBuilder;
    }
    /** Gets/sets whether the popup width is synchronized with the popup target width. */
    set syncPopupWidth(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.syncPopupWidth = value;
        });
    }
    get syncPopupWidth() {
        return this.nativeElement.syncPopupWidth;
    }
    /** Gets/sets the maximum number of options to display in the dropdown. */
    set optionLimit(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optionLimit = value;
        });
    }
    get optionLimit() {
        return this.nativeElement.optionLimit;
    }
    /** Controls the observation of scroll events on the dropdown. */
    set observeScroll(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.observeScroll = value;
        });
    }
    get observeScroll() {
        return this.nativeElement.observeScroll;
    }
    /** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */
    set observeScrollThreshold(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.observeScrollThreshold = value;
        });
    }
    get observeScrollThreshold() {
        return this.nativeElement.observeScrollThreshold;
    }
    /** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */
    set constrainPopupWidth(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.constrainPopupWidth = value;
        });
    }
    get constrainPopupWidth() {
        return this.nativeElement.constrainPopupWidth;
    }
    /**
     * Gets/sets whether the options will wrap their text or not.
     * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.
     */
    set wrapOptionText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.wrapOptionText = value;
        });
    }
    get wrapOptionText() {
        return this.nativeElement.wrapOptionText;
    }
    /** Force propagates the key event from another element to this component. */
    propagateKeyEvent(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.propagateKeyEvent(...args));
    }
    /** Activates the first option in the menu when open. */
    activateFirstOption(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.activateFirstOption(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-menu element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineMenuComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: MenuComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: MenuComponent, selector: "forge-menu", inputs: { open: ["open", "open", booleanAttribute], options: "options", selectedIndex: ["selectedIndex", "selectedIndex", numberAttribute], selectedValue: "selectedValue", placement: "placement", fallbackPlacements: "fallbackPlacements", dense: ["dense", "dense", booleanAttribute], iconClass: "iconClass", persistSelection: ["persistSelection", "persistSelection", booleanAttribute], mode: "mode", popupOffset: "popupOffset", optionBuilder: "optionBuilder", popupClasses: "popupClasses", popupHeaderBuilder: "popupHeaderBuilder", popupFooterBuilder: "popupFooterBuilder", syncPopupWidth: ["syncPopupWidth", "syncPopupWidth", booleanAttribute], optionLimit: ["optionLimit", "optionLimit", numberAttribute], observeScroll: ["observeScroll", "observeScroll", booleanAttribute], observeScrollThreshold: ["observeScrollThreshold", "observeScrollThreshold", numberAttribute], constrainPopupWidth: ["constrainPopupWidth", "constrainPopupWidth", booleanAttribute], wrapOptionText: ["wrapOptionText", "wrapOptionText", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: MenuComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-menu',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], options: [{
                type: Input
            }], selectedIndex: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], selectedValue: [{
                type: Input
            }], placement: [{
                type: Input
            }], fallbackPlacements: [{
                type: Input
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], iconClass: [{
                type: Input
            }], persistSelection: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], mode: [{
                type: Input
            }], popupOffset: [{
                type: Input
            }], optionBuilder: [{
                type: Input
            }], popupClasses: [{
                type: Input
            }], popupHeaderBuilder: [{
                type: Input
            }], popupFooterBuilder: [{
                type: Input
            }], syncPopupWidth: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], optionLimit: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], observeScroll: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], observeScrollThreshold: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], constrainPopupWidth: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], wrapOptionText: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
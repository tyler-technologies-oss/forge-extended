// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineChipComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ChipComponent {
    /** The type of chip. */
    set type(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.type = value;
        });
    }
    get type() {
        return this.nativeElement.type;
    }
    /** The value of the chip. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Whether the chip is selected. */
    set selected(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selected = value;
        });
    }
    get selected() {
        return this.nativeElement.selected;
    }
    /** Whether the chip is invalid. */
    set invalid(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.invalid = value;
        });
    }
    get invalid() {
        return this.nativeElement.invalid;
    }
    /** Whether the chip is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether the chip is dense. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** The theme of the chip. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** The href of the chip. */
    set href(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.href = value;
        });
    }
    get href() {
        return this.nativeElement.href;
    }
    /** The target of the chip. */
    set target(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.target = value;
        });
    }
    get target() {
        return this.nativeElement.target;
    }
    /** The download of the chip. */
    set download(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.download = value;
        });
    }
    get download() {
        return this.nativeElement.download;
    }
    /** The rel of the chip. */
    set rel(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.rel = value;
        });
    }
    get rel() {
        return this.nativeElement.rel;
    }
    focus(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
    }
    focusRemoveButton(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.focusRemoveButton(...args));
    }
    click(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.click(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-chip element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineChipComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ChipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ChipComponent, selector: "forge-chip", inputs: { type: "type", value: "value", selected: ["selected", "selected", booleanAttribute], invalid: ["invalid", "invalid", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], dense: ["dense", "dense", booleanAttribute], theme: "theme", href: "href", target: "target", download: "download", rel: "rel" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ChipComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-chip',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { type: [{
                type: Input
            }], value: [{
                type: Input
            }], selected: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], invalid: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], theme: [{
                type: Input
            }], href: [{
                type: Input
            }], target: [{
                type: Input
            }], download: [{
                type: Input
            }], rel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
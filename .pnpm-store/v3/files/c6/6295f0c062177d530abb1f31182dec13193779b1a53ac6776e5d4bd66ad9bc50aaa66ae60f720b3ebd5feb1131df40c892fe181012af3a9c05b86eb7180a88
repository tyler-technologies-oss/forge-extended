import React, { useEffect, useState } from 'react';
import { useRef } from 'react';
import ReactDOM from 'react-dom';
;
export function useDynamicForgeComponent(tagName, component, componentProps, delegate, parentElement) {
    const [isVisible, setIsVisible] = useState(false);
    const customElementRef = useRef();
    const parent = parentElement || document.body;
    useEffect(() => {
        if (isVisible && component && customElementRef.current) {
            if (React.isValidElement(component)) {
                ReactDOM.render(component, customElementRef.current);
            }
            else {
                ReactDOM.render(React.createElement(component, componentProps), customElementRef.current);
            }
        }
    }, [component, customElementRef.current, isVisible, componentProps]);
    function show(options) {
        if (customElementRef.current) {
            return customElementRef.current;
        }
        customElementRef.current = document.createElement(tagName);
        ReactDOM.createPortal(customElementRef.current, parent);
        // Apply any configuration options to our Forge component instance
        if (typeof options === 'object') {
            Object.assign(customElementRef.current, options);
        }
        setIsVisible(true);
        if (delegate && delegate.show) {
            delegate.show(customElementRef.current, options);
        }
        else {
            parent.appendChild(customElementRef.current);
        }
        return customElementRef.current;
    }
    async function hide() {
        if (!customElementRef.current || !customElementRef.current.isConnected) {
            return;
        }
        if (customElementRef.current) {
            if (delegate && delegate.hide) {
                await delegate.hide(customElementRef.current, () => {
                    if (customElementRef.current) {
                        ReactDOM.unmountComponentAtNode(customElementRef.current);
                    }
                });
            }
            else {
                ReactDOM.unmountComponentAtNode(customElementRef.current);
                parent.removeChild(customElementRef.current);
            }
            customElementRef.current = undefined;
        }
        setIsVisible(false);
    }
    return { show, hide };
}
;

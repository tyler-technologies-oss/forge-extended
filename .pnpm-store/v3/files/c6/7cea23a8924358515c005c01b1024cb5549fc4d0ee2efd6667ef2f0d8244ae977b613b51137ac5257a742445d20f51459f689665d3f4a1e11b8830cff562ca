// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineCircularProgressComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class CircularProgressComponent {
    /** Controls the determinate state. */
    set determinate(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.determinate = value;
        });
    }
    get determinate() {
        return this.nativeElement.determinate;
    }
    /** Controls the progress while in a determinate state. Accepts values from `0` to `1`. */
    set progress(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.progress = value;
        });
    }
    get progress() {
        return this.nativeElement.progress;
    }
    /** Controls the theme of the progress indicator. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** Controls the visibility of the track background. */
    set track(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.track = value;
        });
    }
    get track() {
        return this.nativeElement.track;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-circular-progress element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineCircularProgressComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: CircularProgressComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: CircularProgressComponent, selector: "forge-circular-progress", inputs: { determinate: ["determinate", "determinate", booleanAttribute], progress: ["progress", "progress", numberAttribute], theme: "theme", track: ["track", "track", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: CircularProgressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-circular-progress',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { determinate: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], progress: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], theme: [{
                type: Input
            }], track: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY3VsYXItcHJvZ3Jlc3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL2NpcmN1bGFyLXByb2dyZXNzL2NpcmN1bGFyLXByb2dyZXNzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsZUFBZSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSixPQUFPLEVBQXVFLCtCQUErQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBRXhJLE9BQU87QUFNUCxNQUFNLE9BQU8seUJBQXlCO0lBS3JDLHNDQUFzQztJQUN0QyxJQUNXLFdBQVcsQ0FBQyxLQUE0RDtRQUNsRixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxXQUFXO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDdkMsQ0FBQztJQUVELDBGQUEwRjtJQUMxRixJQUNXLFFBQVEsQ0FBQyxLQUF5RDtRQUM1RSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxRQUFRO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDcEMsQ0FBQztJQUVELG9EQUFvRDtJQUNwRCxJQUNXLEtBQUssQ0FBQyxLQUFzRDtRQUN0RSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRUQsdURBQXVEO0lBQ3ZELElBQ1csS0FBSyxDQUFDLEtBQXNEO1FBQ3RFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLEtBQUs7UUFDZixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxZQUNDLGlCQUFvQyxFQUMxQixVQUE4RCxFQUM5RCxJQUFZO1FBRFosZUFBVSxHQUFWLFVBQVUsQ0FBb0Q7UUFDOUQsU0FBSSxHQUFKLElBQUksQ0FBUTtRQWxEdkIsMkNBQTJDO1FBQzNCLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFtRDdELCtCQUErQixFQUFFLENBQUM7UUFDbEMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs4R0F4RFcseUJBQXlCO2tHQUF6Qix5QkFBeUIsNkZBTWpCLGdCQUFnQixzQ0FXaEIsZUFBZSw2Q0FzQmYsZ0JBQWdCLDZCQXpDekIsMkJBQTJCOzsyRkFFMUIseUJBQXlCO2tCQUxyQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0QztvSUFRVyxXQUFXO3NCQURyQixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQVkzQixRQUFRO3NCQURsQixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRTtnQkFZMUIsS0FBSztzQkFEZixLQUFLO2dCQVlLLEtBQUs7c0JBRGYsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgbnVtYmVyQXR0cmlidXRlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2lyY3VsYXJQcm9ncmVzc0NvbXBvbmVudCBhcyBDaXJjdWxhclByb2dyZXNzQ29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lQ2lyY3VsYXJQcm9ncmVzc0NvbXBvbmVudCB9IGZyb20gJ0B0eWxlcnRlY2gvZm9yZ2UnO1xuXG4vKiogICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JnZS1jaXJjdWxhci1wcm9ncmVzcycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIENpcmN1bGFyUHJvZ3Jlc3NDb21wb25lbnQge1xuXG5cdC8qKiBUaGUgZm9yZ2UtY2lyY3VsYXItcHJvZ3Jlc3MgZWxlbWVudC4gKi9cblx0cHVibGljIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuXHQvKiogQ29udHJvbHMgdGhlIGRldGVybWluYXRlIHN0YXRlLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBkZXRlcm1pbmF0ZSh2YWx1ZTogQ2lyY3VsYXJQcm9ncmVzc0NvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2RldGVybWluYXRlJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmRldGVybWluYXRlID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBkZXRlcm1pbmF0ZSgpOiBDaXJjdWxhclByb2dyZXNzQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZGV0ZXJtaW5hdGUnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5kZXRlcm1pbmF0ZTtcblx0fVxuXG5cdC8qKiBDb250cm9scyB0aGUgcHJvZ3Jlc3Mgd2hpbGUgaW4gYSBkZXRlcm1pbmF0ZSBzdGF0ZS4gQWNjZXB0cyB2YWx1ZXMgZnJvbSBgMGAgdG8gYDFgLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IG51bWJlckF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IHByb2dyZXNzKHZhbHVlOiBDaXJjdWxhclByb2dyZXNzQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncHJvZ3Jlc3MnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQucHJvZ3Jlc3MgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHByb2dyZXNzKCk6IENpcmN1bGFyUHJvZ3Jlc3NDb21wb25lbnRDdXN0b21FbGVtZW50Wydwcm9ncmVzcyddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnByb2dyZXNzO1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHRoZSB0aGVtZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IHRoZW1lKHZhbHVlOiBDaXJjdWxhclByb2dyZXNzQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsndGhlbWUnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQudGhlbWUgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHRoZW1lKCk6IENpcmN1bGFyUHJvZ3Jlc3NDb21wb25lbnRDdXN0b21FbGVtZW50Wyd0aGVtZSddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnRoZW1lO1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSB0cmFjayBiYWNrZ3JvdW5kLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCB0cmFjayh2YWx1ZTogQ2lyY3VsYXJQcm9ncmVzc0NvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RyYWNrJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnRyYWNrID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB0cmFjaygpOiBDaXJjdWxhclByb2dyZXNzQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsndHJhY2snXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC50cmFjaztcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxDaXJjdWxhclByb2dyZXNzQ29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVDaXJjdWxhclByb2dyZXNzQ29tcG9uZW50KCk7XG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWYuZGV0YWNoKCk7XG5cdH1cbn1cbiJdfQ==
/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { removeAllChildren, removeElement } from '@tylertech/forge-core';
export class BaseComponentDelegate {
    get element() {
        return this._element;
    }
    constructor(_config = {}) {
        this._config = _config;
        this._initialize();
    }
    destroy() {
        this.disconnect();
    }
    disconnect() {
        if (!this._element.isConnected) {
            return;
        }
        removeElement(this._element);
    }
    _initialize() {
        this._element = this._build();
        if (!this._element) {
            throw new Error(`Invalid component instance: ${this._element}`);
        }
        this._applyProps();
        this._applyStyle();
        this._applyAttrs();
        this._config.options?.parent?.append(this._element);
        if (this._config.options?.children) {
            this._applyChildren();
        }
        this._configure?.();
    }
    _applyProps() {
        if (this._config.props) {
            Object.assign(this._element, this._config.props);
        }
    }
    _applyStyle() {
        if (this._config.options?.style) {
            const keys = Object.keys(this._config.options.style);
            for (const key of keys) {
                this._element?.style.setProperty(key, this._config.options.style[key]);
            }
        }
    }
    _applyAttrs() {
        if (this._config.options?.attributes) {
            if (this._config.options.attributes instanceof Map) {
                for (const [key, value] of Array.from(this._config.options.attributes)) {
                    this._element.setAttribute(key, value);
                }
            }
            else {
                const keys = Object.keys(this._config.options.attributes);
                for (const key of keys) {
                    this._element?.setAttribute(key, this._config.options.attributes[key]);
                }
            }
        }
    }
    _applyChildren() {
        if (this._element.hasChildNodes()) {
            removeAllChildren(this._element);
        }
        if (!this._config.options?.children) {
            return;
        }
        if (typeof this._config.options.children === 'string') {
            this._element.innerHTML = this._config.options.children;
        }
        else {
            this._element.appendChild(this._config.options.children);
        }
    }
}

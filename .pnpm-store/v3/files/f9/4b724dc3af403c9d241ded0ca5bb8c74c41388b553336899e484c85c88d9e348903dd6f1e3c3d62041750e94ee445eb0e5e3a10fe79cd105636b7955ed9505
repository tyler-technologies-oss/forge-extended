import { Injectable, createComponent, createEnvironmentInjector } from '@angular/core';
import { definePopoverComponent } from '@tylertech/forge';
import { PopoverConfig } from './popover-config';
import { PopoverRef } from './popover-ref';
import * as i0 from "@angular/core";
export class PopoverService {
    constructor(_appRef, _injector, _ngZone) {
        this._appRef = _appRef;
        this._injector = _injector;
        this._ngZone = _ngZone;
        definePopoverComponent();
    }
    /**
     * Displays a components within a Forge popover instance.
     * @param component The component reference.
     * @param options Sets attributes and properties on the `forge-popover` element. `targetElement` is required.
     * @param config The configuration to provide to the dynamic component as an injectable token.
     * @param moduleRef Optional NgModule ref if need by the component.
     * @returns A PopoverRef to the forge-popover and dynamically created component, and related close handling.
     */
    show(component, options, config, moduleRef, envInjector) {
        // Contains tokens that will be provided to components through our custom popover injector
        const providers = [];
        // If we got a config, we should provide it as an injection token
        if (config) {
            providers.push({ provide: PopoverConfig, useValue: config });
        }
        // Create the Forge popover element
        const popoverElement = document.createElement('forge-popover');
        // Configure the popover with the provided options
        const { className, attributes, ...restOptions } = options;
        if (className) {
            popoverElement.classList.add(className);
        }
        if (attributes) {
            attributes.forEach((value, key) => popoverElement.setAttribute(key, value));
        }
        Object.assign(popoverElement, restOptions);
        // Create the ref that will allow the consumer to control the popover
        const popoverRef = new PopoverRef(popoverElement);
        // Always provide the popover ref as an injection token
        providers.push({ provide: PopoverRef, useValue: popoverRef });
        // Create and attach the dynamic component to the popover element
        this._ngZone.run(() => {
            const parentInjector = envInjector ?? moduleRef?.injector ?? this._injector;
            const environmentInjector = createEnvironmentInjector(providers, parentInjector);
            const componentRef = createComponent(component, { environmentInjector });
            this._appRef.attachView(componentRef.hostView);
            const element = componentRef.hostView.rootNodes[0];
            popoverElement.appendChild(element);
            // Always destroy when the popover is closed
            const sub = popoverRef.afterClosed.subscribe(() => {
                componentRef.destroy();
                sub.unsubscribe();
            });
            popoverElement.addEventListener('forge-popover-toggle', () => {
                popoverRef.close();
                componentRef.destroy();
                sub.unsubscribe();
                popoverElement.remove();
            });
            // Force initial change detection so component size can affect initial positioning.
            componentRef.changeDetectorRef.detectChanges();
        });
        popoverElement.open = true;
        document.body.appendChild(popoverElement);
        return popoverRef;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: PopoverService, deps: [{ token: i0.ApplicationRef }, { token: i0.EnvironmentInjector }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: PopoverService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: PopoverService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i0.ApplicationRef }, { type: i0.EnvironmentInjector }, { type: i0.NgZone }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL3BvcG92ZXIvcG9wb3Zlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBd0QsVUFBVSxFQUF1QyxlQUFlLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEwsT0FBTyxFQUFxQixzQkFBc0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQVczQyxNQUFNLE9BQU8sY0FBYztJQUN6QixZQUNVLE9BQXVCLEVBQ3ZCLFNBQThCLEVBQzlCLE9BQWU7UUFGZixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUN2QixjQUFTLEdBQVQsU0FBUyxDQUFxQjtRQUM5QixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ3ZCLHNCQUFzQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSxJQUFJLENBQ1QsU0FBa0IsRUFDbEIsT0FBd0IsRUFDeEIsTUFBc0IsRUFDdEIsU0FBZ0MsRUFDaEMsV0FBaUM7UUFFakMsMEZBQTBGO1FBQzFGLE1BQU0sU0FBUyxHQUFlLEVBQUUsQ0FBQztRQUVqQyxpRUFBaUU7UUFDakUsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNYLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELENBQUM7UUFFRCxtQ0FBbUM7UUFDbkMsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUUvRCxrREFBa0Q7UUFDbEQsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsR0FBRyxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDMUQsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUNkLGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFDRCxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ2YsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDOUUsQ0FBQztRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRTNDLHFFQUFxRTtRQUNyRSxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBSSxjQUFjLENBQUMsQ0FBQztRQUVyRCx1REFBdUQ7UUFDdkQsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFOUQsaUVBQWlFO1FBQ2pFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNwQixNQUFNLGNBQWMsR0FBRyxXQUFXLElBQUksU0FBUyxFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQzVFLE1BQU0sbUJBQW1CLEdBQUcseUJBQXlCLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQ2pGLE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7WUFDekUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRS9DLE1BQU0sT0FBTyxHQUFJLFlBQVksQ0FBQyxRQUFpQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQWdCLENBQUM7WUFDNUYsY0FBYyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVwQyw0Q0FBNEM7WUFDNUMsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUNoRCxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3ZCLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNwQixDQUFDLENBQUMsQ0FBQztZQUVILGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7Z0JBQzNELFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDbkIsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUN2QixHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ2xCLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUMxQixDQUFDLENBQUMsQ0FBQztZQUVILG1GQUFtRjtZQUNuRixZQUFZLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7UUFFSCxjQUFjLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUUxQyxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDOzhHQWpGVSxjQUFjO2tIQUFkLGNBQWMsY0FGYixNQUFNOzsyRkFFUCxjQUFjO2tCQUgxQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uUmVmLCBFbWJlZGRlZFZpZXdSZWYsIEVudmlyb25tZW50SW5qZWN0b3IsIEluamVjdGFibGUsIE5nTW9kdWxlUmVmLCBOZ1pvbmUsIFByb3ZpZGVyLCBUeXBlLCBjcmVhdGVDb21wb25lbnQsIGNyZWF0ZUVudmlyb25tZW50SW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElQb3BvdmVyQ29tcG9uZW50LCBkZWZpbmVQb3BvdmVyQ29tcG9uZW50IH0gZnJvbSAnQHR5bGVydGVjaC9mb3JnZSc7XG5pbXBvcnQgeyBQb3BvdmVyQ29uZmlnIH0gZnJvbSAnLi9wb3BvdmVyLWNvbmZpZyc7XG5pbXBvcnQgeyBQb3BvdmVyUmVmIH0gZnJvbSAnLi9wb3BvdmVyLXJlZic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBvcG92ZXJPcHRpb25zIGV4dGVuZHMgT21pdDxQYXJ0aWFsPElQb3BvdmVyQ29tcG9uZW50PiwgJ2F0dHJpYnV0ZXMnPiB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgYXR0cmlidXRlcz86IE1hcDxzdHJpbmcsIHN0cmluZz47XG4gIGFuY2hvckVsZW1lbnQ6IEhUTUxFbGVtZW50O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQb3BvdmVyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2FwcFJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgcHJpdmF0ZSBfaW5qZWN0b3I6IEVudmlyb25tZW50SW5qZWN0b3IsXG4gICAgcHJpdmF0ZSBfbmdab25lOiBOZ1pvbmUpIHtcbiAgICBkZWZpbmVQb3BvdmVyQ29tcG9uZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheXMgYSBjb21wb25lbnRzIHdpdGhpbiBhIEZvcmdlIHBvcG92ZXIgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgVGhlIGNvbXBvbmVudCByZWZlcmVuY2UuXG4gICAqIEBwYXJhbSBvcHRpb25zIFNldHMgYXR0cmlidXRlcyBhbmQgcHJvcGVydGllcyBvbiB0aGUgYGZvcmdlLXBvcG92ZXJgIGVsZW1lbnQuIGB0YXJnZXRFbGVtZW50YCBpcyByZXF1aXJlZC5cbiAgICogQHBhcmFtIGNvbmZpZyBUaGUgY29uZmlndXJhdGlvbiB0byBwcm92aWRlIHRvIHRoZSBkeW5hbWljIGNvbXBvbmVudCBhcyBhbiBpbmplY3RhYmxlIHRva2VuLlxuICAgKiBAcGFyYW0gbW9kdWxlUmVmIE9wdGlvbmFsIE5nTW9kdWxlIHJlZiBpZiBuZWVkIGJ5IHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIEEgUG9wb3ZlclJlZiB0byB0aGUgZm9yZ2UtcG9wb3ZlciBhbmQgZHluYW1pY2FsbHkgY3JlYXRlZCBjb21wb25lbnQsIGFuZCByZWxhdGVkIGNsb3NlIGhhbmRsaW5nLlxuICAgKi9cbiAgcHVibGljIHNob3c8VCwgVE1vZHVsZT4oXG4gICAgY29tcG9uZW50OiBUeXBlPFQ+LFxuICAgIG9wdGlvbnM6IElQb3BvdmVyT3B0aW9ucyxcbiAgICBjb25maWc/OiBQb3BvdmVyQ29uZmlnLFxuICAgIG1vZHVsZVJlZj86IE5nTW9kdWxlUmVmPFRNb2R1bGU+LFxuICAgIGVudkluamVjdG9yPzogRW52aXJvbm1lbnRJbmplY3RvclxuICApOiBQb3BvdmVyUmVmPFQ+IHtcbiAgICAvLyBDb250YWlucyB0b2tlbnMgdGhhdCB3aWxsIGJlIHByb3ZpZGVkIHRvIGNvbXBvbmVudHMgdGhyb3VnaCBvdXIgY3VzdG9tIHBvcG92ZXIgaW5qZWN0b3JcbiAgICBjb25zdCBwcm92aWRlcnM6IFByb3ZpZGVyW10gPSBbXTtcblxuICAgIC8vIElmIHdlIGdvdCBhIGNvbmZpZywgd2Ugc2hvdWxkIHByb3ZpZGUgaXQgYXMgYW4gaW5qZWN0aW9uIHRva2VuXG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgcHJvdmlkZXJzLnB1c2goeyBwcm92aWRlOiBQb3BvdmVyQ29uZmlnLCB1c2VWYWx1ZTogY29uZmlnIH0pO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSB0aGUgRm9yZ2UgcG9wb3ZlciBlbGVtZW50XG4gICAgY29uc3QgcG9wb3ZlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JnZS1wb3BvdmVyJyk7XG5cbiAgICAvLyBDb25maWd1cmUgdGhlIHBvcG92ZXIgd2l0aCB0aGUgcHJvdmlkZWQgb3B0aW9uc1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lLCBhdHRyaWJ1dGVzLCAuLi5yZXN0T3B0aW9ucyB9ID0gb3B0aW9ucztcbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICBwb3BvdmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgfVxuICAgIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgICBhdHRyaWJ1dGVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHBvcG92ZXJFbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKSk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24ocG9wb3ZlckVsZW1lbnQsIHJlc3RPcHRpb25zKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgcmVmIHRoYXQgd2lsbCBhbGxvdyB0aGUgY29uc3VtZXIgdG8gY29udHJvbCB0aGUgcG9wb3ZlclxuICAgIGNvbnN0IHBvcG92ZXJSZWYgPSBuZXcgUG9wb3ZlclJlZjxUPihwb3BvdmVyRWxlbWVudCk7XG5cbiAgICAvLyBBbHdheXMgcHJvdmlkZSB0aGUgcG9wb3ZlciByZWYgYXMgYW4gaW5qZWN0aW9uIHRva2VuXG4gICAgcHJvdmlkZXJzLnB1c2goeyBwcm92aWRlOiBQb3BvdmVyUmVmLCB1c2VWYWx1ZTogcG9wb3ZlclJlZiB9KTtcblxuICAgIC8vIENyZWF0ZSBhbmQgYXR0YWNoIHRoZSBkeW5hbWljIGNvbXBvbmVudCB0byB0aGUgcG9wb3ZlciBlbGVtZW50XG4gICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB7XG4gICAgICBjb25zdCBwYXJlbnRJbmplY3RvciA9IGVudkluamVjdG9yID8/IG1vZHVsZVJlZj8uaW5qZWN0b3IgPz8gdGhpcy5faW5qZWN0b3I7XG4gICAgICBjb25zdCBlbnZpcm9ubWVudEluamVjdG9yID0gY3JlYXRlRW52aXJvbm1lbnRJbmplY3Rvcihwcm92aWRlcnMsIHBhcmVudEluamVjdG9yKTtcbiAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGNyZWF0ZUNvbXBvbmVudChjb21wb25lbnQsIHsgZW52aXJvbm1lbnRJbmplY3RvciB9KTtcbiAgICAgIHRoaXMuX2FwcFJlZi5hdHRhY2hWaWV3KGNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XG5cbiAgICAgIGNvbnN0IGVsZW1lbnQgPSAoY29tcG9uZW50UmVmLmhvc3RWaWV3IGFzIEVtYmVkZGVkVmlld1JlZjxhbnk+KS5yb290Tm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBwb3BvdmVyRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcblxuICAgICAgLy8gQWx3YXlzIGRlc3Ryb3kgd2hlbiB0aGUgcG9wb3ZlciBpcyBjbG9zZWRcbiAgICAgIGNvbnN0IHN1YiA9IHBvcG92ZXJSZWYuYWZ0ZXJDbG9zZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9KTtcbiAgXG4gICAgICBwb3BvdmVyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb3JnZS1wb3BvdmVyLXRvZ2dsZScsICgpID0+IHtcbiAgICAgICAgcG9wb3ZlclJlZi5jbG9zZSgpO1xuICAgICAgICBjb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgcG9wb3ZlckVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gRm9yY2UgaW5pdGlhbCBjaGFuZ2UgZGV0ZWN0aW9uIHNvIGNvbXBvbmVudCBzaXplIGNhbiBhZmZlY3QgaW5pdGlhbCBwb3NpdGlvbmluZy5cbiAgICAgIGNvbXBvbmVudFJlZi5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSk7XG5cbiAgICBwb3BvdmVyRWxlbWVudC5vcGVuID0gdHJ1ZTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBvcG92ZXJFbGVtZW50KTtcblxuICAgIHJldHVybiBwb3BvdmVyUmVmO1xuICB9XG59XG4iXX0=
/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
/**
 * A callback function for handling forwarded attributes.
 */
export type AttributeForwardingCallback = (name: string, value: string | null, part: string | null) => void;
/**
 * ARIA attributes capable of being reflected to a shadow element.
 */
export declare const REFLECTIVE_ARIA_ATTRIBUTES: string[];
/**
 * ARIA attributes typically useful for input elements.
 */
export declare const INPUT_ARIA_ATTRIBUTES: string[];
/**
 * Property names relevant to input elements.
 */
export declare const INPUT_PROPERTIES: (keyof HTMLInputElement)[];
/**
 * Attributes for buttons when used within a form.
 */
export declare const BUTTON_FORM_ATTRIBUTES: string[];
/**
 * Gets an array of attribute names prefixed by a part name and colon.
 * @param part The part name of a shadow element.
 * @param attributes An array of attribute names to prefix.
 * @returns An array of prefixed attribute name strings.
 */
export declare function getPartPrefixedAttributes(part: string, attributes: string[]): string[];
/**
 * Observes a configured array of attributes set on a source element and forwards them to a
 * callback function.
 * @param from The element to forward attributes from.
 * @param attributes Forwarded attributes.
 * @param callback A function to handle forwarded attributes.
 * @returns A `MutationObserver`.
 */
export declare function forwardAttributes(from: HTMLElement, attributes: string[], callback: AttributeForwardingCallback, genericize?: boolean): MutationObserver;
/**
 * Clones attributes from one element to another.
 * @param from The source element to clone attributes from.
 * @param to The target element to clone attributes to.
 * @param attributes The list of attributes to clone.
 */
export declare function cloneAttributes(from: HTMLElement, to: HTMLElement, attributes: string[]): void;
/**
 * Clones properties from one element to another.
 * @param from The source element to clone properties from.
 * @param to The target element to clone properties to.
 * @param attributes The list of properties to clone.
 */
export declare function cloneProperties<T, K extends keyof T>(from: T, to: T, properties: K[]): void;
/**
 * Clones the validation message of one input element to another.
 * @param from The source input element to clone the validation message from.
 * @param to The target input element to clone the validation message to.
 */
export declare function cloneValidationMessage(from: HTMLInputElement, to: HTMLInputElement): void;
/**
 * A utility class for switching between elements.
 */
export declare class SlottedElementAdapter<T extends HTMLElement = HTMLElement> {
    private _el;
    private _attachCallback;
    /**
     * Returns the element associated with this adapter.
     */
    get el(): T;
    /**
     * Clones the specified attributes from one element to another.
     *
     * @param from - The element to clone attributes from.
     * @param to - The element to clone attributes to.
     * @param attributes - The names of the attributes to clone.
     */
    static cloneAttributes(from: HTMLElement, to: HTMLElement, attributes: string[]): void;
    /**
     * Clones the input specific properties from one element to another.
     *
     * @param from - The element to clone properties from.
     * @param to - The element to clone properties to.
     */
    static cloneProperties(from: HTMLElement, to: HTMLElement, properties: (keyof HTMLElement)[]): void;
    /**
     * Clones the validation message from one element to another.
     *
     * @param from - The element to clone the validation message from.
     * @param to - The element to clone the validation message to.
     */
    static cloneValidationMessage(from: HTMLElement, to: HTMLElement): void;
    /**
     * Initializes the adapter with an initial element and attach callback.
     *
     * @param el - The element to associate with the adapter.
     * @param attachCallback - The callback to invoke when attaching the element.
     */
    initialize(el: T, attachCallback: (newEl: T, oldEl: T) => void): void;
    /**
     * Replaces the attached element.
     *
     * @param el - The new element to attach.
     */
    attachElement(el: T): void;
}

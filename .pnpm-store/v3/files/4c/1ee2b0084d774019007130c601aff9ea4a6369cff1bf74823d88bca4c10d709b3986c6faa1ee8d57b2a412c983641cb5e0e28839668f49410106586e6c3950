// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineListComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ListComponent {
    /** Whether the list has all dense items or not. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Whether the list items within this list are indented. Default is false. */
    set indented(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.indented = value;
        });
    }
    get indented() {
        return this.nativeElement.indented;
    }
    /** The selected list item value(s). */
    set selectedValue(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectedValue = value;
        });
    }
    get selectedValue() {
        return this.nativeElement.selectedValue;
    }
    /** Whether the list has all two-line items or not. */
    set twoLine(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.twoLine = value;
        });
    }
    get twoLine() {
        return this.nativeElement.twoLine;
    }
    /** Whether the list has all three-line items or not. */
    set threeLine(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.threeLine = value;
        });
    }
    get threeLine() {
        return this.nativeElement.threeLine;
    }
    /** Whether the list has all items that wrap their text or not. */
    set wrap(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.wrap = value;
        });
    }
    get wrap() {
        return this.nativeElement.wrap;
    }
    /** Controls whether the list items will automatically attach themselves to interactive slotted elements or not. */
    set noninteractive(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.noninteractive = value;
        });
    }
    get noninteractive() {
        return this.nativeElement.noninteractive;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-list element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineListComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ListComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ListComponent, selector: "forge-list", inputs: { dense: ["dense", "dense", booleanAttribute], indented: ["indented", "indented", booleanAttribute], selectedValue: "selectedValue", twoLine: ["twoLine", "twoLine", booleanAttribute], threeLine: ["threeLine", "threeLine", booleanAttribute], wrap: ["wrap", "wrap", booleanAttribute], noninteractive: ["noninteractive", "noninteractive", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-list',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], indented: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], selectedValue: [{
                type: Input
            }], twoLine: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], threeLine: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], wrap: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], noninteractive: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
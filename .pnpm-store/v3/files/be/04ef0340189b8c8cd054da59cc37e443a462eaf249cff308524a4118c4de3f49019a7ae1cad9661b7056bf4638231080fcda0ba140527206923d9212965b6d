// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineFieldComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class FieldComponent {
    /** The position of the label relative to the input area. */
    set labelPosition(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelPosition = value;
        });
    }
    get labelPosition() {
        return this.nativeElement.labelPosition;
    }
    /** The alignment of the label relative to the input area. */
    set labelAlignment(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelAlignment = value;
        });
    }
    get labelAlignment() {
        return this.nativeElement.labelAlignment;
    }
    /** Whether an inset positioned label is floated to the top of the container. */
    set floatLabel(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.floatLabel = value;
        });
    }
    get floatLabel() {
        return this.nativeElement.floatLabel;
    }
    /** Whether the field is in an invalid state. */
    set invalid(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.invalid = value;
        });
    }
    get invalid() {
        return this.nativeElement.invalid;
    }
    /** Whether the field is required. */
    set required(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.required = value;
        });
    }
    get required() {
        return this.nativeElement.required;
    }
    /** Whether the field is optional. */
    set optional(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optional = value;
        });
    }
    get optional() {
        return this.nativeElement.optional;
    }
    /** Whether the field is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** The variant of the field. */
    set variant(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.variant = value;
        });
    }
    get variant() {
        return this.nativeElement.variant;
    }
    /** The theme of the field. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** The border radius of the field's corners. */
    set shape(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.shape = value;
        });
    }
    get shape() {
        return this.nativeElement.shape;
    }
    /** The density of the field. */
    set density(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.density = value;
        });
    }
    get density() {
        return this.nativeElement.density;
    }
    /** Whether the field is at the "extra-small" density level. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Whether the field has a popover icon. */
    set popoverIcon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popoverIcon = value;
        });
    }
    get popoverIcon() {
        return this.nativeElement.popoverIcon;
    }
    /** Whether the field's popover icon is in the expanded orientation. */
    set popoverExpanded(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popoverExpanded = value;
        });
    }
    get popoverExpanded() {
        return this.nativeElement.popoverExpanded;
    }
    /** Whether the field contains a multiline input. */
    set multiline(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.multiline = value;
        });
    }
    get multiline() {
        return this.nativeElement.multiline;
    }
    /** Whether the field's support text is inset from either side. */
    set supportTextInset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.supportTextInset = value;
        });
    }
    get supportTextInset() {
        return this.nativeElement.supportTextInset;
    }
    /** The element to attach the focus indicator to. */
    set focusIndicatorTargetElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.focusIndicatorTargetElement = value;
        });
    }
    get focusIndicatorTargetElement() {
        return this.nativeElement.focusIndicatorTargetElement;
    }
    /** The focus mode to use on the focus indicator. */
    set focusIndicatorFocusMode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.focusIndicatorFocusMode = value;
        });
    }
    get focusIndicatorFocusMode() {
        return this.nativeElement.focusIndicatorFocusMode;
    }
    /** Whether the focus indicator should render when the target element matches `:focus` instead of `:focus-visible`. */
    set focusIndicatorAllowFocus(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.focusIndicatorAllowFocus = value;
        });
    }
    get focusIndicatorAllowFocus() {
        return this.nativeElement.focusIndicatorAllowFocus;
    }
    /** Sets the floating label without animating the transition. */
    floatLabelWithoutAnimation(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.floatLabelWithoutAnimation(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-field element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineFieldComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: FieldComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: FieldComponent, selector: "forge-field", inputs: { labelPosition: "labelPosition", labelAlignment: "labelAlignment", floatLabel: ["floatLabel", "floatLabel", booleanAttribute], invalid: ["invalid", "invalid", booleanAttribute], required: ["required", "required", booleanAttribute], optional: ["optional", "optional", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], variant: "variant", theme: "theme", shape: "shape", density: "density", dense: ["dense", "dense", booleanAttribute], popoverIcon: ["popoverIcon", "popoverIcon", booleanAttribute], popoverExpanded: ["popoverExpanded", "popoverExpanded", booleanAttribute], multiline: ["multiline", "multiline", booleanAttribute], supportTextInset: "supportTextInset", focusIndicatorTargetElement: "focusIndicatorTargetElement", focusIndicatorFocusMode: "focusIndicatorFocusMode", focusIndicatorAllowFocus: ["focusIndicatorAllowFocus", "focusIndicatorAllowFocus", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: FieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-field',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { labelPosition: [{
                type: Input
            }], labelAlignment: [{
                type: Input
            }], floatLabel: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], invalid: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], optional: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], variant: [{
                type: Input
            }], theme: [{
                type: Input
            }], shape: [{
                type: Input
            }], density: [{
                type: Input
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popoverIcon: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popoverExpanded: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], multiline: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], supportTextInset: [{
                type: Input
            }], focusIndicatorTargetElement: [{
                type: Input
            }], focusIndicatorFocusMode: [{
                type: Input
            }], focusIndicatorAllowFocus: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
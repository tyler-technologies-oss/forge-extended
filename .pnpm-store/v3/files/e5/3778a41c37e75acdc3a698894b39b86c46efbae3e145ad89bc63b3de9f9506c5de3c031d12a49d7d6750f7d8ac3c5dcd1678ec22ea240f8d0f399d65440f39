// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineKeyboardShortcutComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class KeyboardShortcutComponent {
    /** Gets/sets the key binding. */
    set key(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.key = value;
        });
    }
    get key() {
        return this.nativeElement.key;
    }
    /** Alias for key. */
    set keyBinding(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.keyBinding = value;
        });
    }
    get keyBinding() {
        return this.nativeElement.keyBinding;
    }
    /** Gets/sets the target element selector. */
    set target(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.target = value;
        });
    }
    get target() {
        return this.nativeElement.target;
    }
    /** Gets/sets the global listener state. */
    set global(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.global = value;
        });
    }
    get global() {
        return this.nativeElement.global;
    }
    /** Gets/sets whether the callback will be called while in a text entry field. */
    set allowWhileTyping(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowWhileTyping = value;
        });
    }
    get allowWhileTyping() {
        return this.nativeElement.allowWhileTyping;
    }
    /** Gets/sets whether to prevent default on keyboard events */
    set preventDefault(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.preventDefault = value;
        });
    }
    get preventDefault() {
        return this.nativeElement.preventDefault;
    }
    /** Gets/sets whether to use capturing on keyboard events */
    set capture(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.capture = value;
        });
    }
    get capture() {
        return this.nativeElement.capture;
    }
    /** Gets/sets whether to match codes instead of keys on keyboard events. */
    set useCode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.useCode = value;
        });
    }
    get useCode() {
        return this.nativeElement.useCode;
    }
    /** Gets/sets whether the callback will be called. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Gets/sets whether the activation callback. */
    set activateCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.activateCallback = value;
        });
    }
    get activateCallback() {
        return this.nativeElement.activateCallback;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-keyboard-shortcut element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineKeyboardShortcutComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: KeyboardShortcutComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: KeyboardShortcutComponent, selector: "forge-keyboard-shortcut", inputs: { key: "key", keyBinding: "keyBinding", target: "target", global: ["global", "global", booleanAttribute], allowWhileTyping: ["allowWhileTyping", "allowWhileTyping", booleanAttribute], preventDefault: ["preventDefault", "preventDefault", booleanAttribute], capture: ["capture", "capture", booleanAttribute], useCode: ["useCode", "useCode", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], activateCallback: "activateCallback" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: KeyboardShortcutComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-keyboard-shortcut',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { key: [{
                type: Input
            }], keyBinding: [{
                type: Input
            }], target: [{
                type: Input
            }], global: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], allowWhileTyping: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], preventDefault: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], capture: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], useCode: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], activateCallback: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { DeprecatedButtonComponent as DeprecatedButtonComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class DeprecatedButtonComponent {
    protected elementRef: ElementRef<DeprecatedButtonComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-deprecated-button element. */
    readonly nativeElement: DeprecatedButtonComponentCustomElement;
    set type(value: DeprecatedButtonComponentCustomElement['type']);
    get type(): DeprecatedButtonComponentCustomElement['type'];
    set disabled(value: DeprecatedButtonComponentCustomElement['disabled']);
    get disabled(): DeprecatedButtonComponentCustomElement['disabled'];
    set fullWidth(value: DeprecatedButtonComponentCustomElement['fullWidth']);
    get fullWidth(): DeprecatedButtonComponentCustomElement['fullWidth'];
    focus(...args: Parameters<DeprecatedButtonComponentCustomElement['focus']>): ReturnType<DeprecatedButtonComponentCustomElement['focus']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<DeprecatedButtonComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<DeprecatedButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DeprecatedButtonComponent, "forge-deprecated-button", never, { "type": { "alias": "type"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "fullWidth": { "alias": "fullWidth"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_fullWidth: unknown;
}

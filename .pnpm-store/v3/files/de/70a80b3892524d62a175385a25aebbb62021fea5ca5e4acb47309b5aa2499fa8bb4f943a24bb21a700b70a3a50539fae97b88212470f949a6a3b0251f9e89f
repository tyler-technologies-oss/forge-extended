/**
 * This method will find a value in a JavaScript object using a string path.
 * Example:
 *   var obj = { one: 1, two: { twoOne: 21, twoTwo: 22, twoThree: [{ threeOne: 31 }] } };
 *   getPropertyValue(obj, 'two.twoOne'); // 21
 *   getPropertyValue(obj, 'one'); // 1
 *   getPropertyValue(obj, 'two.twoThree[0].threeOne'); // 31
 *
 * Inspired by "Alnitak"'s answer on stack overflow:
 * http://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key
 */
export declare function getPropertyValue(obj: any, inPath: string): any;
/**
 * A wrapper around Array.prototype.find to allow for passing in a predicate.
 * @param {any[]} ary The array to search.
 * @param {any} predicate The predicate.
 */
export declare function findWhere(ary: any[], predicate: any): any;
/**
 * A wrapper around Array.prototype.findIndex to allow for passing in a predicate.
 * @param {any[]} ary The array to search.
 * @param {any} predicate The predicate.
 */
export declare function findIndexWhere(ary: any[], predicate: any): any;
/**
 * This function will create a predicate in the form of "{ [property name]: [value] }" where the square brackets are
 * replaced with the actual property name and value for the data.
 */
export declare function createPredicate(key: string[], data: any): any;
/**
 * Determines if an object matches a predicate.
 */
export declare function matchesPredicate(obj: any, predicate: any): boolean;
/**
 * Decorates an object by overriding its property descriptor to add a listener invocation in its dynamically created setter.
 * Note: This does retain existing functionality, and will only work with configurable properties.
 * @param context The `this` context to use for the listener.
 * @param obj The object to decorate.
 * @param prop The property to override.
 * @param listener The listener function that will be executed when the property values changes.
 * @returns A function that can be invoked to return the property to its original property descriptor.
 */
export declare function listenOwnProperty(context: any, obj: any, prop: string, listener: (value: any) => void): () => void;
/**
 * Recursively searches for a value within an object, optionally limited to keys names present in the limitProps string array.
 * @param value The value to search for.
 * @param target The object to search through.
 * @param limitProps An optional string array of property name to limit the search to.
 * @returns A boolean value indicating if the value exists within the object (limited to limitProps keys if given) regardless of depth.
 */
export declare function deepSearchByValuePredicate(value: string, target: {
    [key: string]: any;
}, limitProps?: string[]): boolean;
/**
 * Tests for a value present in a number, string or arrays of either type.
 * @param value The value to search for.
 * @param target The string/number/array to search against.
 * @returns A boolean value indicating if the value exists within the target.
 */
export declare function deepValueExistsPredicate(value: string, target: string | number | Array<string> | Array<number>): boolean;

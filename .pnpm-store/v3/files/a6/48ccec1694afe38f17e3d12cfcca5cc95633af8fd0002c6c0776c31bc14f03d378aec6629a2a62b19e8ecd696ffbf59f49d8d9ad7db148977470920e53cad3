// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { definePopoverComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class PopoverComponent {
    /** Whether or not the popover should render an arrow. */
    set arrow(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.arrow = value;
        });
    }
    get arrow() {
        return this.nativeElement.arrow;
    }
    /** The animation type to use for the popover. Valid values are `'none'`, `'fade'`, `'slide'`, and `'zoom'` (default). */
    set animationType(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.animationType = value;
        });
    }
    get animationType() {
        return this.nativeElement.animationType;
    }
    /** The trigger type(s) to use for the popover. Valid values are `'click'` (default), `'hover'`, `'focus'`, and `'longpress'`. Multiple can be specified. */
    set triggerType(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.triggerType = value;
        });
    }
    get triggerType() {
        return this.nativeElement.triggerType;
    }
    /** The delay in milliseconds before a longpress event is detected. */
    set longpressDelay(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.longpressDelay = value;
        });
    }
    get longpressDelay() {
        return this.nativeElement.longpressDelay;
    }
    /** Whether or not the popover should remain open when the user hovers outside the popover. */
    set persistentHover(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.persistentHover = value;
        });
    }
    get persistentHover() {
        return this.nativeElement.persistentHover;
    }
    /** The delay in milliseconds before the popover is shown. */
    set hoverDelay(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.hoverDelay = value;
        });
    }
    get hoverDelay() {
        return this.nativeElement.hoverDelay;
    }
    /** The delay in milliseconds before the popover is dismissed when the user hovers outside of the popover. */
    set hoverDismissDelay(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.hoverDismissDelay = value;
        });
    }
    get hoverDismissDelay() {
        return this.nativeElement.hoverDismissDelay;
    }
    /** The preset to use for the popover. */
    set preset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.preset = value;
        });
    }
    get preset() {
        return this.nativeElement.preset;
    }
    /** A readonly reference to the internal `<forge-overlay>` element instance. */
    get overlay() {
        return this.nativeElement.overlay;
    }
    /** The anchor element to position the overlay relative to. */
    set anchorElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.anchorElement = value;
        });
    }
    get anchorElement() {
        return this.nativeElement.anchorElement;
    }
    /** The IDREF of the anchor element to position the overlay relative to. */
    set anchor(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.anchor = value;
        });
    }
    get anchor() {
        return this.nativeElement.anchor;
    }
    /** Whether the overlay should not be anchored to an element. This allows for custom positioning. */
    set noAnchor(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.noAnchor = value;
        });
    }
    get noAnchor() {
        return this.nativeElement.noAnchor;
    }
    /** Whether the overlay is open. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Whether the overlay is inline (not in the top-layer). */
    set inline(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.inline = value;
        });
    }
    get inline() {
        return this.nativeElement.inline;
    }
    /** The placement of the overlay. */
    set placement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.placement = value;
        });
    }
    get placement() {
        return this.nativeElement.placement;
    }
    /** The position strategy of the overlay. */
    set positionStrategy(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.positionStrategy = value;
        });
    }
    get positionStrategy() {
        return this.nativeElement.positionStrategy;
    }
    /** The offset of the overlay. */
    set offset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.offset = value;
        });
    }
    get offset() {
        return this.nativeElement.offset;
    }
    /** Whether the overlay should shift to fit within the viewport. */
    set shift(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.shift = value;
        });
    }
    get shift() {
        return this.nativeElement.shift;
    }
    /** The hide state of the overlay. */
    set hide(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.hide = value;
        });
    }
    get hide() {
        return this.nativeElement.hide;
    }
    /** Whether the overlay should persist when the anchor is removed. */
    set persistent(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.persistent = value;
        });
    }
    get persistent() {
        return this.nativeElement.persistent;
    }
    /** Whether the overlay should flip placements to another side fit within the viewport. */
    set flip(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.flip = value;
        });
    }
    get flip() {
        return this.nativeElement.flip;
    }
    /** An IDREF to boundary element to constrain the overlay within. */
    set boundary(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.boundary = value;
        });
    }
    get boundary() {
        return this.nativeElement.boundary;
    }
    /** The boundary element instance to constrain the overlay within. */
    set boundaryElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.boundaryElement = value;
        });
    }
    get boundaryElement() {
        return this.nativeElement.boundaryElement;
    }
    /** The fallback placements of the overlay. */
    set fallbackPlacements(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fallbackPlacements = value;
        });
    }
    get fallbackPlacements() {
        return this.nativeElement.fallbackPlacements;
    }
    /** Hides the popover, and returns a `Promise` that resolves when the hide animation is complete. */
    hideAsync(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.hideAsync(...args));
    }
    /** Forces the overlay to reposition itself. */
    position(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.position(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-popover element. */
        this.nativeElement = this.elementRef.nativeElement;
        definePopoverComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: PopoverComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: PopoverComponent, selector: "forge-popover", inputs: { arrow: ["arrow", "arrow", booleanAttribute], animationType: "animationType", triggerType: "triggerType", longpressDelay: ["longpressDelay", "longpressDelay", numberAttribute], persistentHover: ["persistentHover", "persistentHover", booleanAttribute], hoverDelay: ["hoverDelay", "hoverDelay", numberAttribute], hoverDismissDelay: ["hoverDismissDelay", "hoverDismissDelay", numberAttribute], preset: "preset", anchorElement: "anchorElement", anchor: "anchor", noAnchor: ["noAnchor", "noAnchor", booleanAttribute], open: ["open", "open", booleanAttribute], inline: ["inline", "inline", booleanAttribute], placement: "placement", positionStrategy: "positionStrategy", offset: "offset", shift: ["shift", "shift", booleanAttribute], hide: "hide", persistent: ["persistent", "persistent", booleanAttribute], flip: "flip", boundary: "boundary", boundaryElement: "boundaryElement", fallbackPlacements: "fallbackPlacements" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: PopoverComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-popover',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { arrow: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], animationType: [{
                type: Input
            }], triggerType: [{
                type: Input
            }], longpressDelay: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], persistentHover: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hoverDelay: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], hoverDismissDelay: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], preset: [{
                type: Input
            }], anchorElement: [{
                type: Input
            }], anchor: [{
                type: Input
            }], noAnchor: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], inline: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], placement: [{
                type: Input
            }], positionStrategy: [{
                type: Input
            }], offset: [{
                type: Input
            }], shift: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hide: [{
                type: Input
            }], persistent: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], flip: [{
                type: Input
            }], boundary: [{
                type: Input
            }], boundaryElement: [{
                type: Input
            }], fallbackPlacements: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
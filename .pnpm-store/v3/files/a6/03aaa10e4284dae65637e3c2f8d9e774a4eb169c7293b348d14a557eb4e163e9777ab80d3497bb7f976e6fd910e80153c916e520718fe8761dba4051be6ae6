/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
/* prettier-ignore */
.forge-radio {
  --_radio-primary-color: var(--forge-radio-primary-color, var(--forge-theme-tertiary, #3d5afe));
  --_radio-inactive-color: var(--forge-radio-inactive-color, var(--forge-theme-surface-container-high, #9e9e9e));
  --_radio-size: var(--forge-radio-size, 20px);
  --_radio-mark-size: var(--forge-radio-mark-size, 75%);
  --_radio-state-layer-size: var(--forge-radio-state-layer-size, 40px);
  --_radio-state-layer-dense-size: var(--forge-radio-state-layer-dense-size, 24px);
  --_radio-width: var(--forge-radio-width, var(--_radio-size));
  --_radio-height: var(--forge-radio-height, var(--_radio-size));
  --_radio-border-width: var(--forge-radio-border-width, var(--forge-border-medium, 2px));
  --_radio-unchecked-border-color: var(--forge-radio-unchecked-border-color, var(--_radio-inactive-color));
  --_radio-checked-border-color: var(--forge-radio-checked-border-color, var(--_radio-primary-color));
  --_radio-background: var(--forge-radio-background, transparent);
  --_radio-shape: var(--forge-radio-shape, calc(var(--forge-shape-round, 50%) * var(--forge-shape-factor, 1)));
  --_radio-mark-width: var(--forge-radio-mark-width, var(--_radio-mark-size));
  --_radio-mark-height: var(--forge-radio-mark-height, var(--_radio-mark-size));
  --_radio-mark-color: var(--forge-radio-mark-color, var(--_radio-primary-color));
  --_radio-gap: var(--forge-radio-gap, 0);
  --_radio-justify: var(--forge-radio-justify, start);
  --_radio-direction: var(--forge-radio-direction, initial);
  --_radio-state-layer-width: var(--forge-radio-state-layer-width, var(--_radio-state-layer-size));
  --_radio-state-layer-height: var(--forge-radio-state-layer-height, var(--_radio-state-layer-size));
  --_radio-state-layer-unchecked-color: var(--forge-radio-state-layer-unchecked-color, var(--_radio-color));
  --_radio-state-layer-checked-color: var(--forge-radio-state-layer-checked-color, var(--_radio-primary-color));
  --_radio-state-layer-shape: var(--forge-radio-state-layer-shape, var(--_radio-shape));
  --_radio-state-layer-dense-width: var(--forge-radio-state-layer-dense-width, var(--_radio-state-layer-dense-size));
  --_radio-state-layer-dense-height: var(--forge-radio-state-layer-dense-height, var(--_radio-state-layer-dense-size));
  --_radio-disabled-opacity: var(--forge-radio-disabled-opacity, 0.38);
  --_radio-animation-duration: var(--forge-radio-animation-duration, var(--forge-animation-duration-short4, 200ms));
  --_radio-animation-timing-function: var(--forge-radio-animation-timing-function, var(--forge-animation-easing-decelerate, cubic-bezier(0, 0, 0, 1)));
  --_radio-animation-delay: var(--forge-radio-animation-delay, 0ms);
}

.forge-radio {
  outline: none;
  --forge-focus-indicator-color: var(--_radio-primary-color);
  --forge-focus-indicator-outward-offset: 0px;
  --forge-focus-indicator-shape: var(--_radio-state-layer-shape);
  display: inline flex;
  position: relative;
  align-items: center;
  justify-content: center;
  inline-size: var(--_radio-state-layer-width);
  block-size: var(--_radio-state-layer-height);
}
.forge-radio:has(input[type=radio]:focus-visible)::after {
  --_focus-indicator-display: var(--forge-focus-indicator-display, flex);
  --_focus-indicator-width: var(--forge-focus-indicator-width, var(--forge-border-medium, 2px));
  --_focus-indicator-active-width: var(--forge-focus-indicator-active-width, 6px);
  --_focus-indicator-color: var(--forge-focus-indicator-color, var(--forge-theme-primary, #3f51b5));
  --_focus-indicator-shape: var(--forge-focus-indicator-shape, calc(var(--forge-shape-extra-small, 1px) * var(--forge-shape-factor, 1)));
  --_focus-indicator-duration: var(--forge-focus-indicator-duration, var(--forge-animation-duration-long4, 600ms));
  --_focus-indicator-easing: var(--forge-focus-indicator-easing, var(--forge-animation-easing-emphasized, cubic-bezier(0.2, 0, 0, 1)));
  --_focus-indicator-shape-start-start: var(--forge-focus-indicator-shape-start-start, var(--_focus-indicator-shape));
  --_focus-indicator-shape-start-end: var(--forge-focus-indicator-shape-start-end, var(--_focus-indicator-shape));
  --_focus-indicator-shape-end-end: var(--forge-focus-indicator-shape-end-end, var(--_focus-indicator-shape));
  --_focus-indicator-shape-end-start: var(--forge-focus-indicator-shape-end-start, var(--_focus-indicator-shape));
  --_focus-indicator-outward-offset: var(--forge-focus-indicator-outward-offset, var(--forge-spacing-xxsmall, 4px));
  --_focus-indicator-inward-offset: var(--forge-focus-indicator-inward-offset, 0px);
  --_focus-indicator-offset-block: var(--forge-focus-indicator-offset-block, 0);
  --_focus-indicator-offset-inline: var(--forge-focus-indicator-offset-inline, 0);
}
.forge-radio:has(input[type=radio]:focus-visible)::after {
  animation-delay: 0s, calc(var(--_focus-indicator-duration) * 0.25);
  animation-duration: calc(var(--_focus-indicator-duration) * 0.25), calc(var(--_focus-indicator-duration) * 0.75);
  animation-timing-function: var(--_focus-indicator-easing);
  box-sizing: border-box;
  color: var(--_focus-indicator-color);
  display: none;
  pointer-events: none;
  position: absolute;
  margin-block: var(--_focus-indicator-offset-block);
  margin-inline: var(--_focus-indicator-offset-inline);
  animation-name: forge-focus-indicator-outward-grow, forge-focus-indicator-outward-shrink;
  border-end-end-radius: calc(var(--_focus-indicator-shape-end-end) + var(--_focus-indicator-outward-offset));
  border-end-start-radius: calc(var(--_focus-indicator-shape-end-start) + var(--_focus-indicator-outward-offset));
  border-start-end-radius: calc(var(--_focus-indicator-shape-start-end) + var(--_focus-indicator-outward-offset));
  border-start-start-radius: calc(var(--_focus-indicator-shape-start-start) + var(--_focus-indicator-outward-offset));
  inset: calc(-1 * var(--_focus-indicator-outward-offset));
  outline: var(--_focus-indicator-width) solid currentColor;
  content: "";
  display: block;
}
.forge-radio input[type=radio] {
  position: absolute;
  appearance: none;
  outline: none;
  margin: 0;
  inline-size: 100%;
  block-size: 100%;
  cursor: pointer;
}
.forge-radio input[type=radio]:checked {
  --forge-state-layer-color: var(--_radio-state-layer-checked-color);
}
.forge-radio input[type=radio]:disabled {
  cursor: not-allowed;
}
.forge-radio input[type=radio]:not(:disabled) {
  --_state-layer-display: var(--forge-state-layer-display, flex);
  --_state-layer-color: var(--forge-state-layer-color, var(--forge-theme-on-surface, #000000));
  --_state-layer-hover-color: var(--forge-state-layer-hover-color, var(--_state-layer-color));
  --_state-layer-hover-opacity: var(--forge-state-layer-hover-opacity, 0.08);
  --_state-layer-pressed-color: var(--forge-state-layer-pressed-color, var(--_state-layer-color));
  --_state-layer-pressed-opacity: var(--forge-state-layer-pressed-opacity, 0.12);
  --_state-layer-hover-duration: var(--forge-state-layer-hover-duration, 15ms);
  --_state-layer-pressed-duration: var(--forge-state-layer-pressed-duration, 105ms);
  --_state-layer-animation-duration: var(--forge-state-layer-animation-duration, 375ms);
  border-radius: var(--_radio-state-layer-shape) !important;
}
.forge-radio input[type=radio]:not(:disabled) {
  opacity: 0;
  position: absolute;
  background-color: var(--_state-layer-hover-color);
  inset: 0;
  transition: opacity var(--_state-layer-hover-duration) linear, background-color var(--_state-layer-hover-duration) linear;
  --_state-layer-hover-duration: var(--forge-state-layer-hover-duration, 100ms);
  opacity: 0;
  border-radius: inherit;
}
.forge-radio input[type=radio]:not(:disabled):hover {
  background-color: var(--_state-layer-hover-color);
  opacity: var(--_state-layer-hover-opacity);
}
.forge-radio input[type=radio]:not(:disabled):active {
  opacity: var(--_state-layer-pressed-opacity);
  transition-duration: var(--_state-layer-pressed-duration);
  --_state-layer-pressed-opacity: var(--forge-state-layer-pressed-opacity, 0.18);
}
.forge-radio::before {
  position: relative;
  align-items: center;
  justify-content: center;
  display: flex;
  border-radius: var(--_radio-shape);
  inline-size: var(--_radio-state-layer-width);
  block-size: var(--_radio-state-layer-height);
  cursor: pointer;
  position: relative;
  display: inline block;
  overflow: hidden;
  transition-duration: var(--_radio-animation-duration);
  transition-delay: var(--_radio-animation-delay);
  transition-timing-function: var(--_radio-animation-timing-function);
  transition-property: border-color;
  box-sizing: border-box;
  border-radius: var(--_radio-shape);
  border-width: var(--_radio-border-width);
  border-style: solid;
  border-color: var(--_radio-unchecked-border-color);
  inline-size: var(--_radio-width);
  block-size: var(--_radio-height);
  background: var(--_radio-background);
  content: "";
}
.forge-radio::before::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  transform-origin: top left;
  transition-duration: var(--_radio-animation-duration);
  transition-delay: var(--_radio-animation-delay);
  transition-timing-function: var(--_radio-animation-timing-function);
  transition-property: opacity, scale;
  border-radius: var(--_radio-shape);
  inline-size: var(--_radio-mark-width);
  block-size: var(--_radio-mark-height);
  background: var(--_radio-mark-color);
  scale: 0.5;
  opacity: 0;
}
.forge-radio:has(input[type=radio]:checked)::before {
  border-color: var(--_radio-checked-border-color);
  background: radial-gradient(circle, var(--_radio-mark-color) 0%, var(--_radio-mark-color) calc(calc(var(--_radio-mark-size) / 1.4) - 0.2px), transparent calc(calc(var(--_radio-mark-size) / 1.4) + 0.2px), transparent 100%);
}
.forge-radio:has(input[type=radio]:checked)::before::after {
  scale: 1;
  opacity: 1;
}
.forge-radio:has(input[type=radio]:disabled) {
  opacity: var(--_radio-disabled-opacity);
}
@keyframes forge-focus-indicator-outward-grow {
  from {
    outline-width: 0;
  }
  to {
    outline-width: var(--_focus-indicator-active-width);
  }
}
@keyframes forge-focus-indicator-outward-shrink {
  from {
    outline-width: var(--_focus-indicator-active-width);
  }
}
@keyframes forge-focus-indicator-inward-grow {
  from {
    border-width: 0;
  }
  to {
    border-width: var(--_focus-indicator-active-width);
  }
}
@keyframes forge-focus-indicator-inward-shrink {
  from {
    border-width: var(--_focus-indicator-active-width);
  }
}
.forge-radio--dense {
  inline-size: var(--_radio-state-layer-dense-width);
  block-size: var(--_radio-state-layer-dense-height);
}
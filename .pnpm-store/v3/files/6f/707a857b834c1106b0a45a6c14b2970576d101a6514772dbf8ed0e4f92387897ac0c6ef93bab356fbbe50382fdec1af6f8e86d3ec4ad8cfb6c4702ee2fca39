// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineSelectComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class SelectComponent {
    /** Controls the label text. */
    set label(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.label = value;
        });
    }
    get label() {
        return this.nativeElement.label;
    }
    /** Controls the placeholder text. */
    set placeholder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.placeholder = value;
        });
    }
    get placeholder() {
        return this.nativeElement.placeholder;
    }
    set readonly(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.readonly = value;
        });
    }
    get readonly() {
        return this.nativeElement.readonly;
    }
    /** Whether the label floats above the field. */
    set floatLabel(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.floatLabel = value;
        });
    }
    get floatLabel() {
        return this.nativeElement.floatLabel;
    }
    /** The density of the field. */
    set density(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.density = value;
        });
    }
    get density() {
        return this.nativeElement.density;
    }
    /** Whether the field is dense. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Whether the field is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether the field is required. */
    set required(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.required = value;
        });
    }
    get required() {
        return this.nativeElement.required;
    }
    /** The position of the label. */
    set labelPosition(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelPosition = value;
        });
    }
    get labelPosition() {
        return this.nativeElement.labelPosition;
    }
    /** Gets/sets the value. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Gets/sets the selected index. */
    set selectedIndex(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectedIndex = value;
        });
    }
    get selectedIndex() {
        return this.nativeElement.selectedIndex;
    }
    /** Gets/sets the available options. */
    set options(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.options = value;
        });
    }
    get options() {
        return this.nativeElement.options;
    }
    /** Gets/sets the multiple select state. */
    set multiple(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.multiple = value;
        });
    }
    get multiple() {
        return this.nativeElement.multiple;
    }
    /** Gets/sets the open state. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Gets/sets the option builder function. */
    set optionBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optionBuilder = value;
        });
    }
    get optionBuilder() {
        return this.nativeElement.optionBuilder;
    }
    /** Gets/sets the selected text builder function. */
    set selectedTextBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectedTextBuilder = value;
        });
    }
    get selectedTextBuilder() {
        return this.nativeElement.selectedTextBuilder;
    }
    /** Gets/sets the before value change callback. */
    set beforeValueChange(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.beforeValueChange = value;
        });
    }
    get beforeValueChange() {
        return this.nativeElement.beforeValueChange;
    }
    /** The alignment of the label. */
    set labelAlignment(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelAlignment = value;
        });
    }
    get labelAlignment() {
        return this.nativeElement.labelAlignment;
    }
    /** Whether the field is invalid. */
    set invalid(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.invalid = value;
        });
    }
    get invalid() {
        return this.nativeElement.invalid;
    }
    /** Whether the field is optional. */
    set optional(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optional = value;
        });
    }
    get optional() {
        return this.nativeElement.optional;
    }
    /** The variant of the field. */
    set variant(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.variant = value;
        });
    }
    get variant() {
        return this.nativeElement.variant;
    }
    /** The theme of the field. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** The shape of the field. */
    set shape(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.shape = value;
        });
    }
    get shape() {
        return this.nativeElement.shape;
    }
    /** Whether the popover icon is displayed. */
    set popoverIcon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popoverIcon = value;
        });
    }
    get popoverIcon() {
        return this.nativeElement.popoverIcon;
    }
    /** The inset of the support text. */
    set supportTextInset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.supportTextInset = value;
        });
    }
    get supportTextInset() {
        return this.nativeElement.supportTextInset;
    }
    setFormValue(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.setFormValue(...args));
    }
    /** Floats the label without an animation. Only applies when the label is inset. */
    floatLabelWithoutAnimation(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.floatLabelWithoutAnimation(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-select element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineSelectComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SelectComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: SelectComponent, selector: "forge-select", inputs: { label: "label", placeholder: "placeholder", readonly: ["readonly", "readonly", booleanAttribute], floatLabel: ["floatLabel", "floatLabel", booleanAttribute], density: "density", dense: ["dense", "dense", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], required: ["required", "required", booleanAttribute], labelPosition: "labelPosition", value: "value", selectedIndex: "selectedIndex", options: "options", multiple: ["multiple", "multiple", booleanAttribute], open: ["open", "open", booleanAttribute], optionBuilder: "optionBuilder", selectedTextBuilder: "selectedTextBuilder", beforeValueChange: "beforeValueChange", labelAlignment: "labelAlignment", invalid: ["invalid", "invalid", booleanAttribute], optional: ["optional", "optional", booleanAttribute], variant: "variant", theme: "theme", shape: "shape", popoverIcon: ["popoverIcon", "popoverIcon", booleanAttribute], supportTextInset: "supportTextInset" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-select',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], readonly: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], floatLabel: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], density: [{
                type: Input
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], labelPosition: [{
                type: Input
            }], value: [{
                type: Input
            }], selectedIndex: [{
                type: Input
            }], options: [{
                type: Input
            }], multiple: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], optionBuilder: [{
                type: Input
            }], selectedTextBuilder: [{
                type: Input
            }], beforeValueChange: [{
                type: Input
            }], labelAlignment: [{
                type: Input
            }], invalid: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], optional: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], variant: [{
                type: Input
            }], theme: [{
                type: Input
            }], shape: [{
                type: Input
            }], popoverIcon: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], supportTextInset: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
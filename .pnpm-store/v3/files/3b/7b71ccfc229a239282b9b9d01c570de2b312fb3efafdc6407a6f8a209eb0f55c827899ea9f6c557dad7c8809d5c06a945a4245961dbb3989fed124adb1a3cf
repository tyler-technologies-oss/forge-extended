/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { IFilePickerComponent } from './file-picker';
import { BaseAdapter, IBaseAdapter } from '../core';
export interface IFilePickerAdapter extends IBaseAdapter {
    registerButtonSlotListener(listener: (evt: Event) => void): void;
    registerInputChangeListener(listener: (evt: Event) => void): void;
    registerDragEnterListener(listener: (evt: DragEvent) => void): void;
    registerDragLeaveListener(listener: (evt: DragEvent) => void): void;
    registerDragOverListener(listener: (evt: DragEvent) => void): void;
    registerDropListener(listener: (evt: DragEvent) => void): void;
    removeDragEnterListener(listener: (evt: DragEvent) => void): void;
    removeDragLeaveListener(listener: (evt: DragEvent) => void): void;
    removeDragOverListener(listener: (evt: DragEvent) => void): void;
    removeDropListener(listener: (evt: DragEvent) => void): void;
    initializeButton(): void;
    setHighlightState(value: boolean): void;
    setAccept(value: string | null | undefined): void;
    setCapture(value: string | null | undefined): void;
    setMultiple(value: boolean): void;
    setDisabled(value: boolean): void;
    setCompact(value: boolean): void;
    setBorderless(value: boolean): void;
}
export declare class FilePickerAdapter extends BaseAdapter<IFilePickerComponent> implements IFilePickerAdapter {
    private _container;
    private _buttonSlot;
    private _button;
    private _input;
    private _inputEventListener;
    constructor(component: IFilePickerComponent);
    registerButtonSlotListener(listener: (evt: Event) => void): void;
    registerInputChangeListener(listener: (evt: Event) => void): void;
    registerDragEnterListener(listener: (evt: DragEvent) => void): void;
    registerDragLeaveListener(listener: (evt: DragEvent) => void): void;
    registerDragOverListener(listener: (evt: DragEvent) => void): void;
    registerDropListener(listener: (evt: DragEvent) => void): void;
    removeDragEnterListener(listener: (evt: DragEvent) => void): void;
    removeDragLeaveListener(listener: (evt: DragEvent) => void): void;
    removeDragOverListener(listener: (evt: DragEvent) => void): void;
    removeDropListener(listener: (evt: DragEvent) => void): void;
    initializeButton(): void;
    /**
     * Sets the highlight state of the file picker.
     * @param value True if the highlight should be applied and false if not.
     */
    setHighlightState(value: boolean): void;
    /**
     * Sets the accept attribute of the input.
     * @param value The accept string.
     */
    setAccept(value: string | null | undefined): void;
    /**
     * Sets the capture attribute of the input.
     * @param value The capture string.
     */
    setCapture(value: string | null | undefined): void;
    /**
     * Sets the multiple attribute of the input.
     * @param value The multiple state.
     */
    setMultiple(value: boolean): void;
    /**
     * Sets the disabled state of the file picker.
     * @param value The disabled state.
     */
    setDisabled(value: boolean): void;
    /**
     * Sets the compact state of the file picker.
     * @param value The compact state.
     */
    setCompact(value: boolean): void;
    /**
     * Sets the borderless state of the file picker.
     * @param value The borderless state.
     */
    setBorderless(value: boolean): void;
}

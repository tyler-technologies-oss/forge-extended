// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { definePaginatorComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class PaginatorComponent {
    /** The zero-based page index. */
    set pageIndex(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.pageIndex = value;
        });
    }
    get pageIndex() {
        return this.nativeElement.pageIndex;
    }
    /** Number of items to display on a page. */
    set pageSize(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.pageSize = value;
        });
    }
    get pageSize() {
        return this.nativeElement.pageSize;
    }
    /** Sets page index by providing the number of items to skip. The getter for this property returns the number of items to skip. */
    set offset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.offset = value;
        });
    }
    get offset() {
        return this.nativeElement.offset;
    }
    /** The total number of items to be paginated. */
    set total(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.total = value;
        });
    }
    get total() {
        return this.nativeElement.total;
    }
    /** The set of provided page size options to display to the user. */
    set pageSizeOptions(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.pageSizeOptions = value;
        });
    }
    get pageSizeOptions() {
        return this.nativeElement.pageSizeOptions;
    }
    /** A label for the paginator. */
    set label(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.label = value;
        });
    }
    get label() {
        return this.nativeElement.label;
    }
    /** Whether to show the first page and last page buttons. */
    set firstLast(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.firstLast = value;
        });
    }
    get firstLast() {
        return this.nativeElement.firstLast;
    }
    /** Whether to show the first page button. Default is false. */
    set first(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.first = value;
        });
    }
    get first() {
        return this.nativeElement.first;
    }
    /** Whether the paginator is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether to use the alternative range label slot. */
    set alternative(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.alternative = value;
        });
    }
    get alternative() {
        return this.nativeElement.alternative;
    }
    /** A callback function to build the range label dynamically. */
    set rangeLabelCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.rangeLabelCallback = value;
        });
    }
    get rangeLabelCallback() {
        return this.nativeElement.rangeLabelCallback;
    }
    /** Sets focus to the first focusable element within the paginator. */
    focus(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-paginator element. */
        this.nativeElement = this.elementRef.nativeElement;
        definePaginatorComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: PaginatorComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: PaginatorComponent, selector: "forge-paginator", inputs: { pageIndex: ["pageIndex", "pageIndex", numberAttribute], pageSize: ["pageSize", "pageSize", numberAttribute], offset: ["offset", "offset", numberAttribute], total: ["total", "total", numberAttribute], pageSizeOptions: "pageSizeOptions", label: "label", firstLast: ["firstLast", "firstLast", booleanAttribute], first: ["first", "first", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], alternative: ["alternative", "alternative", booleanAttribute], rangeLabelCallback: "rangeLabelCallback" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: PaginatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-paginator',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { pageIndex: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], pageSize: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], offset: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], total: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], pageSizeOptions: [{
                type: Input
            }], label: [{
                type: Input
            }], firstLast: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], first: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], alternative: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], rangeLabelCallback: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
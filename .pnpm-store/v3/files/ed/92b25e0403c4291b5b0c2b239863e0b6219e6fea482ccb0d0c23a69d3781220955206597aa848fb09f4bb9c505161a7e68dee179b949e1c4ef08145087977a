/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { __decorate } from "tslib";
import { coerceBoolean, customElement, coreProperty } from '@tylertech/forge-core';
import { KeyboardShortcutAdapter } from './keyboard-shortcut-adapter';
import { KeyboardShortcutCore } from './keyboard-shortcut-core';
import { KEYBOARD_SHORTCUT_CONSTANTS } from './keyboard-shortcut-constants';
import { BaseComponent } from '../core/base/base-component';
/**
 * @tag forge-keyboard-shortcut
 *
 * @event {CustomEvent<KeyboardEvent>} forge-keyboard-shortcut-activate - Event fired when the keyboard shortcut is activated.
 */
let KeyboardShortcutComponent = class KeyboardShortcutComponent extends BaseComponent {
    static get observedAttributes() {
        return Object.values(KEYBOARD_SHORTCUT_CONSTANTS.observedAttributes);
    }
    constructor() {
        super();
        this._core = new KeyboardShortcutCore(new KeyboardShortcutAdapter(this));
    }
    connectedCallback() {
        this._core.initialize();
    }
    disconnectedCallback() {
        this._core.destroy();
    }
    attributeChangedCallback(name, oldValue, newValue) {
        switch (name) {
            case KEYBOARD_SHORTCUT_CONSTANTS.observedAttributes.KEY:
                this.key = newValue;
                break;
            case KEYBOARD_SHORTCUT_CONSTANTS.observedAttributes.TARGET:
                this.target = newValue;
                break;
            case KEYBOARD_SHORTCUT_CONSTANTS.observedAttributes.GLOBAL:
                this.global = coerceBoolean(newValue);
                break;
            case KEYBOARD_SHORTCUT_CONSTANTS.observedAttributes.ALLOW_WHILE_TYPING:
                this.allowWhileTyping = coerceBoolean(newValue);
                break;
            case KEYBOARD_SHORTCUT_CONSTANTS.observedAttributes.PREVENT_DEFAULT:
                this.preventDefault = coerceBoolean(newValue);
                break;
            case KEYBOARD_SHORTCUT_CONSTANTS.observedAttributes.CAPTURE:
                this.capture = coerceBoolean(newValue);
                break;
            case KEYBOARD_SHORTCUT_CONSTANTS.observedAttributes.USE_CODE:
                this.useCode = coerceBoolean(newValue);
                break;
            case KEYBOARD_SHORTCUT_CONSTANTS.observedAttributes.DISABLED:
                this.disabled = coerceBoolean(newValue);
                break;
        }
    }
    /**
     * Alias for key.
     * @attribute key-binding
     *
     */
    get keyBinding() {
        return this.key;
    }
    set keyBinding(value) {
        this.key = value;
    }
};
__decorate([
    coreProperty()
], KeyboardShortcutComponent.prototype, "key", void 0);
__decorate([
    coreProperty()
], KeyboardShortcutComponent.prototype, "target", void 0);
__decorate([
    coreProperty()
], KeyboardShortcutComponent.prototype, "global", void 0);
__decorate([
    coreProperty()
], KeyboardShortcutComponent.prototype, "allowWhileTyping", void 0);
__decorate([
    coreProperty()
], KeyboardShortcutComponent.prototype, "preventDefault", void 0);
__decorate([
    coreProperty()
], KeyboardShortcutComponent.prototype, "capture", void 0);
__decorate([
    coreProperty()
], KeyboardShortcutComponent.prototype, "useCode", void 0);
__decorate([
    coreProperty()
], KeyboardShortcutComponent.prototype, "disabled", void 0);
__decorate([
    coreProperty()
], KeyboardShortcutComponent.prototype, "activateCallback", void 0);
KeyboardShortcutComponent = __decorate([
    customElement({
        name: KEYBOARD_SHORTCUT_CONSTANTS.elementName
    })
], KeyboardShortcutComponent);
export { KeyboardShortcutComponent };

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineBottomSheetComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class BottomSheetComponent {
    /** Whether the bottom sheet is open. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** The mode of the bottom sheet. */
    set mode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.mode = value;
        });
    }
    get mode() {
        return this.nativeElement.mode;
    }
    /** Whether the bottom sheet is persistent. */
    set persistent(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.persistent = value;
        });
    }
    get persistent() {
        return this.nativeElement.persistent;
    }
    /** Whether the bottom sheet is fullscreen. */
    set fullscreen(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fullscreen = value;
        });
    }
    get fullscreen() {
        return this.nativeElement.fullscreen;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-bottom-sheet element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineBottomSheetComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: BottomSheetComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: BottomSheetComponent, selector: "forge-bottom-sheet", inputs: { open: ["open", "open", booleanAttribute], mode: "mode", persistent: ["persistent", "persistent", booleanAttribute], fullscreen: ["fullscreen", "fullscreen", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: BottomSheetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-bottom-sheet',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], mode: [{
                type: Input
            }], persistent: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], fullscreen: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90dG9tLXNoZWV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9ib3R0b20tc2hlZXQvYm90dG9tLXNoZWV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBNkQsMEJBQTBCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFekgsT0FBTztBQU1QLE1BQU0sT0FBTyxvQkFBb0I7SUFLaEMsd0NBQXdDO0lBQ3hDLElBQ1csSUFBSSxDQUFDLEtBQWdEO1FBQy9ELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLElBQUk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxvQ0FBb0M7SUFDcEMsSUFDVyxJQUFJLENBQUMsS0FBZ0Q7UUFDL0QsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsSUFBSTtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7SUFDaEMsQ0FBQztJQUVELDhDQUE4QztJQUM5QyxJQUNXLFVBQVUsQ0FBQyxLQUFzRDtRQUMzRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxVQUFVO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7SUFDdEMsQ0FBQztJQUVELDhDQUE4QztJQUM5QyxJQUNXLFVBQVUsQ0FBQyxLQUFzRDtRQUMzRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxVQUFVO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7SUFDdEMsQ0FBQztJQUVELFlBQ0MsaUJBQW9DLEVBQzFCLFVBQXlELEVBQ3pELElBQVk7UUFEWixlQUFVLEdBQVYsVUFBVSxDQUErQztRQUN6RCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBbER2QixzQ0FBc0M7UUFDdEIsa0JBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQW1EN0QsMEJBQTBCLEVBQUUsQ0FBQztRQUM3QixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QixDQUFDOzhHQXhEVyxvQkFBb0I7a0dBQXBCLG9CQUFvQixtRUFNWixnQkFBZ0IsMERBc0JoQixnQkFBZ0IsNENBV2hCLGdCQUFnQiw2QkF6Q3pCLDJCQUEyQjs7MkZBRTFCLG9CQUFvQjtrQkFMaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7b0lBUVcsSUFBSTtzQkFEZCxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQVkzQixJQUFJO3NCQURkLEtBQUs7Z0JBWUssVUFBVTtzQkFEcEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsVUFBVTtzQkFEcEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJvdHRvbVNoZWV0Q29tcG9uZW50IGFzIEJvdHRvbVNoZWV0Q29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lQm90dG9tU2hlZXRDb21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2UtYm90dG9tLXNoZWV0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgQm90dG9tU2hlZXRDb21wb25lbnQge1xuXG5cdC8qKiBUaGUgZm9yZ2UtYm90dG9tLXNoZWV0IGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIFdoZXRoZXIgdGhlIGJvdHRvbSBzaGVldCBpcyBvcGVuLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBvcGVuKHZhbHVlOiBCb3R0b21TaGVldENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ29wZW4nXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQub3BlbiA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgb3BlbigpOiBCb3R0b21TaGVldENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ29wZW4nXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5vcGVuO1xuXHR9XG5cblx0LyoqIFRoZSBtb2RlIG9mIHRoZSBib3R0b20gc2hlZXQuICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgbW9kZSh2YWx1ZTogQm90dG9tU2hlZXRDb21wb25lbnRDdXN0b21FbGVtZW50Wydtb2RlJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50Lm1vZGUgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IG1vZGUoKTogQm90dG9tU2hlZXRDb21wb25lbnRDdXN0b21FbGVtZW50Wydtb2RlJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQubW9kZTtcblx0fVxuXG5cdC8qKiBXaGV0aGVyIHRoZSBib3R0b20gc2hlZXQgaXMgcGVyc2lzdGVudC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgcGVyc2lzdGVudCh2YWx1ZTogQm90dG9tU2hlZXRDb21wb25lbnRDdXN0b21FbGVtZW50WydwZXJzaXN0ZW50J10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnBlcnNpc3RlbnQgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHBlcnNpc3RlbnQoKTogQm90dG9tU2hlZXRDb21wb25lbnRDdXN0b21FbGVtZW50WydwZXJzaXN0ZW50J10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQucGVyc2lzdGVudDtcblx0fVxuXG5cdC8qKiBXaGV0aGVyIHRoZSBib3R0b20gc2hlZXQgaXMgZnVsbHNjcmVlbi4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgZnVsbHNjcmVlbih2YWx1ZTogQm90dG9tU2hlZXRDb21wb25lbnRDdXN0b21FbGVtZW50WydmdWxsc2NyZWVuJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmZ1bGxzY3JlZW4gPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGZ1bGxzY3JlZW4oKTogQm90dG9tU2hlZXRDb21wb25lbnRDdXN0b21FbGVtZW50WydmdWxsc2NyZWVuJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuZnVsbHNjcmVlbjtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxCb3R0b21TaGVldENvbXBvbmVudEN1c3RvbUVsZW1lbnQ+LFxuXHRcdHByb3RlY3RlZCB6b25lOiBOZ1pvbmVcblx0KSB7XG5cdFx0ZGVmaW5lQm90dG9tU2hlZXRDb21wb25lbnQoKTtcblx0XHRjaGFuZ2VEZXRlY3RvclJlZi5kZXRhY2goKTtcblx0fVxufVxuIl19
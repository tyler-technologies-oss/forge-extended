// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineStepperComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class StepperComponent {
    /** The step configurations. */
    set steps(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.steps = value;
        });
    }
    get steps() {
        return this.nativeElement.steps;
    }
    /** The active step index. */
    set selectedIndex(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectedIndex = value;
        });
    }
    get selectedIndex() {
        return this.nativeElement.selectedIndex;
    }
    /** Whether the stepper is linear or non-linear. */
    set linear(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.linear = value;
        });
    }
    get linear() {
        return this.nativeElement.linear;
    }
    /** Whether the stepper uses the default or alternative label layout mode. */
    set alternative(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.alternative = value;
        });
    }
    get alternative() {
        return this.nativeElement.alternative;
    }
    /** The layout mode of the stepper. */
    set layoutMode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.layoutMode = value;
        });
    }
    get layoutMode() {
        return this.nativeElement.layoutMode;
    }
    /** The layout alignment of the stepper. */
    set layoutAlign(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.layoutAlign = value;
        });
    }
    get layoutAlign() {
        return this.nativeElement.layoutAlign;
    }
    /** Whether the stepper is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether the stepper is vertical. */
    set vertical(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.vertical = value;
        });
    }
    get vertical() {
        return this.nativeElement.vertical;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-stepper element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineStepperComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: StepperComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: StepperComponent, selector: "forge-stepper", inputs: { steps: "steps", selectedIndex: ["selectedIndex", "selectedIndex", numberAttribute], linear: ["linear", "linear", booleanAttribute], alternative: ["alternative", "alternative", booleanAttribute], layoutMode: "layoutMode", layoutAlign: "layoutAlign", disabled: ["disabled", "disabled", booleanAttribute], vertical: ["vertical", "vertical", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: StepperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-stepper',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { steps: [{
                type: Input
            }], selectedIndex: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], linear: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], alternative: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], layoutMode: [{
                type: Input
            }], layoutAlign: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], vertical: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { OptionComponent as OptionComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class OptionComponent {
    protected elementRef: ElementRef<OptionComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-option element. */
    readonly nativeElement: OptionComponentCustomElement;
    /** Gets/sets the value of this option. */
    set value(value: OptionComponentCustomElement['value']);
    get value(): OptionComponentCustomElement['value'];
    /** Gets/sets the label of this option. */
    set label(value: OptionComponentCustomElement['label']);
    get label(): OptionComponentCustomElement['label'];
    /** Gets/sets the secondary label of this option. */
    set secondaryLabel(value: OptionComponentCustomElement['secondaryLabel']);
    get secondaryLabel(): OptionComponentCustomElement['secondaryLabel'];
    /** Gets/sets the disabled status of this option. */
    set disabled(value: OptionComponentCustomElement['disabled']);
    get disabled(): OptionComponentCustomElement['disabled'];
    /** Gets/sets the whether this option is a divider. */
    set divider(value: OptionComponentCustomElement['divider']);
    get divider(): OptionComponentCustomElement['divider'];
    /** Gets/sets the classes of this option. */
    set optionClass(value: OptionComponentCustomElement['optionClass']);
    get optionClass(): OptionComponentCustomElement['optionClass'];
    /** Gets/sets the leading icon of this option. */
    set leadingIcon(value: OptionComponentCustomElement['leadingIcon']);
    get leadingIcon(): OptionComponentCustomElement['leadingIcon'];
    /** Gets/sets the leading icon class of this option. */
    set leadingIconClass(value: OptionComponentCustomElement['leadingIconClass']);
    get leadingIconClass(): OptionComponentCustomElement['leadingIconClass'];
    /** Gets/sets the leading icon type of this option. */
    set leadingIconType(value: OptionComponentCustomElement['leadingIconType']);
    get leadingIconType(): OptionComponentCustomElement['leadingIconType'];
    /** Gets/sets properties on leading icon component. */
    set leadingIconComponentProps(value: OptionComponentCustomElement['leadingIconComponentProps']);
    get leadingIconComponentProps(): OptionComponentCustomElement['leadingIconComponentProps'];
    /** Gets/sets the trailing icon of this option. */
    set trailingIcon(value: OptionComponentCustomElement['trailingIcon']);
    get trailingIcon(): OptionComponentCustomElement['trailingIcon'];
    /** Gets/sets the trailing icon class of this option. */
    set trailingIconClass(value: OptionComponentCustomElement['trailingIconClass']);
    get trailingIconClass(): OptionComponentCustomElement['trailingIconClass'];
    /** Gets/sets the trailing icon type of this option. */
    set trailingIconType(value: OptionComponentCustomElement['trailingIconType']);
    get trailingIconType(): OptionComponentCustomElement['trailingIconType'];
    /** Gets/sets properties on trailing icon component. */
    set trailingIconComponentProps(value: OptionComponentCustomElement['trailingIconComponentProps']);
    get trailingIconComponentProps(): OptionComponentCustomElement['trailingIconComponentProps'];
    /** Gets/sets the leading builder of this option. */
    set leadingBuilder(value: OptionComponentCustomElement['leadingBuilder']);
    get leadingBuilder(): OptionComponentCustomElement['leadingBuilder'];
    /** Gets/sets the trailing builder of this option. */
    set trailingBuilder(value: OptionComponentCustomElement['trailingBuilder']);
    get trailingBuilder(): OptionComponentCustomElement['trailingBuilder'];
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<OptionComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<OptionComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OptionComponent, "forge-option", never, { "value": { "alias": "value"; "required": false; }; "label": { "alias": "label"; "required": false; }; "secondaryLabel": { "alias": "secondaryLabel"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "divider": { "alias": "divider"; "required": false; }; "optionClass": { "alias": "optionClass"; "required": false; }; "leadingIcon": { "alias": "leadingIcon"; "required": false; }; "leadingIconClass": { "alias": "leadingIconClass"; "required": false; }; "leadingIconType": { "alias": "leadingIconType"; "required": false; }; "leadingIconComponentProps": { "alias": "leadingIconComponentProps"; "required": false; }; "trailingIcon": { "alias": "trailingIcon"; "required": false; }; "trailingIconClass": { "alias": "trailingIconClass"; "required": false; }; "trailingIconType": { "alias": "trailingIconType"; "required": false; }; "trailingIconComponentProps": { "alias": "trailingIconComponentProps"; "required": false; }; "leadingBuilder": { "alias": "leadingBuilder"; "required": false; }; "trailingBuilder": { "alias": "trailingBuilder"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_divider: unknown;
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineStateLayerComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class StateLayerComponent {
    /** The element to attach the state layer to. */
    set targetElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.targetElement = value;
        });
    }
    get targetElement() {
        return this.nativeElement.targetElement;
    }
    /** The id of the element to attach the state layer to. */
    set target(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.target = value;
        });
    }
    get target() {
        return this.nativeElement.target;
    }
    /** Controls whether the state layer is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /**
     * Triggers the animation to run.
     *
     * Note: If coordinates are not provided, the transition will originate from the center of the target element.
     */
    playAnimation(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.playAnimation(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-state-layer element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineStateLayerComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: StateLayerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: StateLayerComponent, selector: "forge-state-layer", inputs: { targetElement: "targetElement", target: "target", disabled: ["disabled", "disabled", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: StateLayerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-state-layer',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { targetElement: [{
                type: Input
            }], target: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtbGF5ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL3N0YXRlLWxheWVyL3N0YXRlLWxheWVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBMkQseUJBQXlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFdEgsT0FBTztBQU1QLE1BQU0sT0FBTyxtQkFBbUI7SUFLL0IsZ0RBQWdEO0lBQ2hELElBQ1csYUFBYSxDQUFDLEtBQXdEO1FBQ2hGLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLGFBQWE7UUFDdkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQztJQUN6QyxDQUFDO0lBRUQsMERBQTBEO0lBQzFELElBQ1csTUFBTSxDQUFDLEtBQWlEO1FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLE1BQU07UUFDaEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztJQUNsQyxDQUFDO0lBRUQsb0RBQW9EO0lBQ3BELElBQ1csUUFBUSxDQUFDLEtBQW1EO1FBQ3RFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLFFBQVE7UUFDbEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLGFBQWEsQ0FBQyxHQUFHLElBQW1FO1FBQzFGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVELFlBQ0MsaUJBQW9DLEVBQzFCLFVBQXdELEVBQ3hELElBQVk7UUFEWixlQUFVLEdBQVYsVUFBVSxDQUE4QztRQUN4RCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBaER2QixxQ0FBcUM7UUFDckIsa0JBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQWlEN0QseUJBQXlCLEVBQUUsQ0FBQztRQUM1QixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QixDQUFDOzhHQXREVyxtQkFBbUI7a0dBQW5CLG1CQUFtQixnSUE0QlgsZ0JBQWdCLDZCQTlCekIsMkJBQTJCOzsyRkFFMUIsbUJBQW1CO2tCQUwvQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0QztvSUFRVyxhQUFhO3NCQUR2QixLQUFLO2dCQVlLLE1BQU07c0JBRGhCLEtBQUs7Z0JBWUssUUFBUTtzQkFEbEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0YXRlTGF5ZXJDb21wb25lbnQgYXMgU3RhdGVMYXllckNvbXBvbmVudEN1c3RvbUVsZW1lbnQsIGRlZmluZVN0YXRlTGF5ZXJDb21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2Utc3RhdGUtbGF5ZXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBTdGF0ZUxheWVyQ29tcG9uZW50IHtcblxuXHQvKiogVGhlIGZvcmdlLXN0YXRlLWxheWVyIGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIFRoZSBlbGVtZW50IHRvIGF0dGFjaCB0aGUgc3RhdGUgbGF5ZXIgdG8uICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgdGFyZ2V0RWxlbWVudCh2YWx1ZTogU3RhdGVMYXllckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RhcmdldEVsZW1lbnQnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQudGFyZ2V0RWxlbWVudCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgdGFyZ2V0RWxlbWVudCgpOiBTdGF0ZUxheWVyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsndGFyZ2V0RWxlbWVudCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnRhcmdldEVsZW1lbnQ7XG5cdH1cblxuXHQvKiogVGhlIGlkIG9mIHRoZSBlbGVtZW50IHRvIGF0dGFjaCB0aGUgc3RhdGUgbGF5ZXIgdG8uICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgdGFyZ2V0KHZhbHVlOiBTdGF0ZUxheWVyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsndGFyZ2V0J10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnRhcmdldCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgdGFyZ2V0KCk6IFN0YXRlTGF5ZXJDb21wb25lbnRDdXN0b21FbGVtZW50Wyd0YXJnZXQnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC50YXJnZXQ7XG5cdH1cblxuXHQvKiogQ29udHJvbHMgd2hldGhlciB0aGUgc3RhdGUgbGF5ZXIgaXMgZGlzYWJsZWQuICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IGRpc2FibGVkKHZhbHVlOiBTdGF0ZUxheWVyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZGlzYWJsZWQnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQuZGlzYWJsZWQgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGRpc2FibGVkKCk6IFN0YXRlTGF5ZXJDb21wb25lbnRDdXN0b21FbGVtZW50WydkaXNhYmxlZCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmRpc2FibGVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRyaWdnZXJzIHRoZSBhbmltYXRpb24gdG8gcnVuLlxuXHQgKiBcblx0ICogTm90ZTogSWYgY29vcmRpbmF0ZXMgYXJlIG5vdCBwcm92aWRlZCwgdGhlIHRyYW5zaXRpb24gd2lsbCBvcmlnaW5hdGUgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSB0YXJnZXQgZWxlbWVudC5cblx0ICovXG5cdHB1YmxpYyBwbGF5QW5pbWF0aW9uKC4uLmFyZ3M6IFBhcmFtZXRlcnM8U3RhdGVMYXllckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3BsYXlBbmltYXRpb24nXT4pOiBSZXR1cm5UeXBlPFN0YXRlTGF5ZXJDb21wb25lbnRDdXN0b21FbGVtZW50WydwbGF5QW5pbWF0aW9uJ10+IHtcblx0XHRyZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMubmF0aXZlRWxlbWVudC5wbGF5QW5pbWF0aW9uKC4uLmFyZ3MpKTtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxTdGF0ZUxheWVyQ29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVTdGF0ZUxheWVyQ29tcG9uZW50KCk7XG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWYuZGV0YWNoKCk7XG5cdH1cbn1cbiJdfQ==
import { DestroyRef, Injectable, createComponent, createEnvironmentInjector, inject } from '@angular/core';
import { defineDialogComponent } from '@tylertech/forge';
import { DIALOG_DATA, DialogConfig } from './dialog-config';
import { DialogRef } from './dialog-ref';
import { take } from 'rxjs';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
const MAX_NESTED_DIALOGS = 2;
/**
 * Provides facilities for working with a Forge dialog and placing dynamic components within it.
 */
export class DialogService {
    constructor(_appRef, _injector, _ngZone) {
        this._appRef = _appRef;
        this._injector = _injector;
        this._ngZone = _ngZone;
        this._openDialogRefs = [];
        this._destroyRef = inject(DestroyRef);
        defineDialogComponent();
    }
    /**
     * Displays a component within a Forge dialog instance.
     * @deprecated Use `open()` instead.
     * @param component The component reference.
     * @param config The configuration to provide to the dynamic component as an injectable token.
     * @param moduleRef Optional NgModule ref if need by the component.
     * @param envInjector Optional environment injector to provide to the component.
     * @returns A reference for interacting with the created dialog.
     */
    show(component, options, config, moduleRef, envInjector) {
        return this.open(component, { options, config, module: moduleRef, injector: envInjector });
    }
    /**
     * Opens a Forge dialog with the provided component.
     * @param component The component reference.
     * @param configuration The configuration for the dialog.
     * @returns A reference for interacting with the created dialog.
     */
    open(component, configuration = {}) {
        const dialogRef = this._showDialog(component, configuration);
        this._openDialogRefs.push(dialogRef);
        dialogRef.afterClosed.pipe(take(1), takeUntilDestroyed(this._destroyRef)).subscribe(() => this._removeDialogRef(dialogRef));
        return dialogRef;
    }
    _showDialog(component, { config, data, injector, elementInjector, module, options }) {
        // Contains tokens that will be provided to components through our custom dialog injector
        const providers = [];
        // Since config and data can be provided separately, we should create a config with data if only data was provided
        if (!config && data != null) {
            config = { data };
        }
        // If we got a config, we should provide it as an injection token
        if (config) {
            providers.push({ provide: DialogConfig, useValue: config });
        }
        // If we got data, we should also provide it as a injection token on its own
        if (data != null) {
            providers.push({ provide: DIALOG_DATA, useValue: data });
        }
        // Create the Forge dialog element
        const dialogElement = document.createElement('forge-dialog');
        // Configure the dialog with the provided options
        if (options) {
            const { dialogClass, attributes, ...restOptions } = options;
            if (dialogClass) {
                dialogElement.classList.add(dialogClass);
            }
            if (attributes) {
                attributes.forEach((value, key) => dialogElement.setAttribute(key, value));
            }
            Object.assign(dialogElement, restOptions);
        }
        // Create the ref that will allow the consumer to control the dialog
        const dialogRef = new DialogRef(dialogElement);
        // Always provide the dialog ref as an injection token
        providers.push({ provide: DialogRef, useValue: dialogRef });
        // Create and attach the dynamic component to the dialog element
        this._ngZone.run(() => {
            const parentInjector = injector ?? module?.injector ?? this._injector;
            const environmentInjector = createEnvironmentInjector(providers, parentInjector);
            const componentRef = createComponent(component, { environmentInjector, elementInjector });
            dialogRef.componentInstance = componentRef.instance;
            this._appRef.attachView(componentRef.hostView);
            const element = componentRef.hostView.rootNodes[0];
            dialogElement.appendChild(element);
            dialogElement.addEventListener('forge-dialog-close', () => {
                if (!dialogRef.isClosed) {
                    dialogRef.close();
                }
                componentRef.destroy();
                dialogElement.remove();
            });
        });
        dialogElement.open = true;
        document.body.appendChild(dialogElement);
        return dialogRef;
    }
    /**
     * Closes all dialogs.
     * @param result The result of closing the dialogs. Default is false.
     */
    closeAllDialogs(result = false) {
        this._closeAllDialogs(result);
    }
    // While multiple dialogs is an anti-UX pattern, this is a minimal safeguard to protect against dirty dialogs
    _closeAllDialogs(result, recursiveExecutionCount = 0) {
        if (recursiveExecutionCount > MAX_NESTED_DIALOGS) {
            throw new Error('Could not close all dialogs. Reason: Too many nested dialogs.');
        }
        this._openDialogRefs.forEach(ref => ref.close(result));
        // This is here to close any dialogs that open as a result of other dialogs closing
        // e.g. A dirty dialog opening when a dirty form dialog closes.
        if (this._openDialogRefs.length > 0) {
            this._closeAllDialogs(result, ++recursiveExecutionCount);
        }
    }
    _removeDialogRef(ref) {
        const index = this._openDialogRefs.findIndex(dlgRef => ref === dlgRef);
        if (index < 0) {
            return;
        }
        this._openDialogRefs.splice(index, 1);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DialogService, deps: [{ token: i0.ApplicationRef }, { token: i0.EnvironmentInjector }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DialogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DialogService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i0.ApplicationRef }, { type: i0.EnvironmentInjector }, { type: i0.NgZone }] });
//# sourceMappingURL=data:application/json;base64,
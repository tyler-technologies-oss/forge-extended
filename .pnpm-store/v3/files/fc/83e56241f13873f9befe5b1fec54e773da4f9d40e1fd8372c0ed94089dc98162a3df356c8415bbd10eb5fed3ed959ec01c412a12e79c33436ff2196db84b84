import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { ChipComponent as ChipComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class ChipComponent {
    protected elementRef: ElementRef<ChipComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-chip element. */
    readonly nativeElement: ChipComponentCustomElement;
    /** The type of chip. */
    set type(value: ChipComponentCustomElement['type']);
    get type(): ChipComponentCustomElement['type'];
    /** The value of the chip. */
    set value(value: ChipComponentCustomElement['value']);
    get value(): ChipComponentCustomElement['value'];
    /** Whether the chip is selected. */
    set selected(value: ChipComponentCustomElement['selected']);
    get selected(): ChipComponentCustomElement['selected'];
    /** Whether the chip is invalid. */
    set invalid(value: ChipComponentCustomElement['invalid']);
    get invalid(): ChipComponentCustomElement['invalid'];
    /** Whether the chip is disabled. */
    set disabled(value: ChipComponentCustomElement['disabled']);
    get disabled(): ChipComponentCustomElement['disabled'];
    /** Whether the chip is dense. */
    set dense(value: ChipComponentCustomElement['dense']);
    get dense(): ChipComponentCustomElement['dense'];
    /** The theme of the chip. */
    set theme(value: ChipComponentCustomElement['theme']);
    get theme(): ChipComponentCustomElement['theme'];
    /** The href of the chip. */
    set href(value: ChipComponentCustomElement['href']);
    get href(): ChipComponentCustomElement['href'];
    /** The target of the chip. */
    set target(value: ChipComponentCustomElement['target']);
    get target(): ChipComponentCustomElement['target'];
    /** The download of the chip. */
    set download(value: ChipComponentCustomElement['download']);
    get download(): ChipComponentCustomElement['download'];
    /** The rel of the chip. */
    set rel(value: ChipComponentCustomElement['rel']);
    get rel(): ChipComponentCustomElement['rel'];
    focus(...args: Parameters<ChipComponentCustomElement['focus']>): ReturnType<ChipComponentCustomElement['focus']>;
    focusRemoveButton(...args: Parameters<ChipComponentCustomElement['focusRemoveButton']>): ReturnType<ChipComponentCustomElement['focusRemoveButton']>;
    click(...args: Parameters<ChipComponentCustomElement['click']>): ReturnType<ChipComponentCustomElement['click']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<ChipComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<ChipComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ChipComponent, "forge-chip", never, { "type": { "alias": "type"; "required": false; }; "value": { "alias": "value"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "invalid": { "alias": "invalid"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "dense": { "alias": "dense"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; "href": { "alias": "href"; "required": false; }; "target": { "alias": "target"; "required": false; }; "download": { "alias": "download"; "required": false; }; "rel": { "alias": "rel"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_selected: unknown;
    static ngAcceptInputType_invalid: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_dense: unknown;
}

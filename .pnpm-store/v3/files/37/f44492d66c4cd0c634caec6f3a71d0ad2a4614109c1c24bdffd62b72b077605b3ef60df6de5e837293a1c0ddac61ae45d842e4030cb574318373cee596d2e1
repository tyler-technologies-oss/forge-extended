// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineToastComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ToastComponent {
    /** The open state. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** The duration in milliseconds that the toast is displayed. */
    set duration(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.duration = value;
        });
    }
    get duration() {
        return this.nativeElement.duration;
    }
    /** The placement of the toast. */
    set placement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.placement = value;
        });
    }
    get placement() {
        return this.nativeElement.placement;
    }
    /** The text for the action button. This controls the visibility of the action button. */
    set actionText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.actionText = value;
        });
    }
    get actionText() {
        return this.nativeElement.actionText;
    }
    /** Whether the toast is dismissible (displays a close button). */
    set dismissible(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dismissible = value;
        });
    }
    get dismissible() {
        return this.nativeElement.dismissible;
    }
    /** The accessible label for the dismiss button. */
    set dismissLabel(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dismissLabel = value;
        });
    }
    get dismissLabel() {
        return this.nativeElement.dismissLabel;
    }
    /** The theme of the toast. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** Shows the toast. */
    show(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.show(...args));
    }
    /** Hides the toast. */
    hide(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.hide(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-toast element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineToastComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ToastComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ToastComponent, selector: "forge-toast", inputs: { open: ["open", "open", booleanAttribute], duration: ["duration", "duration", numberAttribute], placement: "placement", actionText: "actionText", dismissible: ["dismissible", "dismissible", booleanAttribute], dismissLabel: "dismissLabel", theme: "theme" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ToastComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-toast',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], duration: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], placement: [{
                type: Input
            }], actionText: [{
                type: Input
            }], dismissible: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dismissLabel: [{
                type: Input
            }], theme: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
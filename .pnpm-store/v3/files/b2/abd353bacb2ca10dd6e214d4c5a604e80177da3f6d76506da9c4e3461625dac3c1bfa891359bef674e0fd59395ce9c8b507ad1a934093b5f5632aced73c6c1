// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineCheckboxComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class CheckboxComponent {
    /** Gets/sets whether the checkbox is checked. */
    set checked(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.checked = value;
        });
    }
    get checked() {
        return this.nativeElement.checked;
    }
    /** Gets/sets whether the checkbox is checked by default. */
    set defaultChecked(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.defaultChecked = value;
        });
    }
    get defaultChecked() {
        return this.nativeElement.defaultChecked;
    }
    /** Gets/sets the indeterminate state. */
    set indeterminate(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.indeterminate = value;
        });
    }
    get indeterminate() {
        return this.nativeElement.indeterminate;
    }
    /** Controls the value submitted with a form when checked. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Controls whether the checkbox is dense. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Controls whether the checkbox is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Controls whether the checkbox is required. */
    set required(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.required = value;
        });
    }
    get required() {
        return this.nativeElement.required;
    }
    /** Controls whether the checkbox is readonly. */
    set readonly(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.readonly = value;
        });
    }
    get readonly() {
        return this.nativeElement.readonly;
    }
    /** Controls whether the label appears before or after the checkbox. */
    set labelPosition(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelPosition = value;
        });
    }
    get labelPosition() {
        return this.nativeElement.labelPosition;
    }
    /** Toggles the checkbox checked or unchecked. */
    toggle(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.toggle(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-checkbox element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineCheckboxComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: CheckboxComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: CheckboxComponent, selector: "forge-checkbox", inputs: { checked: ["checked", "checked", booleanAttribute], defaultChecked: ["defaultChecked", "defaultChecked", booleanAttribute], indeterminate: ["indeterminate", "indeterminate", booleanAttribute], value: "value", dense: ["dense", "dense", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], required: ["required", "required", booleanAttribute], readonly: ["readonly", "readonly", booleanAttribute], labelPosition: "labelPosition" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: CheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-checkbox',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { checked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], defaultChecked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], indeterminate: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], value: [{
                type: Input
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], readonly: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], labelPosition: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL2NoZWNrYm94L2NoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBdUQsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFaEgsT0FBTztBQU1QLE1BQU0sT0FBTyxpQkFBaUI7SUFLN0IsaURBQWlEO0lBQ2pELElBQ1csT0FBTyxDQUFDLEtBQWdEO1FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLE9BQU87UUFDakIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztJQUNuQyxDQUFDO0lBRUQsNERBQTREO0lBQzVELElBQ1csY0FBYyxDQUFDLEtBQXVEO1FBQ2hGLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLGNBQWM7UUFDeEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQztJQUMxQyxDQUFDO0lBRUQseUNBQXlDO0lBQ3pDLElBQ1csYUFBYSxDQUFDLEtBQXNEO1FBQzlFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElB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LEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUErRzdELHVCQUF1QixFQUFFLENBQUM7UUFDMUIsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs4R0FwSFcsaUJBQWlCO2tHQUFqQixpQkFBaUIsd0VBTVQsZ0JBQWdCLHdEQVdoQixnQkFBZ0IscURBV2hCLGdCQUFnQiw2Q0FzQmhCLGdCQUFnQixzQ0FXaEIsZ0JBQWdCLHNDQVdoQixnQkFBZ0Isc0NBV2hCLGdCQUFnQiw2REFyRnpCLDJCQUEyQjs7MkZBRTFCLGlCQUFpQjtrQkFMN0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7b0lBUVcsT0FBTztzQkFEakIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsY0FBYztzQkFEeEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsYUFBYTtzQkFEdkIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsS0FBSztzQkFEZixLQUFLO2dCQVlLLEtBQUs7c0JBRGYsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsUUFBUTtzQkFEbEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsUUFBUTtzQkFEbEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsUUFBUTtzQkFEbEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsYUFBYTtzQkFEdkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENoZWNrYm94Q29tcG9uZW50IGFzIENoZWNrYm94Q29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lQ2hlY2tib3hDb21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2UtY2hlY2tib3gnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBDaGVja2JveENvbXBvbmVudCB7XG5cblx0LyoqIFRoZSBmb3JnZS1jaGVja2JveCBlbGVtZW50LiAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgbmF0aXZlRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG5cdC8qKiBHZXRzL3NldHMgd2hldGhlciB0aGUgY2hlY2tib3ggaXMgY2hlY2tlZC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgY2hlY2tlZCh2YWx1ZTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydjaGVja2VkJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGNoZWNrZWQoKTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydjaGVja2VkJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuY2hlY2tlZDtcblx0fVxuXG5cdC8qKiBHZXRzL3NldHMgd2hldGhlciB0aGUgY2hlY2tib3ggaXMgY2hlY2tlZCBieSBkZWZhdWx0LiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBkZWZhdWx0Q2hlY2tlZCh2YWx1ZTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydkZWZhdWx0Q2hlY2tlZCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5kZWZhdWx0Q2hlY2tlZCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgZGVmYXVsdENoZWNrZWQoKTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydkZWZhdWx0Q2hlY2tlZCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmRlZmF1bHRDaGVja2VkO1xuXHR9XG5cblx0LyoqIEdldHMvc2V0cyB0aGUgaW5kZXRlcm1pbmF0ZSBzdGF0ZS4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgaW5kZXRlcm1pbmF0ZSh2YWx1ZTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydpbmRldGVybWluYXRlJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGluZGV0ZXJtaW5hdGUoKTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydpbmRldGVybWluYXRlJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZTtcblx0fVxuXG5cdC8qKiBDb250cm9scyB0aGUgdmFsdWUgc3VibWl0dGVkIHdpdGggYSBmb3JtIHdoZW4gY2hlY2tlZC4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCB2YWx1ZSh2YWx1ZTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50Wyd2YWx1ZSddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgdmFsdWUoKTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50Wyd2YWx1ZSddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnZhbHVlO1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGNoZWNrYm94IGlzIGRlbnNlLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBkZW5zZSh2YWx1ZTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydkZW5zZSddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5kZW5zZSA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgZGVuc2UoKTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydkZW5zZSddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmRlbnNlO1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGNoZWNrYm94IGlzIGRpc2FibGVkLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBkaXNhYmxlZCh2YWx1ZTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydkaXNhYmxlZCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5kaXNhYmxlZCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgZGlzYWJsZWQoKTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydkaXNhYmxlZCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmRpc2FibGVkO1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGNoZWNrYm94IGlzIHJlcXVpcmVkLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCByZXF1aXJlZCh2YWx1ZTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydyZXF1aXJlZCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5yZXF1aXJlZCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgcmVxdWlyZWQoKTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydyZXF1aXJlZCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnJlcXVpcmVkO1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGNoZWNrYm94IGlzIHJlYWRvbmx5LiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCByZWFkb25seSh2YWx1ZTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydyZWFkb25seSddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5yZWFkb25seSA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgcmVhZG9ubHkoKTogQ2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50WydyZWFkb25seSddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnJlYWRvbmx5O1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGxhYmVsIGFwcGVhcnMgYmVmb3JlIG9yIGFmdGVyIHRoZSBjaGVja2JveC4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCBsYWJlbFBvc2l0aW9uKHZhbHVlOiBDaGVja2JveENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2xhYmVsUG9zaXRpb24nXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQubGFiZWxQb3NpdGlvbiA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgbGFiZWxQb3NpdGlvbigpOiBDaGVja2JveENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2xhYmVsUG9zaXRpb24nXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5sYWJlbFBvc2l0aW9uO1xuXHR9XG5cblx0LyoqIFRvZ2dsZXMgdGhlIGNoZWNrYm94IGNoZWNrZWQgb3IgdW5jaGVja2VkLiAqL1xuXHRwdWJsaWMgdG9nZ2xlKC4uLmFyZ3M6IFBhcmFtZXRlcnM8Q2hlY2tib3hDb21wb25lbnRDdXN0b21FbGVtZW50Wyd0b2dnbGUnXT4pOiBSZXR1cm5UeXBlPENoZWNrYm94Q29tcG9uZW50Q3VzdG9tRWxlbWVudFsndG9nZ2xlJ10+IHtcblx0XHRyZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMubmF0aXZlRWxlbWVudC50b2dnbGUoLi4uYXJncykpO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPENoZWNrYm94Q29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVDaGVja2JveENvbXBvbmVudCgpO1xuXHRcdGNoYW5nZURldGVjdG9yUmVmLmRldGFjaCgpO1xuXHR9XG59XG4iXX0=
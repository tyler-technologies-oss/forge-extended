/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { IPaginatorChangeEventData, PaginatorRangeLabelBuilder } from './paginator-constants';
import { BaseComponent, IBaseComponent } from '../core/base/base-component';
export interface IPaginatorComponent extends IBaseComponent {
    pageIndex: number;
    pageSize: number;
    offset: number;
    total: number;
    pageSizeOptions: number[];
    label: string;
    firstLast: boolean;
    first: boolean;
    disabled: boolean;
    alternative: boolean;
    rangeLabelCallback: PaginatorRangeLabelBuilder;
}
declare global {
    interface HTMLElementTagNameMap {
        'forge-paginator': IPaginatorComponent;
    }
    interface HTMLElementEventMap {
        'forge-paginator-change': CustomEvent<IPaginatorChangeEventData>;
    }
}
/**
 * @tag forge-paginator
 *
 * @event {CustomEvent<IPaginatorChangeEventData>} forge-paginator-change - Dispatched when the paginator state changes.
 */
export declare class PaginatorComponent extends BaseComponent implements IPaginatorComponent {
    static get observedAttributes(): string[];
    private _core;
    constructor();
    connectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /**
     * The zero-based page index.
     * @attribute page-index
     * @default 0
     */
    pageIndex: number;
    /**
     * Number of items to display on a page.
     * @attribute page-size
     * @default 25
     */
    pageSize: number;
    /**
     * Sets page index by providing the number of items to skip. The getter for this property returns the number of items to skip.
     * @attribute offset
     * @default 0
     */
    offset: number;
    /**
     * The total number of items to be paginated.
     * @attribute
     * @default 0;
     */
    total: number;
    /**
     * The set of provided page size options to display to the user.
     * @attribute page-size-options
     * @default [5, 15, 25, 50, 100]
     */
    pageSizeOptions: number[];
    /**
     * A label for the paginator.
     * @attribute
     * @default "Rows per page:"
     */
    label: string;
    /**
     * Whether to show the first page and last page buttons.
     * @attribute first-last
     * @default false
     */
    firstLast: boolean;
    /**
     * Whether to show the first page button. Default is false.
     * @attribute
     * @default false
     */
    first: boolean;
    /**
     * Whether the paginator is disabled.
     * @attribute
     * @default false
     */
    disabled: boolean;
    /**
     * Whether to use the alternative range label slot.
     * @attribute
     * @default false
     */
    alternative: boolean;
    /**
     * A callback function to build the range label dynamically.
     */
    rangeLabelCallback: PaginatorRangeLabelBuilder;
    /** Sets focus to the first focusable element within the paginator. */
    focus(options?: FocusOptions): void;
}

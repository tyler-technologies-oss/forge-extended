// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineDateRangePickerComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class DateRangePickerComponent {
    /** Gets/sets the "from" date range value. */
    set from(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.from = value;
        });
    }
    get from() {
        return this.nativeElement.from;
    }
    /** Gets/sets the "to" date range value. */
    set to(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.to = value;
        });
    }
    get to() {
        return this.nativeElement.to;
    }
    /** Gets/sets the date range value. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Gets/sets the minimum date range value. */
    set min(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.min = value;
        });
    }
    get min() {
        return this.nativeElement.min;
    }
    /** Gets/sets the maximum date range value. */
    set max(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.max = value;
        });
    }
    get max() {
        return this.nativeElement.max;
    }
    /** Gets/sets the disabled date range values. */
    set disabledDates(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabledDates = value;
        });
    }
    get disabledDates() {
        return this.nativeElement.disabledDates;
    }
    /** Gets/sets the open state of the date range picker. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Gets/sets the callback used to parse date strings. */
    set parseCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.parseCallback = value;
        });
    }
    get parseCallback() {
        return this.nativeElement.parseCallback;
    }
    /** Gets/sets the callback used to format date strings. */
    set formatCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.formatCallback = value;
        });
    }
    get formatCallback() {
        return this.nativeElement.formatCallback;
    }
    /** Gets/sets the callback used to prepare the mask for the date input. */
    set prepareMaskCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.prepareMaskCallback = value;
        });
    }
    get prepareMaskCallback() {
        return this.nativeElement.prepareMaskCallback;
    }
    /** Gets/sets the callback used to disable days in the calendar. */
    set disableDayCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disableDayCallback = value;
        });
    }
    get disableDayCallback() {
        return this.nativeElement.disableDayCallback;
    }
    /** Gets/sets the classes to apply to the date range picker popup. */
    set popupClasses(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupClasses = value;
        });
    }
    get popupClasses() {
        return this.nativeElement.popupClasses;
    }
    /** Gets/sets the disabled state of the date range picker. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Gets/sets the masked state of the date range picker. */
    set masked(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.masked = value;
        });
    }
    get masked() {
        return this.nativeElement.masked;
    }
    /** Gets/sets the mask format for the date input. */
    set maskFormat(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.maskFormat = value;
        });
    }
    get maskFormat() {
        return this.nativeElement.maskFormat;
    }
    /** Gets/sets the state of whether to show the mask format in the date input. */
    set showMaskFormat(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showMaskFormat = value;
        });
    }
    get showMaskFormat() {
        return this.nativeElement.showMaskFormat;
    }
    /** Gets/sets the value mode of the date range picker. */
    set valueMode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.valueMode = value;
        });
    }
    get valueMode() {
        return this.nativeElement.valueMode;
    }
    /** Gets/sets the state of whether to notify input value changes. */
    set notifyInputValueChanges(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.notifyInputValueChanges = value;
        });
    }
    get notifyInputValueChanges() {
        return this.nativeElement.notifyInputValueChanges;
    }
    /** Gets/sets the state of whether to allow invalid dates. */
    set allowInvalidDate(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowInvalidDate = value;
        });
    }
    get allowInvalidDate() {
        return this.nativeElement.allowInvalidDate;
    }
    /** Gets/sets the state of whether to show the "Today" button. */
    set showToday(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showToday = value;
        });
    }
    get showToday() {
        return this.nativeElement.showToday;
    }
    /** Gets/sets the state of whether to show the "Clear" button. */
    set showClear(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showClear = value;
        });
    }
    get showClear() {
        return this.nativeElement.showClear;
    }
    /** Gets/sets the disabled days of the week. */
    set disabledDaysOfWeek(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabledDaysOfWeek = value;
        });
    }
    get disabledDaysOfWeek() {
        return this.nativeElement.disabledDaysOfWeek;
    }
    /** Gets/sets the year range for the date range picker. */
    set yearRange(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.yearRange = value;
        });
    }
    get yearRange() {
        return this.nativeElement.yearRange;
    }
    /** Gets/sets the locale for the date range picker. */
    set locale(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.locale = value;
        });
    }
    get locale() {
        return this.nativeElement.locale;
    }
    /** Customized strings to display in the calendar dropdown UI. */
    set calendarText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.calendarText = value;
        });
    }
    get calendarText() {
        return this.nativeElement.calendarText;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-date-range-picker element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineDateRangePickerComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DateRangePickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: DateRangePickerComponent, selector: "forge-date-range-picker", inputs: { from: "from", to: "to", value: "value", min: "min", max: "max", disabledDates: "disabledDates", open: ["open", "open", booleanAttribute], parseCallback: "parseCallback", formatCallback: "formatCallback", prepareMaskCallback: "prepareMaskCallback", disableDayCallback: "disableDayCallback", popupClasses: "popupClasses", disabled: ["disabled", "disabled", booleanAttribute], masked: ["masked", "masked", booleanAttribute], maskFormat: "maskFormat", showMaskFormat: ["showMaskFormat", "showMaskFormat", booleanAttribute], valueMode: "valueMode", notifyInputValueChanges: ["notifyInputValueChanges", "notifyInputValueChanges", booleanAttribute], allowInvalidDate: ["allowInvalidDate", "allowInvalidDate", booleanAttribute], showToday: ["showToday", "showToday", booleanAttribute], showClear: ["showClear", "showClear", booleanAttribute], disabledDaysOfWeek: "disabledDaysOfWeek", yearRange: "yearRange", locale: "locale", calendarText: "calendarText" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DateRangePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-date-range-picker',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { from: [{
                type: Input
            }], to: [{
                type: Input
            }], value: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledDates: [{
                type: Input
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], parseCallback: [{
                type: Input
            }], formatCallback: [{
                type: Input
            }], prepareMaskCallback: [{
                type: Input
            }], disableDayCallback: [{
                type: Input
            }], popupClasses: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], masked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], maskFormat: [{
                type: Input
            }], showMaskFormat: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], valueMode: [{
                type: Input
            }], notifyInputValueChanges: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], allowInvalidDate: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showToday: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showClear: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabledDaysOfWeek: [{
                type: Input
            }], yearRange: [{
                type: Input
            }], locale: [{
                type: Input
            }], calendarText: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { IBaseComponent } from './base-component';
export interface IBaseAdapter<T extends HTMLElement = HTMLElement> {
    readonly hostElement: T;
    readonly isConnected: boolean;
    removeHostAttribute(name: string): void;
    hasHostAttribute(name: string): boolean;
    getHostAttribute(name: string): string | null;
    setHostAttribute(name: string, value?: string): void;
    toggleHostAttribute(name: string, hasAttribute: boolean, value?: string): void;
    redispatchEvent(event: Event, options?: {
        bubbles?: boolean;
        cancelable?: boolean;
        composed?: boolean;
    }): boolean;
    /** @deprecated Use `dispatchHostEvent` instead. */
    emitHostEvent(type: string, data?: any, bubble?: boolean, cancelable?: boolean): boolean;
    dispatchHostEvent<U extends Event>(event: U): boolean;
    addHostListener(event: string, callback: (event: Event) => void, options?: boolean | AddEventListenerOptions): void;
    removeHostListener(event: string, callback: (event: Event) => void, options?: boolean | AddEventListenerOptions): void;
    addWindowListener(event: string, callback: (event: Event) => void, options?: boolean | AddEventListenerOptions): void;
    removeWindowListener(event: string, callback: (event: Event) => void, options?: boolean | EventListenerOptions): void;
    addDocumentListener(event: string, callback: (event: Event) => void, options?: boolean | AddEventListenerOptions): void;
    removeDocumentListener(event: string, callback: (event: Event) => void, options?: boolean | EventListenerOptions): void;
    getScreenWidth(): number;
    setBodyAttribute(name: string, value: string): void;
    removeBodyAttribute(name: string): void;
    focusHost(options?: FocusOptions): void;
    clickHost(): void;
    tryApplyGlobalConfiguration(properties: Array<keyof T>): void;
}
export declare class BaseAdapter<T extends IBaseComponent> implements IBaseAdapter<T> {
    protected _component: T;
    constructor(_component: T);
    get hostElement(): T;
    hasHostAttribute(name: string): boolean;
    getHostAttribute(name: string): string | null;
    setHostAttribute(name: string, value?: string): void;
    removeHostAttribute(name: string): void;
    toggleHostAttribute(name: string, hasAttribute: boolean, value?: string): void;
    redispatchEvent(event: CustomEvent, options?: {
        bubbles?: boolean;
        cancelable?: boolean;
        composed?: boolean;
    }): boolean;
    /** @deprecated Use `dispatchHostEvent` instead. */
    emitHostEvent(type: string, data?: any, bubble?: boolean, cancelable?: boolean): boolean;
    dispatchHostEvent<U extends Event>(event: U): boolean;
    toggleHostListener(event: string, listener: EventListener, value: boolean, options?: boolean | AddEventListenerOptions): void;
    addHostListener(event: string, callback: (event: Event) => void, options?: boolean | AddEventListenerOptions): void;
    removeHostListener(event: string, callback: (event: Event) => void, options?: boolean | AddEventListenerOptions): void;
    addWindowListener(event: string, callback: (event: Event) => void, options?: boolean | AddEventListenerOptions): void;
    removeWindowListener(event: string, callback: (event: Event) => void, options?: boolean | EventListenerOptions): void;
    addDocumentListener(event: string, callback: (event: Event) => void, options?: boolean | AddEventListenerOptions): void;
    removeDocumentListener(event: string, callback: (event: Event) => void, options?: boolean | EventListenerOptions): void;
    getScreenWidth(): number;
    setBodyAttribute(name: string, value: string): void;
    removeBodyAttribute(name: string): void;
    focusHost(options?: FocusOptions): void;
    clickHost(): void;
    get isConnected(): boolean;
    tryApplyGlobalConfiguration(properties: Array<keyof T>): void;
}

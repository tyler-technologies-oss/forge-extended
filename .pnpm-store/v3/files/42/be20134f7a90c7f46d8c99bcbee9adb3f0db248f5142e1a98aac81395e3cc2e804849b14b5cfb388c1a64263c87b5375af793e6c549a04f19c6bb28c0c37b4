// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineTimePickerComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class TimePickerComponent {
    /** The current value of the time picker. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Whether or not the time picker is open. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Whether or not to allow seconds in the time picker. */
    set allowSeconds(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowSeconds = value;
        });
    }
    get allowSeconds() {
        return this.nativeElement.allowSeconds;
    }
    /** Whether or not the time picker input should be masked. */
    set masked(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.masked = value;
        });
    }
    get masked() {
        return this.nativeElement.masked;
    }
    /** Whether or not to show the mask format in the input. */
    set showMaskFormat(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showMaskFormat = value;
        });
    }
    get showMaskFormat() {
        return this.nativeElement.showMaskFormat;
    }
    /** Whether or not to use 24-hour time. */
    set use24HourTime(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.use24HourTime = value;
        });
    }
    get use24HourTime() {
        return this.nativeElement.use24HourTime;
    }
    /** Whether or not to allow invalid times. */
    set allowInvalidTime(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowInvalidTime = value;
        });
    }
    get allowInvalidTime() {
        return this.nativeElement.allowInvalidTime;
    }
    /** The minimum time that can be selected. */
    set min(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.min = value;
        });
    }
    get min() {
        return this.nativeElement.min;
    }
    /** The maximum time that can be selected. */
    set max(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.max = value;
        });
    }
    get max() {
        return this.nativeElement.max;
    }
    /** An array of times that cannot be selected. */
    set restrictedTimes(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.restrictedTimes = value;
        });
    }
    get restrictedTimes() {
        return this.nativeElement.restrictedTimes;
    }
    /** The time to start the time picker at. */
    set startTime(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.startTime = value;
        });
    }
    get startTime() {
        return this.nativeElement.startTime;
    }
    /** The step interval for the time picker. */
    set step(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.step = value;
        });
    }
    get step() {
        return this.nativeElement.step;
    }
    /** Whether or not to allow manual input of the time. */
    set allowInput(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowInput = value;
        });
    }
    get allowInput() {
        return this.nativeElement.allowInput;
    }
    /** Whether or not to show a "Now" button. */
    set showNow(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showNow = value;
        });
    }
    get showNow() {
        return this.nativeElement.showNow;
    }
    /** Whether or not to display hour options in dropdown. */
    set showHourOptions(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showHourOptions = value;
        });
    }
    get showHourOptions() {
        return this.nativeElement.showHourOptions;
    }
    /** An array of custom time picker options. */
    set customOptions(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.customOptions = value;
        });
    }
    get customOptions() {
        return this.nativeElement.customOptions;
    }
    /** A callback function to validate the time. */
    set validationCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.validationCallback = value;
        });
    }
    get validationCallback() {
        return this.nativeElement.validationCallback;
    }
    /** A callback function to parse the time. */
    set parseCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.parseCallback = value;
        });
    }
    get parseCallback() {
        return this.nativeElement.parseCallback;
    }
    /** A callback function to format the time. */
    set formatCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.formatCallback = value;
        });
    }
    get formatCallback() {
        return this.nativeElement.formatCallback;
    }
    /** A callback function to coerce the time. */
    set coercionCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.coercionCallback = value;
        });
    }
    get coercionCallback() {
        return this.nativeElement.coercionCallback;
    }
    /** A callback function to prepare the mask. */
    set prepareMaskCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.prepareMaskCallback = value;
        });
    }
    get prepareMaskCallback() {
        return this.nativeElement.prepareMaskCallback;
    }
    /** Whether or not the time picker is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** The classes to apply to the time picker popup. */
    set popupClasses(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupClasses = value;
        });
    }
    get popupClasses() {
        return this.nativeElement.popupClasses;
    }
    /** Whether or not to allow the time picker to be a dropdown. */
    set allowDropdown(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowDropdown = value;
        });
    }
    get allowDropdown() {
        return this.nativeElement.allowDropdown;
    }
    /** The target element to attach the popup to. */
    set popupTarget(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupTarget = value;
        });
    }
    get popupTarget() {
        return this.nativeElement.popupTarget;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-time-picker element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineTimePickerComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: TimePickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: TimePickerComponent, selector: "forge-time-picker", inputs: { value: "value", open: ["open", "open", booleanAttribute], allowSeconds: ["allowSeconds", "allowSeconds", booleanAttribute], masked: ["masked", "masked", booleanAttribute], showMaskFormat: ["showMaskFormat", "showMaskFormat", booleanAttribute], use24HourTime: ["use24HourTime", "use24HourTime", booleanAttribute], allowInvalidTime: ["allowInvalidTime", "allowInvalidTime", booleanAttribute], min: "min", max: "max", restrictedTimes: "restrictedTimes", startTime: "startTime", step: ["step", "step", numberAttribute], allowInput: ["allowInput", "allowInput", booleanAttribute], showNow: ["showNow", "showNow", booleanAttribute], showHourOptions: ["showHourOptions", "showHourOptions", booleanAttribute], customOptions: "customOptions", validationCallback: "validationCallback", parseCallback: "parseCallback", formatCallback: "formatCallback", coercionCallback: "coercionCallback", prepareMaskCallback: "prepareMaskCallback", disabled: ["disabled", "disabled", booleanAttribute], popupClasses: "popupClasses", allowDropdown: ["allowDropdown", "allowDropdown", booleanAttribute], popupTarget: "popupTarget" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: TimePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-time-picker',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { value: [{
                type: Input
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], allowSeconds: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], masked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showMaskFormat: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], use24HourTime: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], allowInvalidTime: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], restrictedTimes: [{
                type: Input
            }], startTime: [{
                type: Input
            }], step: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], allowInput: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showNow: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showHourOptions: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], customOptions: [{
                type: Input
            }], validationCallback: [{
                type: Input
            }], parseCallback: [{
                type: Input
            }], formatCallback: [{
                type: Input
            }], coercionCallback: [{
                type: Input
            }], prepareMaskCallback: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popupClasses: [{
                type: Input
            }], allowDropdown: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popupTarget: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
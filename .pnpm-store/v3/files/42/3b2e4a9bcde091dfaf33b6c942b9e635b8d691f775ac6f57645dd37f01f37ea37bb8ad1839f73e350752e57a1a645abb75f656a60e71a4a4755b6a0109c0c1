// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { <% if (properties.some(p => p.type?.text === 'boolean' && !p.readonly)) { %>booleanAttribute, <% } %>Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, <% if (properties.some(p => p.type?.text === 'number' && !p.readonly)) { %>numberAttribute, <% } %>Input } from '@angular/core';
import { <%= name %> as <%= name %>CustomElement<% if (useDefineFunction) { %>, define<%= name.endsWith('Component') ? name : `${name}Component` %><% } %> } from '<%= importPath %>';

<%= toJsDocBlock(description) %>
@Component({
  selector: '<%= tagName %>',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class <%= name %> {

	/** The <%= tagName %> element. */
	public readonly nativeElement = this.elementRef.nativeElement;
<% for (let property of properties) { %>
<% if (property.description) { %><%= toJsDocBlock(property.description, 1) %><% } %>
<% if (!property.readonly) {
%>	@Input(<% if (property.type?.text === 'boolean') { %>{ transform: booleanAttribute }<% } else if (property.type?.text === 'number') { %>{ transform: numberAttribute }<% } %>)
	public set <%= property.name %>(value: <%= name %>CustomElement['<%= property.name %>']) {
		this.zone.runOutsideAngular(() => {
			this.nativeElement.<%= property.name %> = value;
		});
	}
<%
}%>	public get <%= property.name %>(): <%= name %>CustomElement['<%= property.name %>'] {
		return this.nativeElement.<%= property.name %>;
	}
<% } %><% for (let method of methods) { %>
<% if (method.description) { %><%= toJsDocBlock(method.description, 1) %><% } %>
	public <%= method.name %>(...args: Parameters<<%= name %>CustomElement['<%= method.name %>']>): ReturnType<<%= name %>CustomElement['<%= method.name %>']> {
		return this.zone.runOutsideAngular(() => this.nativeElement.<%= method.name %>(...args));
	}
<% } %>
	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<<%= name %>CustomElement>,
		protected zone: NgZone
	) {
		<% if (useDefineFunction) {
			// Forge FloatingActionButton doesn't currently have Component suffix, but define function does.
			%>define<%= name.endsWith('Component') ? name : `${name}Component` %>();<%
		} else {
			%>if (!window.customElements.get('<%= tagName %>')) {
				window.customElements.define('<%= tagName %>', <%= name %>CustomElement);
			}<%
		} %>
		changeDetectorRef.detach();
	}
}

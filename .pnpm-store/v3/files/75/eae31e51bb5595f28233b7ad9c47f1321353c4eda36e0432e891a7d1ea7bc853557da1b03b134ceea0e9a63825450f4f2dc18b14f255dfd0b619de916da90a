// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineButtonToggleGroupComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ButtonToggleGroupComponent {
    /** The value of the selected button toggle(s). */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Whether or not the group should be outlined. */
    set outlined(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.outlined = value;
        });
    }
    get outlined() {
        return this.nativeElement.outlined;
    }
    /** Whether or not the group should allow multiple selections. */
    set multiple(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.multiple = value;
        });
    }
    get multiple() {
        return this.nativeElement.multiple;
    }
    /** Whether or not the group should require a selection once a button has been toggled on. */
    set mandatory(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.mandatory = value;
        });
    }
    get mandatory() {
        return this.nativeElement.mandatory;
    }
    /** Whether or not the group should be displayed vertically. */
    set vertical(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.vertical = value;
        });
    }
    get vertical() {
        return this.nativeElement.vertical;
    }
    /** Whether or not the group should stretch to fill the available width. */
    set stretch(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.stretch = value;
        });
    }
    get stretch() {
        return this.nativeElement.stretch;
    }
    /** Whether or not the group should be dense. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Whether or not the group should be disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    set required(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.required = value;
        });
    }
    get required() {
        return this.nativeElement.required;
    }
    /** Whether or not the group should be readonly. */
    set readonly(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.readonly = value;
        });
    }
    get readonly() {
        return this.nativeElement.readonly;
    }
    /** The theme to use for the group. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    get validity() {
        return this.nativeElement.validity;
    }
    get validationMessage() {
        return this.nativeElement.validationMessage;
    }
    get willValidate() {
        return this.nativeElement.willValidate;
    }
    checkValidity(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.checkValidity(...args));
    }
    reportValidity(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.reportValidity(...args));
    }
    setCustomValidity(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.setCustomValidity(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-button-toggle-group element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineButtonToggleGroupComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ButtonToggleGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ButtonToggleGroupComponent, selector: "forge-button-toggle-group", inputs: { value: "value", outlined: ["outlined", "outlined", booleanAttribute], multiple: ["multiple", "multiple", booleanAttribute], mandatory: ["mandatory", "mandatory", booleanAttribute], vertical: ["vertical", "vertical", booleanAttribute], stretch: ["stretch", "stretch", booleanAttribute], dense: ["dense", "dense", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], required: ["required", "required", booleanAttribute], readonly: ["readonly", "readonly", booleanAttribute], theme: "theme" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ButtonToggleGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-button-toggle-group',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { value: [{
                type: Input
            }], outlined: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], multiple: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], mandatory: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], vertical: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], stretch: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], readonly: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], theme: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
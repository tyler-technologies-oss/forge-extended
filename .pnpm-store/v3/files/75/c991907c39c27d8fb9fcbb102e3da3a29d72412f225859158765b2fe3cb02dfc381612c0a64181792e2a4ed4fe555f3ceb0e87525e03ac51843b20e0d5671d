/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { BaseAdapter, IBaseAdapter } from '../core/base/base-adapter';
import { IStateLayerComponent } from './state-layer';
import { StateLayerCoords } from './state-layer-constants';
export interface IStateLayerAdapter extends IBaseAdapter {
    destroy(): void;
    deferInitialization(listener: (evt?: PointerEvent) => void): void;
    getTargetElement(): HTMLElement | null;
    setTargetElement(el: HTMLElement | null): void;
    trySetTarget(value?: string | null): void;
    addTargetListener(type: string, listener: EventListener): void;
    removeTargetListener(type: string, listener: EventListener): void;
    setHovered(hovered: boolean): void;
    setPressed(pressed: boolean): void;
    startAnimation(coords?: StateLayerCoords): void;
    endAnimation(): Promise<void>;
    inBounds(x: number, y: number): boolean;
}
export declare class StateLayerAdapter extends BaseAdapter<IStateLayerComponent> implements IStateLayerAdapter {
    private readonly _surfaceElement;
    private _targetElement;
    private _rippleAnimation;
    private _destroyDeferListener;
    constructor(component: IStateLayerComponent);
    destroy(): void;
    deferInitialization(listener: (evt?: PointerEvent) => void): Promise<void>;
    addTargetListener(type: string, listener: EventListener): void;
    removeTargetListener(type: string, listener: EventListener): void;
    setHovered(hovered: boolean): void;
    setPressed(pressed: boolean): void;
    getTargetElement(): HTMLElement | null;
    setTargetElement(el: HTMLElement | null): void;
    trySetTarget(value?: string | null): void;
    startAnimation(coords?: StateLayerCoords): void;
    endAnimation(): Promise<void>;
    inBounds(x: number, y: number): boolean;
}

import { TOAST_CONSTANTS, ToastComponent } from '@tylertech/forge';
import { useDynamicForgeComponent } from './useDynamicForgeComponent';
export const useForgeToast = (component, componentProps) => {
    const delegate = {
        show: (_instance, options) => {
            ToastComponent.present(options);
        },
        // eslint-disable-next-line arrow-body-style
        hide: instance => {
            return new Promise(resolve => {
                const complete = () => {
                    instance.remove();
                    resolve();
                };
                if (!instance.open) {
                    complete();
                    return;
                }
                instance.addEventListener(TOAST_CONSTANTS.events.CLOSE, () => complete(), { once: true });
            });
        }
    };
    const controller = useDynamicForgeComponent('forge-toast', component, componentProps, delegate);
    function show(options, dismissCallback) {
        const toastElement = controller.show(options);
        // We need to attach a listener for the actions if the consumer cares to respond to it
        const actionHandler = options?.actionHandler;
        if (typeof actionHandler === 'function') {
            toastElement.addEventListener(TOAST_CONSTANTS.events.ACTION, () => actionHandler());
        }
        // We need to listen for the component automatically hiding itself so we can update our state
        toastElement.addEventListener(TOAST_CONSTANTS.events.CLOSE, () => {
            controller.hide();
            if (typeof dismissCallback === 'function') {
                dismissCallback();
            }
        });
        return toastElement;
    }
    return [show, controller.hide];
};

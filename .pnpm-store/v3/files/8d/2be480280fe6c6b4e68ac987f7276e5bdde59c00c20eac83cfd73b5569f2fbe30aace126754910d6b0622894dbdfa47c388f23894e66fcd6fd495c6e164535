import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { TimePickerComponent as TimePickerComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class TimePickerComponent {
    protected elementRef: ElementRef<TimePickerComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-time-picker element. */
    readonly nativeElement: TimePickerComponentCustomElement;
    /** The current value of the time picker. */
    set value(value: TimePickerComponentCustomElement['value']);
    get value(): TimePickerComponentCustomElement['value'];
    /** Whether or not the time picker is open. */
    set open(value: TimePickerComponentCustomElement['open']);
    get open(): TimePickerComponentCustomElement['open'];
    /** Whether or not to allow seconds in the time picker. */
    set allowSeconds(value: TimePickerComponentCustomElement['allowSeconds']);
    get allowSeconds(): TimePickerComponentCustomElement['allowSeconds'];
    /** Whether or not the time picker input should be masked. */
    set masked(value: TimePickerComponentCustomElement['masked']);
    get masked(): TimePickerComponentCustomElement['masked'];
    /** Whether or not to show the mask format in the input. */
    set showMaskFormat(value: TimePickerComponentCustomElement['showMaskFormat']);
    get showMaskFormat(): TimePickerComponentCustomElement['showMaskFormat'];
    /** Whether or not to use 24-hour time. */
    set use24HourTime(value: TimePickerComponentCustomElement['use24HourTime']);
    get use24HourTime(): TimePickerComponentCustomElement['use24HourTime'];
    /** Whether or not to allow invalid times. */
    set allowInvalidTime(value: TimePickerComponentCustomElement['allowInvalidTime']);
    get allowInvalidTime(): TimePickerComponentCustomElement['allowInvalidTime'];
    /** The minimum time that can be selected. */
    set min(value: TimePickerComponentCustomElement['min']);
    get min(): TimePickerComponentCustomElement['min'];
    /** The maximum time that can be selected. */
    set max(value: TimePickerComponentCustomElement['max']);
    get max(): TimePickerComponentCustomElement['max'];
    /** An array of times that cannot be selected. */
    set restrictedTimes(value: TimePickerComponentCustomElement['restrictedTimes']);
    get restrictedTimes(): TimePickerComponentCustomElement['restrictedTimes'];
    /** The time to start the time picker at. */
    set startTime(value: TimePickerComponentCustomElement['startTime']);
    get startTime(): TimePickerComponentCustomElement['startTime'];
    /** The step interval for the time picker. */
    set step(value: TimePickerComponentCustomElement['step']);
    get step(): TimePickerComponentCustomElement['step'];
    /** Whether or not to allow manual input of the time. */
    set allowInput(value: TimePickerComponentCustomElement['allowInput']);
    get allowInput(): TimePickerComponentCustomElement['allowInput'];
    /** Whether or not to show a "Now" button. */
    set showNow(value: TimePickerComponentCustomElement['showNow']);
    get showNow(): TimePickerComponentCustomElement['showNow'];
    /** Whether or not to display hour options in dropdown. */
    set showHourOptions(value: TimePickerComponentCustomElement['showHourOptions']);
    get showHourOptions(): TimePickerComponentCustomElement['showHourOptions'];
    /** An array of custom time picker options. */
    set customOptions(value: TimePickerComponentCustomElement['customOptions']);
    get customOptions(): TimePickerComponentCustomElement['customOptions'];
    /** A callback function to validate the time. */
    set validationCallback(value: TimePickerComponentCustomElement['validationCallback']);
    get validationCallback(): TimePickerComponentCustomElement['validationCallback'];
    /** A callback function to parse the time. */
    set parseCallback(value: TimePickerComponentCustomElement['parseCallback']);
    get parseCallback(): TimePickerComponentCustomElement['parseCallback'];
    /** A callback function to format the time. */
    set formatCallback(value: TimePickerComponentCustomElement['formatCallback']);
    get formatCallback(): TimePickerComponentCustomElement['formatCallback'];
    /** A callback function to coerce the time. */
    set coercionCallback(value: TimePickerComponentCustomElement['coercionCallback']);
    get coercionCallback(): TimePickerComponentCustomElement['coercionCallback'];
    /** A callback function to prepare the mask. */
    set prepareMaskCallback(value: TimePickerComponentCustomElement['prepareMaskCallback']);
    get prepareMaskCallback(): TimePickerComponentCustomElement['prepareMaskCallback'];
    /** Whether or not the time picker is disabled. */
    set disabled(value: TimePickerComponentCustomElement['disabled']);
    get disabled(): TimePickerComponentCustomElement['disabled'];
    /** The classes to apply to the time picker popup. */
    set popupClasses(value: TimePickerComponentCustomElement['popupClasses']);
    get popupClasses(): TimePickerComponentCustomElement['popupClasses'];
    /** Whether or not to allow the time picker to be a dropdown. */
    set allowDropdown(value: TimePickerComponentCustomElement['allowDropdown']);
    get allowDropdown(): TimePickerComponentCustomElement['allowDropdown'];
    /** The target element to attach the popup to. */
    set popupTarget(value: TimePickerComponentCustomElement['popupTarget']);
    get popupTarget(): TimePickerComponentCustomElement['popupTarget'];
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<TimePickerComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<TimePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TimePickerComponent, "forge-time-picker", never, { "value": { "alias": "value"; "required": false; }; "open": { "alias": "open"; "required": false; }; "allowSeconds": { "alias": "allowSeconds"; "required": false; }; "masked": { "alias": "masked"; "required": false; }; "showMaskFormat": { "alias": "showMaskFormat"; "required": false; }; "use24HourTime": { "alias": "use24HourTime"; "required": false; }; "allowInvalidTime": { "alias": "allowInvalidTime"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "restrictedTimes": { "alias": "restrictedTimes"; "required": false; }; "startTime": { "alias": "startTime"; "required": false; }; "step": { "alias": "step"; "required": false; }; "allowInput": { "alias": "allowInput"; "required": false; }; "showNow": { "alias": "showNow"; "required": false; }; "showHourOptions": { "alias": "showHourOptions"; "required": false; }; "customOptions": { "alias": "customOptions"; "required": false; }; "validationCallback": { "alias": "validationCallback"; "required": false; }; "parseCallback": { "alias": "parseCallback"; "required": false; }; "formatCallback": { "alias": "formatCallback"; "required": false; }; "coercionCallback": { "alias": "coercionCallback"; "required": false; }; "prepareMaskCallback": { "alias": "prepareMaskCallback"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "popupClasses": { "alias": "popupClasses"; "required": false; }; "allowDropdown": { "alias": "allowDropdown"; "required": false; }; "popupTarget": { "alias": "popupTarget"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_open: unknown;
    static ngAcceptInputType_allowSeconds: unknown;
    static ngAcceptInputType_masked: unknown;
    static ngAcceptInputType_showMaskFormat: unknown;
    static ngAcceptInputType_use24HourTime: unknown;
    static ngAcceptInputType_allowInvalidTime: unknown;
    static ngAcceptInputType_step: unknown;
    static ngAcceptInputType_allowInput: unknown;
    static ngAcceptInputType_showNow: unknown;
    static ngAcceptInputType_showHourOptions: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_allowDropdown: unknown;
}

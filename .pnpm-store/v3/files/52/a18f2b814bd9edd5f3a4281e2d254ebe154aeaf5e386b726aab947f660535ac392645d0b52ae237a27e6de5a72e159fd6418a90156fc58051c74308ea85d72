import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { SelectDropdownComponent as SelectDropdownComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class SelectDropdownComponent {
    protected elementRef: ElementRef<SelectDropdownComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-select-dropdown element. */
    readonly nativeElement: SelectDropdownComponentCustomElement;
    /** Sets the target element CSS selector */
    set target(value: SelectDropdownComponentCustomElement['target']);
    get target(): SelectDropdownComponentCustomElement['target'];
    /** Sets the selected text element CSS selector */
    set selectedTextTarget(value: SelectDropdownComponentCustomElement['selectedTextTarget']);
    get selectedTextTarget(): SelectDropdownComponentCustomElement['selectedTextTarget'];
    /** Controls whether the selected text is synchronized to the target elements' text content. Default is false. */
    set syncSelectedText(value: SelectDropdownComponentCustomElement['syncSelectedText']);
    get syncSelectedText(): SelectDropdownComponentCustomElement['syncSelectedText'];
    /** Gets/sets the value. */
    set value(value: SelectDropdownComponentCustomElement['value']);
    get value(): SelectDropdownComponentCustomElement['value'];
    /** Gets/sets the selected index. */
    set selectedIndex(value: SelectDropdownComponentCustomElement['selectedIndex']);
    get selectedIndex(): SelectDropdownComponentCustomElement['selectedIndex'];
    /** Gets/sets the available options. */
    set options(value: SelectDropdownComponentCustomElement['options']);
    get options(): SelectDropdownComponentCustomElement['options'];
    /** Gets/sets the multiple select state. */
    set multiple(value: SelectDropdownComponentCustomElement['multiple']);
    get multiple(): SelectDropdownComponentCustomElement['multiple'];
    /** Gets the open state of the dropdown. */
    set open(value: SelectDropdownComponentCustomElement['open']);
    get open(): SelectDropdownComponentCustomElement['open'];
    /** Sets the option builder callback that will be executed when building the option list in the dropdown. */
    set optionBuilder(value: SelectDropdownComponentCustomElement['optionBuilder']);
    get optionBuilder(): SelectDropdownComponentCustomElement['optionBuilder'];
    /** Sets the selected text builder callback that will be executed when getting the selected text to display in the field. */
    set selectedTextBuilder(value: SelectDropdownComponentCustomElement['selectedTextBuilder']);
    get selectedTextBuilder(): SelectDropdownComponentCustomElement['selectedTextBuilder'];
    /** Sets the callback to be executed when the user selects a value. */
    set beforeValueChange(value: SelectDropdownComponentCustomElement['beforeValueChange']);
    get beforeValueChange(): SelectDropdownComponentCustomElement['beforeValueChange'];
    /** Gets the popup element (when the dropdown is open). */
    get popupElement(): SelectDropdownComponentCustomElement['popupElement'];
    /** Gets/sets the list of classes to apply to the popup element. */
    set popupClasses(value: SelectDropdownComponentCustomElement['popupClasses']);
    get popupClasses(): SelectDropdownComponentCustomElement['popupClasses'];
    /** Gets/sets the callback function for generating header content within the popup. */
    set popupHeaderBuilder(value: SelectDropdownComponentCustomElement['popupHeaderBuilder']);
    get popupHeaderBuilder(): SelectDropdownComponentCustomElement['popupHeaderBuilder'];
    /** Gets/sets the callback function for generating header content within the popup. */
    set popupFooterBuilder(value: SelectDropdownComponentCustomElement['popupFooterBuilder']);
    get popupFooterBuilder(): SelectDropdownComponentCustomElement['popupFooterBuilder'];
    /** Gets/sets whether the popup width is synchronized with the popup target width. */
    set syncPopupWidth(value: SelectDropdownComponentCustomElement['syncPopupWidth']);
    get syncPopupWidth(): SelectDropdownComponentCustomElement['syncPopupWidth'];
    /** Gets/sets the maximum number of options to display in the dropdown. */
    set optionLimit(value: SelectDropdownComponentCustomElement['optionLimit']);
    get optionLimit(): SelectDropdownComponentCustomElement['optionLimit'];
    /** Controls the observation of scroll events on the dropdown. */
    set observeScroll(value: SelectDropdownComponentCustomElement['observeScroll']);
    get observeScroll(): SelectDropdownComponentCustomElement['observeScroll'];
    /** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */
    set observeScrollThreshold(value: SelectDropdownComponentCustomElement['observeScrollThreshold']);
    get observeScrollThreshold(): SelectDropdownComponentCustomElement['observeScrollThreshold'];
    /** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */
    set constrainPopupWidth(value: SelectDropdownComponentCustomElement['constrainPopupWidth']);
    get constrainPopupWidth(): SelectDropdownComponentCustomElement['constrainPopupWidth'];
    /**
     * Gets/sets whether the options will wrap their text or not.
     * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.
     */
    set wrapOptionText(value: SelectDropdownComponentCustomElement['wrapOptionText']);
    get wrapOptionText(): SelectDropdownComponentCustomElement['wrapOptionText'];
    /** Dynamically appends options to the dropdown while it's open. */
    appendOptions(...args: Parameters<SelectDropdownComponentCustomElement['appendOptions']>): ReturnType<SelectDropdownComponentCustomElement['appendOptions']>;
    /** Selects all options. */
    selectAll(...args: Parameters<SelectDropdownComponentCustomElement['selectAll']>): ReturnType<SelectDropdownComponentCustomElement['selectAll']>;
    /** Deselects all options. */
    deselectAll(...args: Parameters<SelectDropdownComponentCustomElement['deselectAll']>): ReturnType<SelectDropdownComponentCustomElement['deselectAll']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<SelectDropdownComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectDropdownComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SelectDropdownComponent, "forge-select-dropdown", never, { "target": { "alias": "target"; "required": false; }; "selectedTextTarget": { "alias": "selectedTextTarget"; "required": false; }; "syncSelectedText": { "alias": "syncSelectedText"; "required": false; }; "value": { "alias": "value"; "required": false; }; "selectedIndex": { "alias": "selectedIndex"; "required": false; }; "options": { "alias": "options"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "open": { "alias": "open"; "required": false; }; "optionBuilder": { "alias": "optionBuilder"; "required": false; }; "selectedTextBuilder": { "alias": "selectedTextBuilder"; "required": false; }; "beforeValueChange": { "alias": "beforeValueChange"; "required": false; }; "popupClasses": { "alias": "popupClasses"; "required": false; }; "popupHeaderBuilder": { "alias": "popupHeaderBuilder"; "required": false; }; "popupFooterBuilder": { "alias": "popupFooterBuilder"; "required": false; }; "syncPopupWidth": { "alias": "syncPopupWidth"; "required": false; }; "optionLimit": { "alias": "optionLimit"; "required": false; }; "observeScroll": { "alias": "observeScroll"; "required": false; }; "observeScrollThreshold": { "alias": "observeScrollThreshold"; "required": false; }; "constrainPopupWidth": { "alias": "constrainPopupWidth"; "required": false; }; "wrapOptionText": { "alias": "wrapOptionText"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_syncSelectedText: unknown;
    static ngAcceptInputType_multiple: unknown;
    static ngAcceptInputType_open: unknown;
    static ngAcceptInputType_syncPopupWidth: unknown;
    static ngAcceptInputType_optionLimit: unknown;
    static ngAcceptInputType_observeScroll: unknown;
    static ngAcceptInputType_observeScrollThreshold: unknown;
    static ngAcceptInputType_constrainPopupWidth: unknown;
    static ngAcceptInputType_wrapOptionText: unknown;
}

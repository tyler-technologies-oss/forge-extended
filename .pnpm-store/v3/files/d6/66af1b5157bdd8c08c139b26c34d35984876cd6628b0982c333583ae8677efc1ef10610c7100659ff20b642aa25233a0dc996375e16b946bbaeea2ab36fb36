// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineViewSwitcherComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ViewSwitcherComponent {
    /** Gets/sets the currently visible view index. */
    set index(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.index = value;
        });
    }
    get index() {
        return this.nativeElement.index;
    }
    /** Gets/sets the animation type. */
    set animationType(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.animationType = value;
        });
    }
    get animationType() {
        return this.nativeElement.animationType;
    }
    /** Transitions to the next view. */
    next(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.next(...args));
    }
    /** Transitions to the previous view. */
    previous(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.previous(...args));
    }
    /** Transitions to the first view. */
    goToStart(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.goToStart(...args));
    }
    /** Transitions to the last view. */
    goToEnd(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.goToEnd(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-view-switcher element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineViewSwitcherComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ViewSwitcherComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ViewSwitcherComponent, selector: "forge-view-switcher", inputs: { index: ["index", "index", numberAttribute], animationType: "animationType" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ViewSwitcherComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-view-switcher',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { index: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], animationType: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1zd2l0Y2hlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9mb3JnZS1hbmd1bGFyL3NyYy9saWIvdmlldy1zd2l0Y2hlci92aWV3LXN3aXRjaGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsZUFBZSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsSSxPQUFPLEVBQStELDJCQUEyQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBRTVILE9BQU87QUFNUCxNQUFNLE9BQU8scUJBQXFCO0lBS2pDLGtEQUFrRDtJQUNsRCxJQUNXLEtBQUssQ0FBQyxLQUFrRDtRQUNsRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRUQsb0NBQW9DO0lBQ3BDLElBQ1csYUFBYSxDQUFDLEtBQTBEO1FBQ2xGLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLGFBQWE7UUFDdkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQztJQUN6QyxDQUFDO0lBRUQsb0NBQW9DO0lBQzdCLElBQUksQ0FBQyxHQUFHLElBQTREO1FBQzFFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELHdDQUF3QztJQUNqQyxRQUFRLENBQUMsR0FBRyxJQUFnRTtRQUNsRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCxxQ0FBcUM7SUFDOUIsU0FBUyxDQUFDLEdBQUcsSUFBaUU7UUFDcEYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQsb0NBQW9DO0lBQzdCLE9BQU8sQ0FBQyxHQUFHLElBQStEO1FBQ2hGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELFlBQ0MsaUJBQW9DLEVBQzFCLFVBQTBELEVBQzFELElBQVk7UUFEWixlQUFVLEdBQVYsVUFBVSxDQUFnRDtRQUMxRCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBaER2Qix1Q0FBdUM7UUFDdkIsa0JBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQWlEN0QsMkJBQTJCLEVBQUUsQ0FBQztRQUM5QixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QixDQUFDOzhHQXREVyxxQkFBcUI7a0dBQXJCLHFCQUFxQix1RUFNYixlQUFlLDZEQVJ4QiwyQkFBMkI7OzJGQUUxQixxQkFBcUI7a0JBTGpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDO29JQVFXLEtBQUs7c0JBRGYsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUU7Z0JBWTFCLGFBQWE7c0JBRHZCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGNvZGUgd2FzIGdlbmVyYXRlZCBieSB0aGUgYW5ndWxhci1jdXN0b20tZWxlbWVudHMtc2NoZW1hdGljLiAgQW55IGNoYW5nZXMgd2lsbCBiZSBvdmVyd3JpdHRlbiBuZXh0IHRpbWUgaXQgcnVucy5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBOZ1pvbmUsIG51bWJlckF0dHJpYnV0ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZpZXdTd2l0Y2hlckNvbXBvbmVudCBhcyBWaWV3U3dpdGNoZXJDb21wb25lbnRDdXN0b21FbGVtZW50LCBkZWZpbmVWaWV3U3dpdGNoZXJDb21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2Utdmlldy1zd2l0Y2hlcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIFZpZXdTd2l0Y2hlckNvbXBvbmVudCB7XG5cblx0LyoqIFRoZSBmb3JnZS12aWV3LXN3aXRjaGVyIGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIEdldHMvc2V0cyB0aGUgY3VycmVudGx5IHZpc2libGUgdmlldyBpbmRleC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBpbmRleCh2YWx1ZTogVmlld1N3aXRjaGVyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaW5kZXgnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQuaW5kZXggPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGluZGV4KCk6IFZpZXdTd2l0Y2hlckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2luZGV4J10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuaW5kZXg7XG5cdH1cblxuXHQvKiogR2V0cy9zZXRzIHRoZSBhbmltYXRpb24gdHlwZS4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCBhbmltYXRpb25UeXBlKHZhbHVlOiBWaWV3U3dpdGNoZXJDb21wb25lbnRDdXN0b21FbGVtZW50WydhbmltYXRpb25UeXBlJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmFuaW1hdGlvblR5cGUgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGFuaW1hdGlvblR5cGUoKTogVmlld1N3aXRjaGVyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnYW5pbWF0aW9uVHlwZSddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmFuaW1hdGlvblR5cGU7XG5cdH1cblxuXHQvKiogVHJhbnNpdGlvbnMgdG8gdGhlIG5leHQgdmlldy4gKi9cblx0cHVibGljIG5leHQoLi4uYXJnczogUGFyYW1ldGVyczxWaWV3U3dpdGNoZXJDb21wb25lbnRDdXN0b21FbGVtZW50WyduZXh0J10+KTogUmV0dXJuVHlwZTxWaWV3U3dpdGNoZXJDb21wb25lbnRDdXN0b21FbGVtZW50WyduZXh0J10+IHtcblx0XHRyZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMubmF0aXZlRWxlbWVudC5uZXh0KC4uLmFyZ3MpKTtcblx0fVxuXG5cdC8qKiBUcmFuc2l0aW9ucyB0byB0aGUgcHJldmlvdXMgdmlldy4gKi9cblx0cHVibGljIHByZXZpb3VzKC4uLmFyZ3M6IFBhcmFtZXRlcnM8Vmlld1N3aXRjaGVyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncHJldmlvdXMnXT4pOiBSZXR1cm5UeXBlPFZpZXdTd2l0Y2hlckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3ByZXZpb3VzJ10+IHtcblx0XHRyZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMubmF0aXZlRWxlbWVudC5wcmV2aW91cyguLi5hcmdzKSk7XG5cdH1cblxuXHQvKiogVHJhbnNpdGlvbnMgdG8gdGhlIGZpcnN0IHZpZXcuICovXG5cdHB1YmxpYyBnb1RvU3RhcnQoLi4uYXJnczogUGFyYW1ldGVyczxWaWV3U3dpdGNoZXJDb21wb25lbnRDdXN0b21FbGVtZW50Wydnb1RvU3RhcnQnXT4pOiBSZXR1cm5UeXBlPFZpZXdTd2l0Y2hlckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2dvVG9TdGFydCddPiB7XG5cdFx0cmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLm5hdGl2ZUVsZW1lbnQuZ29Ub1N0YXJ0KC4uLmFyZ3MpKTtcblx0fVxuXG5cdC8qKiBUcmFuc2l0aW9ucyB0byB0aGUgbGFzdCB2aWV3LiAqL1xuXHRwdWJsaWMgZ29Ub0VuZCguLi5hcmdzOiBQYXJhbWV0ZXJzPFZpZXdTd2l0Y2hlckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2dvVG9FbmQnXT4pOiBSZXR1cm5UeXBlPFZpZXdTd2l0Y2hlckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2dvVG9FbmQnXT4ge1xuXHRcdHJldHVybiB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy5uYXRpdmVFbGVtZW50LmdvVG9FbmQoLi4uYXJncykpO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPFZpZXdTd2l0Y2hlckNvbXBvbmVudEN1c3RvbUVsZW1lbnQ+LFxuXHRcdHByb3RlY3RlZCB6b25lOiBOZ1pvbmVcblx0KSB7XG5cdFx0ZGVmaW5lVmlld1N3aXRjaGVyQ29tcG9uZW50KCk7XG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWYuZGV0YWNoKCk7XG5cdH1cbn1cbiJdfQ==
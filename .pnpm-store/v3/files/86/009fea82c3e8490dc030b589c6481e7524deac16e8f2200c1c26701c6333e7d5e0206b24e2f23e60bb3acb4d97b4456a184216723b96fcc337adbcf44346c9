/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { __decorate } from "tslib";
import { attachShadowTemplate, coerceBoolean, coreProperty, customElement } from '@tylertech/forge-core';
import { updateTarget } from '../constants';
import { BaseComponent } from '../core';
import { LabelAdapter } from './label-adapter';
import { LABEL_CONSTANTS } from './label-constants';
import { LabelCore } from './label-core';
const template = '<template><slot></slot></template>';
const style = ':host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--forge-typography-label1-font-family, var(--forge-typography-font-family, \"Roboto\", sans-serif));font-size:var(--forge-typography-label1-font-size, calc(var(--forge-typography-font-size, 1rem) * var(--forge-typography-label-font-size-scale, .75)));font-weight:var(--forge-typography-label1-font-weight,400);line-height:var(--forge-typography-label1-line-height, calc(var(--forge-typography-font-size, 1rem) * var(--forge-typography-label-line-height-scale, 1.25)));letter-spacing:var(--forge-typography-label1-letter-spacing, .0357142857em);text-transform:var(--forge-typography-label1-text-transform,inherit);text-decoration:var(--forge-typography-label1-text-decoration,inherit);display:inline-block;cursor:default}:host([hidden]){display:none}';
/**
 * @tag forge-label
 *
 * @summary The Forge Label component is used to associate a text label with a compatible Forge component.
 *
 * @cssclass forge-label - Apply to the root element of the label to align the label and associated element horizontally.
 * @cssclass forge-label-block - Apply to the root element instead of `forge-label` to align the label and associated element vertically.
 * @cssclass forge-label-inline - Alias for `forge-label`.
 * @cssclass forge-label--large - Uses the large typography style typically applied to inset field labels.
 * @cssclass forge-support-text - Applies the support text typography style and a top margin.
 */
let LabelComponent = class LabelComponent extends BaseComponent {
    static get observedAttributes() {
        return Object.values(LABEL_CONSTANTS.observedAttributes);
    }
    constructor() {
        super();
        attachShadowTemplate(this, template, style);
        this._core = new LabelCore(new LabelAdapter(this));
    }
    connectedCallback() {
        this._core.initialize();
    }
    disconnectedCallback() {
        this._core.destroy();
    }
    attributeChangedCallback(name, oldValue, newValue) {
        switch (name) {
            case LABEL_CONSTANTS.attributes.FOR:
                this.for = newValue;
                break;
            case LABEL_CONSTANTS.attributes.DYNAMIC:
                this.dynamic = coerceBoolean(newValue);
                break;
            case LABEL_CONSTANTS.attributes.NON_INTERACTIVE:
                this.nonInteractive = coerceBoolean(newValue);
                break;
            case LABEL_CONSTANTS.attributes.LEGEND:
                this.legend = coerceBoolean(newValue);
                break;
        }
    }
    /**
     * Updates the targeted element with the label's current text content.
     */
    update() {
        this._core.update();
    }
    /**
     * Attempts to locate and connect to the target element.
     *
     * @internal
     * @returns Whether the target element was located.
     */
    [updateTarget](target) {
        return this._core.updateTarget(target);
    }
};
__decorate([
    coreProperty()
], LabelComponent.prototype, "for", void 0);
__decorate([
    coreProperty()
], LabelComponent.prototype, "forElement", void 0);
__decorate([
    coreProperty()
], LabelComponent.prototype, "clickTarget", void 0);
__decorate([
    coreProperty()
], LabelComponent.prototype, "dynamic", void 0);
__decorate([
    coreProperty()
], LabelComponent.prototype, "nonInteractive", void 0);
__decorate([
    coreProperty()
], LabelComponent.prototype, "legend", void 0);
LabelComponent = __decorate([
    customElement({
        name: LABEL_CONSTANTS.elementName
    })
], LabelComponent);
export { LabelComponent };

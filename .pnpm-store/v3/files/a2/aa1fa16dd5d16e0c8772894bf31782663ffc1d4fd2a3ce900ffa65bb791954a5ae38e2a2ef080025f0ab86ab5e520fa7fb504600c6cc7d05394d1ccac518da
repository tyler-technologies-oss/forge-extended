// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineSelectDropdownComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class SelectDropdownComponent {
    /** Sets the target element CSS selector */
    set target(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.target = value;
        });
    }
    get target() {
        return this.nativeElement.target;
    }
    /** Sets the selected text element CSS selector */
    set selectedTextTarget(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectedTextTarget = value;
        });
    }
    get selectedTextTarget() {
        return this.nativeElement.selectedTextTarget;
    }
    /** Controls whether the selected text is synchronized to the target elements' text content. Default is false. */
    set syncSelectedText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.syncSelectedText = value;
        });
    }
    get syncSelectedText() {
        return this.nativeElement.syncSelectedText;
    }
    /** Gets/sets the value. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Gets/sets the selected index. */
    set selectedIndex(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectedIndex = value;
        });
    }
    get selectedIndex() {
        return this.nativeElement.selectedIndex;
    }
    /** Gets/sets the available options. */
    set options(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.options = value;
        });
    }
    get options() {
        return this.nativeElement.options;
    }
    /** Gets/sets the multiple select state. */
    set multiple(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.multiple = value;
        });
    }
    get multiple() {
        return this.nativeElement.multiple;
    }
    /** Gets the open state of the dropdown. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Sets the option builder callback that will be executed when building the option list in the dropdown. */
    set optionBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optionBuilder = value;
        });
    }
    get optionBuilder() {
        return this.nativeElement.optionBuilder;
    }
    /** Sets the selected text builder callback that will be executed when getting the selected text to display in the field. */
    set selectedTextBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectedTextBuilder = value;
        });
    }
    get selectedTextBuilder() {
        return this.nativeElement.selectedTextBuilder;
    }
    /** Sets the callback to be executed when the user selects a value. */
    set beforeValueChange(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.beforeValueChange = value;
        });
    }
    get beforeValueChange() {
        return this.nativeElement.beforeValueChange;
    }
    /** Gets the popup element (when the dropdown is open). */
    get popupElement() {
        return this.nativeElement.popupElement;
    }
    /** Gets/sets the list of classes to apply to the popup element. */
    set popupClasses(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupClasses = value;
        });
    }
    get popupClasses() {
        return this.nativeElement.popupClasses;
    }
    /** Gets/sets the callback function for generating header content within the popup. */
    set popupHeaderBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupHeaderBuilder = value;
        });
    }
    get popupHeaderBuilder() {
        return this.nativeElement.popupHeaderBuilder;
    }
    /** Gets/sets the callback function for generating header content within the popup. */
    set popupFooterBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupFooterBuilder = value;
        });
    }
    get popupFooterBuilder() {
        return this.nativeElement.popupFooterBuilder;
    }
    /** Gets/sets whether the popup width is synchronized with the popup target width. */
    set syncPopupWidth(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.syncPopupWidth = value;
        });
    }
    get syncPopupWidth() {
        return this.nativeElement.syncPopupWidth;
    }
    /** Gets/sets the maximum number of options to display in the dropdown. */
    set optionLimit(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optionLimit = value;
        });
    }
    get optionLimit() {
        return this.nativeElement.optionLimit;
    }
    /** Controls the observation of scroll events on the dropdown. */
    set observeScroll(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.observeScroll = value;
        });
    }
    get observeScroll() {
        return this.nativeElement.observeScroll;
    }
    /** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */
    set observeScrollThreshold(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.observeScrollThreshold = value;
        });
    }
    get observeScrollThreshold() {
        return this.nativeElement.observeScrollThreshold;
    }
    /** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */
    set constrainPopupWidth(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.constrainPopupWidth = value;
        });
    }
    get constrainPopupWidth() {
        return this.nativeElement.constrainPopupWidth;
    }
    /**
     * Gets/sets whether the options will wrap their text or not.
     * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.
     */
    set wrapOptionText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.wrapOptionText = value;
        });
    }
    get wrapOptionText() {
        return this.nativeElement.wrapOptionText;
    }
    /** Dynamically appends options to the dropdown while it's open. */
    appendOptions(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.appendOptions(...args));
    }
    /** Selects all options. */
    selectAll(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.selectAll(...args));
    }
    /** Deselects all options. */
    deselectAll(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.deselectAll(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-select-dropdown element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineSelectDropdownComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SelectDropdownComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: SelectDropdownComponent, selector: "forge-select-dropdown", inputs: { target: "target", selectedTextTarget: "selectedTextTarget", syncSelectedText: ["syncSelectedText", "syncSelectedText", booleanAttribute], value: "value", selectedIndex: "selectedIndex", options: "options", multiple: ["multiple", "multiple", booleanAttribute], open: ["open", "open", booleanAttribute], optionBuilder: "optionBuilder", selectedTextBuilder: "selectedTextBuilder", beforeValueChange: "beforeValueChange", popupClasses: "popupClasses", popupHeaderBuilder: "popupHeaderBuilder", popupFooterBuilder: "popupFooterBuilder", syncPopupWidth: ["syncPopupWidth", "syncPopupWidth", booleanAttribute], optionLimit: ["optionLimit", "optionLimit", numberAttribute], observeScroll: ["observeScroll", "observeScroll", booleanAttribute], observeScrollThreshold: ["observeScrollThreshold", "observeScrollThreshold", numberAttribute], constrainPopupWidth: ["constrainPopupWidth", "constrainPopupWidth", booleanAttribute], wrapOptionText: ["wrapOptionText", "wrapOptionText", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SelectDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-select-dropdown',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { target: [{
                type: Input
            }], selectedTextTarget: [{
                type: Input
            }], syncSelectedText: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], value: [{
                type: Input
            }], selectedIndex: [{
                type: Input
            }], options: [{
                type: Input
            }], multiple: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], optionBuilder: [{
                type: Input
            }], selectedTextBuilder: [{
                type: Input
            }], beforeValueChange: [{
                type: Input
            }], popupClasses: [{
                type: Input
            }], popupHeaderBuilder: [{
                type: Input
            }], popupFooterBuilder: [{
                type: Input
            }], syncPopupWidth: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], optionLimit: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], observeScroll: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], observeScrollThreshold: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], constrainPopupWidth: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], wrapOptionText: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
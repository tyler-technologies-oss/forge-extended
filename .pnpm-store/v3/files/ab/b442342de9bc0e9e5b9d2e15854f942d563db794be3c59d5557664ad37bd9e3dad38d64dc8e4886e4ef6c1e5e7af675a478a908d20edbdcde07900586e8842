// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineOptionGroupComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class OptionGroupComponent {
    /** Gets/sets the label of this option group. */
    set label(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.label = value;
        });
    }
    get label() {
        return this.nativeElement.label;
    }
    /** The child options of this group. */
    set options(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.options = value;
        });
    }
    get options() {
        return this.nativeElement.options;
    }
    /** The builder function for the group content. */
    set builder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.builder = value;
        });
    }
    get builder() {
        return this.nativeElement.builder;
    }
    /** Gets/sets the optional group value. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** The text content for the group. */
    set text(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.text = value;
        });
    }
    get text() {
        return this.nativeElement.text;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-option-group element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineOptionGroupComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: OptionGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.7", type: OptionGroupComponent, selector: "forge-option-group", inputs: { label: "label", options: "options", builder: "builder", value: "value", text: "text" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: OptionGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-option-group',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { label: [{
                type: Input
            }], options: [{
                type: Input
            }], builder: [{
                type: Input
            }], value: [{
                type: Input
            }], text: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9vcHRpb24tZ3JvdXAvb3B0aW9uLWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pILE9BQU8sRUFBNkQsMEJBQTBCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFekgsT0FBTztBQU1QLE1BQU0sT0FBTyxvQkFBb0I7SUFLaEMsZ0RBQWdEO0lBQ2hELElBQ1csS0FBSyxDQUFDLEtBQWlEO1FBQ2pFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLEtBQUs7UUFDZixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFFRCx1Q0FBdUM7SUFDdkMsSUFDVyxPQUFPLENBQUMsS0FBbUQ7UUFDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsT0FBTztRQUNqQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQ25DLENBQUM7SUFFRCxrREFBa0Q7SUFDbEQsSUFDVyxPQUFPLENBQUMsS0FBbUQ7UUFDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsT0FBTztRQUNqQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQ25DLENBQUM7SUFFRCwwQ0FBMEM7SUFDMUMsSUFDVyxLQUFLLENBQUMsS0FBaUQ7UUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVELHNDQUFzQztJQUN0QyxJQUNXLElBQUksQ0FBQyxLQUFnRDtRQUMvRCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxJQUFJO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBRUQsWUFDQyxpQkFBb0MsRUFDMUIsVUFBeUQsRUFDekQsSUFBWTtRQURaLGVBQVUsR0FBVixVQUFVLENBQStDO1FBQ3pELFNBQUksR0FBSixJQUFJLENBQVE7UUE3RHZCLHNDQUFzQztRQUN0QixrQkFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBOEQ3RCwwQkFBMEIsRUFBRSxDQUFDO1FBQzdCLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7OEdBbkVXLG9CQUFvQjtrR0FBcEIsb0JBQW9CLDRKQUZyQiwyQkFBMkI7OzJGQUUxQixvQkFBb0I7a0JBTGhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDO29JQVFXLEtBQUs7c0JBRGYsS0FBSztnQkFZSyxPQUFPO3NCQURqQixLQUFLO2dCQVlLLE9BQU87c0JBRGpCLEtBQUs7Z0JBWUssS0FBSztzQkFEZixLQUFLO2dCQVlLLElBQUk7c0JBRGQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9wdGlvbkdyb3VwQ29tcG9uZW50IGFzIE9wdGlvbkdyb3VwQ29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lT3B0aW9uR3JvdXBDb21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2Utb3B0aW9uLWdyb3VwJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgT3B0aW9uR3JvdXBDb21wb25lbnQge1xuXG5cdC8qKiBUaGUgZm9yZ2Utb3B0aW9uLWdyb3VwIGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIEdldHMvc2V0cyB0aGUgbGFiZWwgb2YgdGhpcyBvcHRpb24gZ3JvdXAuICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgbGFiZWwodmFsdWU6IE9wdGlvbkdyb3VwQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnbGFiZWwnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQubGFiZWwgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGxhYmVsKCk6IE9wdGlvbkdyb3VwQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnbGFiZWwnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5sYWJlbDtcblx0fVxuXG5cdC8qKiBUaGUgY2hpbGQgb3B0aW9ucyBvZiB0aGlzIGdyb3VwLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IG9wdGlvbnModmFsdWU6IE9wdGlvbkdyb3VwQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnb3B0aW9ucyddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5vcHRpb25zID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBvcHRpb25zKCk6IE9wdGlvbkdyb3VwQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnb3B0aW9ucyddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50Lm9wdGlvbnM7XG5cdH1cblxuXHQvKiogVGhlIGJ1aWxkZXIgZnVuY3Rpb24gZm9yIHRoZSBncm91cCBjb250ZW50LiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IGJ1aWxkZXIodmFsdWU6IE9wdGlvbkdyb3VwQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnYnVpbGRlciddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5idWlsZGVyID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBidWlsZGVyKCk6IE9wdGlvbkdyb3VwQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnYnVpbGRlciddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmJ1aWxkZXI7XG5cdH1cblxuXHQvKiogR2V0cy9zZXRzIHRoZSBvcHRpb25hbCBncm91cCB2YWx1ZS4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCB2YWx1ZSh2YWx1ZTogT3B0aW9uR3JvdXBDb21wb25lbnRDdXN0b21FbGVtZW50Wyd2YWx1ZSddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgdmFsdWUoKTogT3B0aW9uR3JvdXBDb21wb25lbnRDdXN0b21FbGVtZW50Wyd2YWx1ZSddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnZhbHVlO1xuXHR9XG5cblx0LyoqIFRoZSB0ZXh0IGNvbnRlbnQgZm9yIHRoZSBncm91cC4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCB0ZXh0KHZhbHVlOiBPcHRpb25Hcm91cENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RleHQnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQudGV4dCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgdGV4dCgpOiBPcHRpb25Hcm91cENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RleHQnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC50ZXh0O1xuXHR9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPE9wdGlvbkdyb3VwQ29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVPcHRpb25Hcm91cENvbXBvbmVudCgpO1xuXHRcdGNoYW5nZURldGVjdG9yUmVmLmRldGFjaCgpO1xuXHR9XG59XG4iXX0=
import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { TableComponent as TableComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class TableComponent {
    protected elementRef: ElementRef<TableComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-table element. */
    readonly nativeElement: TableComponentCustomElement;
    /** The data to be display in the table body. */
    set data(value: TableComponentCustomElement['data']);
    get data(): TableComponentCustomElement['data'];
    /** The column configuration options. */
    set columnConfigurations(value: TableComponentCustomElement['columnConfigurations']);
    get columnConfigurations(): TableComponentCustomElement['columnConfigurations'];
    /** Controls the visibility of the select column. */
    set select(value: TableComponentCustomElement['select']);
    get select(): TableComponentCustomElement['select'];
    /** Controls the visibility of the select all checkbox (only applied when `select` is `true`). */
    set multiselect(value: TableComponentCustomElement['multiselect']);
    get multiselect(): TableComponentCustomElement['multiselect'];
    /** The row key for matching data to selections. */
    set selectKey(value: TableComponentCustomElement['selectKey']);
    get selectKey(): TableComponentCustomElement['selectKey'];
    /** The tooltip to display when hovering over the select column. */
    set tooltipSelect(value: TableComponentCustomElement['tooltipSelect']);
    get tooltipSelect(): TableComponentCustomElement['tooltipSelect'];
    /** The tooltip to display when hovering over the select all checkbox. */
    set tooltipSelectAll(value: TableComponentCustomElement['tooltipSelectAll']);
    get tooltipSelectAll(): TableComponentCustomElement['tooltipSelectAll'];
    /** Controls whether the table is dense or not. */
    set dense(value: TableComponentCustomElement['dense']);
    get dense(): TableComponentCustomElement['dense'];
    /** Controls whether the table is roomy or not. */
    set roomy(value: TableComponentCustomElement['roomy']);
    get roomy(): TableComponentCustomElement['roomy'];
    /** Controls whether the table shows its column filter row. */
    set filter(value: TableComponentCustomElement['filter']);
    get filter(): TableComponentCustomElement['filter'];
    /** Controls whether the table applies fixed headers when in scroll containers. */
    set fixedHeaders(value: TableComponentCustomElement['fixedHeaders']);
    get fixedHeaders(): TableComponentCustomElement['fixedHeaders'];
    /** Controls the table layout algorithm. */
    set layoutType(value: TableComponentCustomElement['layoutType']);
    get layoutType(): TableComponentCustomElement['layoutType'];
    /** Controls whether the content in each cell wraps or not (true by default). */
    set wrapContent(value: TableComponentCustomElement['wrapContent']);
    get wrapContent(): TableComponentCustomElement['wrapContent'];
    /** Controls whether the columns are resizable or not. */
    set resizable(value: TableComponentCustomElement['resizable']);
    get resizable(): TableComponentCustomElement['resizable'];
    /** Gets/sets the minimum width that a column can be resized to by the user dragging the resize handle. */
    set minResizeWidth(value: TableComponentCustomElement['minResizeWidth']);
    get minResizeWidth(): TableComponentCustomElement['minResizeWidth'];
    /** Gets/sets whether the rows respond to (and emit) row click events. */
    set allowRowClick(value: TableComponentCustomElement['allowRowClick']);
    get allowRowClick(): TableComponentCustomElement['allowRowClick'];
    /** Gets/sets whether the table supports multi-column sorting. */
    set multiColumnSort(value: TableComponentCustomElement['multiColumnSort']);
    get multiColumnSort(): TableComponentCustomElement['multiColumnSort'];
    /** Callback for when a row is clicked. This allows for custom logic to run after each `<tr>` is created. */
    set rowCreated(value: TableComponentCustomElement['rowCreated']);
    get rowCreated(): TableComponentCustomElement['rowCreated'];
    /** Callback for when a cell is clicked. This allows for custom logic to run after each `<td>` is created. */
    set cellCreated(value: TableComponentCustomElement['cellCreated']);
    get cellCreated(): TableComponentCustomElement['cellCreated'];
    /** The template to use for the select all checkbox in the header. */
    set selectAllTemplate(value: TableComponentCustomElement['selectAllTemplate']);
    get selectAllTemplate(): TableComponentCustomElement['selectAllTemplate'];
    /** Controls the alignment of the select checkbox. */
    set selectCheckboxAlignment(value: TableComponentCustomElement['selectCheckboxAlignment']);
    get selectCheckboxAlignment(): TableComponentCustomElement['selectCheckboxAlignment'];
    /** Hides a column from the table. */
    hideColumn(...args: Parameters<TableComponentCustomElement['hideColumn']>): ReturnType<TableComponentCustomElement['hideColumn']>;
    /** Shows a hidden column in th table. */
    showColumn(...args: Parameters<TableComponentCustomElement['showColumn']>): ReturnType<TableComponentCustomElement['showColumn']>;
    /** Determines if a column at the given index is hidden or not. */
    isColumnHidden(...args: Parameters<TableComponentCustomElement['isColumnHidden']>): ReturnType<TableComponentCustomElement['isColumnHidden']>;
    /** Returns the selected row instances. */
    getSelectedRows(...args: Parameters<TableComponentCustomElement['getSelectedRows']>): ReturnType<TableComponentCustomElement['getSelectedRows']>;
    /** Selects a row in the table. Only applicable if `select` is true. */
    selectRow(...args: Parameters<TableComponentCustomElement['selectRow']>): ReturnType<TableComponentCustomElement['selectRow']>;
    /** Selects one or more rows in the table. Only applicable if `select` is true. */
    selectRows(...args: Parameters<TableComponentCustomElement['selectRows']>): ReturnType<TableComponentCustomElement['selectRows']>;
    /** Deselects a single row in the table. */
    deselectRow(...args: Parameters<TableComponentCustomElement['deselectRow']>): ReturnType<TableComponentCustomElement['deselectRow']>;
    /** Deselects one or more rows in the table. */
    deselectRows(...args: Parameters<TableComponentCustomElement['deselectRows']>): ReturnType<TableComponentCustomElement['deselectRows']>;
    /** Clears all selected table rows. */
    clearSelections(...args: Parameters<TableComponentCustomElement['clearSelections']>): ReturnType<TableComponentCustomElement['clearSelections']>;
    /** Forces the table to re-render based on its current configuration. */
    render(...args: Parameters<TableComponentCustomElement['render']>): ReturnType<TableComponentCustomElement['render']>;
    /** Expands a collapsed row. */
    expandRow(...args: Parameters<TableComponentCustomElement['expandRow']>): ReturnType<TableComponentCustomElement['expandRow']>;
    /** Collapses an expanded row. */
    collapseRow(...args: Parameters<TableComponentCustomElement['collapseRow']>): ReturnType<TableComponentCustomElement['collapseRow']>;
    /** Checks if a row is expanded or not. */
    isRowExpanded(...args: Parameters<TableComponentCustomElement['isRowExpanded']>): ReturnType<TableComponentCustomElement['isRowExpanded']>;
    /** Selects a rows by an index or array of indexes. */
    selectRowsByIndex(...args: Parameters<TableComponentCustomElement['selectRowsByIndex']>): ReturnType<TableComponentCustomElement['selectRowsByIndex']>;
    /** Deselects a rows by an index or array of indexes. */
    deselectRowsByIndex(...args: Parameters<TableComponentCustomElement['deselectRowsByIndex']>): ReturnType<TableComponentCustomElement['deselectRowsByIndex']>;
    /** Checks if a row is selected or not. */
    isRowSelected(...args: Parameters<TableComponentCustomElement['isRowSelected']>): ReturnType<TableComponentCustomElement['isRowSelected']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<TableComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<TableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TableComponent, "forge-table", never, { "data": { "alias": "data"; "required": false; }; "columnConfigurations": { "alias": "columnConfigurations"; "required": false; }; "select": { "alias": "select"; "required": false; }; "multiselect": { "alias": "multiselect"; "required": false; }; "selectKey": { "alias": "selectKey"; "required": false; }; "tooltipSelect": { "alias": "tooltipSelect"; "required": false; }; "tooltipSelectAll": { "alias": "tooltipSelectAll"; "required": false; }; "dense": { "alias": "dense"; "required": false; }; "roomy": { "alias": "roomy"; "required": false; }; "filter": { "alias": "filter"; "required": false; }; "fixedHeaders": { "alias": "fixedHeaders"; "required": false; }; "layoutType": { "alias": "layoutType"; "required": false; }; "wrapContent": { "alias": "wrapContent"; "required": false; }; "resizable": { "alias": "resizable"; "required": false; }; "minResizeWidth": { "alias": "minResizeWidth"; "required": false; }; "allowRowClick": { "alias": "allowRowClick"; "required": false; }; "multiColumnSort": { "alias": "multiColumnSort"; "required": false; }; "rowCreated": { "alias": "rowCreated"; "required": false; }; "cellCreated": { "alias": "cellCreated"; "required": false; }; "selectAllTemplate": { "alias": "selectAllTemplate"; "required": false; }; "selectCheckboxAlignment": { "alias": "selectCheckboxAlignment"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_select: unknown;
    static ngAcceptInputType_multiselect: unknown;
    static ngAcceptInputType_dense: unknown;
    static ngAcceptInputType_roomy: unknown;
    static ngAcceptInputType_filter: unknown;
    static ngAcceptInputType_fixedHeaders: unknown;
    static ngAcceptInputType_wrapContent: unknown;
    static ngAcceptInputType_resizable: unknown;
    static ngAcceptInputType_minResizeWidth: unknown;
    static ngAcceptInputType_allowRowClick: unknown;
    static ngAcceptInputType_multiColumnSort: unknown;
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineModalDrawerComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ModalDrawerComponent {
    /** Toggles whether the drawer is visible or not. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Controls the layout and animation direction of the drawer for positioning on the left vs. right side of the screen when toggling the `open` attribute. */
    set direction(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.direction = value;
        });
    }
    get direction() {
        return this.nativeElement.direction;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-modal-drawer element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineModalDrawerComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ModalDrawerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ModalDrawerComponent, selector: "forge-modal-drawer", inputs: { open: ["open", "open", booleanAttribute], direction: "direction" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ModalDrawerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-modal-drawer',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], direction: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtZHJhd2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9tb2RhbC1kcmF3ZXIvbW9kYWwtZHJhd2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBNkQsMEJBQTBCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFekgsT0FBTztBQU1QLE1BQU0sT0FBTyxvQkFBb0I7SUFLaEMsb0RBQW9EO0lBQ3BELElBQ1csSUFBSSxDQUFDLEtBQWdEO1FBQy9ELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLElBQUk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCw2SkFBNko7SUFDN0osSUFDVyxTQUFTLENBQUMsS0FBcUQ7UUFDekUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsU0FBUztRQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxZQUNDLGlCQUFvQyxFQUMxQixVQUF5RCxFQUN6RCxJQUFZO1FBRFosZUFBVSxHQUFWLFVBQVUsQ0FBK0M7UUFDekQsU0FBSSxHQUFKLElBQUksQ0FBUTtRQTVCdkIsc0NBQXNDO1FBQ3RCLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUE2QjdELDBCQUEwQixFQUFFLENBQUM7UUFDN0IsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs4R0FsQ1csb0JBQW9CO2tHQUFwQixvQkFBb0IsbUVBTVosZ0JBQWdCLHFEQVJ6QiwyQkFBMkI7OzJGQUUxQixvQkFBb0I7a0JBTGhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDO29JQVFXLElBQUk7c0JBRGQsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsU0FBUztzQkFEbkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1vZGFsRHJhd2VyQ29tcG9uZW50IGFzIE1vZGFsRHJhd2VyQ29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lTW9kYWxEcmF3ZXJDb21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2UtbW9kYWwtZHJhd2VyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgTW9kYWxEcmF3ZXJDb21wb25lbnQge1xuXG5cdC8qKiBUaGUgZm9yZ2UtbW9kYWwtZHJhd2VyIGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIFRvZ2dsZXMgd2hldGhlciB0aGUgZHJhd2VyIGlzIHZpc2libGUgb3Igbm90LiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBvcGVuKHZhbHVlOiBNb2RhbERyYXdlckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ29wZW4nXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQub3BlbiA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgb3BlbigpOiBNb2RhbERyYXdlckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ29wZW4nXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5vcGVuO1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHRoZSBsYXlvdXQgYW5kIGFuaW1hdGlvbiBkaXJlY3Rpb24gb2YgdGhlIGRyYXdlciBmb3IgcG9zaXRpb25pbmcgb24gdGhlIGxlZnQgdnMuIHJpZ2h0IHNpZGUgb2YgdGhlIHNjcmVlbiB3aGVuIHRvZ2dsaW5nIHRoZSBgb3BlbmAgYXR0cmlidXRlLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IGRpcmVjdGlvbih2YWx1ZTogTW9kYWxEcmF3ZXJDb21wb25lbnRDdXN0b21FbGVtZW50WydkaXJlY3Rpb24nXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQuZGlyZWN0aW9uID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBkaXJlY3Rpb24oKTogTW9kYWxEcmF3ZXJDb21wb25lbnRDdXN0b21FbGVtZW50WydkaXJlY3Rpb24nXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5kaXJlY3Rpb247XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG5cdFx0cHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8TW9kYWxEcmF3ZXJDb21wb25lbnRDdXN0b21FbGVtZW50Pixcblx0XHRwcm90ZWN0ZWQgem9uZTogTmdab25lXG5cdCkge1xuXHRcdGRlZmluZU1vZGFsRHJhd2VyQ29tcG9uZW50KCk7XG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWYuZGV0YWNoKCk7XG5cdH1cbn1cbiJdfQ==
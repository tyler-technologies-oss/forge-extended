// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineIconButtonComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class IconButtonComponent {
    /** Whether or not the icon button can be toggled. */
    set toggle(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.toggle = value;
        });
    }
    get toggle() {
        return this.nativeElement.toggle;
    }
    /** Whether or not the button is on. Only applies when `toggle` is `true`. */
    set on(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.on = value;
        });
    }
    get on() {
        return this.nativeElement.on;
    }
    /** The theme of the button. Valid values are `default`, `primary`, `secondary`, `tertiary`, `success`, `error`, `warning`, `info`. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** The variant of the button. Valid values are `text`, `outlined`, `filled`, and `raised`. */
    set variant(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.variant = value;
        });
    }
    get variant() {
        return this.nativeElement.variant;
    }
    /** The shape of the button. Valid values are `circular` and `squared`. */
    set shape(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.shape = value;
        });
    }
    get shape() {
        return this.nativeElement.shape;
    }
    /** The density of the button. Valid values are `small`, `medium`, and `large`. */
    set density(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.density = value;
        });
    }
    get density() {
        return this.nativeElement.density;
    }
    /** The type of button. Defaults to `button`. Valid values are `button`, `submit`, and `reset`. */
    set type(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.type = value;
        });
    }
    get type() {
        return this.nativeElement.type;
    }
    /** Whether or not the button is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether or not the button shows a built-in popover icon. */
    set popoverIcon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popoverIcon = value;
        });
    }
    get popoverIcon() {
        return this.nativeElement.popoverIcon;
    }
    /** Whether or not the button is dense. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** The name of the button. */
    set name(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.name = value;
        });
    }
    get name() {
        return this.nativeElement.name;
    }
    /** The form value of the button. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** The form reference of the button if within a `<form>` element. */
    get form() {
        return this.nativeElement.form;
    }
    /** Clicks the button. */
    click(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.click(...args));
    }
    /** Focuses the button. */
    focus(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-icon-button element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineIconButtonComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: IconButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: IconButtonComponent, selector: "forge-icon-button", inputs: { toggle: ["toggle", "toggle", booleanAttribute], on: ["on", "on", booleanAttribute], theme: "theme", variant: "variant", shape: "shape", density: "density", type: "type", disabled: ["disabled", "disabled", booleanAttribute], popoverIcon: ["popoverIcon", "popoverIcon", booleanAttribute], dense: ["dense", "dense", booleanAttribute], name: "name", value: "value" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: IconButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-icon-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { toggle: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], on: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], theme: [{
                type: Input
            }], variant: [{
                type: Input
            }], shape: [{
                type: Input
            }], density: [{
                type: Input
            }], type: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popoverIcon: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], name: [{
                type: Input
            }], value: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
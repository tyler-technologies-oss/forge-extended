import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { TabBarComponent as TabBarComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class TabBarComponent {
    protected elementRef: ElementRef<TabBarComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-tab-bar element. */
    readonly nativeElement: TabBarComponentCustomElement;
    /** Sets the disabled state of all child tabs.  If true, any new tabs added to the DOM will be disabled by default. This can be used instead of setting individual tab disabled properties, mixing the two methods of disabling is not supported. */
    set disabled(value: TabBarComponentCustomElement['disabled']);
    get disabled(): TabBarComponentCustomElement['disabled'];
    /** The index of the active tab. */
    set activeTab(value: TabBarComponentCustomElement['activeTab']);
    get activeTab(): TabBarComponentCustomElement['activeTab'];
    /** Controls whether the tab bar is vertical or horizontal. */
    set vertical(value: TabBarComponentCustomElement['vertical']);
    get vertical(): TabBarComponentCustomElement['vertical'];
    /** Controls whether the tabs stretch the full width of their container or cluster together at their minimum width. */
    set clustered(value: TabBarComponentCustomElement['clustered']);
    get clustered(): TabBarComponentCustomElement['clustered'];
    /** Controls whether the tabs are taller to allow for slotted leading/trailing elements. */
    set stacked(value: TabBarComponentCustomElement['stacked']);
    get stacked(): TabBarComponentCustomElement['stacked'];
    /** Controls whether the tabs are styled as secondary tab navigation. */
    set secondary(value: TabBarComponentCustomElement['secondary']);
    get secondary(): TabBarComponentCustomElement['secondary'];
    /** Controls whether the tabs are rendered inverted (tab indicator at top instead of bottom). */
    set inverted(value: TabBarComponentCustomElement['inverted']);
    get inverted(): TabBarComponentCustomElement['inverted'];
    /** Controls whether the tabs are automatically activated when receiving focus. */
    set autoActivate(value: TabBarComponentCustomElement['autoActivate']);
    get autoActivate(): TabBarComponentCustomElement['autoActivate'];
    /** Controls whether scroll buttons are displayed when the tabs overflow their container. */
    set scrollButtons(value: TabBarComponentCustomElement['scrollButtons']);
    get scrollButtons(): TabBarComponentCustomElement['scrollButtons'];
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<TabBarComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<TabBarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TabBarComponent, "forge-tab-bar", never, { "disabled": { "alias": "disabled"; "required": false; }; "activeTab": { "alias": "activeTab"; "required": false; }; "vertical": { "alias": "vertical"; "required": false; }; "clustered": { "alias": "clustered"; "required": false; }; "stacked": { "alias": "stacked"; "required": false; }; "secondary": { "alias": "secondary"; "required": false; }; "inverted": { "alias": "inverted"; "required": false; }; "autoActivate": { "alias": "autoActivate"; "required": false; }; "scrollButtons": { "alias": "scrollButtons"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_activeTab: unknown;
    static ngAcceptInputType_vertical: unknown;
    static ngAcceptInputType_clustered: unknown;
    static ngAcceptInputType_stacked: unknown;
    static ngAcceptInputType_secondary: unknown;
    static ngAcceptInputType_inverted: unknown;
    static ngAcceptInputType_autoActivate: unknown;
    static ngAcceptInputType_scrollButtons: unknown;
}

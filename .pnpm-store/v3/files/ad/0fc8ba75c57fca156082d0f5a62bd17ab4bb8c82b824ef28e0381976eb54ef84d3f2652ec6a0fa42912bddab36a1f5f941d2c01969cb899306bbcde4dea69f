import { EventAware } from '../events/event-aware';
import { ScrollEvents, ScrollDirection } from './scroll-types';
import { isDefined, throttle, isNumber } from '../utils';
const DEFAULT_SCROLL_THROTTLE = 100;
/**
 * Provides facilties for observing and reacting to scroll events and information on a given element.
 */
export class ScrollAxisObserver extends EventAware {
    constructor(_element, _config = {}) {
        super();
        this._element = _element;
        this._config = _config;
        this._axis = 'vertical';
        this._scrollThreshold = 0;
        this._lastScrollPosition = 0;
        this._lastScrollTop = 0;
        this._lastScrollLeft = 0;
        this._isListening = false;
        this._initialize();
    }
    destroy() {
        this.stop();
    }
    start() {
        if (!this._isListening) {
            this._element.addEventListener('scroll', this._scrollListener);
            this._isListening = true;
        }
    }
    stop() {
        this._element.removeEventListener('scroll', this._scrollListener);
        this._isListening = false;
    }
    _initialize() {
        if (this._config.throttle) {
            const wait = this._config.throttleTime || DEFAULT_SCROLL_THROTTLE;
            this._scrollListener = throttle(() => this._onScroll(), wait);
        }
        else {
            this._scrollListener = () => this._onScroll();
        }
        if (!isDefined(this._config.paused) || !this._config.paused) {
            this.start();
        }
        if (isDefined(this._config.axis)) {
            this._axis = this._config.axis;
        }
        if (isDefined(this._config.scrollThreshold) && isNumber(this._config.scrollThreshold)) {
            this._scrollThreshold = this._config.scrollThreshold;
        }
    }
    _isScrollAxis() {
        const isVertical = this._lastScrollTop !== this._element.scrollTop;
        const isHorizontal = this._lastScrollLeft !== this._element.scrollLeft;
        return (this._axis === 'vertical' && isVertical) || (this._axis === 'horizontal' && isHorizontal);
    }
    _onScroll() {
        if (!this._isScrollAxis()) {
            return;
        }
        const position = this.scrollPosition;
        const direction = this._lastScrollPosition - position < 0 ? this._axis === 'vertical' ? ScrollDirection.Down : ScrollDirection.Right : this._axis === 'vertical' ? ScrollDirection.Up : ScrollDirection.Left;
        this._emit(ScrollEvents.Scroll, { direction, position });
        if (this._lastScrollPosition <= this._scrollThreshold && position > this._scrollThreshold) {
            this._emit(ScrollEvents.Scrolled, true);
        }
        else if (this._lastScrollPosition >= this._scrollThreshold && (this._scrollThreshold > 0 ? position < this._scrollThreshold : position === 0)) {
            this._emit(ScrollEvents.Scrolled, false);
        }
        const scrollStart = Math.round(position - this._scrollThreshold);
        const scrollEnd = Math.round(this.scrollSize - position);
        if (this._lastScrollPosition >= this._scrollThreshold && scrollStart <= 0) {
            this._emit(ScrollEvents.ScrolledStart);
        }
        else if (this._lastScrollPosition <= (this.scrollSize - this._scrollThreshold) && scrollEnd <= this._scrollThreshold) {
            this._emit(ScrollEvents.ScrolledEnd);
        }
        this._lastScrollPosition = position || 0;
        this._lastScrollTop = this._element.scrollTop || 0;
        this._lastScrollLeft = this._element.scrollLeft || 0;
    }
    get scrollPosition() {
        return this._axis === 'vertical' ? this._element.scrollTop : this._element.scrollLeft;
    }
    get isScrolled() {
        return this.scrollPosition > this._scrollThreshold;
    }
    get isScrolledStart() {
        return this.scrollPosition === 0;
    }
    get isScrolledEnd() {
        return this.scrollPosition === this._element.scrollWidth;
    }
    get isScrollable() {
        if (this._axis === 'vertical') {
            return this._element.scrollHeight > this._element.clientHeight;
        }
        return this._element.scrollWidth > this._element.clientWidth;
    }
    get scrollSize() {
        return (this._axis === 'vertical' ? this._element.scrollHeight : this._element.scrollWidth) - this.elementSize;
    }
    get elementSize() {
        return this._axis === 'vertical' ? this._element.clientHeight : this._element.clientWidth;
    }
    setScrollPosition(position) {
        if (this._axis === 'vertical') {
            this._element.scrollTop = position;
        }
        else {
            this._element.scrollLeft = position;
        }
    }
}

import { ApplicationRef, EnvironmentInjector, Injector, NgZone } from '@angular/core';
import { Type, NgModuleRef } from '@angular/core';
import { IDialogProperties } from '@tylertech/forge';
import { DialogConfig } from './dialog-config';
import { DialogRef } from './dialog-ref';
import * as i0 from "@angular/core";
export interface IDialogOptions extends Partial<IDialogProperties> {
    dialogClass?: string;
    attributes?: Map<string, string>;
}
export interface IDialogServiceShowConfiguration<TModule = unknown> {
    options?: IDialogOptions;
    config?: DialogConfig;
    data?: any;
    module?: NgModuleRef<TModule>;
    injector?: EnvironmentInjector;
    elementInjector?: Injector;
}
/**
 * Provides facilities for working with a Forge dialog and placing dynamic components within it.
 */
export declare class DialogService {
    private _appRef;
    private _injector;
    private _ngZone;
    private _openDialogRefs;
    private _destroyRef;
    constructor(_appRef: ApplicationRef, _injector: EnvironmentInjector, _ngZone: NgZone);
    /**
     * Displays a component within a Forge dialog instance.
     * @deprecated Use `open()` instead.
     * @param component The component reference.
     * @param config The configuration to provide to the dynamic component as an injectable token.
     * @param moduleRef Optional NgModule ref if need by the component.
     * @param envInjector Optional environment injector to provide to the component.
     * @returns A reference for interacting with the created dialog.
     */
    show<T, K>(component: Type<T>, options?: IDialogOptions, config?: DialogConfig, moduleRef?: NgModuleRef<K>, envInjector?: EnvironmentInjector): DialogRef<T>;
    /**
     * Opens a Forge dialog with the provided component.
     * @param component The component reference.
     * @param configuration The configuration for the dialog.
     * @returns A reference for interacting with the created dialog.
     */
    open<TComponent, TModule>(component: Type<TComponent>, configuration?: IDialogServiceShowConfiguration<TModule>): DialogRef<TComponent>;
    private _showDialog;
    /**
     * Closes all dialogs.
     * @param result The result of closing the dialogs. Default is false.
     */
    closeAllDialogs(result?: boolean): void;
    private _closeAllDialogs;
    private _removeDialogRef;
    static ɵfac: i0.ɵɵFactoryDeclaration<DialogService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DialogService>;
}

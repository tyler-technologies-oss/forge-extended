/**
 * Recursively defines a component as a custom elements and all of its dependencies.
 * @param component The component to import.
 */
export declare function defineCustomElement(component: any): void;
/**
 * Defines the specified custom element components.
 * @param {any[]} components The components to register.
 */
export declare function defineCustomElements(components: any[]): void;
/**
 * Attempts to define the provided custom element name/constructor if not already defined.
 * @param name The name of the custom element to define.
 * @param ctor The custom element constructor.
 */
export declare function tryDefine(name: string, ctor: CustomElementConstructor, options?: ElementDefinitionOptions | undefined): void;
/**
 * Useful when capturing the value of a unupgraded component during the `connectedCallback` upon upgrade.
 *
 * More information here:
 * https://developers.google.com/web/fundamentals/architecture/building-components/best-practices#lazy-properties
 *
 * @param property
 */
export declare function upgradeProperty<T extends HTMLElement>(instance: T, property: keyof T): void;
/**
 * Traverses up the DOM tree starting from the provided component element to find the specified parent.
 * @param {HTMLElement} component The starting HTMLElement.
 * @param {string} parentTagName The parent tag name we are searching for.
 */
export declare function requireParent<T extends HTMLElement>(component: HTMLElement, parentTagName: string): T | null;
/**
 * Creates a template element from a string.
 * @param template The template HTML string.
 */
export declare function parseTemplateString(template: string): HTMLTemplateElement;
/**
 * Attaches a template to the given web component instance light DOM.
 * @param {T} componentInstance A component instance.
 * @param {string} template The template HTML string.
 */
export declare function attachLightTemplate<T extends HTMLElement>(componentInstance: T, template: string): void;
/**
 * Attaches a shadow root to the given web component instance.
 * @param {T} componentInstance A component instance.
 * @param {string} elementName The name of the element the shadow root is to be attached to.
 * @param {string | HTMLTemplateElement} template The shadow root template HTML string or element.
 * @param {string | string[]} styles The shadow root styles string to be encapsulated by this shadow root.
 * @param {boolean} [delegatesFocus=false] Should the component delegate focus.
 */
export declare function attachShadowTemplate<T extends HTMLElement>(componentInstance: T, template: string | HTMLTemplateElement, styles?: string | string[], delegatesFocus?: boolean): void;
/**
 * Replaces the template of an existing shadow root with the provided template.
 * @param {T} componentInstance A component instance.
 * @param {string} elementName The name of the element the shadow root is to be attached to.
 * @param {string | HTMLTemplateElement} template The shadow root template HTML string or element.
 * @param {string | string[]} styles The shadow root styles string to be encapsulated by this shadow root.
 */
export declare function replaceShadowTemplate<T extends HTMLElement>(componentInstance: T, template: string | HTMLTemplateElement, styles?: string | string[]): void;
/**
 * Creates and prepares an HTML template element for rendering within a shadow root.
 * @param {string} elementName The name of the element the shadow root is to be attached to.
 * @param {string} template The shadow root template HTML string.
 * @param {string | string[]} styles The shadow root styles string to be encapsulated by this shadow root.
 */
export declare function prepareShadowTemplate(template: string, styles?: string | string[]): HTMLTemplateElement;
/**
 * Appends a template to the provided components shadow root.
 * @param {T} componentInstance A component instance.
 * @param {string | HTMLTemplateElement} template A template string or template element to be cloned.
 */
export declare function setShadowTemplate<T extends HTMLElement>(componentInstance: T, template: string | HTMLTemplateElement, { force }?: {
    force: boolean;
}): void;
/**
 * Applies styles to the shadow root of the provided element instance.
 * @param {T} componentInstance A component instance.
 * @param {string | string[]} styles The styles to be applied to the shadow root.
 * @param options Options for setting the styles.
 */
export declare function setShadowStyles<T extends HTMLElement>(componentInstance: T, styles: string | string[], { force }?: {
    force: boolean;
}): void;
/**
 * Re-applies styles to the shadow root of the provided element instance. This function is
 * intended to be called after an element has been adopted by a new document to reconstruct the
 * adopted stylesheet instances within the context (view) of the new document.
 *
 * @param componentInstance The component instance to reapply styles to.
 */
export declare function readoptStyles<T extends HTMLElement>(componentInstance: T): void;
/**
 * Gets an HTML element using a query selector from the provided components` shadow root.
 * @param {HTMLElement} componentInstance The component instance that contains a shadow root.
 * @param {string} selector The selector to be passed to `querySelector`.
 */
export declare function getShadowElement<T extends HTMLElement>(componentInstance: T, selector: string): HTMLElement;
/**
 * Gets an HTML element using a query selector from the provided components` light DOM.
 * @param {HTMLElement} componentInstance The component instance.
 * @param {string} selector The selector to be passed to `querySelector`.
 */
export declare function getLightElement<T extends HTMLElement>(componentInstance: T, selector: string): HTMLElement;
/**
 * Creates and dispatches a cross-browser `CustomEvent` with the provided type and data.
 * @param {string} type
 * @param {any} data
 * @param {boolean=} bubble
 */
export declare function emitEvent<T extends HTMLElement>(component: T, type: string, data: any, bubble?: boolean, cancelable?: boolean): boolean;
/**
 * Replaces the provided element with a placeholder comment and vice versa.
 * Useful for hiding and showing elements while retaining their location in the DOM.
 * @param {boolean} isVisible Whether the element is visible or not.
 * @param {string} elementName The element tag name.
 * @param {string} selector The selector used to find the element
 * @param {Node} element The element
 * @param {Comment} placeholder The existing placeholder
 */
export declare function toggleElementPlaceholder(component: HTMLElement, isVisible: boolean, elementName: string, selector: string, element: Node, placeholder: Comment): Comment;
/**
 * Walks up the tree starting a specific node and stops when it finds a shadow root.
 * @param {Node} node The node to start searching from.
 * @returns {ShadowRoot | null} The closest shadow root ancestor, or null if not inside a shadow root.
 */
export declare function getClosestShadowRoot(node: Node): ShadowRoot | null;
/**
 * Finds the closest element up the tree from a starting element across shadow boundaries.
 * @param selector The CSS selector for the element to find.
 * @param startElement The element to start finding from.
 */
export declare function closestElement(selector: string, startElement: Element): Element | null;

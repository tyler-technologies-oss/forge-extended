import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { ButtonToggleComponent as ButtonToggleComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class ButtonToggleComponent {
    protected elementRef: ElementRef<ButtonToggleComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-button-toggle element. */
    readonly nativeElement: ButtonToggleComponentCustomElement<unknown>;
    /** The value of the button toggle. */
    set value(value: ButtonToggleComponentCustomElement['value']);
    get value(): ButtonToggleComponentCustomElement['value'];
    /** Whether or not the button is selected. */
    set selected(value: ButtonToggleComponentCustomElement['selected']);
    get selected(): ButtonToggleComponentCustomElement['selected'];
    /** Whether or not the button is disabled. */
    set disabled(value: ButtonToggleComponentCustomElement['disabled']);
    get disabled(): ButtonToggleComponentCustomElement['disabled'];
    /** Whether or not the button is readonly. */
    set readonly(value: ButtonToggleComponentCustomElement['readonly']);
    get readonly(): ButtonToggleComponentCustomElement['readonly'];
    focus(...args: Parameters<ButtonToggleComponentCustomElement['focus']>): ReturnType<ButtonToggleComponentCustomElement['focus']>;
    click(...args: Parameters<ButtonToggleComponentCustomElement['click']>): ReturnType<ButtonToggleComponentCustomElement['click']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<ButtonToggleComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<ButtonToggleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ButtonToggleComponent, "forge-button-toggle", never, { "value": { "alias": "value"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_selected: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_readonly: unknown;
}

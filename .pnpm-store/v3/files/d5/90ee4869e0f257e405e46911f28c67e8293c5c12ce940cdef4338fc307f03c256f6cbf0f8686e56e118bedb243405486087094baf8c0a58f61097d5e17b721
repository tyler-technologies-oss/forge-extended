/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { KeyboardShortcutActivateCallback } from './keyboard-shortcut-constants';
import { BaseComponent, IBaseComponent } from '../core/base/base-component';
export interface IKeyboardShortcutComponent extends IBaseComponent {
    key: string | null | undefined;
    keyBinding: string | null | undefined;
    target: string;
    global: boolean;
    allowWhileTyping: boolean;
    preventDefault: boolean;
    capture: boolean;
    useCode: boolean;
    disabled: boolean;
    activateCallback: KeyboardShortcutActivateCallback | null | undefined;
}
declare global {
    interface HTMLElementTagNameMap {
        'forge-keyboard-shortcut': IKeyboardShortcutComponent;
    }
    interface HTMLElementEventMap {
        'forge-keyboard-shortcut-activate': CustomEvent<KeyboardEvent>;
    }
}
/**
 * @tag forge-keyboard-shortcut
 *
 * @event {CustomEvent<KeyboardEvent>} forge-keyboard-shortcut-activate - Event fired when the keyboard shortcut is activated.
 */
export declare class KeyboardShortcutComponent extends BaseComponent implements IKeyboardShortcutComponent {
    static get observedAttributes(): string[];
    private _core;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /**
     * Gets/sets the key binding.
     * @attribute
     */
    key: string | null | undefined;
    /**
     * Alias for key.
     * @attribute key-binding
     *
     */
    get keyBinding(): string | null | undefined;
    set keyBinding(value: string | null | undefined);
    /**
     * Gets/sets the target element selector.
     * @attribute
     */
    target: string;
    /**
     * Gets/sets the global listener state.
     * @attribute
     */
    global: boolean;
    /**
     * Gets/sets whether the callback will be called while in a text entry field.
     * @attribute allow-while-typing
     * @default false
     */
    allowWhileTyping: boolean;
    /**
     * Gets/sets whether to prevent default on keyboard events
     * @attribute prevent-default
     * @default true
     */
    preventDefault: boolean;
    /**
     * Gets/sets whether to use capturing on keyboard events
     * @attribute
     * @default false
     */
    capture: boolean;
    /**
     * Gets/sets whether to match codes instead of keys on keyboard events.
     * @attribute use-code
     * @default false
     */
    useCode: boolean;
    /**
     * Gets/sets whether the callback will be called.
     * @attribute
     * @default false
     */
    disabled: boolean;
    /**
     * Gets/sets whether the activation callback.
     */
    activateCallback: KeyboardShortcutActivateCallback | null | undefined;
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineExpansionPanelComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ExpansionPanelComponent {
    /** Whether the panel is open or closed. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** The orientation of the panel. */
    set orientation(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.orientation = value;
        });
    }
    get orientation() {
        return this.nativeElement.orientation;
    }
    /** The type of animation to use when opening/closing the panel. */
    set animationType(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.animationType = value;
        });
    }
    get animationType() {
        return this.nativeElement.animationType;
    }
    /** Toggles the open state of the panel. */
    toggle(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.toggle(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-expansion-panel element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineExpansionPanelComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ExpansionPanelComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ExpansionPanelComponent, selector: "forge-expansion-panel", inputs: { open: ["open", "open", booleanAttribute], orientation: "orientation", animationType: "animationType" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ExpansionPanelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-expansion-panel',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], orientation: [{
                type: Input
            }], animationType: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9leHBhbnNpb24tcGFuZWwvZXhwYW5zaW9uLXBhbmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBbUUsNkJBQTZCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFbEksT0FBTztBQU1QLE1BQU0sT0FBTyx1QkFBdUI7SUFLbkMsMkNBQTJDO0lBQzNDLElBQ1csSUFBSSxDQUFDLEtBQW1EO1FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLElBQUk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxvQ0FBb0M7SUFDcEMsSUFDVyxXQUFXLENBQUMsS0FBMEQ7UUFDaEYsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsV0FBVztRQUNyQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxtRUFBbUU7SUFDbkUsSUFDVyxhQUFhLENBQUMsS0FBNEQ7UUFDcEYsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsYUFBYTtRQUN2QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO0lBQ3pDLENBQUM7SUFFRCwyQ0FBMkM7SUFDcEMsTUFBTSxDQUFDLEdBQUcsSUFBZ0U7UUFDaEYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsWUFDQyxpQkFBb0MsRUFDMUIsVUFBNEQsRUFDNUQsSUFBWTtRQURaLGVBQVUsR0FBVixVQUFVLENBQWtEO1FBQzVELFNBQUksR0FBSixJQUFJLENBQVE7UUE1Q3ZCLHlDQUF5QztRQUN6QixrQkFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBNkM3RCw2QkFBNkIsRUFBRSxDQUFDO1FBQ2hDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7OEdBbERXLHVCQUF1QjtrR0FBdkIsdUJBQXVCLHNFQU1mLGdCQUFnQix5RkFSekIsMkJBQTJCOzsyRkFFMUIsdUJBQXVCO2tCQUxuQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0QztvSUFRVyxJQUFJO3NCQURkLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLFdBQVc7c0JBRHJCLEtBQUs7Z0JBWUssYUFBYTtzQkFEdkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEV4cGFuc2lvblBhbmVsQ29tcG9uZW50IGFzIEV4cGFuc2lvblBhbmVsQ29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lRXhwYW5zaW9uUGFuZWxDb21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2UtZXhwYW5zaW9uLXBhbmVsJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgRXhwYW5zaW9uUGFuZWxDb21wb25lbnQge1xuXG5cdC8qKiBUaGUgZm9yZ2UtZXhwYW5zaW9uLXBhbmVsIGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIFdoZXRoZXIgdGhlIHBhbmVsIGlzIG9wZW4gb3IgY2xvc2VkLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBvcGVuKHZhbHVlOiBFeHBhbnNpb25QYW5lbENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ29wZW4nXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQub3BlbiA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgb3BlbigpOiBFeHBhbnNpb25QYW5lbENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ29wZW4nXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5vcGVuO1xuXHR9XG5cblx0LyoqIFRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcGFuZWwuICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgb3JpZW50YXRpb24odmFsdWU6IEV4cGFuc2lvblBhbmVsQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnb3JpZW50YXRpb24nXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQub3JpZW50YXRpb24gPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IG9yaWVudGF0aW9uKCk6IEV4cGFuc2lvblBhbmVsQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnb3JpZW50YXRpb24nXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5vcmllbnRhdGlvbjtcblx0fVxuXG5cdC8qKiBUaGUgdHlwZSBvZiBhbmltYXRpb24gdG8gdXNlIHdoZW4gb3BlbmluZy9jbG9zaW5nIHRoZSBwYW5lbC4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCBhbmltYXRpb25UeXBlKHZhbHVlOiBFeHBhbnNpb25QYW5lbENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2FuaW1hdGlvblR5cGUnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQuYW5pbWF0aW9uVHlwZSA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgYW5pbWF0aW9uVHlwZSgpOiBFeHBhbnNpb25QYW5lbENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2FuaW1hdGlvblR5cGUnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5hbmltYXRpb25UeXBlO1xuXHR9XG5cblx0LyoqIFRvZ2dsZXMgdGhlIG9wZW4gc3RhdGUgb2YgdGhlIHBhbmVsLiAqL1xuXHRwdWJsaWMgdG9nZ2xlKC4uLmFyZ3M6IFBhcmFtZXRlcnM8RXhwYW5zaW9uUGFuZWxDb21wb25lbnRDdXN0b21FbGVtZW50Wyd0b2dnbGUnXT4pOiBSZXR1cm5UeXBlPEV4cGFuc2lvblBhbmVsQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsndG9nZ2xlJ10+IHtcblx0XHRyZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMubmF0aXZlRWxlbWVudC50b2dnbGUoLi4uYXJncykpO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEV4cGFuc2lvblBhbmVsQ29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVFeHBhbnNpb25QYW5lbENvbXBvbmVudCgpO1xuXHRcdGNoYW5nZURldGVjdG9yUmVmLmRldGFjaCgpO1xuXHR9XG59XG4iXX0=
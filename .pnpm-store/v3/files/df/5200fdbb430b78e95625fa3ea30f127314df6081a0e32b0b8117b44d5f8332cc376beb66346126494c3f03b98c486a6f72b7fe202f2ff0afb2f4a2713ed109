import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { LabelComponent as LabelComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class LabelComponent {
    protected elementRef: ElementRef<LabelComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-label element. */
    readonly nativeElement: LabelComponentCustomElement;
    /** The id of the associated element. */
    set for(value: LabelComponentCustomElement['for']);
    get for(): LabelComponentCustomElement['for'];
    /** The associated element. */
    set forElement(value: LabelComponentCustomElement['forElement']);
    get forElement(): LabelComponentCustomElement['forElement'];
    /** The element that a click should be simulated on. If not defined clicks act on the associated element. */
    set clickTarget(value: LabelComponentCustomElement['clickTarget']);
    get clickTarget(): LabelComponentCustomElement['clickTarget'];
    /** Propagates changes in the label's text content to the associated element. */
    set dynamic(value: LabelComponentCustomElement['dynamic']);
    get dynamic(): LabelComponentCustomElement['dynamic'];
    /** Removes click handling from the label. */
    set nonInteractive(value: LabelComponentCustomElement['nonInteractive']);
    get nonInteractive(): LabelComponentCustomElement['nonInteractive'];
    /** Whether or not the label should be associated with an ancestor element. */
    set legend(value: LabelComponentCustomElement['legend']);
    get legend(): LabelComponentCustomElement['legend'];
    /** Updates the targeted element with the label's current text content. */
    update(...args: Parameters<LabelComponentCustomElement['update']>): ReturnType<LabelComponentCustomElement['update']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<LabelComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<LabelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LabelComponent, "forge-label", never, { "for": { "alias": "for"; "required": false; }; "forElement": { "alias": "forElement"; "required": false; }; "clickTarget": { "alias": "clickTarget"; "required": false; }; "dynamic": { "alias": "dynamic"; "required": false; }; "nonInteractive": { "alias": "nonInteractive"; "required": false; }; "legend": { "alias": "legend"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_dynamic: unknown;
    static ngAcceptInputType_nonInteractive: unknown;
    static ngAcceptInputType_legend: unknown;
}

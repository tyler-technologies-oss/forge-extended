/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { isDefined } from '@tylertech/forge-core';
import { BASE_DRAWER_CONSTANTS } from './base-drawer-constants';
import { frame } from '../../core/utils/utils';
export class BaseDrawerCore {
    constructor(_adapter) {
        this._adapter = _adapter;
        this._open = true;
        this._direction = 'left';
        this._openAnimationListener = () => this._onOpenComplete();
        this._closeAnimationListener = () => this._onCloseComplete();
    }
    initialize() {
        if (this._open) {
            this._setOpened();
        }
        else {
            this._setClosed();
        }
        this._applyDirection();
        this._adapter.proxyScrollEvent();
    }
    destroy() {
        this._adapter.tryUnproxyScrollEvent();
    }
    _applyDirection() {
        this._adapter.setDirection(this._direction);
        this._adapter.setHostAttribute(BASE_DRAWER_CONSTANTS.attributes.DIRECTION, isDefined(this._direction) ? this._direction.toString() : '');
    }
    _onOpenComplete() {
        if (!this._open) {
            return;
        }
        this._setOpened();
        const event = new CustomEvent(BASE_DRAWER_CONSTANTS.events.AFTER_OPEN, { bubbles: true, composed: true });
        this._adapter.dispatchHostEvent(event);
    }
    _onCloseComplete() {
        if (this._open) {
            return;
        }
        this._setClosed();
        const event = new CustomEvent(BASE_DRAWER_CONSTANTS.events.AFTER_CLOSE, { bubbles: true, composed: true });
        this._adapter.dispatchHostEvent(event);
    }
    _setOpened() {
        this._adapter.removeDrawerClass([BASE_DRAWER_CONSTANTS.classes.CLOSED, BASE_DRAWER_CONSTANTS.classes.CLOSING]);
        this._adapter.setHostAttribute(BASE_DRAWER_CONSTANTS.attributes.OPEN);
    }
    _setClosed() {
        this._adapter.removeDrawerClass([BASE_DRAWER_CONSTANTS.classes.CLOSING, BASE_DRAWER_CONSTANTS.classes.NO_TRANSITION]);
        this._adapter.setDrawerClass(BASE_DRAWER_CONSTANTS.classes.CLOSED);
        this._adapter.removeHostAttribute(BASE_DRAWER_CONSTANTS.attributes.OPEN);
    }
    _applyOpen() {
        if (this._open) {
            this._triggerDrawerOpen();
            this._adapter.setHostAttribute(BASE_DRAWER_CONSTANTS.attributes.OPEN);
        }
        else {
            this._triggerDrawerClose();
            this._adapter.removeHostAttribute(BASE_DRAWER_CONSTANTS.attributes.OPEN);
        }
    }
    async _triggerDrawerOpen() {
        this._adapter.listenTransitionComplete(this._openAnimationListener);
        await frame();
        this._adapter.removeDrawerClass([BASE_DRAWER_CONSTANTS.classes.CLOSED, BASE_DRAWER_CONSTANTS.classes.CLOSING]);
    }
    async _triggerDrawerClose() {
        this._adapter.listenTransitionComplete(this._closeAnimationListener);
        await frame();
        this._adapter.setDrawerClass(BASE_DRAWER_CONSTANTS.classes.CLOSING);
    }
    get open() {
        return this._open;
    }
    set open(value) {
        value = Boolean(value);
        if (this._open !== value) {
            this._open = value;
            if (this._adapter.isConnected) {
                this._applyOpen();
            }
        }
    }
    get direction() {
        return this._direction;
    }
    set direction(value) {
        if (this._direction !== value) {
            this._direction = value;
            if (this._adapter.isConnected) {
                this._applyDirection();
            }
        }
    }
}

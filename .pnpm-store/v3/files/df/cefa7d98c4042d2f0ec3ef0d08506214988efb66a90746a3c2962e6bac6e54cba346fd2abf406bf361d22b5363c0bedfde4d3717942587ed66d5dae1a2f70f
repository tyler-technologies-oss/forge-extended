import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { FloatingActionButtonComponent as FloatingActionButtonComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class FloatingActionButtonComponent {
    protected elementRef: ElementRef<FloatingActionButtonComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-fab element. */
    readonly nativeElement: FloatingActionButtonComponentCustomElement;
    /** Sets the theme of the button. */
    set theme(value: FloatingActionButtonComponentCustomElement['theme']);
    get theme(): FloatingActionButtonComponentCustomElement['theme'];
    /** Sets the density of the button. */
    set density(value: FloatingActionButtonComponentCustomElement['density']);
    get density(): FloatingActionButtonComponentCustomElement['density'];
    /** Sets the elevation of the button. */
    set elevation(value: FloatingActionButtonComponentCustomElement['elevation']);
    get elevation(): FloatingActionButtonComponentCustomElement['elevation'];
    get form(): FloatingActionButtonComponentCustomElement['form'];
    /** The name of the button. */
    set name(value: FloatingActionButtonComponentCustomElement['name']);
    get name(): FloatingActionButtonComponentCustomElement['name'];
    /** The value of the button. */
    set value(value: FloatingActionButtonComponentCustomElement['value']);
    get value(): FloatingActionButtonComponentCustomElement['value'];
    /** Sets the type of the button. Possible values are `button`, `submit`, and `reset`. */
    set type(value: FloatingActionButtonComponentCustomElement['type']);
    get type(): FloatingActionButtonComponentCustomElement['type'];
    /** Disables the button. */
    set disabled(value: FloatingActionButtonComponentCustomElement['disabled']);
    get disabled(): FloatingActionButtonComponentCustomElement['disabled'];
    /** Shows a popover icon on the button. */
    set popoverIcon(value: FloatingActionButtonComponentCustomElement['popoverIcon']);
    get popoverIcon(): FloatingActionButtonComponentCustomElement['popoverIcon'];
    /** Sets the density of the button. */
    set dense(value: FloatingActionButtonComponentCustomElement['dense']);
    get dense(): FloatingActionButtonComponentCustomElement['dense'];
    /** Clicks the button. */
    click(...args: Parameters<FloatingActionButtonComponentCustomElement['click']>): ReturnType<FloatingActionButtonComponentCustomElement['click']>;
    /** Focuses the button. */
    focus(...args: Parameters<FloatingActionButtonComponentCustomElement['focus']>): ReturnType<FloatingActionButtonComponentCustomElement['focus']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<FloatingActionButtonComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<FloatingActionButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FloatingActionButtonComponent, "forge-fab", never, { "theme": { "alias": "theme"; "required": false; }; "density": { "alias": "density"; "required": false; }; "elevation": { "alias": "elevation"; "required": false; }; "name": { "alias": "name"; "required": false; }; "value": { "alias": "value"; "required": false; }; "type": { "alias": "type"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "popoverIcon": { "alias": "popoverIcon"; "required": false; }; "dense": { "alias": "dense"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_popoverIcon: unknown;
    static ngAcceptInputType_dense: unknown;
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineAppBarSearchComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class AppBarSearchComponent {
    /** The value of the input. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** A boolean property that, if true, indicates that the input should be disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** The placeholder text of the input. */
    set placeholder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.placeholder = value;
        });
    }
    get placeholder() {
        return this.nativeElement.placeholder;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-app-bar-search element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineAppBarSearchComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AppBarSearchComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: AppBarSearchComponent, selector: "forge-app-bar-search", inputs: { value: "value", disabled: ["disabled", "disabled", booleanAttribute], placeholder: "placeholder" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AppBarSearchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-app-bar-search',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { value: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], placeholder: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWJhci1zZWFyY2guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL2FwcC1iYXItc2VhcmNoL2FwcC1iYXItc2VhcmNoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBK0QsMkJBQTJCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFNUgsT0FBTztBQU1QLE1BQU0sT0FBTyxxQkFBcUI7SUFLakMsOEJBQThCO0lBQzlCLElBQ1csS0FBSyxDQUFDLEtBQWtEO1FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLEtBQUs7UUFDZixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxxRkFBcUY7SUFDckYsSUFDVyxRQUFRLENBQUMsS0FBcUQ7UUFDeEUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsUUFBUTtRQUNsQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCx5Q0FBeUM7SUFDekMsSUFDVyxXQUFXLENBQUMsS0FBd0Q7UUFDOUUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsV0FBVztRQUNyQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxZQUNDLGlCQUFvQyxFQUMxQixVQUEwRCxFQUMxRCxJQUFZO1FBRFosZUFBVSxHQUFWLFVBQVUsQ0FBZ0Q7UUFDMUQsU0FBSSxHQUFKLElBQUksQ0FBUTtRQXZDdkIsd0NBQXdDO1FBQ3hCLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUF3QzdELDJCQUEyQixFQUFFLENBQUM7UUFDOUIsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs4R0E3Q1cscUJBQXFCO2tHQUFyQixxQkFBcUIsaUdBaUJiLGdCQUFnQix5REFuQnpCLDJCQUEyQjs7MkZBRTFCLHFCQUFxQjtrQkFMakMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7b0lBUVcsS0FBSztzQkFEZixLQUFLO2dCQVlLLFFBQVE7c0JBRGxCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLFdBQVc7c0JBRHJCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGNvZGUgd2FzIGdlbmVyYXRlZCBieSB0aGUgYW5ndWxhci1jdXN0b20tZWxlbWVudHMtc2NoZW1hdGljLiAgQW55IGNoYW5nZXMgd2lsbCBiZSBvdmVyd3JpdHRlbiBuZXh0IHRpbWUgaXQgcnVucy5cbmltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBOZ1pvbmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBCYXJTZWFyY2hDb21wb25lbnQgYXMgQXBwQmFyU2VhcmNoQ29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lQXBwQmFyU2VhcmNoQ29tcG9uZW50IH0gZnJvbSAnQHR5bGVydGVjaC9mb3JnZSc7XG5cbi8qKiAgKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZvcmdlLWFwcC1iYXItc2VhcmNoJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgQXBwQmFyU2VhcmNoQ29tcG9uZW50IHtcblxuXHQvKiogVGhlIGZvcmdlLWFwcC1iYXItc2VhcmNoIGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIFRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQuICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgdmFsdWUodmFsdWU6IEFwcEJhclNlYXJjaENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3ZhbHVlJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnZhbHVlID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB2YWx1ZSgpOiBBcHBCYXJTZWFyY2hDb21wb25lbnRDdXN0b21FbGVtZW50Wyd2YWx1ZSddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnZhbHVlO1xuXHR9XG5cblx0LyoqIEEgYm9vbGVhbiBwcm9wZXJ0eSB0aGF0LCBpZiB0cnVlLCBpbmRpY2F0ZXMgdGhhdCB0aGUgaW5wdXQgc2hvdWxkIGJlIGRpc2FibGVkLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBkaXNhYmxlZCh2YWx1ZTogQXBwQmFyU2VhcmNoQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZGlzYWJsZWQnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQuZGlzYWJsZWQgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGRpc2FibGVkKCk6IEFwcEJhclNlYXJjaENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2Rpc2FibGVkJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuZGlzYWJsZWQ7XG5cdH1cblxuXHQvKiogVGhlIHBsYWNlaG9sZGVyIHRleHQgb2YgdGhlIGlucHV0LiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IHBsYWNlaG9sZGVyKHZhbHVlOiBBcHBCYXJTZWFyY2hDb21wb25lbnRDdXN0b21FbGVtZW50WydwbGFjZWhvbGRlciddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5wbGFjZWhvbGRlciA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgcGxhY2Vob2xkZXIoKTogQXBwQmFyU2VhcmNoQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncGxhY2Vob2xkZXInXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5wbGFjZWhvbGRlcjtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxBcHBCYXJTZWFyY2hDb21wb25lbnRDdXN0b21FbGVtZW50Pixcblx0XHRwcm90ZWN0ZWQgem9uZTogTmdab25lXG5cdCkge1xuXHRcdGRlZmluZUFwcEJhclNlYXJjaENvbXBvbmVudCgpO1xuXHRcdGNoYW5nZURldGVjdG9yUmVmLmRldGFjaCgpO1xuXHR9XG59XG4iXX0=
// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineDeprecatedIconButtonComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class DeprecatedIconButtonComponent {
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    set toggle(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.toggle = value;
        });
    }
    get toggle() {
        return this.nativeElement.toggle;
    }
    set isOn(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.isOn = value;
        });
    }
    get isOn() {
        return this.nativeElement.isOn;
    }
    set densityLevel(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.densityLevel = value;
        });
    }
    get densityLevel() {
        return this.nativeElement.densityLevel;
    }
    focus(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-deprecated-icon-button element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineDeprecatedIconButtonComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DeprecatedIconButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: DeprecatedIconButtonComponent, selector: "forge-deprecated-icon-button", inputs: { disabled: ["disabled", "disabled", booleanAttribute], toggle: ["toggle", "toggle", booleanAttribute], isOn: ["isOn", "isOn", booleanAttribute], densityLevel: ["densityLevel", "densityLevel", numberAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DeprecatedIconButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-deprecated-icon-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], toggle: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], isOn: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], densityLevel: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwcmVjYXRlZC1pY29uLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9mb3JnZS1hbmd1bGFyL3NyYy9saWIvZGVwcmVjYXRlZC1pY29uLWJ1dHRvbi9kZXByZWNhdGVkLWljb24tYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsZUFBZSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSixPQUFPLEVBQStFLG1DQUFtQyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBRXBKLE9BQU87QUFNUCxNQUFNLE9BQU8sNkJBQTZCO0lBTXpDLElBQ1csUUFBUSxDQUFDLEtBQTZEO1FBQ2hGLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLFFBQVE7UUFDbEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUNwQyxDQUFDO0lBR0QsSUFDVyxNQUFNLENBQUMsS0FBMkQ7UUFDNUUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsTUFBTTtRQUNoQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO0lBQ2xDLENBQUM7SUFHRCxJQUNXLElBQUksQ0FBQyxLQUF5RDtRQUN4RSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxJQUFJO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBR0QsSUFDVyxZQUFZLENBQUMsS0FBaUU7UUFDeEYsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsWUFBWTtRQUN0QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ3hDLENBQUM7SUFHTSxLQUFLLENBQUMsR0FBRyxJQUFxRTtRQUNwRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxZQUNDLGlCQUFvQyxFQUMxQixVQUFrRSxFQUNsRSxJQUFZO1FBRFosZUFBVSxHQUFWLFVBQVUsQ0FBd0Q7UUFDbEUsU0FBSSxHQUFKLElBQUksQ0FBUTtRQXZEdkIsZ0RBQWdEO1FBQ2hDLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUF3RDdELG1DQUFtQyxFQUFFLENBQUM7UUFDdEMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs4R0E3RFcsNkJBQTZCO2tHQUE3Qiw2QkFBNkIseUZBTXJCLGdCQUFnQixnQ0FXaEIsZ0JBQWdCLDBCQVdoQixnQkFBZ0Isa0RBV2hCLGVBQWUsNkJBekN4QiwyQkFBMkI7OzJGQUUxQiw2QkFBNkI7a0JBTHpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDO29JQVFXLFFBQVE7c0JBRGxCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLE1BQU07c0JBRGhCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLElBQUk7c0JBRGQsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsWUFBWTtzQkFEdEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGNvZGUgd2FzIGdlbmVyYXRlZCBieSB0aGUgYW5ndWxhci1jdXN0b20tZWxlbWVudHMtc2NoZW1hdGljLiAgQW55IGNoYW5nZXMgd2lsbCBiZSBvdmVyd3JpdHRlbiBuZXh0IHRpbWUgaXQgcnVucy5cbmltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBOZ1pvbmUsIG51bWJlckF0dHJpYnV0ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERlcHJlY2F0ZWRJY29uQnV0dG9uQ29tcG9uZW50IGFzIERlcHJlY2F0ZWRJY29uQnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lRGVwcmVjYXRlZEljb25CdXR0b25Db21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2UtZGVwcmVjYXRlZC1pY29uLWJ1dHRvbicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIERlcHJlY2F0ZWRJY29uQnV0dG9uQ29tcG9uZW50IHtcblxuXHQvKiogVGhlIGZvcmdlLWRlcHJlY2F0ZWQtaWNvbi1idXR0b24gZWxlbWVudC4gKi9cblx0cHVibGljIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IGRpc2FibGVkKHZhbHVlOiBEZXByZWNhdGVkSWNvbkJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2Rpc2FibGVkJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmRpc2FibGVkID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBkaXNhYmxlZCgpOiBEZXByZWNhdGVkSWNvbkJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2Rpc2FibGVkJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuZGlzYWJsZWQ7XG5cdH1cblxuXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IHRvZ2dsZSh2YWx1ZTogRGVwcmVjYXRlZEljb25CdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50Wyd0b2dnbGUnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQudG9nZ2xlID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB0b2dnbGUoKTogRGVwcmVjYXRlZEljb25CdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50Wyd0b2dnbGUnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC50b2dnbGU7XG5cdH1cblxuXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IGlzT24odmFsdWU6IERlcHJlY2F0ZWRJY29uQnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaXNPbiddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5pc09uID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBpc09uKCk6IERlcHJlY2F0ZWRJY29uQnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaXNPbiddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmlzT247XG5cdH1cblxuXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogbnVtYmVyQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgZGVuc2l0eUxldmVsKHZhbHVlOiBEZXByZWNhdGVkSWNvbkJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2RlbnNpdHlMZXZlbCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5kZW5zaXR5TGV2ZWwgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGRlbnNpdHlMZXZlbCgpOiBEZXByZWNhdGVkSWNvbkJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2RlbnNpdHlMZXZlbCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmRlbnNpdHlMZXZlbDtcblx0fVxuXG5cblx0cHVibGljIGZvY3VzKC4uLmFyZ3M6IFBhcmFtZXRlcnM8RGVwcmVjYXRlZEljb25CdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50Wydmb2N1cyddPik6IFJldHVyblR5cGU8RGVwcmVjYXRlZEljb25CdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50Wydmb2N1cyddPiB7XG5cdFx0cmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLm5hdGl2ZUVsZW1lbnQuZm9jdXMoLi4uYXJncykpO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPERlcHJlY2F0ZWRJY29uQnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVEZXByZWNhdGVkSWNvbkJ1dHRvbkNvbXBvbmVudCgpO1xuXHRcdGNoYW5nZURldGVjdG9yUmVmLmRldGFjaCgpO1xuXHR9XG59XG4iXX0=
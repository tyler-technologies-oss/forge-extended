// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineCalendarComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class CalendarComponent {
    /** The currently active date in the calendar. */
    get activeDate() {
        return this.nativeElement.activeDate;
    }
    /** Whether to allow a single date range to be selected. */
    set allowSingleDateRange(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowSingleDateRange = value;
        });
    }
    get allowSingleDateRange() {
        return this.nativeElement.allowSingleDateRange;
    }
    /** Whether to show a button to clear the selected date(s). */
    set clearButton(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.clearButton = value;
        });
    }
    get clearButton() {
        return this.nativeElement.clearButton;
    }
    /** Callback function to call when the clear button is clicked. */
    set clearCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.clearCallback = value;
        });
    }
    get clearCallback() {
        return this.nativeElement.clearCallback;
    }
    /** Whether to constrain the selected date(s) to the enabled dates. */
    set constrainToEnabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.constrainToEnabled = value;
        });
    }
    get constrainToEnabled() {
        return this.nativeElement.constrainToEnabled;
    }
    /** Function to build the date content. */
    set dateBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dateBuilder = value;
        });
    }
    get dateBuilder() {
        return this.nativeElement.dateBuilder;
    }
    /** Callback function to call when a date is selected. */
    set dateSelectCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dateSelectCallback = value;
        });
    }
    get dateSelectCallback() {
        return this.nativeElement.dateSelectCallback;
    }
    /** Function to build the day content. */
    set dayBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dayBuilder = value;
        });
    }
    get dayBuilder() {
        return this.nativeElement.dayBuilder;
    }
    /** Function to determine if a date is disabled. */
    set disabledDateBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabledDateBuilder = value;
        });
    }
    get disabledDateBuilder() {
        return this.nativeElement.disabledDateBuilder;
    }
    /** Dates that are disabled from being selected. */
    set disabledDates(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabledDates = value;
        });
    }
    get disabledDates() {
        return this.nativeElement.disabledDates;
    }
    /** Days of the week that are disabled from being selected. */
    set disabledDaysOfWeek(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabledDaysOfWeek = value;
        });
    }
    get disabledDaysOfWeek() {
        return this.nativeElement.disabledDaysOfWeek;
    }
    /** Function to build the event content. */
    set eventBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.eventBuilder = value;
        });
    }
    get eventBuilder() {
        return this.nativeElement.eventBuilder;
    }
    /** Events to display on the calendar. */
    set events(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.events = value;
        });
    }
    get events() {
        return this.nativeElement.events;
    }
    /** The first day of the week. */
    set firstDayOfWeek(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.firstDayOfWeek = value;
        });
    }
    get firstDayOfWeek() {
        return this.nativeElement.firstDayOfWeek;
    }
    /** Whether to fix the height of the calendar. */
    set fixedHeight(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fixedHeight = value;
        });
    }
    get fixedHeight() {
        return this.nativeElement.fixedHeight;
    }
    /** Whether to list the years in the year view. */
    set listYears(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.listYears = value;
        });
    }
    get listYears() {
        return this.nativeElement.listYears;
    }
    /** The locale to use for formatting dates. */
    set locale(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.locale = value;
        });
    }
    get locale() {
        return this.nativeElement.locale;
    }
    /** The maximum date that can be selected. */
    set max(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.max = value;
        });
    }
    get max() {
        return this.nativeElement.max;
    }
    /** The animation to use for the menu. */
    set menuAnimation(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.menuAnimation = value;
        });
    }
    get menuAnimation() {
        return this.nativeElement.menuAnimation;
    }
    /** The minimum date that can be selected. */
    set min(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.min = value;
        });
    }
    get min() {
        return this.nativeElement.min;
    }
    /** The mode of the calendar. */
    set mode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.mode = value;
        });
    }
    get mode() {
        return this.nativeElement.mode;
    }
    /** The month to display. */
    set month(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.month = value;
        });
    }
    get month() {
        return this.nativeElement.month;
    }
    /** Whether to prevent the calendar from taking focus. */
    set preventFocus(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.preventFocus = value;
        });
    }
    get preventFocus() {
        return this.nativeElement.preventFocus;
    }
    /** Whether the calendar is readonly. */
    set readonly(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.readonly = value;
        });
    }
    get readonly() {
        return this.nativeElement.readonly;
    }
    /** Whether the selection follows the month. */
    set selectionFollowsMonth(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectionFollowsMonth = value;
        });
    }
    get selectionFollowsMonth() {
        return this.nativeElement.selectionFollowsMonth;
    }
    /** Whether to show the header. */
    set showHeader(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showHeader = value;
        });
    }
    get showHeader() {
        return this.nativeElement.showHeader;
    }
    /** Whether to show days from other months. */
    set showOtherMonths(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showOtherMonths = value;
        });
    }
    get showOtherMonths() {
        return this.nativeElement.showOtherMonths;
    }
    /** Whether to show the today button. */
    set showToday(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showToday = value;
        });
    }
    get showToday() {
        return this.nativeElement.showToday;
    }
    /** Whether to show a button to select today. */
    set todayButton(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.todayButton = value;
        });
    }
    get todayButton() {
        return this.nativeElement.todayButton;
    }
    /** Callback function to call when the today button is clicked. */
    set todayCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.todayCallback = value;
        });
    }
    get todayCallback() {
        return this.nativeElement.todayCallback;
    }
    /** Function to build the tooltip content. */
    set tooltipBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.tooltipBuilder = value;
        });
    }
    get tooltipBuilder() {
        return this.nativeElement.tooltipBuilder;
    }
    /** The selected date(s). */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** The view of the calendar. */
    set view(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.view = value;
        });
    }
    get view() {
        return this.nativeElement.view;
    }
    /** The days of the week that are considered weekends. */
    set weekendDays(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.weekendDays = value;
        });
    }
    get weekendDays() {
        return this.nativeElement.weekendDays;
    }
    /** The year to display. */
    set year(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.year = value;
        });
    }
    get year() {
        return this.nativeElement.year;
    }
    /** The range of years to display. */
    set yearRange(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.yearRange = value;
        });
    }
    get yearRange() {
        return this.nativeElement.yearRange;
    }
    /** Clears the selected date(s). */
    clear(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.clear(...args));
    }
    /** Deselects a date. */
    deselectDate(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.deselectDate(...args));
    }
    /** Navigates to a specific date. */
    goToDate(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.goToDate(...args));
    }
    /** Handles a keyboard event. */
    handleKey(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.handleKey(...args));
    }
    /** Lays out the calendar. */
    layout(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.layout(...args));
    }
    /** Selects a date. */
    selectDate(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.selectDate(...args));
    }
    /** Sets the active date. */
    setActiveDate(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.setActiveDate(...args));
    }
    /** Sets the calendar to today. */
    today(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.today(...args));
    }
    /** Toggles a date selection. */
    toggleDate(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.toggleDate(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-calendar element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineCalendarComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: CalendarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: CalendarComponent, selector: "forge-calendar", inputs: { allowSingleDateRange: ["allowSingleDateRange", "allowSingleDateRange", booleanAttribute], clearButton: ["clearButton", "clearButton", booleanAttribute], clearCallback: "clearCallback", constrainToEnabled: ["constrainToEnabled", "constrainToEnabled", booleanAttribute], dateBuilder: "dateBuilder", dateSelectCallback: "dateSelectCallback", dayBuilder: "dayBuilder", disabledDateBuilder: "disabledDateBuilder", disabledDates: "disabledDates", disabledDaysOfWeek: "disabledDaysOfWeek", eventBuilder: "eventBuilder", events: "events", firstDayOfWeek: "firstDayOfWeek", fixedHeight: ["fixedHeight", "fixedHeight", booleanAttribute], listYears: ["listYears", "listYears", booleanAttribute], locale: "locale", max: "max", menuAnimation: "menuAnimation", min: "min", mode: "mode", month: ["month", "month", numberAttribute], preventFocus: ["preventFocus", "preventFocus", booleanAttribute], readonly: ["readonly", "readonly", booleanAttribute], selectionFollowsMonth: ["selectionFollowsMonth", "selectionFollowsMonth", booleanAttribute], showHeader: ["showHeader", "showHeader", booleanAttribute], showOtherMonths: ["showOtherMonths", "showOtherMonths", booleanAttribute], showToday: ["showToday", "showToday", booleanAttribute], todayButton: ["todayButton", "todayButton", booleanAttribute], todayCallback: "todayCallback", tooltipBuilder: "tooltipBuilder", value: "value", view: "view", weekendDays: "weekendDays", year: ["year", "year", numberAttribute], yearRange: "yearRange" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: CalendarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-calendar',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { allowSingleDateRange: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], clearButton: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], clearCallback: [{
                type: Input
            }], constrainToEnabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dateBuilder: [{
                type: Input
            }], dateSelectCallback: [{
                type: Input
            }], dayBuilder: [{
                type: Input
            }], disabledDateBuilder: [{
                type: Input
            }], disabledDates: [{
                type: Input
            }], disabledDaysOfWeek: [{
                type: Input
            }], eventBuilder: [{
                type: Input
            }], events: [{
                type: Input
            }], firstDayOfWeek: [{
                type: Input
            }], fixedHeight: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], listYears: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], locale: [{
                type: Input
            }], max: [{
                type: Input
            }], menuAnimation: [{
                type: Input
            }], min: [{
                type: Input
            }], mode: [{
                type: Input
            }], month: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], preventFocus: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], readonly: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], selectionFollowsMonth: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showHeader: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showOtherMonths: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showToday: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], todayButton: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], todayCallback: [{
                type: Input
            }], tooltipBuilder: [{
                type: Input
            }], value: [{
                type: Input
            }], view: [{
                type: Input
            }], weekendDays: [{
                type: Input
            }], year: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], yearRange: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
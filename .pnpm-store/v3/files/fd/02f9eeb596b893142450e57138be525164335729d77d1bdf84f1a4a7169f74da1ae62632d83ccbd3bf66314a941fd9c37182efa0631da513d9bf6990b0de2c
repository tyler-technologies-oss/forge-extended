import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { SwitchComponent as SwitchComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class SwitchComponent {
    protected elementRef: ElementRef<SwitchComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-switch element. */
    readonly nativeElement: SwitchComponentCustomElement;
    /** Gets/sets whether the switch is on or off. */
    set on(value: SwitchComponentCustomElement['on']);
    get on(): SwitchComponentCustomElement['on'];
    /** Alias for `on` _(deprecated)_. */
    set selected(value: SwitchComponentCustomElement['selected']);
    get selected(): SwitchComponentCustomElement['selected'];
    /** Gets/sets whether the switch is on or off by default. */
    set defaultOn(value: SwitchComponentCustomElement['defaultOn']);
    get defaultOn(): SwitchComponentCustomElement['defaultOn'];
    /** Gets/sets the value of the switch. */
    set value(value: SwitchComponentCustomElement['value']);
    get value(): SwitchComponentCustomElement['value'];
    /** Controls whether the switch is dense. */
    set dense(value: SwitchComponentCustomElement['dense']);
    get dense(): SwitchComponentCustomElement['dense'];
    /** Controls whether the switch is disabled. */
    set disabled(value: SwitchComponentCustomElement['disabled']);
    get disabled(): SwitchComponentCustomElement['disabled'];
    /** Controls whether the switch is required. */
    set required(value: SwitchComponentCustomElement['required']);
    get required(): SwitchComponentCustomElement['required'];
    /** Controls whether the switch is readonly. */
    set readonly(value: SwitchComponentCustomElement['readonly']);
    get readonly(): SwitchComponentCustomElement['readonly'];
    /** Controls the presence of the off and on icons. */
    set icon(value: SwitchComponentCustomElement['icon']);
    get icon(): SwitchComponentCustomElement['icon'];
    /** Controls whether the label appears before or after the switch. */
    set labelPosition(value: SwitchComponentCustomElement['labelPosition']);
    get labelPosition(): SwitchComponentCustomElement['labelPosition'];
    /** Toggles the switch on or off. */
    toggle(...args: Parameters<SwitchComponentCustomElement['toggle']>): ReturnType<SwitchComponentCustomElement['toggle']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<SwitchComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<SwitchComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SwitchComponent, "forge-switch", never, { "on": { "alias": "on"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "defaultOn": { "alias": "defaultOn"; "required": false; }; "value": { "alias": "value"; "required": false; }; "dense": { "alias": "dense"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "labelPosition": { "alias": "labelPosition"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_on: unknown;
    static ngAcceptInputType_selected: unknown;
    static ngAcceptInputType_defaultOn: unknown;
    static ngAcceptInputType_dense: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_readonly: unknown;
}

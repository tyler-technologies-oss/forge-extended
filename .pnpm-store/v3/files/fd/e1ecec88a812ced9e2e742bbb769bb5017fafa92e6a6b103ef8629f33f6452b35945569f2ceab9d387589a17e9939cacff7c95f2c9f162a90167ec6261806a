// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineSplitButtonComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class SplitButtonComponent {
    /** The variant of the buttons. Valid values are `text`, `outlined`, `tonal`, `filled`, and `raised`. */
    set variant(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.variant = value;
        });
    }
    get variant() {
        return this.nativeElement.variant;
    }
    /** The theme of the buttons. Valid values are `primary`, `secondary`, `tertiary`, `success`, `error`, `warning`, `info`. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** Whether or not the buttons are disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether or not the buttons are dense. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Whether or not the buttons are pill-shaped. */
    set pill(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.pill = value;
        });
    }
    get pill() {
        return this.nativeElement.pill;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-split-button element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineSplitButtonComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SplitButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: SplitButtonComponent, selector: "forge-split-button", inputs: { variant: "variant", theme: "theme", disabled: ["disabled", "disabled", booleanAttribute], dense: ["dense", "dense", booleanAttribute], pill: ["pill", "pill", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SplitButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-split-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { variant: [{
                type: Input
            }], theme: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], pill: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9zcGxpdC1idXR0b24vc3BsaXQtYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBNkQsMEJBQTBCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFekgsT0FBTztBQU1QLE1BQU0sT0FBTyxvQkFBb0I7SUFLaEMsd0dBQXdHO0lBQ3hHLElBQ1csT0FBTyxDQUFDLEtBQW1EO1FBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLE9BQU87UUFDakIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztJQUNuQyxDQUFDO0lBRUQsNEhBQTRIO0lBQzVILElBQ1csS0FBSyxDQUFDLEtBQWlEO1FBQ2pFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLEtBQUs7UUFDZixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFFRCwrQ0FBK0M7SUFDL0MsSUFDVyxRQUFRLENBQUMsS0FBb0Q7UUFDdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsUUFBUTtRQUNsQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCw0Q0FBNEM7SUFDNUMsSUFDVyxLQUFLLENBQUMsS0FBaUQ7UUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVELGtEQUFrRDtJQUNsRCxJQUNXLElBQUksQ0FBQyxLQUFnRDtRQUMvRCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxJQUFJO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBRUQsWUFDQyxpQkFBb0MsRUFDMUIsVUFBeUQsRUFDekQsSUFBWTtRQURaLGVBQVUsR0FBVixVQUFVLENBQStDO1FBQ3pELFNBQUksR0FBSixJQUFJLENBQVE7UUE3RHZCLHNDQUFzQztRQUN0QixrQkFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBOEQ3RCwwQkFBMEIsRUFBRSxDQUFDO1FBQzdCLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7OEdBbkVXLG9CQUFvQjtrR0FBcEIsb0JBQW9CLG1IQTRCWixnQkFBZ0IsNkJBV2hCLGdCQUFnQiwwQkFXaEIsZ0JBQWdCLDZCQXBEekIsMkJBQTJCOzsyRkFFMUIsb0JBQW9CO2tCQUxoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0QztvSUFRVyxPQUFPO3NCQURqQixLQUFLO2dCQVlLLEtBQUs7c0JBRGYsS0FBSztnQkFZSyxRQUFRO3NCQURsQixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQVkzQixLQUFLO3NCQURmLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLElBQUk7c0JBRGQsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNwbGl0QnV0dG9uQ29tcG9uZW50IGFzIFNwbGl0QnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lU3BsaXRCdXR0b25Db21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2Utc3BsaXQtYnV0dG9uJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgU3BsaXRCdXR0b25Db21wb25lbnQge1xuXG5cdC8qKiBUaGUgZm9yZ2Utc3BsaXQtYnV0dG9uIGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIFRoZSB2YXJpYW50IG9mIHRoZSBidXR0b25zLiBWYWxpZCB2YWx1ZXMgYXJlIGB0ZXh0YCwgYG91dGxpbmVkYCwgYHRvbmFsYCwgYGZpbGxlZGAsIGFuZCBgcmFpc2VkYC4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCB2YXJpYW50KHZhbHVlOiBTcGxpdEJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3ZhcmlhbnQnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQudmFyaWFudCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgdmFyaWFudCgpOiBTcGxpdEJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3ZhcmlhbnQnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC52YXJpYW50O1xuXHR9XG5cblx0LyoqIFRoZSB0aGVtZSBvZiB0aGUgYnV0dG9ucy4gVmFsaWQgdmFsdWVzIGFyZSBgcHJpbWFyeWAsIGBzZWNvbmRhcnlgLCBgdGVydGlhcnlgLCBgc3VjY2Vzc2AsIGBlcnJvcmAsIGB3YXJuaW5nYCwgYGluZm9gLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IHRoZW1lKHZhbHVlOiBTcGxpdEJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RoZW1lJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnRoZW1lID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB0aGVtZSgpOiBTcGxpdEJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RoZW1lJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQudGhlbWU7XG5cdH1cblxuXHQvKiogV2hldGhlciBvciBub3QgdGhlIGJ1dHRvbnMgYXJlIGRpc2FibGVkLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBkaXNhYmxlZCh2YWx1ZTogU3BsaXRCdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50WydkaXNhYmxlZCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5kaXNhYmxlZCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgZGlzYWJsZWQoKTogU3BsaXRCdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50WydkaXNhYmxlZCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmRpc2FibGVkO1xuXHR9XG5cblx0LyoqIFdoZXRoZXIgb3Igbm90IHRoZSBidXR0b25zIGFyZSBkZW5zZS4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgZGVuc2UodmFsdWU6IFNwbGl0QnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZGVuc2UnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQuZGVuc2UgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGRlbnNlKCk6IFNwbGl0QnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZGVuc2UnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5kZW5zZTtcblx0fVxuXG5cdC8qKiBXaGV0aGVyIG9yIG5vdCB0aGUgYnV0dG9ucyBhcmUgcGlsbC1zaGFwZWQuICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IHBpbGwodmFsdWU6IFNwbGl0QnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncGlsbCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5waWxsID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBwaWxsKCk6IFNwbGl0QnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncGlsbCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnBpbGw7XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG5cdFx0cHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8U3BsaXRCdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50Pixcblx0XHRwcm90ZWN0ZWQgem9uZTogTmdab25lXG5cdCkge1xuXHRcdGRlZmluZVNwbGl0QnV0dG9uQ29tcG9uZW50KCk7XG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWYuZGV0YWNoKCk7XG5cdH1cbn1cbiJdfQ==
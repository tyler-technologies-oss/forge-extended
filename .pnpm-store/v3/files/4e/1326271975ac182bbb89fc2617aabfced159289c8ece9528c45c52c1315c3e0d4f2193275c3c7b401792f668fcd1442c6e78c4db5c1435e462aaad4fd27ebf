import { Directive, forwardRef, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
export const SLIDER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => SliderValueAccessor),
    multi: true
};
export class SliderValueAccessor {
    sliderChange(event) {
        this.change(event.detail.value);
    }
    sliderInput(event) {
        this.change(event.detail.value);
    }
    sliderRangeChange(event) {
        this.change(event.detail);
    }
    sliderRangeInput(event) {
        this.change(event.detail);
    }
    blur() {
        this.onTouched();
    }
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    writeValue(value) {
        if (this._elementRef.nativeElement.range) {
            if (value === null || value === undefined || typeof value !== 'object') {
                this._renderer.setProperty(this._elementRef.nativeElement, 'valueStart', 0);
                this._renderer.setProperty(this._elementRef.nativeElement, 'valueEnd', 0);
                return;
            }
            if ('valueStart' in value) {
                this._renderer.setProperty(this._elementRef.nativeElement, 'valueStart', this._toFloat(value.valueStart));
            }
            if ('valueStart' in value) {
                this._renderer.setProperty(this._elementRef.nativeElement, 'valueEnd', this._toFloat(value.valueEnd));
            }
        }
        else {
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', this._toFloat(value));
        }
    }
    registerOnChange(fn) {
        this.onChange = value => fn(value);
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    }
    change(value) {
        this.onChange(value);
    }
    _toFloat(value) {
        if (value === null || value === undefined) {
            return 0;
        }
        const parsedValue = parseFloat(value);
        if (isNaN(parsedValue) || typeof parsedValue !== 'number') {
            return 0;
        }
        return parsedValue;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SliderValueAccessor, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.7", type: SliderValueAccessor, selector: "forge-slider[formControlName],forge-slider[formControl],forge-slider[ngModel]", host: { listeners: { "forge-slider-change": "sliderChange($event)", "forge-slider-input": "sliderInput($event)", "forge-slider-range-change": "sliderRangeChange($event)", "forge-slider-range-input": "sliderRangeInput($event)", "blur": "blur()" } }, providers: [SLIDER_VALUE_ACCESSOR], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SliderValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: 'forge-slider[formControlName],forge-slider[formControl],forge-slider[ngModel]',
                    providers: [SLIDER_VALUE_ACCESSOR]
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }], propDecorators: { sliderChange: [{
                type: HostListener,
                args: ['forge-slider-change', ['$event']]
            }], sliderInput: [{
                type: HostListener,
                args: ['forge-slider-input', ['$event']]
            }], sliderRangeChange: [{
                type: HostListener,
                args: ['forge-slider-range-change', ['$event']]
            }], sliderRangeInput: [{
                type: HostListener,
                args: ['forge-slider-range-input', ['$event']]
            }], blur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,
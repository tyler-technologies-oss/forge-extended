// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineIconComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class IconComponent {
    /** The name of the icon to render. */
    set name(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.name = value;
        });
    }
    get name() {
        return this.nativeElement.name;
    }
    /** Provides the ability to set the SVG string content directly. */
    set src(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.src = value;
        });
    }
    get src() {
        return this.nativeElement.src;
    }
    /** Controls whether the icon will be loaded dynamically when it comes into view. False by default. */
    set lazy(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.lazy = value;
        });
    }
    get lazy() {
        return this.nativeElement.lazy;
    }
    /** Controls whether external network requests are allowed for this icon. Only pertains for icons that aren't already defined in the registry. */
    set external(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.external = value;
        });
    }
    get external() {
        return this.nativeElement.external;
    }
    /** The type of icon to load externally. Possible values: "standard" (default), "extended", "custom". */
    set externalType(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.externalType = value;
        });
    }
    get externalType() {
        return this.nativeElement.externalType;
    }
    /** A callback that can be provided to generate a URL that will be used to fetch an SVG icon. */
    set externalUrlBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.externalUrlBuilder = value;
        });
    }
    get externalUrlBuilder() {
        return this.nativeElement.externalUrlBuilder;
    }
    /** A custom value to apply to the `viewBox` attribute on the internal `<svg>` element. */
    set viewbox(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.viewbox = value;
        });
    }
    get viewbox() {
        return this.nativeElement.viewbox;
    }
    /** The theme to apply to the icon. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** Forces a reload of the icon. */
    layout(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.layout(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-icon element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineIconComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: IconComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: IconComponent, selector: "forge-icon", inputs: { name: "name", src: "src", lazy: ["lazy", "lazy", booleanAttribute], external: ["external", "external", booleanAttribute], externalType: "externalType", externalUrlBuilder: "externalUrlBuilder", viewbox: "viewbox", theme: "theme" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: IconComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-icon',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { name: [{
                type: Input
            }], src: [{
                type: Input
            }], lazy: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], external: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], externalType: [{
                type: Input
            }], externalUrlBuilder: [{
                type: Input
            }], viewbox: [{
                type: Input
            }], theme: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
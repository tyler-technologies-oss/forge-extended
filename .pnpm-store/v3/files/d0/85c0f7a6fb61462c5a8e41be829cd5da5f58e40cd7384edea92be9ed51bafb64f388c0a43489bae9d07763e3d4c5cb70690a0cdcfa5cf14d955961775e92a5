/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { BaseAdapter, IBaseAdapter } from '../core/base/base-adapter';
import { IColorPickerComponent } from './color-picker';
import { ColorPickerValueType, IHSVA, IRGBA } from './color-picker-constants';
export interface IColorPickerAdapter extends IBaseAdapter {
    setPreviewColor(rgbaStyle: string): void;
    setHexInputValue(value: string): void;
    setRgbaInputValue(rgba: IRGBA): void;
    setHsvaInputValue(hsva: IHSVA): void;
    updateA11y(hueValue: number, opacityValue: number): void;
    setGradientColor(value: string): void;
    getHueSliderElement(): HTMLElement;
    getOpacitySliderElement(): HTMLElement;
    getGradientElement(): HTMLElement;
    setActiveValueType(type: ColorPickerValueType): void;
    focusValueInput(type: ColorPickerValueType): void;
    setTypeClickListener(listener: (evt: MouseEvent) => void): void;
    removeTypeClickListener(listener: (evt: MouseEvent) => void): void;
    setHexInputListener(type: string, listener: (evt: Event) => void): void;
    removeHexInputListener(type: string, listener: (evt: Event) => void): void;
    getHexInputValue(): string;
    setRgbaInputListener(type: string, listener: (evt: Event) => void): void;
    removeRgbaInputListener(type: string, listener: (evt: Event) => void): void;
    getRgbaInputValue(): IRGBA;
    setHsvaInputListener(type: string, listener: (evt: Event) => void): void;
    removeHsvaInputListener(type: string, listener: (evt: Event) => void): void;
    getHsvaInputValue(): IHSVA;
    toggleOpacityControls(visible: boolean): void;
}
export declare class ColorPickerAdapter extends BaseAdapter<IColorPickerComponent> implements IColorPickerAdapter {
    private _gradientElement;
    private _previewColorElement;
    private _hexInputElement;
    private _rgbaInputRElement;
    private _rgbaInputGElement;
    private _rgbaInputBElement;
    private _rgbaInputAElement;
    private _hsvaInputHElement;
    private _hsvaInputSElement;
    private _hsvaInputVElement;
    private _hsvaInputAElement;
    private _hueSliderElement;
    private _hueSliderThumbElement;
    private _opacitySliderElement;
    private _opacitySliderThumbElement;
    private _hexValueContainerElement;
    private _rgbaValueContainerElement;
    private _hsvaValueContainerElement;
    private _typeButtonElement;
    constructor(component: IColorPickerComponent);
    setPreviewColor(rgbaStyle: string): void;
    setHexInputValue(value: string): void;
    setRgbaInputValue(rgba: IRGBA): void;
    setHsvaInputValue(hsva: IHSVA): void;
    updateA11y(hueValue: number, opacityValue: number): void;
    setGradientColor(value: string): void;
    getHueSliderElement(): HTMLElement;
    getOpacitySliderElement(): HTMLElement;
    getGradientElement(): HTMLElement;
    setActiveValueType(type: ColorPickerValueType): void;
    focusValueInput(type: ColorPickerValueType): void;
    setTypeClickListener(listener: (evt: MouseEvent) => void): void;
    removeTypeClickListener(listener: (evt: MouseEvent) => void): void;
    setHexInputListener(type: string, listener: (evt: Event) => void): void;
    removeHexInputListener(type: string, listener: (evt: Event) => void): void;
    getHexInputValue(): string;
    setRgbaInputListener(type: string, listener: (evt: Event) => void): void;
    removeRgbaInputListener(type: string, listener: (evt: Event) => void): void;
    getRgbaInputValue(): IRGBA;
    setHsvaInputListener(type: string, listener: (evt: Event) => void): void;
    removeHsvaInputListener(type: string, listener: (evt: Event) => void): void;
    getHsvaInputValue(): IHSVA;
    toggleOpacityControls(visible: boolean): void;
}

import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { ListItemComponent as ListItemComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class ListItemComponent {
    protected elementRef: ElementRef<ListItemComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-list-item element. */
    readonly nativeElement: ListItemComponentCustomElement;
    /** Applies the selected state to the list item. */
    set selected(value: ListItemComponentCustomElement['selected']);
    get selected(): ListItemComponentCustomElement['selected'];
    /** Applies the active state to the list item by emulating its focused state. */
    set active(value: ListItemComponentCustomElement['active']);
    get active(): ListItemComponentCustomElement['active'];
    /** The unique value of the list item. */
    set value(value: ListItemComponentCustomElement['value']);
    get value(): ListItemComponentCustomElement['value'];
    /** Applies the dense state to the list item. */
    set dense(value: ListItemComponentCustomElement['dense']);
    get dense(): ListItemComponentCustomElement['dense'];
    /** Applies the indented state by adding margin to the start of the list item. */
    set indented(value: ListItemComponentCustomElement['indented']);
    get indented(): ListItemComponentCustomElement['indented'];
    /** Sets the list item height to support at least two lines of text. */
    set twoLine(value: ListItemComponentCustomElement['twoLine']);
    get twoLine(): ListItemComponentCustomElement['twoLine'];
    /** Sets the list item height to support at least three lines of text. */
    set threeLine(value: ListItemComponentCustomElement['threeLine']);
    get threeLine(): ListItemComponentCustomElement['threeLine'];
    /** Sets the list item to wrap its text content. */
    set wrap(value: ListItemComponentCustomElement['wrap']);
    get wrap(): ListItemComponentCustomElement['wrap'];
    /** Controls whether the list item will automatically attach itself to interactive slotted elements or not. */
    set noninteractive(value: ListItemComponentCustomElement['noninteractive']);
    get noninteractive(): ListItemComponentCustomElement['noninteractive'];
    /** Controls whether the interactive element will receive focus if a non-interactive element is clicked within the list item. */
    set focusPropagation(value: ListItemComponentCustomElement['focusPropagation']);
    get focusPropagation(): ListItemComponentCustomElement['focusPropagation'];
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<ListItemComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<ListItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ListItemComponent, "forge-list-item", never, { "selected": { "alias": "selected"; "required": false; }; "active": { "alias": "active"; "required": false; }; "value": { "alias": "value"; "required": false; }; "dense": { "alias": "dense"; "required": false; }; "indented": { "alias": "indented"; "required": false; }; "twoLine": { "alias": "twoLine"; "required": false; }; "threeLine": { "alias": "threeLine"; "required": false; }; "wrap": { "alias": "wrap"; "required": false; }; "noninteractive": { "alias": "noninteractive"; "required": false; }; "focusPropagation": { "alias": "focusPropagation"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_selected: unknown;
    static ngAcceptInputType_active: unknown;
    static ngAcceptInputType_dense: unknown;
    static ngAcceptInputType_indented: unknown;
    static ngAcceptInputType_twoLine: unknown;
    static ngAcceptInputType_threeLine: unknown;
    static ngAcceptInputType_wrap: unknown;
    static ngAcceptInputType_noninteractive: unknown;
    static ngAcceptInputType_focusPropagation: unknown;
}

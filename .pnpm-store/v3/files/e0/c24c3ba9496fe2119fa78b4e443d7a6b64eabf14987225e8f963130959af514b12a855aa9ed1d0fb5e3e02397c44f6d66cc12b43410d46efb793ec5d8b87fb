import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { PaginatorComponent as PaginatorComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class PaginatorComponent {
    protected elementRef: ElementRef<PaginatorComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-paginator element. */
    readonly nativeElement: PaginatorComponentCustomElement;
    /** The zero-based page index. */
    set pageIndex(value: PaginatorComponentCustomElement['pageIndex']);
    get pageIndex(): PaginatorComponentCustomElement['pageIndex'];
    /** Number of items to display on a page. */
    set pageSize(value: PaginatorComponentCustomElement['pageSize']);
    get pageSize(): PaginatorComponentCustomElement['pageSize'];
    /** Sets page index by providing the number of items to skip. The getter for this property returns the number of items to skip. */
    set offset(value: PaginatorComponentCustomElement['offset']);
    get offset(): PaginatorComponentCustomElement['offset'];
    /** The total number of items to be paginated. */
    set total(value: PaginatorComponentCustomElement['total']);
    get total(): PaginatorComponentCustomElement['total'];
    /** The set of provided page size options to display to the user. */
    set pageSizeOptions(value: PaginatorComponentCustomElement['pageSizeOptions']);
    get pageSizeOptions(): PaginatorComponentCustomElement['pageSizeOptions'];
    /** A label for the paginator. */
    set label(value: PaginatorComponentCustomElement['label']);
    get label(): PaginatorComponentCustomElement['label'];
    /** Whether to show the first page and last page buttons. */
    set firstLast(value: PaginatorComponentCustomElement['firstLast']);
    get firstLast(): PaginatorComponentCustomElement['firstLast'];
    /** Whether to show the first page button. Default is false. */
    set first(value: PaginatorComponentCustomElement['first']);
    get first(): PaginatorComponentCustomElement['first'];
    /** Whether the paginator is disabled. */
    set disabled(value: PaginatorComponentCustomElement['disabled']);
    get disabled(): PaginatorComponentCustomElement['disabled'];
    /** Whether to use the alternative range label slot. */
    set alternative(value: PaginatorComponentCustomElement['alternative']);
    get alternative(): PaginatorComponentCustomElement['alternative'];
    /** A callback function to build the range label dynamically. */
    set rangeLabelCallback(value: PaginatorComponentCustomElement['rangeLabelCallback']);
    get rangeLabelCallback(): PaginatorComponentCustomElement['rangeLabelCallback'];
    /** Sets focus to the first focusable element within the paginator. */
    focus(...args: Parameters<PaginatorComponentCustomElement['focus']>): ReturnType<PaginatorComponentCustomElement['focus']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<PaginatorComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<PaginatorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PaginatorComponent, "forge-paginator", never, { "pageIndex": { "alias": "pageIndex"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; "total": { "alias": "total"; "required": false; }; "pageSizeOptions": { "alias": "pageSizeOptions"; "required": false; }; "label": { "alias": "label"; "required": false; }; "firstLast": { "alias": "firstLast"; "required": false; }; "first": { "alias": "first"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "alternative": { "alias": "alternative"; "required": false; }; "rangeLabelCallback": { "alias": "rangeLabelCallback"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_pageIndex: unknown;
    static ngAcceptInputType_pageSize: unknown;
    static ngAcceptInputType_offset: unknown;
    static ngAcceptInputType_total: unknown;
    static ngAcceptInputType_firstLast: unknown;
    static ngAcceptInputType_first: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_alternative: unknown;
}

import { Directive, Input, TemplateRef } from '@angular/core';
import { POPOVER_CONSTANTS, PopoverComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**
 * Allows for declaratively specifying an element that should display a Forge popover
 * from the provided `TemplateRef`.
 */
export class PopoverDirective {
    /**
     * @deprecated Use static property instead.
     */
    set forgePopoverCloseOnBlur(value) {
        this.persistent = !value;
    }
    get popoverElement() {
        return this._popoverElement;
    }
    constructor(_elementRef, _viewContainerRef) {
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        /** The popover placement around the `ElementRef`. */
        this.forgePopoverPlacement = 'bottom';
        /** Controls whether the popover closes when it loses focus. */
        this.persistent = false;
        this._elementRef.nativeElement.addEventListener(POPOVER_CONSTANTS.events.TOGGLE, () => {
            window.requestAnimationFrame(() => this.close());
        });
    }
    /** Creates and renders a TemplateRef inside of a Forge popover. */
    open() {
        if (this._popoverElement) {
            return;
        }
        // Ensure that we have a popover template
        if (this.forgePopover instanceof TemplateRef === false) {
            throw new Error('Popover template is not defined.');
        }
        // Create the embedded view from the template
        this._contentRef = this._viewContainerRef.createEmbeddedView(this.forgePopover);
        if (this._contentRef.rootNodes[0] instanceof PopoverComponent) {
            // <forge-popover> element is supplied in the template
            this._popoverElement = this._contentRef.rootNodes[0];
            this._popoverElement.remove();
        }
        else {
            // Create the Forge popover element
            this._popoverElement = document.createElement('forge-popover');
            // Because createEmbeddedView will place the template within the element defined by ViewContainerRef, we
            // need to then move the elements to children of the Forge popover element so they render within the popover
            this._contentRef.rootNodes.forEach(node => this._popoverElement?.appendChild(node));
            this._popoverElement.placement = this.forgePopoverPlacement;
            // Add the custom class (if provided)
            if (this.forgePopoverClass) {
                this._popoverElement.classList.add(this.forgePopoverClass);
            }
            this._popoverElement.persistent = this.persistent;
        }
        let hostElement = this._elementRef.nativeElement.closest(POPOVER_CONSTANTS.selectors.HOST);
        if (!hostElement) {
            const rootNode = this._elementRef.nativeElement.getRootNode();
            const hostRootNode = rootNode instanceof ShadowRoot ? rootNode : (this._elementRef.nativeElement.ownerDocument ?? document).body;
            hostElement = hostRootNode;
        }
        hostElement.appendChild(this._popoverElement);
        this._popoverElement.anchorElement = this._elementRef.nativeElement;
        this._popoverElement.open = true;
    }
    /** Closes the Forge popover and destroys the embedded view. */
    close() {
        if (this._popoverElement) {
            this._popoverElement.open = false;
            this._popoverElement = undefined;
        }
        if (this._contentRef) {
            this._contentRef.destroy();
            this._contentRef = undefined;
        }
    }
    ngOnDestroy() {
        this.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: PopoverDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.7", type: PopoverDirective, selector: "[forgePopover]", inputs: { forgePopover: "forgePopover", forgePopoverPlacement: "forgePopoverPlacement", forgePopoverCloseOnBlur: "forgePopoverCloseOnBlur", persistent: "persistent", forgePopoverClass: "forgePopoverClass" }, exportAs: ["forgePopover"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: PopoverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[forgePopover]',
                    exportAs: 'forgePopover'
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }], propDecorators: { forgePopover: [{
                type: Input
            }], forgePopoverPlacement: [{
                type: Input
            }], forgePopoverCloseOnBlur: [{
                type: Input
            }], persistent: [{
                type: Input
            }], forgePopoverClass: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
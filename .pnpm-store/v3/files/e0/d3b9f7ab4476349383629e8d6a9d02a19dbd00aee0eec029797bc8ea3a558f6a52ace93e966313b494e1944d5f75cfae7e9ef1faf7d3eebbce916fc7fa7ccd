// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineSplitViewPanelComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class SplitViewPanelComponent {
    /** Controls which side of the panel the resize handle appears on. */
    set resizable(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.resizable = value;
        });
    }
    get resizable() {
        return this.nativeElement.resizable;
    }
    /** The initial size along the axis of orientation. */
    set size(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.size = value;
        });
    }
    get size() {
        return this.nativeElement.size;
    }
    /** The smallest size the panel can take along its axis of orientation. */
    set min(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.min = value;
        });
    }
    get min() {
        return this.nativeElement.min;
    }
    /** The largest size the panel can take along its axis of orientation. */
    set max(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.max = value;
        });
    }
    get max() {
        return this.nativeElement.max;
    }
    /** The ARIA label given to the resize handle. */
    set accessibleLabel(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.accessibleLabel = value;
        });
    }
    get accessibleLabel() {
        return this.nativeElement.accessibleLabel;
    }
    /** Controls the open state of the panel. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Whether resize interactions are disabled or enabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether the panel can be closed via keyboard interaction. */
    set allowClose(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowClose = value;
        });
    }
    get allowClose() {
        return this.nativeElement.allowClose;
    }
    /** Whether the panel automatically closes when it reaches a size of 0. */
    set autoClose(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.autoClose = value;
        });
    }
    get autoClose() {
        return this.nativeElement.autoClose;
    }
    /** The size at which the panel auto closes. */
    set autoCloseThreshold(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.autoCloseThreshold = value;
        });
    }
    get autoCloseThreshold() {
        return this.nativeElement.autoCloseThreshold;
    }
    /** Gets the size of content along the axis of orientation. */
    getContentSize(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.getContentSize(...args));
    }
    /**
     * Gets the amount that the content can shrink along the axis of orientation before reaching its
     * min size.
     */
    getCollapsibleSize(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.getCollapsibleSize(...args));
    }
    /** Sets the size of content along the axis of orientation. */
    setContentSize(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.setContentSize(...args));
    }
    /** Updates the provided characteristics. */
    update(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.update(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-split-view-panel element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineSplitViewPanelComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SplitViewPanelComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: SplitViewPanelComponent, selector: "forge-split-view-panel", inputs: { resizable: "resizable", size: "size", min: "min", max: "max", accessibleLabel: "accessibleLabel", open: ["open", "open", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], allowClose: ["allowClose", "allowClose", booleanAttribute], autoClose: ["autoClose", "autoClose", booleanAttribute], autoCloseThreshold: ["autoCloseThreshold", "autoCloseThreshold", numberAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SplitViewPanelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-split-view-panel',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { resizable: [{
                type: Input
            }], size: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], accessibleLabel: [{
                type: Input
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], allowClose: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoClose: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoCloseThreshold: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
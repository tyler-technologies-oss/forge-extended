"use strict";
var sN = Object.create;
var Pa = Object.defineProperty;
var iN = Object.getOwnPropertyDescriptor;
var aN = Object.getOwnPropertyNames;
var oN = Object.getPrototypeOf, lN = Object.prototype.hasOwnProperty;
var s = (e, t) => Pa(e, "name", { value: t, configurable: !0 });
var T = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports), uN = (e, t) => {
  for (var r in t)
    Pa(e, r, { get: t[r], enumerable: !0 });
}, U1 = (e, t, r, n) => {
  if (t && typeof t == "object" || typeof t == "function")
    for (let i of aN(t))
      !lN.call(e, i) && i !== r && Pa(e, i, { get: () => t[i], enumerable: !(n = iN(t, i)) || n.enumerable });
  return e;
};
var an = (e, t, r) => (r = e != null ? sN(oN(e)) : {}, U1(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  t || !e || !e.__esModule ? Pa(r, "default", { value: e, enumerable: !0 }) : r,
  e
)), cN = (e) => U1(Pa({}, "__esModule", { value: !0 }), e);

// ../node_modules/@babel/types/lib/utils/shallowEqual.js
var fl = T((zf) => {
  "use strict";
  Object.defineProperty(zf, "__esModule", {
    value: !0
  });
  zf.default = fN;
  function fN(e, t) {
    let r = Object.keys(t);
    for (let n of r)
      if (e[n] !== t[n])
        return !1;
    return !0;
  }
  s(fN, "shallowEqual");
});

// ../node_modules/@babel/types/lib/utils/deprecationWarning.js
var Aa = T((Jf) => {
  "use strict";
  Object.defineProperty(Jf, "__esModule", {
    value: !0
  });
  Jf.default = pN;
  var V1 = /* @__PURE__ */ new Set();
  function pN(e, t, r = "") {
    if (V1.has(e)) return;
    V1.add(e);
    let {
      internal: n,
      trace: i
    } = dN(1, 2);
    n || console.warn(`${r}\`${e}\` has been deprecated, please migrate to \`${t}\`
${i}`);
  }
  s(pN, "deprecationWarning");
  function dN(e, t) {
    let {
      stackTraceLimit: r,
      prepareStackTrace: n
    } = Error, i;
    if (Error.stackTraceLimit = 1 + e + t, Error.prepareStackTrace = function(o, l) {
      i = l;
    }, new Error().stack, Error.stackTraceLimit = r, Error.prepareStackTrace = n, !i) return {
      internal: !1,
      trace: ""
    };
    let a = i.slice(1 + e, 1 + e + t);
    return {
      internal: /[\\/]@babel[\\/]/.test(a[1].getFileName()),
      trace: a.map((o) => `    at ${o}`).join(`
`)
    };
  }
  s(dN, "captureShortStackTrace");
});

// ../node_modules/@babel/types/lib/validators/generated/index.js
var vt = T((x) => {
  "use strict";
  Object.defineProperty(x, "__esModule", {
    value: !0
  });
  x.isAccessor = w4;
  x.isAnyTypeAnnotation = Y3;
  x.isArgumentPlaceholder = Sk;
  x.isArrayExpression = hN;
  x.isArrayPattern = p3;
  x.isArrayTypeAnnotation = z3;
  x.isArrowFunctionExpression = d3;
  x.isAssignmentExpression = mN;
  x.isAssignmentPattern = f3;
  x.isAwaitExpression = j3;
  x.isBigIntLiteral = M3;
  x.isBinary = JF;
  x.isBinaryExpression = yN;
  x.isBindExpression = Pk;
  x.isBlock = ZF;
  x.isBlockParent = QF;
  x.isBlockStatement = vN;
  x.isBooleanLiteral = UN;
  x.isBooleanLiteralTypeAnnotation = X3;
  x.isBooleanTypeAnnotation = J3;
  x.isBreakStatement = TN;
  x.isCallExpression = xN;
  x.isCatchClause = SN;
  x.isClass = P4;
  x.isClassAccessorProperty = $3;
  x.isClassBody = h3;
  x.isClassDeclaration = y3;
  x.isClassExpression = m3;
  x.isClassImplements = Z3;
  x.isClassMethod = D3;
  x.isClassPrivateMethod = K3;
  x.isClassPrivateProperty = W3;
  x.isClassProperty = V3;
  x.isCompletionStatement = r4;
  x.isConditional = n4;
  x.isConditionalExpression = PN;
  x.isContinueStatement = AN;
  x.isDebuggerStatement = CN;
  x.isDecimalLiteral = Ok;
  x.isDeclaration = p4;
  x.isDeclareClass = eB;
  x.isDeclareExportAllDeclaration = uB;
  x.isDeclareExportDeclaration = lB;
  x.isDeclareFunction = tB;
  x.isDeclareInterface = rB;
  x.isDeclareModule = nB;
  x.isDeclareModuleExports = sB;
  x.isDeclareOpaqueType = aB;
  x.isDeclareTypeAlias = iB;
  x.isDeclareVariable = oB;
  x.isDeclaredPredicate = cB;
  x.isDecorator = Ck;
  x.isDirective = bN;
  x.isDirectiveLiteral = EN;
  x.isDoExpression = wk;
  x.isDoWhileStatement = wN;
  x.isEmptyStatement = DN;
  x.isEmptyTypeAnnotation = TB;
  x.isEnumBody = k4;
  x.isEnumBooleanBody = zB;
  x.isEnumBooleanMember = ZB;
  x.isEnumDeclaration = YB;
  x.isEnumDefaultedMember = rk;
  x.isEnumMember = F4;
  x.isEnumNumberBody = JB;
  x.isEnumNumberMember = ek;
  x.isEnumStringBody = XB;
  x.isEnumStringMember = tk;
  x.isEnumSymbolBody = QB;
  x.isExistsTypeAnnotation = fB;
  x.isExportAllDeclaration = g3;
  x.isExportDeclaration = A4;
  x.isExportDefaultDeclaration = b3;
  x.isExportDefaultSpecifier = Dk;
  x.isExportNamedDeclaration = E3;
  x.isExportNamespaceSpecifier = R3;
  x.isExportSpecifier = v3;
  x.isExpression = zF;
  x.isExpressionStatement = IN;
  x.isExpressionWrapper = a4;
  x.isFile = _N;
  x.isFlow = I4;
  x.isFlowBaseAnnotation = O4;
  x.isFlowDeclaration = N4;
  x.isFlowPredicate = B4;
  x.isFlowType = _4;
  x.isFor = o4;
  x.isForInStatement = ON;
  x.isForOfStatement = T3;
  x.isForStatement = NN;
  x.isForXStatement = l4;
  x.isFunction = u4;
  x.isFunctionDeclaration = BN;
  x.isFunctionExpression = kN;
  x.isFunctionParent = c4;
  x.isFunctionTypeAnnotation = pB;
  x.isFunctionTypeParam = dB;
  x.isGenericTypeAnnotation = hB;
  x.isIdentifier = FN;
  x.isIfStatement = jN;
  x.isImmutable = g4;
  x.isImport = L3;
  x.isImportAttribute = Ak;
  x.isImportDeclaration = x3;
  x.isImportDefaultSpecifier = S3;
  x.isImportExpression = C3;
  x.isImportNamespaceSpecifier = P3;
  x.isImportOrExportDeclaration = $1;
  x.isImportSpecifier = A3;
  x.isIndexedAccessType = nk;
  x.isInferredPredicate = mB;
  x.isInterfaceDeclaration = gB;
  x.isInterfaceExtends = yB;
  x.isInterfaceTypeAnnotation = bB;
  x.isInterpreterDirective = gN;
  x.isIntersectionTypeAnnotation = EB;
  x.isJSX = j4;
  x.isJSXAttribute = ik;
  x.isJSXClosingElement = ak;
  x.isJSXClosingFragment = Ek;
  x.isJSXElement = ok;
  x.isJSXEmptyExpression = lk;
  x.isJSXExpressionContainer = uk;
  x.isJSXFragment = gk;
  x.isJSXIdentifier = fk;
  x.isJSXMemberExpression = pk;
  x.isJSXNamespacedName = dk;
  x.isJSXOpeningElement = hk;
  x.isJSXOpeningFragment = bk;
  x.isJSXSpreadAttribute = mk;
  x.isJSXSpreadChild = ck;
  x.isJSXText = yk;
  x.isLVal = h4;
  x.isLabeledStatement = LN;
  x.isLiteral = y4;
  x.isLogicalExpression = $N;
  x.isLoop = s4;
  x.isMemberExpression = WN;
  x.isMetaProperty = w3;
  x.isMethod = E4;
  x.isMiscellaneous = L4;
  x.isMixedTypeAnnotation = vB;
  x.isModuleDeclaration = G4;
  x.isModuleExpression = Nk;
  x.isModuleSpecifier = C4;
  x.isNewExpression = KN;
  x.isNoop = vk;
  x.isNullLiteral = qN;
  x.isNullLiteralTypeAnnotation = Q3;
  x.isNullableTypeAnnotation = xB;
  x.isNumberLiteral = V4;
  x.isNumberLiteralTypeAnnotation = SB;
  x.isNumberTypeAnnotation = PB;
  x.isNumericLiteral = RN;
  x.isObjectExpression = HN;
  x.isObjectMember = v4;
  x.isObjectMethod = YN;
  x.isObjectPattern = I3;
  x.isObjectProperty = zN;
  x.isObjectTypeAnnotation = AB;
  x.isObjectTypeCallProperty = wB;
  x.isObjectTypeIndexer = DB;
  x.isObjectTypeInternalSlot = CB;
  x.isObjectTypeProperty = IB;
  x.isObjectTypeSpreadProperty = _B;
  x.isOpaqueType = OB;
  x.isOptionalCallExpression = U3;
  x.isOptionalIndexedAccessType = sk;
  x.isOptionalMemberExpression = q3;
  x.isParenthesizedExpression = ZN;
  x.isPattern = S4;
  x.isPatternLike = d4;
  x.isPipelineBareFunction = Fk;
  x.isPipelinePrimaryTopicReference = jk;
  x.isPipelineTopicExpression = kk;
  x.isPlaceholder = Tk;
  x.isPrivate = D4;
  x.isPrivateName = G3;
  x.isProgram = GN;
  x.isProperty = T4;
  x.isPureish = f4;
  x.isQualifiedTypeIdentifier = NB;
  x.isRecordExpression = Ik;
  x.isRegExpLiteral = VN;
  x.isRegexLiteral = $4;
  x.isRestElement = JN;
  x.isRestProperty = W4;
  x.isReturnStatement = XN;
  x.isScopable = XF;
  x.isSequenceExpression = QN;
  x.isSpreadElement = _3;
  x.isSpreadProperty = K4;
  x.isStandardized = YF;
  x.isStatement = e4;
  x.isStaticBlock = H3;
  x.isStringLiteral = MN;
  x.isStringLiteralTypeAnnotation = BB;
  x.isStringTypeAnnotation = kB;
  x.isSuper = O3;
  x.isSwitchCase = e3;
  x.isSwitchStatement = t3;
  x.isSymbolTypeAnnotation = FB;
  x.isTSAnyKeyword = Gk;
  x.isTSArrayType = pF;
  x.isTSAsExpression = OF;
  x.isTSBaseType = U4;
  x.isTSBigIntKeyword = Yk;
  x.isTSBooleanKeyword = Hk;
  x.isTSCallSignatureDeclaration = Uk;
  x.isTSConditionalType = EF;
  x.isTSConstructSignatureDeclaration = Vk;
  x.isTSConstructorType = oF;
  x.isTSDeclareFunction = Mk;
  x.isTSDeclareMethod = Rk;
  x.isTSEntityName = m4;
  x.isTSEnumDeclaration = kF;
  x.isTSEnumMember = FF;
  x.isTSExportAssignment = VF;
  x.isTSExpressionWithTypeArguments = CF;
  x.isTSExternalModuleReference = qF;
  x.isTSFunctionType = aF;
  x.isTSImportEqualsDeclaration = RF;
  x.isTSImportType = MF;
  x.isTSIndexSignature = Kk;
  x.isTSIndexedAccessType = SF;
  x.isTSInferType = vF;
  x.isTSInstantiationExpression = _F;
  x.isTSInterfaceBody = DF;
  x.isTSInterfaceDeclaration = wF;
  x.isTSIntersectionType = bF;
  x.isTSIntrinsicKeyword = zk;
  x.isTSLiteralType = AF;
  x.isTSMappedType = PF;
  x.isTSMethodSignature = Wk;
  x.isTSModuleBlock = LF;
  x.isTSModuleDeclaration = jF;
  x.isTSNamedTupleMember = yF;
  x.isTSNamespaceExportDeclaration = $F;
  x.isTSNeverKeyword = Jk;
  x.isTSNonNullExpression = UF;
  x.isTSNullKeyword = Xk;
  x.isTSNumberKeyword = Qk;
  x.isTSObjectKeyword = Zk;
  x.isTSOptionalType = hF;
  x.isTSParameterProperty = Lk;
  x.isTSParenthesizedType = TF;
  x.isTSPropertySignature = $k;
  x.isTSQualifiedName = qk;
  x.isTSRestType = mF;
  x.isTSSatisfiesExpression = NF;
  x.isTSStringKeyword = eF;
  x.isTSSymbolKeyword = tF;
  x.isTSThisType = iF;
  x.isTSTupleType = dF;
  x.isTSType = q4;
  x.isTSTypeAliasDeclaration = IF;
  x.isTSTypeAnnotation = WF;
  x.isTSTypeAssertion = BF;
  x.isTSTypeElement = R4;
  x.isTSTypeLiteral = fF;
  x.isTSTypeOperator = xF;
  x.isTSTypeParameter = HF;
  x.isTSTypeParameterDeclaration = GF;
  x.isTSTypeParameterInstantiation = KF;
  x.isTSTypePredicate = uF;
  x.isTSTypeQuery = cF;
  x.isTSTypeReference = lF;
  x.isTSUndefinedKeyword = rF;
  x.isTSUnionType = gF;
  x.isTSUnknownKeyword = nF;
  x.isTSVoidKeyword = sF;
  x.isTaggedTemplateExpression = N3;
  x.isTemplateElement = B3;
  x.isTemplateLiteral = k3;
  x.isTerminatorless = t4;
  x.isThisExpression = r3;
  x.isThisTypeAnnotation = jB;
  x.isThrowStatement = n3;
  x.isTopicReference = Bk;
  x.isTryStatement = s3;
  x.isTupleExpression = _k;
  x.isTupleTypeAnnotation = LB;
  x.isTypeAlias = RB;
  x.isTypeAnnotation = qB;
  x.isTypeCastExpression = UB;
  x.isTypeParameter = VB;
  x.isTypeParameterDeclaration = $B;
  x.isTypeParameterInstantiation = WB;
  x.isTypeScript = M4;
  x.isTypeofTypeAnnotation = MB;
  x.isUnaryExpression = i3;
  x.isUnaryLike = x4;
  x.isUnionTypeAnnotation = KB;
  x.isUpdateExpression = a3;
  x.isUserWhitespacable = b4;
  x.isV8IntrinsicIdentifier = xk;
  x.isVariableDeclaration = o3;
  x.isVariableDeclarator = l3;
  x.isVariance = GB;
  x.isVoidTypeAnnotation = HB;
  x.isWhile = i4;
  x.isWhileStatement = u3;
  x.isWithStatement = c3;
  x.isYieldExpression = F3;
  var A = fl(), Ca = Aa();
  function hN(e, t) {
    return !e || e.type !== "ArrayExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(hN, "isArrayExpression");
  function mN(e, t) {
    return !e || e.type !== "AssignmentExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(mN, "isAssignmentExpression");
  function yN(e, t) {
    return !e || e.type !== "BinaryExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(yN, "isBinaryExpression");
  function gN(e, t) {
    return !e || e.type !== "InterpreterDirective" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(gN, "isInterpreterDirective");
  function bN(e, t) {
    return !e || e.type !== "Directive" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(bN, "isDirective");
  function EN(e, t) {
    return !e || e.type !== "DirectiveLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(EN, "isDirectiveLiteral");
  function vN(e, t) {
    return !e || e.type !== "BlockStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(vN, "isBlockStatement");
  function TN(e, t) {
    return !e || e.type !== "BreakStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(TN, "isBreakStatement");
  function xN(e, t) {
    return !e || e.type !== "CallExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(xN, "isCallExpression");
  function SN(e, t) {
    return !e || e.type !== "CatchClause" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(SN, "isCatchClause");
  function PN(e, t) {
    return !e || e.type !== "ConditionalExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(PN, "isConditionalExpression");
  function AN(e, t) {
    return !e || e.type !== "ContinueStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(AN, "isContinueStatement");
  function CN(e, t) {
    return !e || e.type !== "DebuggerStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(CN, "isDebuggerStatement");
  function wN(e, t) {
    return !e || e.type !== "DoWhileStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(wN, "isDoWhileStatement");
  function DN(e, t) {
    return !e || e.type !== "EmptyStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(DN, "isEmptyStatement");
  function IN(e, t) {
    return !e || e.type !== "ExpressionStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(IN, "isExpressionStatement");
  function _N(e, t) {
    return !e || e.type !== "File" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(_N, "isFile");
  function ON(e, t) {
    return !e || e.type !== "ForInStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(ON, "isForInStatement");
  function NN(e, t) {
    return !e || e.type !== "ForStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(NN, "isForStatement");
  function BN(e, t) {
    return !e || e.type !== "FunctionDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(BN, "isFunctionDeclaration");
  function kN(e, t) {
    return !e || e.type !== "FunctionExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(kN, "isFunctionExpression");
  function FN(e, t) {
    return !e || e.type !== "Identifier" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(FN, "isIdentifier");
  function jN(e, t) {
    return !e || e.type !== "IfStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(jN, "isIfStatement");
  function LN(e, t) {
    return !e || e.type !== "LabeledStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(LN, "isLabeledStatement");
  function MN(e, t) {
    return !e || e.type !== "StringLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(MN, "isStringLiteral");
  function RN(e, t) {
    return !e || e.type !== "NumericLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(RN, "isNumericLiteral");
  function qN(e, t) {
    return !e || e.type !== "NullLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(qN, "isNullLiteral");
  function UN(e, t) {
    return !e || e.type !== "BooleanLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(UN, "isBooleanLiteral");
  function VN(e, t) {
    return !e || e.type !== "RegExpLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(VN, "isRegExpLiteral");
  function $N(e, t) {
    return !e || e.type !== "LogicalExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s($N, "isLogicalExpression");
  function WN(e, t) {
    return !e || e.type !== "MemberExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(WN, "isMemberExpression");
  function KN(e, t) {
    return !e || e.type !== "NewExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(KN, "isNewExpression");
  function GN(e, t) {
    return !e || e.type !== "Program" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(GN, "isProgram");
  function HN(e, t) {
    return !e || e.type !== "ObjectExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(HN, "isObjectExpression");
  function YN(e, t) {
    return !e || e.type !== "ObjectMethod" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(YN, "isObjectMethod");
  function zN(e, t) {
    return !e || e.type !== "ObjectProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(zN, "isObjectProperty");
  function JN(e, t) {
    return !e || e.type !== "RestElement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(JN, "isRestElement");
  function XN(e, t) {
    return !e || e.type !== "ReturnStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(XN, "isReturnStatement");
  function QN(e, t) {
    return !e || e.type !== "SequenceExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(QN, "isSequenceExpression");
  function ZN(e, t) {
    return !e || e.type !== "ParenthesizedExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(ZN, "isParenthesizedExpression");
  function e3(e, t) {
    return !e || e.type !== "SwitchCase" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(e3, "isSwitchCase");
  function t3(e, t) {
    return !e || e.type !== "SwitchStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(t3, "isSwitchStatement");
  function r3(e, t) {
    return !e || e.type !== "ThisExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(r3, "isThisExpression");
  function n3(e, t) {
    return !e || e.type !== "ThrowStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(n3, "isThrowStatement");
  function s3(e, t) {
    return !e || e.type !== "TryStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(s3, "isTryStatement");
  function i3(e, t) {
    return !e || e.type !== "UnaryExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(i3, "isUnaryExpression");
  function a3(e, t) {
    return !e || e.type !== "UpdateExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(a3, "isUpdateExpression");
  function o3(e, t) {
    return !e || e.type !== "VariableDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(o3, "isVariableDeclaration");
  function l3(e, t) {
    return !e || e.type !== "VariableDeclarator" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(l3, "isVariableDeclarator");
  function u3(e, t) {
    return !e || e.type !== "WhileStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(u3, "isWhileStatement");
  function c3(e, t) {
    return !e || e.type !== "WithStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(c3, "isWithStatement");
  function f3(e, t) {
    return !e || e.type !== "AssignmentPattern" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(f3, "isAssignmentPattern");
  function p3(e, t) {
    return !e || e.type !== "ArrayPattern" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(p3, "isArrayPattern");
  function d3(e, t) {
    return !e || e.type !== "ArrowFunctionExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(d3, "isArrowFunctionExpression");
  function h3(e, t) {
    return !e || e.type !== "ClassBody" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(h3, "isClassBody");
  function m3(e, t) {
    return !e || e.type !== "ClassExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(m3, "isClassExpression");
  function y3(e, t) {
    return !e || e.type !== "ClassDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(y3, "isClassDeclaration");
  function g3(e, t) {
    return !e || e.type !== "ExportAllDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(g3, "isExportAllDeclaration");
  function b3(e, t) {
    return !e || e.type !== "ExportDefaultDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(b3, "isExportDefaultDeclaration");
  function E3(e, t) {
    return !e || e.type !== "ExportNamedDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(E3, "isExportNamedDeclaration");
  function v3(e, t) {
    return !e || e.type !== "ExportSpecifier" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(v3, "isExportSpecifier");
  function T3(e, t) {
    return !e || e.type !== "ForOfStatement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(T3, "isForOfStatement");
  function x3(e, t) {
    return !e || e.type !== "ImportDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(x3, "isImportDeclaration");
  function S3(e, t) {
    return !e || e.type !== "ImportDefaultSpecifier" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(S3, "isImportDefaultSpecifier");
  function P3(e, t) {
    return !e || e.type !== "ImportNamespaceSpecifier" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(P3, "isImportNamespaceSpecifier");
  function A3(e, t) {
    return !e || e.type !== "ImportSpecifier" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(A3, "isImportSpecifier");
  function C3(e, t) {
    return !e || e.type !== "ImportExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(C3, "isImportExpression");
  function w3(e, t) {
    return !e || e.type !== "MetaProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(w3, "isMetaProperty");
  function D3(e, t) {
    return !e || e.type !== "ClassMethod" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(D3, "isClassMethod");
  function I3(e, t) {
    return !e || e.type !== "ObjectPattern" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(I3, "isObjectPattern");
  function _3(e, t) {
    return !e || e.type !== "SpreadElement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(_3, "isSpreadElement");
  function O3(e, t) {
    return !e || e.type !== "Super" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(O3, "isSuper");
  function N3(e, t) {
    return !e || e.type !== "TaggedTemplateExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(N3, "isTaggedTemplateExpression");
  function B3(e, t) {
    return !e || e.type !== "TemplateElement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(B3, "isTemplateElement");
  function k3(e, t) {
    return !e || e.type !== "TemplateLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(k3, "isTemplateLiteral");
  function F3(e, t) {
    return !e || e.type !== "YieldExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(F3, "isYieldExpression");
  function j3(e, t) {
    return !e || e.type !== "AwaitExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(j3, "isAwaitExpression");
  function L3(e, t) {
    return !e || e.type !== "Import" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(L3, "isImport");
  function M3(e, t) {
    return !e || e.type !== "BigIntLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(M3, "isBigIntLiteral");
  function R3(e, t) {
    return !e || e.type !== "ExportNamespaceSpecifier" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(R3, "isExportNamespaceSpecifier");
  function q3(e, t) {
    return !e || e.type !== "OptionalMemberExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(q3, "isOptionalMemberExpression");
  function U3(e, t) {
    return !e || e.type !== "OptionalCallExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(U3, "isOptionalCallExpression");
  function V3(e, t) {
    return !e || e.type !== "ClassProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(V3, "isClassProperty");
  function $3(e, t) {
    return !e || e.type !== "ClassAccessorProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s($3, "isClassAccessorProperty");
  function W3(e, t) {
    return !e || e.type !== "ClassPrivateProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(W3, "isClassPrivateProperty");
  function K3(e, t) {
    return !e || e.type !== "ClassPrivateMethod" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(K3, "isClassPrivateMethod");
  function G3(e, t) {
    return !e || e.type !== "PrivateName" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(G3, "isPrivateName");
  function H3(e, t) {
    return !e || e.type !== "StaticBlock" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(H3, "isStaticBlock");
  function Y3(e, t) {
    return !e || e.type !== "AnyTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Y3, "isAnyTypeAnnotation");
  function z3(e, t) {
    return !e || e.type !== "ArrayTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(z3, "isArrayTypeAnnotation");
  function J3(e, t) {
    return !e || e.type !== "BooleanTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(J3, "isBooleanTypeAnnotation");
  function X3(e, t) {
    return !e || e.type !== "BooleanLiteralTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(X3, "isBooleanLiteralTypeAnnotation");
  function Q3(e, t) {
    return !e || e.type !== "NullLiteralTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Q3, "isNullLiteralTypeAnnotation");
  function Z3(e, t) {
    return !e || e.type !== "ClassImplements" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Z3, "isClassImplements");
  function eB(e, t) {
    return !e || e.type !== "DeclareClass" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(eB, "isDeclareClass");
  function tB(e, t) {
    return !e || e.type !== "DeclareFunction" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(tB, "isDeclareFunction");
  function rB(e, t) {
    return !e || e.type !== "DeclareInterface" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(rB, "isDeclareInterface");
  function nB(e, t) {
    return !e || e.type !== "DeclareModule" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(nB, "isDeclareModule");
  function sB(e, t) {
    return !e || e.type !== "DeclareModuleExports" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(sB, "isDeclareModuleExports");
  function iB(e, t) {
    return !e || e.type !== "DeclareTypeAlias" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(iB, "isDeclareTypeAlias");
  function aB(e, t) {
    return !e || e.type !== "DeclareOpaqueType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(aB, "isDeclareOpaqueType");
  function oB(e, t) {
    return !e || e.type !== "DeclareVariable" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(oB, "isDeclareVariable");
  function lB(e, t) {
    return !e || e.type !== "DeclareExportDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(lB, "isDeclareExportDeclaration");
  function uB(e, t) {
    return !e || e.type !== "DeclareExportAllDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(uB, "isDeclareExportAllDeclaration");
  function cB(e, t) {
    return !e || e.type !== "DeclaredPredicate" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(cB, "isDeclaredPredicate");
  function fB(e, t) {
    return !e || e.type !== "ExistsTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(fB, "isExistsTypeAnnotation");
  function pB(e, t) {
    return !e || e.type !== "FunctionTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(pB, "isFunctionTypeAnnotation");
  function dB(e, t) {
    return !e || e.type !== "FunctionTypeParam" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(dB, "isFunctionTypeParam");
  function hB(e, t) {
    return !e || e.type !== "GenericTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(hB, "isGenericTypeAnnotation");
  function mB(e, t) {
    return !e || e.type !== "InferredPredicate" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(mB, "isInferredPredicate");
  function yB(e, t) {
    return !e || e.type !== "InterfaceExtends" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(yB, "isInterfaceExtends");
  function gB(e, t) {
    return !e || e.type !== "InterfaceDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(gB, "isInterfaceDeclaration");
  function bB(e, t) {
    return !e || e.type !== "InterfaceTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(bB, "isInterfaceTypeAnnotation");
  function EB(e, t) {
    return !e || e.type !== "IntersectionTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(EB, "isIntersectionTypeAnnotation");
  function vB(e, t) {
    return !e || e.type !== "MixedTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(vB, "isMixedTypeAnnotation");
  function TB(e, t) {
    return !e || e.type !== "EmptyTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(TB, "isEmptyTypeAnnotation");
  function xB(e, t) {
    return !e || e.type !== "NullableTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(xB, "isNullableTypeAnnotation");
  function SB(e, t) {
    return !e || e.type !== "NumberLiteralTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(SB, "isNumberLiteralTypeAnnotation");
  function PB(e, t) {
    return !e || e.type !== "NumberTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(PB, "isNumberTypeAnnotation");
  function AB(e, t) {
    return !e || e.type !== "ObjectTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(AB, "isObjectTypeAnnotation");
  function CB(e, t) {
    return !e || e.type !== "ObjectTypeInternalSlot" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(CB, "isObjectTypeInternalSlot");
  function wB(e, t) {
    return !e || e.type !== "ObjectTypeCallProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(wB, "isObjectTypeCallProperty");
  function DB(e, t) {
    return !e || e.type !== "ObjectTypeIndexer" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(DB, "isObjectTypeIndexer");
  function IB(e, t) {
    return !e || e.type !== "ObjectTypeProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(IB, "isObjectTypeProperty");
  function _B(e, t) {
    return !e || e.type !== "ObjectTypeSpreadProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(_B, "isObjectTypeSpreadProperty");
  function OB(e, t) {
    return !e || e.type !== "OpaqueType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(OB, "isOpaqueType");
  function NB(e, t) {
    return !e || e.type !== "QualifiedTypeIdentifier" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(NB, "isQualifiedTypeIdentifier");
  function BB(e, t) {
    return !e || e.type !== "StringLiteralTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(BB, "isStringLiteralTypeAnnotation");
  function kB(e, t) {
    return !e || e.type !== "StringTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(kB, "isStringTypeAnnotation");
  function FB(e, t) {
    return !e || e.type !== "SymbolTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(FB, "isSymbolTypeAnnotation");
  function jB(e, t) {
    return !e || e.type !== "ThisTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(jB, "isThisTypeAnnotation");
  function LB(e, t) {
    return !e || e.type !== "TupleTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(LB, "isTupleTypeAnnotation");
  function MB(e, t) {
    return !e || e.type !== "TypeofTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(MB, "isTypeofTypeAnnotation");
  function RB(e, t) {
    return !e || e.type !== "TypeAlias" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(RB, "isTypeAlias");
  function qB(e, t) {
    return !e || e.type !== "TypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(qB, "isTypeAnnotation");
  function UB(e, t) {
    return !e || e.type !== "TypeCastExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(UB, "isTypeCastExpression");
  function VB(e, t) {
    return !e || e.type !== "TypeParameter" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(VB, "isTypeParameter");
  function $B(e, t) {
    return !e || e.type !== "TypeParameterDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s($B, "isTypeParameterDeclaration");
  function WB(e, t) {
    return !e || e.type !== "TypeParameterInstantiation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(WB, "isTypeParameterInstantiation");
  function KB(e, t) {
    return !e || e.type !== "UnionTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(KB, "isUnionTypeAnnotation");
  function GB(e, t) {
    return !e || e.type !== "Variance" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(GB, "isVariance");
  function HB(e, t) {
    return !e || e.type !== "VoidTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(HB, "isVoidTypeAnnotation");
  function YB(e, t) {
    return !e || e.type !== "EnumDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(YB, "isEnumDeclaration");
  function zB(e, t) {
    return !e || e.type !== "EnumBooleanBody" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(zB, "isEnumBooleanBody");
  function JB(e, t) {
    return !e || e.type !== "EnumNumberBody" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(JB, "isEnumNumberBody");
  function XB(e, t) {
    return !e || e.type !== "EnumStringBody" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(XB, "isEnumStringBody");
  function QB(e, t) {
    return !e || e.type !== "EnumSymbolBody" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(QB, "isEnumSymbolBody");
  function ZB(e, t) {
    return !e || e.type !== "EnumBooleanMember" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(ZB, "isEnumBooleanMember");
  function ek(e, t) {
    return !e || e.type !== "EnumNumberMember" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(ek, "isEnumNumberMember");
  function tk(e, t) {
    return !e || e.type !== "EnumStringMember" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(tk, "isEnumStringMember");
  function rk(e, t) {
    return !e || e.type !== "EnumDefaultedMember" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(rk, "isEnumDefaultedMember");
  function nk(e, t) {
    return !e || e.type !== "IndexedAccessType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(nk, "isIndexedAccessType");
  function sk(e, t) {
    return !e || e.type !== "OptionalIndexedAccessType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(sk, "isOptionalIndexedAccessType");
  function ik(e, t) {
    return !e || e.type !== "JSXAttribute" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(ik, "isJSXAttribute");
  function ak(e, t) {
    return !e || e.type !== "JSXClosingElement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(ak, "isJSXClosingElement");
  function ok(e, t) {
    return !e || e.type !== "JSXElement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(ok, "isJSXElement");
  function lk(e, t) {
    return !e || e.type !== "JSXEmptyExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(lk, "isJSXEmptyExpression");
  function uk(e, t) {
    return !e || e.type !== "JSXExpressionContainer" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(uk, "isJSXExpressionContainer");
  function ck(e, t) {
    return !e || e.type !== "JSXSpreadChild" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(ck, "isJSXSpreadChild");
  function fk(e, t) {
    return !e || e.type !== "JSXIdentifier" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(fk, "isJSXIdentifier");
  function pk(e, t) {
    return !e || e.type !== "JSXMemberExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(pk, "isJSXMemberExpression");
  function dk(e, t) {
    return !e || e.type !== "JSXNamespacedName" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(dk, "isJSXNamespacedName");
  function hk(e, t) {
    return !e || e.type !== "JSXOpeningElement" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(hk, "isJSXOpeningElement");
  function mk(e, t) {
    return !e || e.type !== "JSXSpreadAttribute" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(mk, "isJSXSpreadAttribute");
  function yk(e, t) {
    return !e || e.type !== "JSXText" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(yk, "isJSXText");
  function gk(e, t) {
    return !e || e.type !== "JSXFragment" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(gk, "isJSXFragment");
  function bk(e, t) {
    return !e || e.type !== "JSXOpeningFragment" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(bk, "isJSXOpeningFragment");
  function Ek(e, t) {
    return !e || e.type !== "JSXClosingFragment" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Ek, "isJSXClosingFragment");
  function vk(e, t) {
    return !e || e.type !== "Noop" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(vk, "isNoop");
  function Tk(e, t) {
    return !e || e.type !== "Placeholder" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Tk, "isPlaceholder");
  function xk(e, t) {
    return !e || e.type !== "V8IntrinsicIdentifier" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(xk, "isV8IntrinsicIdentifier");
  function Sk(e, t) {
    return !e || e.type !== "ArgumentPlaceholder" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Sk, "isArgumentPlaceholder");
  function Pk(e, t) {
    return !e || e.type !== "BindExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Pk, "isBindExpression");
  function Ak(e, t) {
    return !e || e.type !== "ImportAttribute" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Ak, "isImportAttribute");
  function Ck(e, t) {
    return !e || e.type !== "Decorator" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Ck, "isDecorator");
  function wk(e, t) {
    return !e || e.type !== "DoExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(wk, "isDoExpression");
  function Dk(e, t) {
    return !e || e.type !== "ExportDefaultSpecifier" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Dk, "isExportDefaultSpecifier");
  function Ik(e, t) {
    return !e || e.type !== "RecordExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Ik, "isRecordExpression");
  function _k(e, t) {
    return !e || e.type !== "TupleExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(_k, "isTupleExpression");
  function Ok(e, t) {
    return !e || e.type !== "DecimalLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Ok, "isDecimalLiteral");
  function Nk(e, t) {
    return !e || e.type !== "ModuleExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Nk, "isModuleExpression");
  function Bk(e, t) {
    return !e || e.type !== "TopicReference" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Bk, "isTopicReference");
  function kk(e, t) {
    return !e || e.type !== "PipelineTopicExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(kk, "isPipelineTopicExpression");
  function Fk(e, t) {
    return !e || e.type !== "PipelineBareFunction" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Fk, "isPipelineBareFunction");
  function jk(e, t) {
    return !e || e.type !== "PipelinePrimaryTopicReference" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(jk, "isPipelinePrimaryTopicReference");
  function Lk(e, t) {
    return !e || e.type !== "TSParameterProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Lk, "isTSParameterProperty");
  function Mk(e, t) {
    return !e || e.type !== "TSDeclareFunction" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Mk, "isTSDeclareFunction");
  function Rk(e, t) {
    return !e || e.type !== "TSDeclareMethod" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Rk, "isTSDeclareMethod");
  function qk(e, t) {
    return !e || e.type !== "TSQualifiedName" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(qk, "isTSQualifiedName");
  function Uk(e, t) {
    return !e || e.type !== "TSCallSignatureDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Uk, "isTSCallSignatureDeclaration");
  function Vk(e, t) {
    return !e || e.type !== "TSConstructSignatureDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Vk, "isTSConstructSignatureDeclaration");
  function $k(e, t) {
    return !e || e.type !== "TSPropertySignature" ? !1 : t == null || (0, A.default)(e, t);
  }
  s($k, "isTSPropertySignature");
  function Wk(e, t) {
    return !e || e.type !== "TSMethodSignature" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Wk, "isTSMethodSignature");
  function Kk(e, t) {
    return !e || e.type !== "TSIndexSignature" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Kk, "isTSIndexSignature");
  function Gk(e, t) {
    return !e || e.type !== "TSAnyKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Gk, "isTSAnyKeyword");
  function Hk(e, t) {
    return !e || e.type !== "TSBooleanKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Hk, "isTSBooleanKeyword");
  function Yk(e, t) {
    return !e || e.type !== "TSBigIntKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Yk, "isTSBigIntKeyword");
  function zk(e, t) {
    return !e || e.type !== "TSIntrinsicKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(zk, "isTSIntrinsicKeyword");
  function Jk(e, t) {
    return !e || e.type !== "TSNeverKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Jk, "isTSNeverKeyword");
  function Xk(e, t) {
    return !e || e.type !== "TSNullKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Xk, "isTSNullKeyword");
  function Qk(e, t) {
    return !e || e.type !== "TSNumberKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Qk, "isTSNumberKeyword");
  function Zk(e, t) {
    return !e || e.type !== "TSObjectKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(Zk, "isTSObjectKeyword");
  function eF(e, t) {
    return !e || e.type !== "TSStringKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(eF, "isTSStringKeyword");
  function tF(e, t) {
    return !e || e.type !== "TSSymbolKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(tF, "isTSSymbolKeyword");
  function rF(e, t) {
    return !e || e.type !== "TSUndefinedKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(rF, "isTSUndefinedKeyword");
  function nF(e, t) {
    return !e || e.type !== "TSUnknownKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(nF, "isTSUnknownKeyword");
  function sF(e, t) {
    return !e || e.type !== "TSVoidKeyword" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(sF, "isTSVoidKeyword");
  function iF(e, t) {
    return !e || e.type !== "TSThisType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(iF, "isTSThisType");
  function aF(e, t) {
    return !e || e.type !== "TSFunctionType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(aF, "isTSFunctionType");
  function oF(e, t) {
    return !e || e.type !== "TSConstructorType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(oF, "isTSConstructorType");
  function lF(e, t) {
    return !e || e.type !== "TSTypeReference" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(lF, "isTSTypeReference");
  function uF(e, t) {
    return !e || e.type !== "TSTypePredicate" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(uF, "isTSTypePredicate");
  function cF(e, t) {
    return !e || e.type !== "TSTypeQuery" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(cF, "isTSTypeQuery");
  function fF(e, t) {
    return !e || e.type !== "TSTypeLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(fF, "isTSTypeLiteral");
  function pF(e, t) {
    return !e || e.type !== "TSArrayType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(pF, "isTSArrayType");
  function dF(e, t) {
    return !e || e.type !== "TSTupleType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(dF, "isTSTupleType");
  function hF(e, t) {
    return !e || e.type !== "TSOptionalType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(hF, "isTSOptionalType");
  function mF(e, t) {
    return !e || e.type !== "TSRestType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(mF, "isTSRestType");
  function yF(e, t) {
    return !e || e.type !== "TSNamedTupleMember" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(yF, "isTSNamedTupleMember");
  function gF(e, t) {
    return !e || e.type !== "TSUnionType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(gF, "isTSUnionType");
  function bF(e, t) {
    return !e || e.type !== "TSIntersectionType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(bF, "isTSIntersectionType");
  function EF(e, t) {
    return !e || e.type !== "TSConditionalType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(EF, "isTSConditionalType");
  function vF(e, t) {
    return !e || e.type !== "TSInferType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(vF, "isTSInferType");
  function TF(e, t) {
    return !e || e.type !== "TSParenthesizedType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(TF, "isTSParenthesizedType");
  function xF(e, t) {
    return !e || e.type !== "TSTypeOperator" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(xF, "isTSTypeOperator");
  function SF(e, t) {
    return !e || e.type !== "TSIndexedAccessType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(SF, "isTSIndexedAccessType");
  function PF(e, t) {
    return !e || e.type !== "TSMappedType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(PF, "isTSMappedType");
  function AF(e, t) {
    return !e || e.type !== "TSLiteralType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(AF, "isTSLiteralType");
  function CF(e, t) {
    return !e || e.type !== "TSExpressionWithTypeArguments" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(CF, "isTSExpressionWithTypeArguments");
  function wF(e, t) {
    return !e || e.type !== "TSInterfaceDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(wF, "isTSInterfaceDeclaration");
  function DF(e, t) {
    return !e || e.type !== "TSInterfaceBody" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(DF, "isTSInterfaceBody");
  function IF(e, t) {
    return !e || e.type !== "TSTypeAliasDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(IF, "isTSTypeAliasDeclaration");
  function _F(e, t) {
    return !e || e.type !== "TSInstantiationExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(_F, "isTSInstantiationExpression");
  function OF(e, t) {
    return !e || e.type !== "TSAsExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(OF, "isTSAsExpression");
  function NF(e, t) {
    return !e || e.type !== "TSSatisfiesExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(NF, "isTSSatisfiesExpression");
  function BF(e, t) {
    return !e || e.type !== "TSTypeAssertion" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(BF, "isTSTypeAssertion");
  function kF(e, t) {
    return !e || e.type !== "TSEnumDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(kF, "isTSEnumDeclaration");
  function FF(e, t) {
    return !e || e.type !== "TSEnumMember" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(FF, "isTSEnumMember");
  function jF(e, t) {
    return !e || e.type !== "TSModuleDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(jF, "isTSModuleDeclaration");
  function LF(e, t) {
    return !e || e.type !== "TSModuleBlock" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(LF, "isTSModuleBlock");
  function MF(e, t) {
    return !e || e.type !== "TSImportType" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(MF, "isTSImportType");
  function RF(e, t) {
    return !e || e.type !== "TSImportEqualsDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(RF, "isTSImportEqualsDeclaration");
  function qF(e, t) {
    return !e || e.type !== "TSExternalModuleReference" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(qF, "isTSExternalModuleReference");
  function UF(e, t) {
    return !e || e.type !== "TSNonNullExpression" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(UF, "isTSNonNullExpression");
  function VF(e, t) {
    return !e || e.type !== "TSExportAssignment" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(VF, "isTSExportAssignment");
  function $F(e, t) {
    return !e || e.type !== "TSNamespaceExportDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s($F, "isTSNamespaceExportDeclaration");
  function WF(e, t) {
    return !e || e.type !== "TSTypeAnnotation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(WF, "isTSTypeAnnotation");
  function KF(e, t) {
    return !e || e.type !== "TSTypeParameterInstantiation" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(KF, "isTSTypeParameterInstantiation");
  function GF(e, t) {
    return !e || e.type !== "TSTypeParameterDeclaration" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(GF, "isTSTypeParameterDeclaration");
  function HF(e, t) {
    return !e || e.type !== "TSTypeParameter" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(HF, "isTSTypeParameter");
  function YF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "InterpreterDirective":
      case "Directive":
      case "DirectiveLiteral":
      case "BlockStatement":
      case "BreakStatement":
      case "CallExpression":
      case "CatchClause":
      case "ConditionalExpression":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "File":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Identifier":
      case "IfStatement":
      case "LabeledStatement":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "Program":
      case "ObjectExpression":
      case "ObjectMethod":
      case "ObjectProperty":
      case "RestElement":
      case "ReturnStatement":
      case "SequenceExpression":
      case "ParenthesizedExpression":
      case "SwitchCase":
      case "SwitchStatement":
      case "ThisExpression":
      case "ThrowStatement":
      case "TryStatement":
      case "UnaryExpression":
      case "UpdateExpression":
      case "VariableDeclaration":
      case "VariableDeclarator":
      case "WhileStatement":
      case "WithStatement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ArrowFunctionExpression":
      case "ClassBody":
      case "ClassExpression":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ExportSpecifier":
      case "ForOfStatement":
      case "ImportDeclaration":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
      case "ImportExpression":
      case "MetaProperty":
      case "ClassMethod":
      case "ObjectPattern":
      case "SpreadElement":
      case "Super":
      case "TaggedTemplateExpression":
      case "TemplateElement":
      case "TemplateLiteral":
      case "YieldExpression":
      case "AwaitExpression":
      case "Import":
      case "BigIntLiteral":
      case "ExportNamespaceSpecifier":
      case "OptionalMemberExpression":
      case "OptionalCallExpression":
      case "ClassProperty":
      case "ClassAccessorProperty":
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
      case "PrivateName":
      case "StaticBlock":
        break;
      case "Placeholder":
        switch (e.expectedNode) {
          case "Identifier":
          case "StringLiteral":
          case "BlockStatement":
          case "ClassBody":
            break;
          default:
            return !1;
        }
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(YF, "isStandardized");
  function zF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "CallExpression":
      case "ConditionalExpression":
      case "FunctionExpression":
      case "Identifier":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "ObjectExpression":
      case "SequenceExpression":
      case "ParenthesizedExpression":
      case "ThisExpression":
      case "UnaryExpression":
      case "UpdateExpression":
      case "ArrowFunctionExpression":
      case "ClassExpression":
      case "ImportExpression":
      case "MetaProperty":
      case "Super":
      case "TaggedTemplateExpression":
      case "TemplateLiteral":
      case "YieldExpression":
      case "AwaitExpression":
      case "Import":
      case "BigIntLiteral":
      case "OptionalMemberExpression":
      case "OptionalCallExpression":
      case "TypeCastExpression":
      case "JSXElement":
      case "JSXFragment":
      case "BindExpression":
      case "DoExpression":
      case "RecordExpression":
      case "TupleExpression":
      case "DecimalLiteral":
      case "ModuleExpression":
      case "TopicReference":
      case "PipelineTopicExpression":
      case "PipelineBareFunction":
      case "PipelinePrimaryTopicReference":
      case "TSInstantiationExpression":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (e.expectedNode) {
          case "Expression":
          case "Identifier":
          case "StringLiteral":
            break;
          default:
            return !1;
        }
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(zF, "isExpression");
  function JF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BinaryExpression":
      case "LogicalExpression":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(JF, "isBinary");
  function XF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BlockStatement":
      case "CatchClause":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Program":
      case "ObjectMethod":
      case "SwitchStatement":
      case "WhileStatement":
      case "ArrowFunctionExpression":
      case "ClassExpression":
      case "ClassDeclaration":
      case "ForOfStatement":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (e.expectedNode === "BlockStatement") break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(XF, "isScopable");
  function QF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BlockStatement":
      case "CatchClause":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Program":
      case "ObjectMethod":
      case "SwitchStatement":
      case "WhileStatement":
      case "ArrowFunctionExpression":
      case "ForOfStatement":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (e.expectedNode === "BlockStatement") break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(QF, "isBlockParent");
  function ZF(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BlockStatement":
      case "Program":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (e.expectedNode === "BlockStatement") break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(ZF, "isBlock");
  function e4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BlockStatement":
      case "BreakStatement":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "IfStatement":
      case "LabeledStatement":
      case "ReturnStatement":
      case "SwitchStatement":
      case "ThrowStatement":
      case "TryStatement":
      case "VariableDeclaration":
      case "WhileStatement":
      case "WithStatement":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ForOfStatement":
      case "ImportDeclaration":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
      case "EnumDeclaration":
      case "TSDeclareFunction":
      case "TSInterfaceDeclaration":
      case "TSTypeAliasDeclaration":
      case "TSEnumDeclaration":
      case "TSModuleDeclaration":
      case "TSImportEqualsDeclaration":
      case "TSExportAssignment":
      case "TSNamespaceExportDeclaration":
        break;
      case "Placeholder":
        switch (e.expectedNode) {
          case "Statement":
          case "Declaration":
          case "BlockStatement":
            break;
          default:
            return !1;
        }
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(e4, "isStatement");
  function t4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BreakStatement":
      case "ContinueStatement":
      case "ReturnStatement":
      case "ThrowStatement":
      case "YieldExpression":
      case "AwaitExpression":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(t4, "isTerminatorless");
  function r4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "BreakStatement":
      case "ContinueStatement":
      case "ReturnStatement":
      case "ThrowStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(r4, "isCompletionStatement");
  function n4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ConditionalExpression":
      case "IfStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(n4, "isConditional");
  function s4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "WhileStatement":
      case "ForOfStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(s4, "isLoop");
  function i4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "DoWhileStatement":
      case "WhileStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(i4, "isWhile");
  function a4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ExpressionStatement":
      case "ParenthesizedExpression":
      case "TypeCastExpression":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(a4, "isExpressionWrapper");
  function o4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ForInStatement":
      case "ForStatement":
      case "ForOfStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(o4, "isFor");
  function l4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ForInStatement":
      case "ForOfStatement":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(l4, "isForXStatement");
  function u4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ObjectMethod":
      case "ArrowFunctionExpression":
      case "ClassMethod":
      case "ClassPrivateMethod":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(u4, "isFunction");
  function c4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ObjectMethod":
      case "ArrowFunctionExpression":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(c4, "isFunctionParent");
  function f4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "ArrowFunctionExpression":
      case "BigIntLiteral":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (e.expectedNode === "StringLiteral") break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(f4, "isPureish");
  function p4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "FunctionDeclaration":
      case "VariableDeclaration":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ImportDeclaration":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
      case "EnumDeclaration":
      case "TSDeclareFunction":
      case "TSInterfaceDeclaration":
      case "TSTypeAliasDeclaration":
      case "TSEnumDeclaration":
      case "TSModuleDeclaration":
        break;
      case "Placeholder":
        if (e.expectedNode === "Declaration") break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(p4, "isDeclaration");
  function d4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "Identifier":
      case "RestElement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (e.expectedNode) {
          case "Pattern":
          case "Identifier":
            break;
          default:
            return !1;
        }
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(d4, "isPatternLike");
  function h4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "Identifier":
      case "MemberExpression":
      case "RestElement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
      case "TSParameterProperty":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (e.expectedNode) {
          case "Pattern":
          case "Identifier":
            break;
          default:
            return !1;
        }
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(h4, "isLVal");
  function m4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "Identifier":
      case "TSQualifiedName":
        break;
      case "Placeholder":
        if (e.expectedNode === "Identifier") break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(m4, "isTSEntityName");
  function y4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "TemplateLiteral":
      case "BigIntLiteral":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (e.expectedNode === "StringLiteral") break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(y4, "isLiteral");
  function g4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "BigIntLiteral":
      case "JSXAttribute":
      case "JSXClosingElement":
      case "JSXElement":
      case "JSXExpressionContainer":
      case "JSXSpreadChild":
      case "JSXOpeningElement":
      case "JSXText":
      case "JSXFragment":
      case "JSXOpeningFragment":
      case "JSXClosingFragment":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (e.expectedNode === "StringLiteral") break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(g4, "isImmutable");
  function b4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ObjectMethod":
      case "ObjectProperty":
      case "ObjectTypeInternalSlot":
      case "ObjectTypeCallProperty":
      case "ObjectTypeIndexer":
      case "ObjectTypeProperty":
      case "ObjectTypeSpreadProperty":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(b4, "isUserWhitespacable");
  function E4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ObjectMethod":
      case "ClassMethod":
      case "ClassPrivateMethod":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(E4, "isMethod");
  function v4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ObjectMethod":
      case "ObjectProperty":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(v4, "isObjectMember");
  function T4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ObjectProperty":
      case "ClassProperty":
      case "ClassAccessorProperty":
      case "ClassPrivateProperty":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(T4, "isProperty");
  function x4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "UnaryExpression":
      case "SpreadElement":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(x4, "isUnaryLike");
  function S4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
        break;
      case "Placeholder":
        if (e.expectedNode === "Pattern") break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(S4, "isPattern");
  function P4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ClassExpression":
      case "ClassDeclaration":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(P4, "isClass");
  function $1(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ImportDeclaration":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s($1, "isImportOrExportDeclaration");
  function A4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(A4, "isExportDeclaration");
  function C4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ExportSpecifier":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(C4, "isModuleSpecifier");
  function w4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ClassAccessorProperty":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(w4, "isAccessor");
  function D4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
      case "PrivateName":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(D4, "isPrivate");
  function I4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "AnyTypeAnnotation":
      case "ArrayTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "BooleanLiteralTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "ClassImplements":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "DeclaredPredicate":
      case "ExistsTypeAnnotation":
      case "FunctionTypeAnnotation":
      case "FunctionTypeParam":
      case "GenericTypeAnnotation":
      case "InferredPredicate":
      case "InterfaceExtends":
      case "InterfaceDeclaration":
      case "InterfaceTypeAnnotation":
      case "IntersectionTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NullableTypeAnnotation":
      case "NumberLiteralTypeAnnotation":
      case "NumberTypeAnnotation":
      case "ObjectTypeAnnotation":
      case "ObjectTypeInternalSlot":
      case "ObjectTypeCallProperty":
      case "ObjectTypeIndexer":
      case "ObjectTypeProperty":
      case "ObjectTypeSpreadProperty":
      case "OpaqueType":
      case "QualifiedTypeIdentifier":
      case "StringLiteralTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "TupleTypeAnnotation":
      case "TypeofTypeAnnotation":
      case "TypeAlias":
      case "TypeAnnotation":
      case "TypeCastExpression":
      case "TypeParameter":
      case "TypeParameterDeclaration":
      case "TypeParameterInstantiation":
      case "UnionTypeAnnotation":
      case "Variance":
      case "VoidTypeAnnotation":
      case "EnumDeclaration":
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
      case "EnumDefaultedMember":
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(I4, "isFlow");
  function _4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "AnyTypeAnnotation":
      case "ArrayTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "BooleanLiteralTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "ExistsTypeAnnotation":
      case "FunctionTypeAnnotation":
      case "GenericTypeAnnotation":
      case "InterfaceTypeAnnotation":
      case "IntersectionTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NullableTypeAnnotation":
      case "NumberLiteralTypeAnnotation":
      case "NumberTypeAnnotation":
      case "ObjectTypeAnnotation":
      case "StringLiteralTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "TupleTypeAnnotation":
      case "TypeofTypeAnnotation":
      case "UnionTypeAnnotation":
      case "VoidTypeAnnotation":
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(_4, "isFlowType");
  function O4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "AnyTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NumberTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "VoidTypeAnnotation":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(O4, "isFlowBaseAnnotation");
  function N4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(N4, "isFlowDeclaration");
  function B4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "DeclaredPredicate":
      case "InferredPredicate":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(B4, "isFlowPredicate");
  function k4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(k4, "isEnumBody");
  function F4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
      case "EnumDefaultedMember":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(F4, "isEnumMember");
  function j4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "JSXAttribute":
      case "JSXClosingElement":
      case "JSXElement":
      case "JSXEmptyExpression":
      case "JSXExpressionContainer":
      case "JSXSpreadChild":
      case "JSXIdentifier":
      case "JSXMemberExpression":
      case "JSXNamespacedName":
      case "JSXOpeningElement":
      case "JSXSpreadAttribute":
      case "JSXText":
      case "JSXFragment":
      case "JSXOpeningFragment":
      case "JSXClosingFragment":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(j4, "isJSX");
  function L4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "Noop":
      case "Placeholder":
      case "V8IntrinsicIdentifier":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(L4, "isMiscellaneous");
  function M4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "TSParameterProperty":
      case "TSDeclareFunction":
      case "TSDeclareMethod":
      case "TSQualifiedName":
      case "TSCallSignatureDeclaration":
      case "TSConstructSignatureDeclaration":
      case "TSPropertySignature":
      case "TSMethodSignature":
      case "TSIndexSignature":
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSFunctionType":
      case "TSConstructorType":
      case "TSTypeReference":
      case "TSTypePredicate":
      case "TSTypeQuery":
      case "TSTypeLiteral":
      case "TSArrayType":
      case "TSTupleType":
      case "TSOptionalType":
      case "TSRestType":
      case "TSNamedTupleMember":
      case "TSUnionType":
      case "TSIntersectionType":
      case "TSConditionalType":
      case "TSInferType":
      case "TSParenthesizedType":
      case "TSTypeOperator":
      case "TSIndexedAccessType":
      case "TSMappedType":
      case "TSLiteralType":
      case "TSExpressionWithTypeArguments":
      case "TSInterfaceDeclaration":
      case "TSInterfaceBody":
      case "TSTypeAliasDeclaration":
      case "TSInstantiationExpression":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSEnumDeclaration":
      case "TSEnumMember":
      case "TSModuleDeclaration":
      case "TSModuleBlock":
      case "TSImportType":
      case "TSImportEqualsDeclaration":
      case "TSExternalModuleReference":
      case "TSNonNullExpression":
      case "TSExportAssignment":
      case "TSNamespaceExportDeclaration":
      case "TSTypeAnnotation":
      case "TSTypeParameterInstantiation":
      case "TSTypeParameterDeclaration":
      case "TSTypeParameter":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(M4, "isTypeScript");
  function R4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "TSCallSignatureDeclaration":
      case "TSConstructSignatureDeclaration":
      case "TSPropertySignature":
      case "TSMethodSignature":
      case "TSIndexSignature":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(R4, "isTSTypeElement");
  function q4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSFunctionType":
      case "TSConstructorType":
      case "TSTypeReference":
      case "TSTypePredicate":
      case "TSTypeQuery":
      case "TSTypeLiteral":
      case "TSArrayType":
      case "TSTupleType":
      case "TSOptionalType":
      case "TSRestType":
      case "TSUnionType":
      case "TSIntersectionType":
      case "TSConditionalType":
      case "TSInferType":
      case "TSParenthesizedType":
      case "TSTypeOperator":
      case "TSIndexedAccessType":
      case "TSMappedType":
      case "TSLiteralType":
      case "TSExpressionWithTypeArguments":
      case "TSImportType":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(q4, "isTSType");
  function U4(e, t) {
    if (!e) return !1;
    switch (e.type) {
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSLiteralType":
        break;
      default:
        return !1;
    }
    return t == null || (0, A.default)(e, t);
  }
  s(U4, "isTSBaseType");
  function V4(e, t) {
    return (0, Ca.default)("isNumberLiteral", "isNumericLiteral"), !e || e.type !== "NumberLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(V4, "isNumberLiteral");
  function $4(e, t) {
    return (0, Ca.default)("isRegexLiteral", "isRegExpLiteral"), !e || e.type !== "RegexLiteral" ? !1 : t == null || (0, A.default)(e, t);
  }
  s($4, "isRegexLiteral");
  function W4(e, t) {
    return (0, Ca.default)("isRestProperty", "isRestElement"), !e || e.type !== "RestProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(W4, "isRestProperty");
  function K4(e, t) {
    return (0, Ca.default)("isSpreadProperty", "isSpreadElement"), !e || e.type !== "SpreadProperty" ? !1 : t == null || (0, A.default)(e, t);
  }
  s(K4, "isSpreadProperty");
  function G4(e, t) {
    return (0, Ca.default)("isModuleDeclaration", "isImportOrExportDeclaration"), $1(e, t);
  }
  s(G4, "isModuleDeclaration");
});

// ../node_modules/@babel/types/lib/validators/matchesPattern.js
var Qf = T((Xf) => {
  "use strict";
  Object.defineProperty(Xf, "__esModule", {
    value: !0
  });
  Xf.default = H4;
  var wa = vt();
  function H4(e, t, r) {
    if (!(0, wa.isMemberExpression)(e)) return !1;
    let n = Array.isArray(t) ? t : t.split("."), i = [], a;
    for (a = e; (0, wa.isMemberExpression)(a); a = a.object)
      i.push(a.property);
    if (i.push(a), i.length < n.length || !r && i.length > n.length) return !1;
    for (let o = 0, l = i.length - 1; o < n.length; o++, l--) {
      let u = i[l], c;
      if ((0, wa.isIdentifier)(u))
        c = u.name;
      else if ((0, wa.isStringLiteral)(u))
        c = u.value;
      else if ((0, wa.isThisExpression)(u))
        c = "this";
      else
        return !1;
      if (n[o] !== c) return !1;
    }
    return !0;
  }
  s(H4, "matchesPattern");
});

// ../node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js
var ep = T((Zf) => {
  "use strict";
  Object.defineProperty(Zf, "__esModule", {
    value: !0
  });
  Zf.default = z4;
  var Y4 = Qf();
  function z4(e, t) {
    let r = e.split(".");
    return (n) => (0, Y4.default)(n, r, t);
  }
  s(z4, "buildMatchMemberExpression");
});

// ../node_modules/@babel/types/lib/validators/react/isReactComponent.js
var W1 = T((pl) => {
  "use strict";
  Object.defineProperty(pl, "__esModule", {
    value: !0
  });
  pl.default = void 0;
  var J4 = ep(), X4 = (0, J4.default)("React.Component"), dEe = pl.default = X4;
});

// ../node_modules/@babel/types/lib/validators/react/isCompatTag.js
var K1 = T((tp) => {
  "use strict";
  Object.defineProperty(tp, "__esModule", {
    value: !0
  });
  tp.default = Q4;
  function Q4(e) {
    return !!e && /^[a-z]/.test(e);
  }
  s(Q4, "isCompatTag");
});

// ../node_modules/to-fast-properties/index.js
var H1 = T((gEe, G1) => {
  "use strict";
  var Da = null;
  function Ia(e) {
    if (Da !== null && typeof Da.property) {
      let t = Da;
      return Da = Ia.prototype = null, t;
    }
    return Da = Ia.prototype = e ?? /* @__PURE__ */ Object.create(null), new Ia();
  }
  s(Ia, "FastObject");
  Ia();
  G1.exports = /* @__PURE__ */ s(function(t) {
    return Ia(t);
  }, "toFastproperties");
});

// ../node_modules/@babel/types/lib/validators/isType.js
var dl = T((rp) => {
  "use strict";
  Object.defineProperty(rp, "__esModule", {
    value: !0
  });
  rp.default = Z4;
  var Y1 = Ar();
  function Z4(e, t) {
    if (e === t) return !0;
    if (e == null || Y1.ALIAS_KEYS[t]) return !1;
    let r = Y1.FLIPPED_ALIAS_KEYS[t];
    if (r) {
      if (r[0] === e) return !0;
      for (let n of r)
        if (e === n) return !0;
    }
    return !1;
  }
  s(Z4, "isType");
});

// ../node_modules/@babel/types/lib/validators/isPlaceholderType.js
var sp = T((np) => {
  "use strict";
  Object.defineProperty(np, "__esModule", {
    value: !0
  });
  np.default = t8;
  var e8 = Ar();
  function t8(e, t) {
    if (e === t) return !0;
    let r = e8.PLACEHOLDERS_ALIAS[e];
    if (r) {
      for (let n of r)
        if (t === n) return !0;
    }
    return !1;
  }
  s(t8, "isPlaceholderType");
});

// ../node_modules/@babel/types/lib/validators/is.js
var mi = T((ip) => {
  "use strict";
  Object.defineProperty(ip, "__esModule", {
    value: !0
  });
  ip.default = a8;
  var r8 = fl(), n8 = dl(), s8 = sp(), i8 = Ar();
  function a8(e, t, r) {
    return t ? (0, n8.default)(t.type, e) ? typeof r > "u" ? !0 : (0, r8.default)(t, r) : !r && t.type === "Placeholder" && e in i8.FLIPPED_ALIAS_KEYS ?
    (0, s8.default)(t.expectedNode, e) : !1 : !1;
  }
  s(a8, "is");
});

// ../node_modules/@babel/helper-validator-identifier/lib/identifier.js
var Z1 = T((_a) => {
  "use strict";
  Object.defineProperty(_a, "__esModule", {
    value: !0
  });
  _a.isIdentifierChar = Q1;
  _a.isIdentifierName = c8;
  _a.isIdentifierStart = X1;
  var op = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993\
-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\
\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\
\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\
\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\
\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01\
-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
  z1 = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\
\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4\
-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\
\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\
\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65", o8 = new RegExp("[" + op + "]"), l8 = new RegExp("[" + op + z1 + "]");
  op = z1 = null;
  var J1 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157,
  19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0,
  2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27,
  28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1,
  3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8,
  46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60,
  42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22,
  0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33,
  125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689,
  63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106,
  6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339,
  3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43,
  485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0,
  2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33,
  4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], u8 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2,
  5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6,
  1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17,
  10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1,
  13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9,
  9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54,
  8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14,
  1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function ap(e, t) {
    let r = 65536;
    for (let n = 0, i = t.length; n < i; n += 2) {
      if (r += t[n], r > e) return !1;
      if (r += t[n + 1], r >= e) return !0;
    }
    return !1;
  }
  s(ap, "isInAstralSet");
  function X1(e) {
    return e < 65 ? e === 36 : e <= 90 ? !0 : e < 97 ? e === 95 : e <= 122 ? !0 : e <= 65535 ? e >= 170 && o8.test(String.fromCharCode(e)) :
    ap(e, J1);
  }
  s(X1, "isIdentifierStart");
  function Q1(e) {
    return e < 48 ? e === 36 : e < 58 ? !0 : e < 65 ? !1 : e <= 90 ? !0 : e < 97 ? e === 95 : e <= 122 ? !0 : e <= 65535 ? e >= 170 && l8.test(
    String.fromCharCode(e)) : ap(e, J1) || ap(e, u8);
  }
  s(Q1, "isIdentifierChar");
  function c8(e) {
    let t = !0;
    for (let r = 0; r < e.length; r++) {
      let n = e.charCodeAt(r);
      if ((n & 64512) === 55296 && r + 1 < e.length) {
        let i = e.charCodeAt(++r);
        (i & 64512) === 56320 && (n = 65536 + ((n & 1023) << 10) + (i & 1023));
      }
      if (t) {
        if (t = !1, !X1(n))
          return !1;
      } else if (!Q1(n))
        return !1;
    }
    return !t;
  }
  s(c8, "isIdentifierName");
});

// ../node_modules/@babel/helper-validator-identifier/lib/keyword.js
var nE = T((Is) => {
  "use strict";
  Object.defineProperty(Is, "__esModule", {
    value: !0
  });
  Is.isKeyword = m8;
  Is.isReservedWord = eE;
  Is.isStrictBindOnlyReservedWord = rE;
  Is.isStrictBindReservedWord = h8;
  Is.isStrictReservedWord = tE;
  var lp = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "swit\
ch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false",
    "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  }, f8 = new Set(lp.keyword), p8 = new Set(lp.strict), d8 = new Set(lp.strictBind);
  function eE(e, t) {
    return t && e === "await" || e === "enum";
  }
  s(eE, "isReservedWord");
  function tE(e, t) {
    return eE(e, t) || p8.has(e);
  }
  s(tE, "isStrictReservedWord");
  function rE(e) {
    return d8.has(e);
  }
  s(rE, "isStrictBindOnlyReservedWord");
  function h8(e, t) {
    return tE(e, t) || rE(e);
  }
  s(h8, "isStrictBindReservedWord");
  function m8(e) {
    return f8.has(e);
  }
  s(m8, "isKeyword");
});

// ../node_modules/@babel/helper-validator-identifier/lib/index.js
var yi = T((on) => {
  "use strict";
  Object.defineProperty(on, "__esModule", {
    value: !0
  });
  Object.defineProperty(on, "isIdentifierChar", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return up.isIdentifierChar;
    }, "get")
  });
  Object.defineProperty(on, "isIdentifierName", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return up.isIdentifierName;
    }, "get")
  });
  Object.defineProperty(on, "isIdentifierStart", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return up.isIdentifierStart;
    }, "get")
  });
  Object.defineProperty(on, "isKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Oa.isKeyword;
    }, "get")
  });
  Object.defineProperty(on, "isReservedWord", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Oa.isReservedWord;
    }, "get")
  });
  Object.defineProperty(on, "isStrictBindOnlyReservedWord", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Oa.isStrictBindOnlyReservedWord;
    }, "get")
  });
  Object.defineProperty(on, "isStrictBindReservedWord", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Oa.isStrictBindReservedWord;
    }, "get")
  });
  Object.defineProperty(on, "isStrictReservedWord", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Oa.isStrictReservedWord;
    }, "get")
  });
  var up = Z1(), Oa = nE();
});

// ../node_modules/@babel/types/lib/validators/isValidIdentifier.js
var gi = T((fp) => {
  "use strict";
  Object.defineProperty(fp, "__esModule", {
    value: !0
  });
  fp.default = y8;
  var cp = yi();
  function y8(e, t = !0) {
    return typeof e != "string" || t && ((0, cp.isKeyword)(e) || (0, cp.isStrictReservedWord)(e, !0)) ? !1 : (0, cp.isIdentifierName)(e);
  }
  s(y8, "isValidIdentifier");
});

// ../node_modules/@babel/helper-string-parser/lib/index.js
var oE = T((Na) => {
  "use strict";
  Object.defineProperty(Na, "__esModule", {
    value: !0
  });
  Na.readCodePoint = aE;
  Na.readInt = iE;
  Na.readStringContents = b8;
  var g8 = /* @__PURE__ */ s(function(t) {
    return t >= 48 && t <= 57;
  }, "isDigit"), sE = {
    decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
  }, hl = {
    bin: /* @__PURE__ */ s((e) => e === 48 || e === 49, "bin"),
    oct: /* @__PURE__ */ s((e) => e >= 48 && e <= 55, "oct"),
    dec: /* @__PURE__ */ s((e) => e >= 48 && e <= 57, "dec"),
    hex: /* @__PURE__ */ s((e) => e >= 48 && e <= 57 || e >= 65 && e <= 70 || e >= 97 && e <= 102, "hex")
  };
  function b8(e, t, r, n, i, a) {
    let o = r, l = n, u = i, c = "", f = null, p = r, {
      length: h
    } = t;
    for (; ; ) {
      if (r >= h) {
        a.unterminated(o, l, u), c += t.slice(p, r);
        break;
      }
      let y = t.charCodeAt(r);
      if (E8(e, y, t, r)) {
        c += t.slice(p, r);
        break;
      }
      if (y === 92) {
        c += t.slice(p, r);
        let v = v8(t, r, n, i, e === "template", a);
        v.ch === null && !f ? f = {
          pos: r,
          lineStart: n,
          curLine: i
        } : c += v.ch, {
          pos: r,
          lineStart: n,
          curLine: i
        } = v, p = r;
      } else y === 8232 || y === 8233 ? (++r, ++i, n = r) : y === 10 || y === 13 ? e === "template" ? (c += t.slice(p, r) + `
`, ++r, y === 13 && t.charCodeAt(r) === 10 && ++r, ++i, p = n = r) : a.unterminated(o, l, u) : ++r;
    }
    return {
      pos: r,
      str: c,
      firstInvalidLoc: f,
      lineStart: n,
      curLine: i,
      containsInvalid: !!f
    };
  }
  s(b8, "readStringContents");
  function E8(e, t, r, n) {
    return e === "template" ? t === 96 || t === 36 && r.charCodeAt(n + 1) === 123 : t === (e === "double" ? 34 : 39);
  }
  s(E8, "isStringEnd");
  function v8(e, t, r, n, i, a) {
    let o = !i;
    t++;
    let l = /* @__PURE__ */ s((c) => ({
      pos: t,
      ch: c,
      lineStart: r,
      curLine: n
    }), "res"), u = e.charCodeAt(t++);
    switch (u) {
      case 110:
        return l(`
`);
      case 114:
        return l("\r");
      case 120: {
        let c;
        return {
          code: c,
          pos: t
        } = pp(e, t, r, n, 2, !1, o, a), l(c === null ? null : String.fromCharCode(c));
      }
      case 117: {
        let c;
        return {
          code: c,
          pos: t
        } = aE(e, t, r, n, o, a), l(c === null ? null : String.fromCodePoint(c));
      }
      case 116:
        return l("	");
      case 98:
        return l("\b");
      case 118:
        return l("\v");
      case 102:
        return l("\f");
      case 13:
        e.charCodeAt(t) === 10 && ++t;
      case 10:
        r = t, ++n;
      case 8232:
      case 8233:
        return l("");
      case 56:
      case 57:
        if (i)
          return l(null);
        a.strictNumericEscape(t - 1, r, n);
      default:
        if (u >= 48 && u <= 55) {
          let c = t - 1, p = /^[0-7]+/.exec(e.slice(c, t + 2))[0], h = parseInt(p, 8);
          h > 255 && (p = p.slice(0, -1), h = parseInt(p, 8)), t += p.length - 1;
          let y = e.charCodeAt(t);
          if (p !== "0" || y === 56 || y === 57) {
            if (i)
              return l(null);
            a.strictNumericEscape(c, r, n);
          }
          return l(String.fromCharCode(h));
        }
        return l(String.fromCharCode(u));
    }
  }
  s(v8, "readEscapedChar");
  function pp(e, t, r, n, i, a, o, l) {
    let u = t, c;
    return {
      n: c,
      pos: t
    } = iE(e, t, r, n, 16, i, a, !1, l, !o), c === null && (o ? l.invalidEscapeSequence(u, r, n) : t = u - 1), {
      code: c,
      pos: t
    };
  }
  s(pp, "readHexChar");
  function iE(e, t, r, n, i, a, o, l, u, c) {
    let f = t, p = i === 16 ? sE.hex : sE.decBinOct, h = i === 16 ? hl.hex : i === 10 ? hl.dec : i === 8 ? hl.oct : hl.bin, y = !1, v = 0;
    for (let d = 0, b = a ?? 1 / 0; d < b; ++d) {
      let E = e.charCodeAt(t), I;
      if (E === 95 && l !== "bail") {
        let O = e.charCodeAt(t - 1), k = e.charCodeAt(t + 1);
        if (l) {
          if (Number.isNaN(k) || !h(k) || p.has(O) || p.has(k)) {
            if (c) return {
              n: null,
              pos: t
            };
            u.unexpectedNumericSeparator(t, r, n);
          }
        } else {
          if (c) return {
            n: null,
            pos: t
          };
          u.numericSeparatorInEscapeSequence(t, r, n);
        }
        ++t;
        continue;
      }
      if (E >= 97 ? I = E - 97 + 10 : E >= 65 ? I = E - 65 + 10 : g8(E) ? I = E - 48 : I = 1 / 0, I >= i) {
        if (I <= 9 && c)
          return {
            n: null,
            pos: t
          };
        if (I <= 9 && u.invalidDigit(t, r, n, i))
          I = 0;
        else if (o)
          I = 0, y = !0;
        else
          break;
      }
      ++t, v = v * i + I;
    }
    return t === f || a != null && t - f !== a || y ? {
      n: null,
      pos: t
    } : {
      n: v,
      pos: t
    };
  }
  s(iE, "readInt");
  function aE(e, t, r, n, i, a) {
    let o = e.charCodeAt(t), l;
    if (o === 123) {
      if (++t, {
        code: l,
        pos: t
      } = pp(e, t, r, n, e.indexOf("}", t) - t, !0, i, a), ++t, l !== null && l > 1114111)
        if (i)
          a.invalidCodePoint(t, r, n);
        else
          return {
            code: null,
            pos: t
          };
    } else
      ({
        code: l,
        pos: t
      } = pp(e, t, r, n, 4, !1, i, a));
    return {
      code: l,
      pos: t
    };
  }
  s(aE, "readCodePoint");
});

// ../node_modules/@babel/types/lib/constants/index.js
var Jn = T((Le) => {
  "use strict";
  Object.defineProperty(Le, "__esModule", {
    value: !0
  });
  Le.UPDATE_OPERATORS = Le.UNARY_OPERATORS = Le.STRING_UNARY_OPERATORS = Le.STATEMENT_OR_BLOCK_KEYS = Le.NUMBER_UNARY_OPERATORS = Le.NUMBER_BINARY_OPERATORS =
  Le.NOT_LOCAL_BINDING = Le.LOGICAL_OPERATORS = Le.INHERIT_KEYS = Le.FOR_INIT_KEYS = Le.FLATTENABLE_KEYS = Le.EQUALITY_BINARY_OPERATORS = Le.
  COMPARISON_BINARY_OPERATORS = Le.COMMENT_KEYS = Le.BOOLEAN_UNARY_OPERATORS = Le.BOOLEAN_NUMBER_BINARY_OPERATORS = Le.BOOLEAN_BINARY_OPERATORS =
  Le.BLOCK_SCOPED_SYMBOL = Le.BINARY_OPERATORS = Le.ASSIGNMENT_OPERATORS = void 0;
  var FEe = Le.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"], jEe = Le.FLATTENABLE_KEYS = ["body", "expressions"], LEe = Le.
  FOR_INIT_KEYS = ["left", "init"], MEe = Le.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"], T8 = Le.LOGICAL_OPERATORS =
  ["||", "&&", "??"], REe = Le.UPDATE_OPERATORS = ["++", "--"], x8 = Le.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="], S8 = Le.EQUALITY_BINARY_OPERATORS =
  ["==", "===", "!=", "!=="], P8 = Le.COMPARISON_BINARY_OPERATORS = [...S8, "in", "instanceof"], A8 = Le.BOOLEAN_BINARY_OPERATORS = [...P8, ...x8],
  lE = Le.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"], qEe = Le.BINARY_OPERATORS = ["+", ...lE, ...A8,
  "|>"], UEe = Le.ASSIGNMENT_OPERATORS = ["=", "+=", ...lE.map((e) => e + "="), ...T8.map((e) => e + "=")], C8 = Le.BOOLEAN_UNARY_OPERATORS =
  ["delete", "!"], w8 = Le.NUMBER_UNARY_OPERATORS = ["+", "-", "~"], D8 = Le.STRING_UNARY_OPERATORS = ["typeof"], VEe = Le.UNARY_OPERATORS =
  ["void", "throw", ...C8, ...w8, ...D8], $Ee = Le.INHERIT_KEYS = {
    optional: ["typeAnnotation", "typeParameters", "returnType"],
    force: ["start", "loc", "end"]
  }, WEe = Le.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped"), KEe = Le.NOT_LOCAL_BINDING = Symbol.for("should not be consid\
ered a local binding");
});

// ../node_modules/@babel/types/lib/definitions/utils.js
var xn = T((Je) => {
  "use strict";
  Object.defineProperty(Je, "__esModule", {
    value: !0
  });
  Je.VISITOR_KEYS = Je.NODE_PARENT_VALIDATIONS = Je.NODE_FIELDS = Je.FLIPPED_ALIAS_KEYS = Je.DEPRECATED_KEYS = Je.BUILDER_KEYS = Je.ALIAS_KEYS =
  void 0;
  Je.arrayOf = cE;
  Je.arrayOfType = fE;
  Je.assertEach = pE;
  Je.assertNodeOrValueType = q8;
  Je.assertNodeType = hp;
  Je.assertOneOf = R8;
  Je.assertOptionalChainStart = V8;
  Je.assertShape = U8;
  Je.assertValueType = gp;
  Je.chain = dE;
  Je.default = hE;
  Je.defineAliasedType = K8;
  Je.typeIs = gl;
  Je.validate = yp;
  Je.validateArrayOfType = M8;
  Je.validateOptional = j8;
  Je.validateOptionalType = L8;
  Je.validateType = F8;
  var uE = mi(), yl = bl(), I8 = Je.VISITOR_KEYS = {}, _8 = Je.ALIAS_KEYS = {}, dp = Je.FLIPPED_ALIAS_KEYS = {}, O8 = Je.NODE_FIELDS = {}, N8 = Je.
  BUILDER_KEYS = {}, B8 = Je.DEPRECATED_KEYS = {}, k8 = Je.NODE_PARENT_VALIDATIONS = {};
  function ml(e) {
    return Array.isArray(e) ? "array" : e === null ? "null" : typeof e;
  }
  s(ml, "getType");
  function yp(e) {
    return {
      validate: e
    };
  }
  s(yp, "validate");
  function gl(e) {
    return typeof e == "string" ? hp(e) : hp(...e);
  }
  s(gl, "typeIs");
  function F8(e) {
    return yp(gl(e));
  }
  s(F8, "validateType");
  function j8(e) {
    return {
      validate: e,
      optional: !0
    };
  }
  s(j8, "validateOptional");
  function L8(e) {
    return {
      validate: gl(e),
      optional: !0
    };
  }
  s(L8, "validateOptionalType");
  function cE(e) {
    return dE(gp("array"), pE(e));
  }
  s(cE, "arrayOf");
  function fE(e) {
    return cE(gl(e));
  }
  s(fE, "arrayOfType");
  function M8(e) {
    return yp(fE(e));
  }
  s(M8, "validateArrayOfType");
  function pE(e) {
    function t(r, n, i) {
      if (Array.isArray(i))
        for (let a = 0; a < i.length; a++) {
          let o = `${n}[${a}]`, l = i[a];
          e(r, o, l), process.env.BABEL_TYPES_8_BREAKING && (0, yl.validateChild)(r, o, l);
        }
    }
    return s(t, "validator"), t.each = e, t;
  }
  s(pE, "assertEach");
  function R8(...e) {
    function t(r, n, i) {
      if (!e.includes(i))
        throw new TypeError(`Property ${n} expected value to be one of ${JSON.stringify(e)} but got ${JSON.stringify(i)}`);
    }
    return s(t, "validate"), t.oneOf = e, t;
  }
  s(R8, "assertOneOf");
  function hp(...e) {
    function t(r, n, i) {
      for (let a of e)
        if ((0, uE.default)(a, i)) {
          (0, yl.validateChild)(r, n, i);
          return;
        }
      throw new TypeError(`Property ${n} of ${r.type} expected node to be of a type ${JSON.stringify(e)} but instead got ${JSON.stringify(i?.
      type)}`);
    }
    return s(t, "validate"), t.oneOfNodeTypes = e, t;
  }
  s(hp, "assertNodeType");
  function q8(...e) {
    function t(r, n, i) {
      for (let a of e)
        if (ml(i) === a || (0, uE.default)(a, i)) {
          (0, yl.validateChild)(r, n, i);
          return;
        }
      throw new TypeError(`Property ${n} of ${r.type} expected node to be of a type ${JSON.stringify(e)} but instead got ${JSON.stringify(i?.
      type)}`);
    }
    return s(t, "validate"), t.oneOfNodeOrValueTypes = e, t;
  }
  s(q8, "assertNodeOrValueType");
  function gp(e) {
    function t(r, n, i) {
      if (!(ml(i) === e))
        throw new TypeError(`Property ${n} expected type of ${e} but got ${ml(i)}`);
    }
    return s(t, "validate"), t.type = e, t;
  }
  s(gp, "assertValueType");
  function U8(e) {
    function t(r, n, i) {
      let a = [];
      for (let o of Object.keys(e))
        try {
          (0, yl.validateField)(r, o, i[o], e[o]);
        } catch (l) {
          if (l instanceof TypeError) {
            a.push(l.message);
            continue;
          }
          throw l;
        }
      if (a.length)
        throw new TypeError(`Property ${n} of ${r.type} expected to have the following:
${a.join(`
`)}`);
    }
    return s(t, "validate"), t.shapeOf = e, t;
  }
  s(U8, "assertShape");
  function V8() {
    function e(t) {
      var r;
      let n = t;
      for (; t; ) {
        let {
          type: i
        } = n;
        if (i === "OptionalCallExpression") {
          if (n.optional) return;
          n = n.callee;
          continue;
        }
        if (i === "OptionalMemberExpression") {
          if (n.optional) return;
          n = n.object;
          continue;
        }
        break;
      }
      throw new TypeError(`Non-optional ${t.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chai\
n from ${(r = n) == null ? void 0 : r.type}`);
    }
    return s(e, "validate"), e;
  }
  s(V8, "assertOptionalChainStart");
  function dE(...e) {
    function t(...r) {
      for (let n of e)
        n(...r);
    }
    if (s(t, "validate"), t.chainOf = e, e.length >= 2 && "type" in e[0] && e[0].type === "array" && !("each" in e[1]))
      throw new Error('An assertValueType("array") validator can only be followed by an assertEach(...) validator.');
    return t;
  }
  s(dE, "chain");
  var $8 = ["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"], W8 = ["default", "optional", "deprecated",
  "validate"], mp = {};
  function K8(...e) {
    return (t, r = {}) => {
      let n = r.aliases;
      if (!n) {
        var i, a;
        r.inherits && (n = (i = mp[r.inherits].aliases) == null ? void 0 : i.slice()), (a = n) != null || (n = []), r.aliases = n;
      }
      let o = e.filter((l) => !n.includes(l));
      n.unshift(...o), hE(t, r);
    };
  }
  s(K8, "defineAliasedType");
  function hE(e, t = {}) {
    let r = t.inherits && mp[t.inherits] || {}, n = t.fields;
    if (!n && (n = {}, r.fields)) {
      let l = Object.getOwnPropertyNames(r.fields);
      for (let u of l) {
        let c = r.fields[u], f = c.default;
        if (Array.isArray(f) ? f.length > 0 : f && typeof f == "object")
          throw new Error("field defaults can only be primitives or empty arrays currently");
        n[u] = {
          default: Array.isArray(f) ? [] : f,
          optional: c.optional,
          deprecated: c.deprecated,
          validate: c.validate
        };
      }
    }
    let i = t.visitor || r.visitor || [], a = t.aliases || r.aliases || [], o = t.builder || r.builder || t.visitor || [];
    for (let l of Object.keys(t))
      if (!$8.includes(l))
        throw new Error(`Unknown type option "${l}" on ${e}`);
    t.deprecatedAlias && (B8[t.deprecatedAlias] = e);
    for (let l of i.concat(o))
      n[l] = n[l] || {};
    for (let l of Object.keys(n)) {
      let u = n[l];
      u.default !== void 0 && !o.includes(l) && (u.optional = !0), u.default === void 0 ? u.default = null : !u.validate && u.default != null &&
      (u.validate = gp(ml(u.default)));
      for (let c of Object.keys(u))
        if (!W8.includes(c))
          throw new Error(`Unknown field key "${c}" on ${e}.${l}`);
    }
    I8[e] = t.visitor = i, N8[e] = t.builder = o, O8[e] = t.fields = n, _8[e] = t.aliases = a, a.forEach((l) => {
      dp[l] = dp[l] || [], dp[l].push(e);
    }), t.validate && (k8[e] = t.validate), mp[e] = t;
  }
  s(hE, "defineType");
});

// ../node_modules/@babel/types/lib/definitions/core.js
var Ep = T((pr) => {
  "use strict";
  Object.defineProperty(pr, "__esModule", {
    value: !0
  });
  pr.patternLikeCommon = pr.functionTypeAnnotationCommon = pr.functionDeclarationCommon = pr.functionCommon = pr.classMethodOrPropertyCommon =
  pr.classMethodOrDeclareMethodCommon = void 0;
  var er = mi(), G8 = gi(), mE = yi(), H8 = oE(), Ba = Jn(), m = xn(), te = (0, m.defineAliasedType)("Standardized");
  te("ArrayExpression", {
    fields: {
      elements: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeOrValueType)("null", "Expression", "Spread\
Element"))),
        default: process.env.BABEL_TYPES_8_BREAKING ? void 0 : []
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  te("AssignmentExpression", {
    fields: {
      operator: {
        validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return (0, m.assertValueType)("string");
          let e = (0, m.assertOneOf)(...Ba.ASSIGNMENT_OPERATORS), t = (0, m.assertOneOf)("=");
          return function(r, n, i) {
            ((0, er.default)("Pattern", r.left) ? t : e)(r, n, i);
          };
        }()
      },
      left: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, m.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "\
ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, m.assertNodeType)(
        "LVal", "OptionalMemberExpression")
      },
      right: {
        validate: (0, m.assertNodeType)("Expression")
      }
    },
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Expression"]
  });
  te("BinaryExpression", {
    builder: ["operator", "left", "right"],
    fields: {
      operator: {
        validate: (0, m.assertOneOf)(...Ba.BINARY_OPERATORS)
      },
      left: {
        validate: function() {
          let e = (0, m.assertNodeType)("Expression"), t = (0, m.assertNodeType)("Expression", "PrivateName");
          return Object.assign(function(n, i, a) {
            (n.operator === "in" ? t : e)(n, i, a);
          }, {
            oneOfNodeTypes: ["Expression", "PrivateName"]
          });
        }()
      },
      right: {
        validate: (0, m.assertNodeType)("Expression")
      }
    },
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"]
  });
  te("InterpreterDirective", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, m.assertValueType)("string")
      }
    }
  });
  te("Directive", {
    visitor: ["value"],
    fields: {
      value: {
        validate: (0, m.assertNodeType)("DirectiveLiteral")
      }
    }
  });
  te("DirectiveLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, m.assertValueType)("string")
      }
    }
  });
  te("BlockStatement", {
    builder: ["body", "directives"],
    visitor: ["directives", "body"],
    fields: {
      directives: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Directive"))),
        default: []
      },
      body: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "Block", "Statement"]
  });
  te("BreakStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, m.assertNodeType)("Identifier"),
        optional: !0
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  te("CallExpression", {
    visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
    builder: ["callee", "arguments"],
    aliases: ["Expression"],
    fields: Object.assign({
      callee: {
        validate: (0, m.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier")
      },
      arguments: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Expression", "SpreadElement", "Argu\
mentPlaceholder")))
      }
    }, process.env.BABEL_TYPES_8_BREAKING ? {} : {
      optional: {
        validate: (0, m.assertOneOf)(!0, !1),
        optional: !0
      }
    }, {
      typeArguments: {
        validate: (0, m.assertNodeType)("TypeParameterInstantiation"),
        optional: !0
      },
      typeParameters: {
        validate: (0, m.assertNodeType)("TSTypeParameterInstantiation"),
        optional: !0
      }
    })
  });
  te("CatchClause", {
    visitor: ["param", "body"],
    fields: {
      param: {
        validate: (0, m.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
        optional: !0
      },
      body: {
        validate: (0, m.assertNodeType)("BlockStatement")
      }
    },
    aliases: ["Scopable", "BlockParent"]
  });
  te("ConditionalExpression", {
    visitor: ["test", "consequent", "alternate"],
    fields: {
      test: {
        validate: (0, m.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, m.assertNodeType)("Expression")
      },
      alternate: {
        validate: (0, m.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression", "Conditional"]
  });
  te("ContinueStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, m.assertNodeType)("Identifier"),
        optional: !0
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  te("DebuggerStatement", {
    aliases: ["Statement"]
  });
  te("DoWhileStatement", {
    visitor: ["test", "body"],
    fields: {
      test: {
        validate: (0, m.assertNodeType)("Expression")
      },
      body: {
        validate: (0, m.assertNodeType)("Statement")
      }
    },
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
  });
  te("EmptyStatement", {
    aliases: ["Statement"]
  });
  te("ExpressionStatement", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, m.assertNodeType)("Expression")
      }
    },
    aliases: ["Statement", "ExpressionWrapper"]
  });
  te("File", {
    builder: ["program", "comments", "tokens"],
    visitor: ["program"],
    fields: {
      program: {
        validate: (0, m.assertNodeType)("Program")
      },
      comments: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, m.assertEach)((0, m.assertNodeType)("CommentBlock", "CommentLine")) : Object.assign(
        () => {
        }, {
          each: {
            oneOfNodeTypes: ["CommentBlock", "CommentLine"]
          }
        }),
        optional: !0
      },
      tokens: {
        validate: (0, m.assertEach)(Object.assign(() => {
        }, {
          type: "any"
        })),
        optional: !0
      }
    }
  });
  te("ForInStatement", {
    visitor: ["left", "right", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, m.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "Array\
Pattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, m.assertNodeType)("Var\
iableDeclaration", "LVal")
      },
      right: {
        validate: (0, m.assertNodeType)("Expression")
      },
      body: {
        validate: (0, m.assertNodeType)("Statement")
      }
    }
  });
  te("ForStatement", {
    visitor: ["init", "test", "update", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
    fields: {
      init: {
        validate: (0, m.assertNodeType)("VariableDeclaration", "Expression"),
        optional: !0
      },
      test: {
        validate: (0, m.assertNodeType)("Expression"),
        optional: !0
      },
      update: {
        validate: (0, m.assertNodeType)("Expression"),
        optional: !0
      },
      body: {
        validate: (0, m.assertNodeType)("Statement")
      }
    }
  });
  var bi = /* @__PURE__ */ s(() => ({
    params: {
      validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Identifier", "Pattern", "RestElement")))
    },
    generator: {
      default: !1
    },
    async: {
      default: !1
    }
  }), "functionCommon");
  pr.functionCommon = bi;
  var _s = /* @__PURE__ */ s(() => ({
    returnType: {
      validate: (0, m.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: !0
    },
    typeParameters: {
      validate: (0, m.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
      optional: !0
    }
  }), "functionTypeAnnotationCommon");
  pr.functionTypeAnnotationCommon = _s;
  var yE = /* @__PURE__ */ s(() => Object.assign({}, bi(), {
    declare: {
      validate: (0, m.assertValueType)("boolean"),
      optional: !0
    },
    id: {
      validate: (0, m.assertNodeType)("Identifier"),
      optional: !0
    }
  }), "functionDeclarationCommon");
  pr.functionDeclarationCommon = yE;
  te("FunctionDeclaration", {
    builder: ["id", "params", "body", "generator", "async"],
    visitor: ["id", "params", "body", "returnType", "typeParameters"],
    fields: Object.assign({}, yE(), _s(), {
      body: {
        validate: (0, m.assertNodeType)("BlockStatement")
      },
      predicate: {
        validate: (0, m.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: !0
      }
    }),
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"],
    validate: function() {
      if (!process.env.BABEL_TYPES_8_BREAKING) return () => {
      };
      let e = (0, m.assertNodeType)("Identifier");
      return function(t, r, n) {
        (0, er.default)("ExportDefaultDeclaration", t) || e(n, "id", n.id);
      };
    }()
  });
  te("FunctionExpression", {
    inherits: "FunctionDeclaration",
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: Object.assign({}, bi(), _s(), {
      id: {
        validate: (0, m.assertNodeType)("Identifier"),
        optional: !0
      },
      body: {
        validate: (0, m.assertNodeType)("BlockStatement")
      },
      predicate: {
        validate: (0, m.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: !0
      }
    })
  });
  var Ei = /* @__PURE__ */ s(() => ({
    typeAnnotation: {
      validate: (0, m.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: !0
    },
    optional: {
      validate: (0, m.assertValueType)("boolean"),
      optional: !0
    },
    decorators: {
      validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Decorator"))),
      optional: !0
    }
  }), "patternLikeCommon");
  pr.patternLikeCommon = Ei;
  te("Identifier", {
    builder: ["name"],
    visitor: ["typeAnnotation", "decorators"],
    aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
    fields: Object.assign({}, Ei(), {
      name: {
        validate: (0, m.chain)((0, m.assertValueType)("string"), Object.assign(function(e, t, r) {
          if (process.env.BABEL_TYPES_8_BREAKING && !(0, G8.default)(r, !1))
            throw new TypeError(`"${r}" is not a valid identifier name`);
        }, {
          type: "string"
        }))
      }
    }),
    validate(e, t, r) {
      if (!process.env.BABEL_TYPES_8_BREAKING) return;
      let n = /\.(\w+)$/.exec(t);
      if (!n) return;
      let [, i] = n, a = {
        computed: !1
      };
      if (i === "property") {
        if ((0, er.default)("MemberExpression", e, a) || (0, er.default)("OptionalMemberExpression", e, a)) return;
      } else if (i === "key") {
        if ((0, er.default)("Property", e, a) || (0, er.default)("Method", e, a)) return;
      } else if (i === "exported") {
        if ((0, er.default)("ExportSpecifier", e)) return;
      } else if (i === "imported") {
        if ((0, er.default)("ImportSpecifier", e, {
          imported: r
        })) return;
      } else if (i === "meta" && (0, er.default)("MetaProperty", e, {
        meta: r
      }))
        return;
      if (((0, mE.isKeyword)(r.name) || (0, mE.isReservedWord)(r.name, !1)) && r.name !== "this")
        throw new TypeError(`"${r.name}" is not a valid identifier`);
    }
  });
  te("IfStatement", {
    visitor: ["test", "consequent", "alternate"],
    aliases: ["Statement", "Conditional"],
    fields: {
      test: {
        validate: (0, m.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, m.assertNodeType)("Statement")
      },
      alternate: {
        optional: !0,
        validate: (0, m.assertNodeType)("Statement")
      }
    }
  });
  te("LabeledStatement", {
    visitor: ["label", "body"],
    aliases: ["Statement"],
    fields: {
      label: {
        validate: (0, m.assertNodeType)("Identifier")
      },
      body: {
        validate: (0, m.assertNodeType)("Statement")
      }
    }
  });
  te("StringLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, m.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  te("NumericLiteral", {
    builder: ["value"],
    deprecatedAlias: "NumberLiteral",
    fields: {
      value: {
        validate: (0, m.chain)((0, m.assertValueType)("number"), Object.assign(function(e, t, r) {
          if (1 / r < 0 || !Number.isFinite(r)) {
            let n = new Error(`NumericLiterals must be non-negative finite numbers. You can use t.valueToNode(${r}) instead.`);
          }
        }, {
          type: "number"
        }))
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  te("NullLiteral", {
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  te("BooleanLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, m.assertValueType)("boolean")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  te("RegExpLiteral", {
    builder: ["pattern", "flags"],
    deprecatedAlias: "RegexLiteral",
    aliases: ["Expression", "Pureish", "Literal"],
    fields: {
      pattern: {
        validate: (0, m.assertValueType)("string")
      },
      flags: {
        validate: (0, m.chain)((0, m.assertValueType)("string"), Object.assign(function(e, t, r) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          let n = /[^gimsuy]/.exec(r);
          if (n)
            throw new TypeError(`"${n[0]}" is not a valid RegExp flag`);
        }, {
          type: "string"
        })),
        default: ""
      }
    }
  });
  te("LogicalExpression", {
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"],
    fields: {
      operator: {
        validate: (0, m.assertOneOf)(...Ba.LOGICAL_OPERATORS)
      },
      left: {
        validate: (0, m.assertNodeType)("Expression")
      },
      right: {
        validate: (0, m.assertNodeType)("Expression")
      }
    }
  });
  te("MemberExpression", {
    builder: ["object", "property", "computed", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["optional"]],
    visitor: ["object", "property"],
    aliases: ["Expression", "LVal"],
    fields: Object.assign({
      object: {
        validate: (0, m.assertNodeType)("Expression", "Super")
      },
      property: {
        validate: function() {
          let e = (0, m.assertNodeType)("Identifier", "PrivateName"), t = (0, m.assertNodeType)("Expression"), r = /* @__PURE__ */ s(function(n, i, a) {
            (n.computed ? t : e)(n, i, a);
          }, "validator");
          return r.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"], r;
        }()
      },
      computed: {
        default: !1
      }
    }, process.env.BABEL_TYPES_8_BREAKING ? {} : {
      optional: {
        validate: (0, m.assertOneOf)(!0, !1),
        optional: !0
      }
    })
  });
  te("NewExpression", {
    inherits: "CallExpression"
  });
  te("Program", {
    visitor: ["directives", "body"],
    builder: ["body", "directives", "sourceType", "interpreter"],
    fields: {
      sourceType: {
        validate: (0, m.assertOneOf)("script", "module"),
        default: "script"
      },
      interpreter: {
        validate: (0, m.assertNodeType)("InterpreterDirective"),
        default: null,
        optional: !0
      },
      directives: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Directive"))),
        default: []
      },
      body: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "Block"]
  });
  te("ObjectExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("ObjectMethod", "ObjectProperty", "S\
preadElement")))
      }
    }
  });
  te("ObjectMethod", {
    builder: ["kind", "key", "params", "body", "computed", "generator", "async"],
    fields: Object.assign({}, bi(), _s(), {
      kind: Object.assign({
        validate: (0, m.assertOneOf)("method", "get", "set")
      }, process.env.BABEL_TYPES_8_BREAKING ? {} : {
        default: "method"
      }),
      computed: {
        default: !1
      },
      key: {
        validate: function() {
          let e = (0, m.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), t = (0, m.assertNodeType)("Expres\
sion"), r = /* @__PURE__ */ s(function(n, i, a) {
            (n.computed ? t : e)(n, i, a);
          }, "validator");
          return r.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"], r;
        }()
      },
      decorators: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Decorator"))),
        optional: !0
      },
      body: {
        validate: (0, m.assertNodeType)("BlockStatement")
      }
    }),
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
  });
  te("ObjectProperty", {
    builder: ["key", "value", "computed", "shorthand", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["decorators"]],
    fields: {
      computed: {
        default: !1
      },
      key: {
        validate: function() {
          let e = (0, m.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"), t = (0, m.
          assertNodeType)("Expression");
          return Object.assign(function(n, i, a) {
            (n.computed ? t : e)(n, i, a);
          }, {
            oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"]
          });
        }()
      },
      value: {
        validate: (0, m.assertNodeType)("Expression", "PatternLike")
      },
      shorthand: {
        validate: (0, m.chain)((0, m.assertValueType)("boolean"), Object.assign(function(e, t, r) {
          if (process.env.BABEL_TYPES_8_BREAKING && r && e.computed)
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
        }, {
          type: "boolean"
        }), function(e, t, r) {
          if (process.env.BABEL_TYPES_8_BREAKING && r && !(0, er.default)("Identifier", e.key))
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
        }),
        default: !1
      },
      decorators: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Decorator"))),
        optional: !0
      }
    },
    visitor: ["key", "value", "decorators"],
    aliases: ["UserWhitespacable", "Property", "ObjectMember"],
    validate: function() {
      let e = (0, m.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssert\
ion"), t = (0, m.assertNodeType)("Expression");
      return function(r, n, i) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;
        ((0, er.default)("ObjectPattern", r) ? e : t)(i, "value", i.value);
      };
    }()
  });
  te("RestElement", {
    visitor: ["argument", "typeAnnotation"],
    builder: ["argument"],
    aliases: ["LVal", "PatternLike"],
    deprecatedAlias: "RestProperty",
    fields: Object.assign({}, Ei(), {
      argument: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, m.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpressio\
n", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, m.assertNodeType)("LVal")
      }
    }),
    validate(e, t) {
      if (!process.env.BABEL_TYPES_8_BREAKING) return;
      let r = /(\w+)\[(\d+)\]/.exec(t);
      if (!r) throw new Error("Internal Babel error: malformed key.");
      let [, n, i] = r;
      if (e[n].length > +i + 1)
        throw new TypeError(`RestElement must be last element of ${n}`);
    }
  });
  te("ReturnStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, m.assertNodeType)("Expression"),
        optional: !0
      }
    }
  });
  te("SequenceExpression", {
    visitor: ["expressions"],
    fields: {
      expressions: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Expression")))
      }
    },
    aliases: ["Expression"]
  });
  te("ParenthesizedExpression", {
    visitor: ["expression"],
    aliases: ["Expression", "ExpressionWrapper"],
    fields: {
      expression: {
        validate: (0, m.assertNodeType)("Expression")
      }
    }
  });
  te("SwitchCase", {
    visitor: ["test", "consequent"],
    fields: {
      test: {
        validate: (0, m.assertNodeType)("Expression"),
        optional: !0
      },
      consequent: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Statement")))
      }
    }
  });
  te("SwitchStatement", {
    visitor: ["discriminant", "cases"],
    aliases: ["Statement", "BlockParent", "Scopable"],
    fields: {
      discriminant: {
        validate: (0, m.assertNodeType)("Expression")
      },
      cases: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("SwitchCase")))
      }
    }
  });
  te("ThisExpression", {
    aliases: ["Expression"]
  });
  te("ThrowStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, m.assertNodeType)("Expression")
      }
    }
  });
  te("TryStatement", {
    visitor: ["block", "handler", "finalizer"],
    aliases: ["Statement"],
    fields: {
      block: {
        validate: (0, m.chain)((0, m.assertNodeType)("BlockStatement"), Object.assign(function(e) {
          if (process.env.BABEL_TYPES_8_BREAKING && !e.handler && !e.finalizer)
            throw new TypeError("TryStatement expects either a handler or finalizer, or both");
        }, {
          oneOfNodeTypes: ["BlockStatement"]
        }))
      },
      handler: {
        optional: !0,
        validate: (0, m.assertNodeType)("CatchClause")
      },
      finalizer: {
        optional: !0,
        validate: (0, m.assertNodeType)("BlockStatement")
      }
    }
  });
  te("UnaryExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: !0
      },
      argument: {
        validate: (0, m.assertNodeType)("Expression")
      },
      operator: {
        validate: (0, m.assertOneOf)(...Ba.UNARY_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["UnaryLike", "Expression"]
  });
  te("UpdateExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: !1
      },
      argument: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, m.assertNodeType)("Identifier", "MemberExpression") : (0, m.assertNodeType)("Expr\
ession")
      },
      operator: {
        validate: (0, m.assertOneOf)(...Ba.UPDATE_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["Expression"]
  });
  te("VariableDeclaration", {
    builder: ["kind", "declarations"],
    visitor: ["declarations"],
    aliases: ["Statement", "Declaration"],
    fields: {
      declare: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      },
      kind: {
        validate: (0, m.assertOneOf)("var", "let", "const", "using", "await using")
      },
      declarations: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("VariableDeclarator")))
      }
    },
    validate(e, t, r) {
      if (process.env.BABEL_TYPES_8_BREAKING && (0, er.default)("ForXStatement", e, {
        left: r
      }) && r.declarations.length !== 1)
        throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${e.type}`);
    }
  });
  te("VariableDeclarator", {
    visitor: ["id", "init"],
    fields: {
      id: {
        validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return (0, m.assertNodeType)("LVal");
          let e = (0, m.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"), t = (0, m.assertNodeType)("Identifier");
          return function(r, n, i) {
            (r.init ? e : t)(r, n, i);
          };
        }()
      },
      definite: {
        optional: !0,
        validate: (0, m.assertValueType)("boolean")
      },
      init: {
        optional: !0,
        validate: (0, m.assertNodeType)("Expression")
      }
    }
  });
  te("WhileStatement", {
    visitor: ["test", "body"],
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
    fields: {
      test: {
        validate: (0, m.assertNodeType)("Expression")
      },
      body: {
        validate: (0, m.assertNodeType)("Statement")
      }
    }
  });
  te("WithStatement", {
    visitor: ["object", "body"],
    aliases: ["Statement"],
    fields: {
      object: {
        validate: (0, m.assertNodeType)("Expression")
      },
      body: {
        validate: (0, m.assertNodeType)("Statement")
      }
    }
  });
  te("AssignmentPattern", {
    visitor: ["left", "right", "decorators"],
    builder: ["left", "right"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, Ei(), {
      left: {
        validate: (0, m.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExp\
ression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, m.assertNodeType)("Expression")
      },
      decorators: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Decorator"))),
        optional: !0
      }
    })
  });
  te("ArrayPattern", {
    visitor: ["elements", "typeAnnotation"],
    builder: ["elements"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, Ei(), {
      elements: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeOrValueType)("null", "PatternLike", "LVal")))
      }
    })
  });
  te("ArrowFunctionExpression", {
    builder: ["params", "body", "async"],
    visitor: ["params", "body", "returnType", "typeParameters"],
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: Object.assign({}, bi(), _s(), {
      expression: {
        validate: (0, m.assertValueType)("boolean")
      },
      body: {
        validate: (0, m.assertNodeType)("BlockStatement", "Expression")
      },
      predicate: {
        validate: (0, m.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: !0
      }
    })
  });
  te("ClassBody", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("ClassMethod", "ClassPrivateMethod",
        "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock")))
      }
    }
  });
  te("ClassExpression", {
    builder: ["id", "superClass", "body", "decorators"],
    visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
    aliases: ["Scopable", "Class", "Expression"],
    fields: {
      id: {
        validate: (0, m.assertNodeType)("Identifier"),
        optional: !0
      },
      typeParameters: {
        validate: (0, m.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: !0
      },
      body: {
        validate: (0, m.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: !0,
        validate: (0, m.assertNodeType)("Expression")
      },
      superTypeParameters: {
        validate: (0, m.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: !0
      },
      implements: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("TSExpressionWithTypeArguments", "Cl\
assImplements"))),
        optional: !0
      },
      decorators: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Decorator"))),
        optional: !0
      },
      mixins: {
        validate: (0, m.assertNodeType)("InterfaceExtends"),
        optional: !0
      }
    }
  });
  te("ClassDeclaration", {
    inherits: "ClassExpression",
    aliases: ["Scopable", "Class", "Statement", "Declaration"],
    fields: {
      id: {
        validate: (0, m.assertNodeType)("Identifier"),
        optional: !0
      },
      typeParameters: {
        validate: (0, m.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: !0
      },
      body: {
        validate: (0, m.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: !0,
        validate: (0, m.assertNodeType)("Expression")
      },
      superTypeParameters: {
        validate: (0, m.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: !0
      },
      implements: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("TSExpressionWithTypeArguments", "Cl\
assImplements"))),
        optional: !0
      },
      decorators: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Decorator"))),
        optional: !0
      },
      mixins: {
        validate: (0, m.assertNodeType)("InterfaceExtends"),
        optional: !0
      },
      declare: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      },
      abstract: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      }
    },
    validate: function() {
      let e = (0, m.assertNodeType)("Identifier");
      return function(t, r, n) {
        process.env.BABEL_TYPES_8_BREAKING && ((0, er.default)("ExportDefaultDeclaration", t) || e(n, "id", n.id));
      };
    }()
  });
  te("ExportAllDeclaration", {
    builder: ["source"],
    visitor: ["source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      source: {
        validate: (0, m.assertNodeType)("StringLiteral")
      },
      exportKind: (0, m.validateOptional)((0, m.assertOneOf)("type", "value")),
      attributes: {
        optional: !0,
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("ImportAttribute")))
      },
      assertions: {
        optional: !0,
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("ImportAttribute")))
      }
    }
  });
  te("ExportDefaultDeclaration", {
    visitor: ["declaration"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      declaration: {
        validate: (0, m.assertNodeType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression")
      },
      exportKind: (0, m.validateOptional)((0, m.assertOneOf)("value"))
    }
  });
  te("ExportNamedDeclaration", {
    builder: ["declaration", "specifiers", "source"],
    visitor: ["declaration", "specifiers", "source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      declaration: {
        optional: !0,
        validate: (0, m.chain)((0, m.assertNodeType)("Declaration"), Object.assign(function(e, t, r) {
          if (process.env.BABEL_TYPES_8_BREAKING && r && e.specifiers.length)
            throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
        }, {
          oneOfNodeTypes: ["Declaration"]
        }), function(e, t, r) {
          if (process.env.BABEL_TYPES_8_BREAKING && r && e.source)
            throw new TypeError("Cannot export a declaration from a source");
        })
      },
      attributes: {
        optional: !0,
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("ImportAttribute")))
      },
      assertions: {
        optional: !0,
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("ImportAttribute")))
      },
      specifiers: {
        default: [],
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)(function() {
          let e = (0, m.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"), t = (0, m.assertNodeType)(
          "ExportSpecifier");
          return process.env.BABEL_TYPES_8_BREAKING ? function(r, n, i) {
            (r.source ? e : t)(r, n, i);
          } : e;
        }()))
      },
      source: {
        validate: (0, m.assertNodeType)("StringLiteral"),
        optional: !0
      },
      exportKind: (0, m.validateOptional)((0, m.assertOneOf)("type", "value"))
    }
  });
  te("ExportSpecifier", {
    visitor: ["local", "exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, m.assertNodeType)("Identifier")
      },
      exported: {
        validate: (0, m.assertNodeType)("Identifier", "StringLiteral")
      },
      exportKind: {
        validate: (0, m.assertOneOf)("type", "value"),
        optional: !0
      }
    }
  });
  te("ForOfStatement", {
    visitor: ["left", "right", "body"],
    builder: ["left", "right", "body", "await"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return (0, m.assertNodeType)("VariableDeclaration", "LVal");
          let e = (0, m.assertNodeType)("VariableDeclaration"), t = (0, m.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "\
ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
          return function(r, n, i) {
            (0, er.default)("VariableDeclaration", i) ? e(r, n, i) : t(r, n, i);
          };
        }()
      },
      right: {
        validate: (0, m.assertNodeType)("Expression")
      },
      body: {
        validate: (0, m.assertNodeType)("Statement")
      },
      await: {
        default: !1
      }
    }
  });
  te("ImportDeclaration", {
    builder: ["specifiers", "source"],
    visitor: ["specifiers", "source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"],
    fields: {
      attributes: {
        optional: !0,
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("ImportAttribute")))
      },
      assertions: {
        optional: !0,
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("ImportAttribute")))
      },
      module: {
        optional: !0,
        validate: (0, m.assertValueType)("boolean")
      },
      phase: {
        default: null,
        validate: (0, m.assertOneOf)("source", "defer")
      },
      specifiers: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("ImportSpecifier", "ImportDefaultSpe\
cifier", "ImportNamespaceSpecifier")))
      },
      source: {
        validate: (0, m.assertNodeType)("StringLiteral")
      },
      importKind: {
        validate: (0, m.assertOneOf)("type", "typeof", "value"),
        optional: !0
      }
    }
  });
  te("ImportDefaultSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, m.assertNodeType)("Identifier")
      }
    }
  });
  te("ImportNamespaceSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, m.assertNodeType)("Identifier")
      }
    }
  });
  te("ImportSpecifier", {
    visitor: ["local", "imported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, m.assertNodeType)("Identifier")
      },
      imported: {
        validate: (0, m.assertNodeType)("Identifier", "StringLiteral")
      },
      importKind: {
        validate: (0, m.assertOneOf)("type", "typeof", "value"),
        optional: !0
      }
    }
  });
  te("ImportExpression", {
    visitor: ["source", "options"],
    aliases: ["Expression"],
    fields: {
      phase: {
        default: null,
        validate: (0, m.assertOneOf)("source", "defer")
      },
      source: {
        validate: (0, m.assertNodeType)("Expression")
      },
      options: {
        validate: (0, m.assertNodeType)("Expression"),
        optional: !0
      }
    }
  });
  te("MetaProperty", {
    visitor: ["meta", "property"],
    aliases: ["Expression"],
    fields: {
      meta: {
        validate: (0, m.chain)((0, m.assertNodeType)("Identifier"), Object.assign(function(e, t, r) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          let n;
          switch (r.name) {
            case "function":
              n = "sent";
              break;
            case "new":
              n = "target";
              break;
            case "import":
              n = "meta";
              break;
          }
          if (!(0, er.default)("Identifier", e.property, {
            name: n
          }))
            throw new TypeError("Unrecognised MetaProperty");
        }, {
          oneOfNodeTypes: ["Identifier"]
        }))
      },
      property: {
        validate: (0, m.assertNodeType)("Identifier")
      }
    }
  });
  var El = /* @__PURE__ */ s(() => ({
    abstract: {
      validate: (0, m.assertValueType)("boolean"),
      optional: !0
    },
    accessibility: {
      validate: (0, m.assertOneOf)("public", "private", "protected"),
      optional: !0
    },
    static: {
      default: !1
    },
    override: {
      default: !1
    },
    computed: {
      default: !1
    },
    optional: {
      validate: (0, m.assertValueType)("boolean"),
      optional: !0
    },
    key: {
      validate: (0, m.chain)(function() {
        let e = (0, m.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), t = (0, m.assertNodeType)("Expressi\
on");
        return function(r, n, i) {
          (r.computed ? t : e)(r, n, i);
        };
      }(), (0, m.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression"))
    }
  }), "classMethodOrPropertyCommon");
  pr.classMethodOrPropertyCommon = El;
  var bp = /* @__PURE__ */ s(() => Object.assign({}, bi(), El(), {
    params: {
      validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Identifier", "Pattern", "RestElement",
      "TSParameterProperty")))
    },
    kind: {
      validate: (0, m.assertOneOf)("get", "set", "method", "constructor"),
      default: "method"
    },
    access: {
      validate: (0, m.chain)((0, m.assertValueType)("string"), (0, m.assertOneOf)("public", "private", "protected")),
      optional: !0
    },
    decorators: {
      validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Decorator"))),
      optional: !0
    }
  }), "classMethodOrDeclareMethodCommon");
  pr.classMethodOrDeclareMethodCommon = bp;
  te("ClassMethod", {
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
    builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"],
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    fields: Object.assign({}, bp(), _s(), {
      body: {
        validate: (0, m.assertNodeType)("BlockStatement")
      }
    })
  });
  te("ObjectPattern", {
    visitor: ["properties", "typeAnnotation", "decorators"],
    builder: ["properties"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, Ei(), {
      properties: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("RestElement", "ObjectProperty")))
      }
    })
  });
  te("SpreadElement", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    deprecatedAlias: "SpreadProperty",
    fields: {
      argument: {
        validate: (0, m.assertNodeType)("Expression")
      }
    }
  });
  te("Super", {
    aliases: ["Expression"]
  });
  te("TaggedTemplateExpression", {
    visitor: ["tag", "quasi", "typeParameters"],
    builder: ["tag", "quasi"],
    aliases: ["Expression"],
    fields: {
      tag: {
        validate: (0, m.assertNodeType)("Expression")
      },
      quasi: {
        validate: (0, m.assertNodeType)("TemplateLiteral")
      },
      typeParameters: {
        validate: (0, m.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: !0
      }
    }
  });
  te("TemplateElement", {
    builder: ["value", "tail"],
    fields: {
      value: {
        validate: (0, m.chain)((0, m.assertShape)({
          raw: {
            validate: (0, m.assertValueType)("string")
          },
          cooked: {
            validate: (0, m.assertValueType)("string"),
            optional: !0
          }
        }), /* @__PURE__ */ s(function(t) {
          let r = t.value.raw, n = !1, i = /* @__PURE__ */ s(() => {
            throw new Error("Internal @babel/types error.");
          }, "error"), {
            str: a,
            firstInvalidLoc: o
          } = (0, H8.readStringContents)("template", r, 0, 0, 0, {
            unterminated() {
              n = !0;
            },
            strictNumericEscape: i,
            invalidEscapeSequence: i,
            numericSeparatorInEscapeSequence: i,
            unexpectedNumericSeparator: i,
            invalidDigit: i,
            invalidCodePoint: i
          });
          if (!n) throw new Error("Invalid raw");
          t.value.cooked = o ? null : a;
        }, "templateElementCookedValidator"))
      },
      tail: {
        default: !1
      }
    }
  });
  te("TemplateLiteral", {
    visitor: ["quasis", "expressions"],
    aliases: ["Expression", "Literal"],
    fields: {
      quasis: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("TemplateElement")))
      },
      expressions: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Expression", "TSType")), function(e, t, r) {
          if (e.quasis.length !== r.length + 1)
            throw new TypeError(`Number of ${e.type} quasis should be exactly one more than the number of expressions.
Expected ${r.length + 1} quasis but got ${e.quasis.length}`);
        })
      }
    }
  });
  te("YieldExpression", {
    builder: ["argument", "delegate"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      delegate: {
        validate: (0, m.chain)((0, m.assertValueType)("boolean"), Object.assign(function(e, t, r) {
          if (process.env.BABEL_TYPES_8_BREAKING && r && !e.argument)
            throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
        }, {
          type: "boolean"
        })),
        default: !1
      },
      argument: {
        optional: !0,
        validate: (0, m.assertNodeType)("Expression")
      }
    }
  });
  te("AwaitExpression", {
    builder: ["argument"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      argument: {
        validate: (0, m.assertNodeType)("Expression")
      }
    }
  });
  te("Import", {
    aliases: ["Expression"]
  });
  te("BigIntLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, m.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  te("ExportNamespaceSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, m.assertNodeType)("Identifier")
      }
    }
  });
  te("OptionalMemberExpression", {
    builder: ["object", "property", "computed", "optional"],
    visitor: ["object", "property"],
    aliases: ["Expression"],
    fields: {
      object: {
        validate: (0, m.assertNodeType)("Expression")
      },
      property: {
        validate: function() {
          let e = (0, m.assertNodeType)("Identifier"), t = (0, m.assertNodeType)("Expression");
          return Object.assign(function(n, i, a) {
            (n.computed ? t : e)(n, i, a);
          }, {
            oneOfNodeTypes: ["Expression", "Identifier"]
          });
        }()
      },
      computed: {
        default: !1
      },
      optional: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, m.chain)((0, m.assertValueType)("boolean"), (0, m.assertOptionalChainStart)()) : (0, m.
        assertValueType)("boolean")
      }
    }
  });
  te("OptionalCallExpression", {
    visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
    builder: ["callee", "arguments", "optional"],
    aliases: ["Expression"],
    fields: {
      callee: {
        validate: (0, m.assertNodeType)("Expression")
      },
      arguments: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Expression", "SpreadElement", "Argu\
mentPlaceholder")))
      },
      optional: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, m.chain)((0, m.assertValueType)("boolean"), (0, m.assertOptionalChainStart)()) : (0, m.
        assertValueType)("boolean")
      },
      typeArguments: {
        validate: (0, m.assertNodeType)("TypeParameterInstantiation"),
        optional: !0
      },
      typeParameters: {
        validate: (0, m.assertNodeType)("TSTypeParameterInstantiation"),
        optional: !0
      }
    }
  });
  te("ClassProperty", {
    visitor: ["key", "value", "typeAnnotation", "decorators"],
    builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
    aliases: ["Property"],
    fields: Object.assign({}, El(), {
      value: {
        validate: (0, m.assertNodeType)("Expression"),
        optional: !0
      },
      definite: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      },
      typeAnnotation: {
        validate: (0, m.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: !0
      },
      decorators: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Decorator"))),
        optional: !0
      },
      readonly: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      },
      declare: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      },
      variance: {
        validate: (0, m.assertNodeType)("Variance"),
        optional: !0
      }
    })
  });
  te("ClassAccessorProperty", {
    visitor: ["key", "value", "typeAnnotation", "decorators"],
    builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
    aliases: ["Property", "Accessor"],
    fields: Object.assign({}, El(), {
      key: {
        validate: (0, m.chain)(function() {
          let e = (0, m.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName"), t = (0, m.assertNodeType)(
          "Expression");
          return function(r, n, i) {
            (r.computed ? t : e)(r, n, i);
          };
        }(), (0, m.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName"))
      },
      value: {
        validate: (0, m.assertNodeType)("Expression"),
        optional: !0
      },
      definite: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      },
      typeAnnotation: {
        validate: (0, m.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: !0
      },
      decorators: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Decorator"))),
        optional: !0
      },
      readonly: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      },
      declare: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      },
      variance: {
        validate: (0, m.assertNodeType)("Variance"),
        optional: !0
      }
    })
  });
  te("ClassPrivateProperty", {
    visitor: ["key", "value", "decorators", "typeAnnotation"],
    builder: ["key", "value", "decorators", "static"],
    aliases: ["Property", "Private"],
    fields: {
      key: {
        validate: (0, m.assertNodeType)("PrivateName")
      },
      value: {
        validate: (0, m.assertNodeType)("Expression"),
        optional: !0
      },
      typeAnnotation: {
        validate: (0, m.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: !0
      },
      decorators: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Decorator"))),
        optional: !0
      },
      static: {
        validate: (0, m.assertValueType)("boolean"),
        default: !1
      },
      readonly: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      },
      definite: {
        validate: (0, m.assertValueType)("boolean"),
        optional: !0
      },
      variance: {
        validate: (0, m.assertNodeType)("Variance"),
        optional: !0
      }
    }
  });
  te("ClassPrivateMethod", {
    builder: ["kind", "key", "params", "body", "static"],
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"],
    fields: Object.assign({}, bp(), _s(), {
      kind: {
        validate: (0, m.assertOneOf)("get", "set", "method"),
        default: "method"
      },
      key: {
        validate: (0, m.assertNodeType)("PrivateName")
      },
      body: {
        validate: (0, m.assertNodeType)("BlockStatement")
      }
    })
  });
  te("PrivateName", {
    visitor: ["id"],
    aliases: ["Private"],
    fields: {
      id: {
        validate: (0, m.assertNodeType)("Identifier")
      }
    }
  });
  te("StaticBlock", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, m.chain)((0, m.assertValueType)("array"), (0, m.assertEach)((0, m.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "FunctionParent"]
  });
});

// ../node_modules/@babel/types/lib/definitions/flow.js
var gE = T(() => {
  "use strict";
  var L = xn(), me = (0, L.defineAliasedType)("Flow"), vp = /* @__PURE__ */ s((e) => {
    let t = e === "DeclareClass";
    me(e, {
      builder: ["id", "typeParameters", "extends", "body"],
      visitor: ["id", "typeParameters", "extends", ...t ? ["mixins", "implements"] : [], "body"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: Object.assign({
        id: (0, L.validateType)("Identifier"),
        typeParameters: (0, L.validateOptionalType)("TypeParameterDeclaration"),
        extends: (0, L.validateOptional)((0, L.arrayOfType)("InterfaceExtends"))
      }, t ? {
        mixins: (0, L.validateOptional)((0, L.arrayOfType)("InterfaceExtends")),
        implements: (0, L.validateOptional)((0, L.arrayOfType)("ClassImplements"))
      } : {}, {
        body: (0, L.validateType)("ObjectTypeAnnotation")
      })
    });
  }, "defineInterfaceishType");
  me("AnyTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  me("ArrayTypeAnnotation", {
    visitor: ["elementType"],
    aliases: ["FlowType"],
    fields: {
      elementType: (0, L.validateType)("FlowType")
    }
  });
  me("BooleanTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  me("BooleanLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, L.validate)((0, L.assertValueType)("boolean"))
    }
  });
  me("NullLiteralTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  me("ClassImplements", {
    visitor: ["id", "typeParameters"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      typeParameters: (0, L.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  vp("DeclareClass");
  me("DeclareFunction", {
    visitor: ["id"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      predicate: (0, L.validateOptionalType)("DeclaredPredicate")
    }
  });
  vp("DeclareInterface");
  me("DeclareModule", {
    builder: ["id", "body", "kind"],
    visitor: ["id", "body"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, L.validateType)(["Identifier", "StringLiteral"]),
      body: (0, L.validateType)("BlockStatement"),
      kind: (0, L.validateOptional)((0, L.assertOneOf)("CommonJS", "ES"))
    }
  });
  me("DeclareModuleExports", {
    visitor: ["typeAnnotation"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      typeAnnotation: (0, L.validateType)("TypeAnnotation")
    }
  });
  me("DeclareTypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      typeParameters: (0, L.validateOptionalType)("TypeParameterDeclaration"),
      right: (0, L.validateType)("FlowType")
    }
  });
  me("DeclareOpaqueType", {
    visitor: ["id", "typeParameters", "supertype"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      typeParameters: (0, L.validateOptionalType)("TypeParameterDeclaration"),
      supertype: (0, L.validateOptionalType)("FlowType"),
      impltype: (0, L.validateOptionalType)("FlowType")
    }
  });
  me("DeclareVariable", {
    visitor: ["id"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, L.validateType)("Identifier")
    }
  });
  me("DeclareExportDeclaration", {
    visitor: ["declaration", "specifiers", "source"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      declaration: (0, L.validateOptionalType)("Flow"),
      specifiers: (0, L.validateOptional)((0, L.arrayOfType)(["ExportSpecifier", "ExportNamespaceSpecifier"])),
      source: (0, L.validateOptionalType)("StringLiteral"),
      default: (0, L.validateOptional)((0, L.assertValueType)("boolean"))
    }
  });
  me("DeclareExportAllDeclaration", {
    visitor: ["source"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      source: (0, L.validateType)("StringLiteral"),
      exportKind: (0, L.validateOptional)((0, L.assertOneOf)("type", "value"))
    }
  });
  me("DeclaredPredicate", {
    visitor: ["value"],
    aliases: ["FlowPredicate"],
    fields: {
      value: (0, L.validateType)("Flow")
    }
  });
  me("ExistsTypeAnnotation", {
    aliases: ["FlowType"]
  });
  me("FunctionTypeAnnotation", {
    visitor: ["typeParameters", "params", "rest", "returnType"],
    aliases: ["FlowType"],
    fields: {
      typeParameters: (0, L.validateOptionalType)("TypeParameterDeclaration"),
      params: (0, L.validate)((0, L.arrayOfType)("FunctionTypeParam")),
      rest: (0, L.validateOptionalType)("FunctionTypeParam"),
      this: (0, L.validateOptionalType)("FunctionTypeParam"),
      returnType: (0, L.validateType)("FlowType")
    }
  });
  me("FunctionTypeParam", {
    visitor: ["name", "typeAnnotation"],
    fields: {
      name: (0, L.validateOptionalType)("Identifier"),
      typeAnnotation: (0, L.validateType)("FlowType"),
      optional: (0, L.validateOptional)((0, L.assertValueType)("boolean"))
    }
  });
  me("GenericTypeAnnotation", {
    visitor: ["id", "typeParameters"],
    aliases: ["FlowType"],
    fields: {
      id: (0, L.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
      typeParameters: (0, L.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  me("InferredPredicate", {
    aliases: ["FlowPredicate"]
  });
  me("InterfaceExtends", {
    visitor: ["id", "typeParameters"],
    fields: {
      id: (0, L.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
      typeParameters: (0, L.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  vp("InterfaceDeclaration");
  me("InterfaceTypeAnnotation", {
    visitor: ["extends", "body"],
    aliases: ["FlowType"],
    fields: {
      extends: (0, L.validateOptional)((0, L.arrayOfType)("InterfaceExtends")),
      body: (0, L.validateType)("ObjectTypeAnnotation")
    }
  });
  me("IntersectionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, L.validate)((0, L.arrayOfType)("FlowType"))
    }
  });
  me("MixedTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  me("EmptyTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  me("NullableTypeAnnotation", {
    visitor: ["typeAnnotation"],
    aliases: ["FlowType"],
    fields: {
      typeAnnotation: (0, L.validateType)("FlowType")
    }
  });
  me("NumberLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, L.validate)((0, L.assertValueType)("number"))
    }
  });
  me("NumberTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  me("ObjectTypeAnnotation", {
    visitor: ["properties", "indexers", "callProperties", "internalSlots"],
    aliases: ["FlowType"],
    builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],
    fields: {
      properties: (0, L.validate)((0, L.arrayOfType)(["ObjectTypeProperty", "ObjectTypeSpreadProperty"])),
      indexers: {
        validate: (0, L.arrayOfType)("ObjectTypeIndexer"),
        optional: !0,
        default: []
      },
      callProperties: {
        validate: (0, L.arrayOfType)("ObjectTypeCallProperty"),
        optional: !0,
        default: []
      },
      internalSlots: {
        validate: (0, L.arrayOfType)("ObjectTypeInternalSlot"),
        optional: !0,
        default: []
      },
      exact: {
        validate: (0, L.assertValueType)("boolean"),
        default: !1
      },
      inexact: (0, L.validateOptional)((0, L.assertValueType)("boolean"))
    }
  });
  me("ObjectTypeInternalSlot", {
    visitor: ["id", "value"],
    builder: ["id", "value", "optional", "static", "method"],
    aliases: ["UserWhitespacable"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      value: (0, L.validateType)("FlowType"),
      optional: (0, L.validate)((0, L.assertValueType)("boolean")),
      static: (0, L.validate)((0, L.assertValueType)("boolean")),
      method: (0, L.validate)((0, L.assertValueType)("boolean"))
    }
  });
  me("ObjectTypeCallProperty", {
    visitor: ["value"],
    aliases: ["UserWhitespacable"],
    fields: {
      value: (0, L.validateType)("FlowType"),
      static: (0, L.validate)((0, L.assertValueType)("boolean"))
    }
  });
  me("ObjectTypeIndexer", {
    visitor: ["id", "key", "value", "variance"],
    aliases: ["UserWhitespacable"],
    fields: {
      id: (0, L.validateOptionalType)("Identifier"),
      key: (0, L.validateType)("FlowType"),
      value: (0, L.validateType)("FlowType"),
      static: (0, L.validate)((0, L.assertValueType)("boolean")),
      variance: (0, L.validateOptionalType)("Variance")
    }
  });
  me("ObjectTypeProperty", {
    visitor: ["key", "value", "variance"],
    aliases: ["UserWhitespacable"],
    fields: {
      key: (0, L.validateType)(["Identifier", "StringLiteral"]),
      value: (0, L.validateType)("FlowType"),
      kind: (0, L.validate)((0, L.assertOneOf)("init", "get", "set")),
      static: (0, L.validate)((0, L.assertValueType)("boolean")),
      proto: (0, L.validate)((0, L.assertValueType)("boolean")),
      optional: (0, L.validate)((0, L.assertValueType)("boolean")),
      variance: (0, L.validateOptionalType)("Variance"),
      method: (0, L.validate)((0, L.assertValueType)("boolean"))
    }
  });
  me("ObjectTypeSpreadProperty", {
    visitor: ["argument"],
    aliases: ["UserWhitespacable"],
    fields: {
      argument: (0, L.validateType)("FlowType")
    }
  });
  me("OpaqueType", {
    visitor: ["id", "typeParameters", "supertype", "impltype"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      typeParameters: (0, L.validateOptionalType)("TypeParameterDeclaration"),
      supertype: (0, L.validateOptionalType)("FlowType"),
      impltype: (0, L.validateType)("FlowType")
    }
  });
  me("QualifiedTypeIdentifier", {
    visitor: ["id", "qualification"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      qualification: (0, L.validateType)(["Identifier", "QualifiedTypeIdentifier"])
    }
  });
  me("StringLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, L.validate)((0, L.assertValueType)("string"))
    }
  });
  me("StringTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  me("SymbolTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  me("ThisTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  me("TupleTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, L.validate)((0, L.arrayOfType)("FlowType"))
    }
  });
  me("TypeofTypeAnnotation", {
    visitor: ["argument"],
    aliases: ["FlowType"],
    fields: {
      argument: (0, L.validateType)("FlowType")
    }
  });
  me("TypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      typeParameters: (0, L.validateOptionalType)("TypeParameterDeclaration"),
      right: (0, L.validateType)("FlowType")
    }
  });
  me("TypeAnnotation", {
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, L.validateType)("FlowType")
    }
  });
  me("TypeCastExpression", {
    visitor: ["expression", "typeAnnotation"],
    aliases: ["ExpressionWrapper", "Expression"],
    fields: {
      expression: (0, L.validateType)("Expression"),
      typeAnnotation: (0, L.validateType)("TypeAnnotation")
    }
  });
  me("TypeParameter", {
    visitor: ["bound", "default", "variance"],
    fields: {
      name: (0, L.validate)((0, L.assertValueType)("string")),
      bound: (0, L.validateOptionalType)("TypeAnnotation"),
      default: (0, L.validateOptionalType)("FlowType"),
      variance: (0, L.validateOptionalType)("Variance")
    }
  });
  me("TypeParameterDeclaration", {
    visitor: ["params"],
    fields: {
      params: (0, L.validate)((0, L.arrayOfType)("TypeParameter"))
    }
  });
  me("TypeParameterInstantiation", {
    visitor: ["params"],
    fields: {
      params: (0, L.validate)((0, L.arrayOfType)("FlowType"))
    }
  });
  me("UnionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, L.validate)((0, L.arrayOfType)("FlowType"))
    }
  });
  me("Variance", {
    builder: ["kind"],
    fields: {
      kind: (0, L.validate)((0, L.assertOneOf)("minus", "plus"))
    }
  });
  me("VoidTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  me("EnumDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "body"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      body: (0, L.validateType)(["EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody"])
    }
  });
  me("EnumBooleanBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, L.validate)((0, L.assertValueType)("boolean")),
      members: (0, L.validateArrayOfType)("EnumBooleanMember"),
      hasUnknownMembers: (0, L.validate)((0, L.assertValueType)("boolean"))
    }
  });
  me("EnumNumberBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, L.validate)((0, L.assertValueType)("boolean")),
      members: (0, L.validateArrayOfType)("EnumNumberMember"),
      hasUnknownMembers: (0, L.validate)((0, L.assertValueType)("boolean"))
    }
  });
  me("EnumStringBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, L.validate)((0, L.assertValueType)("boolean")),
      members: (0, L.validateArrayOfType)(["EnumStringMember", "EnumDefaultedMember"]),
      hasUnknownMembers: (0, L.validate)((0, L.assertValueType)("boolean"))
    }
  });
  me("EnumSymbolBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      members: (0, L.validateArrayOfType)("EnumDefaultedMember"),
      hasUnknownMembers: (0, L.validate)((0, L.assertValueType)("boolean"))
    }
  });
  me("EnumBooleanMember", {
    aliases: ["EnumMember"],
    visitor: ["id"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      init: (0, L.validateType)("BooleanLiteral")
    }
  });
  me("EnumNumberMember", {
    aliases: ["EnumMember"],
    visitor: ["id", "init"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      init: (0, L.validateType)("NumericLiteral")
    }
  });
  me("EnumStringMember", {
    aliases: ["EnumMember"],
    visitor: ["id", "init"],
    fields: {
      id: (0, L.validateType)("Identifier"),
      init: (0, L.validateType)("StringLiteral")
    }
  });
  me("EnumDefaultedMember", {
    aliases: ["EnumMember"],
    visitor: ["id"],
    fields: {
      id: (0, L.validateType)("Identifier")
    }
  });
  me("IndexedAccessType", {
    visitor: ["objectType", "indexType"],
    aliases: ["FlowType"],
    fields: {
      objectType: (0, L.validateType)("FlowType"),
      indexType: (0, L.validateType)("FlowType")
    }
  });
  me("OptionalIndexedAccessType", {
    visitor: ["objectType", "indexType"],
    aliases: ["FlowType"],
    fields: {
      objectType: (0, L.validateType)("FlowType"),
      indexType: (0, L.validateType)("FlowType"),
      optional: (0, L.validate)((0, L.assertValueType)("boolean"))
    }
  });
});

// ../node_modules/@babel/types/lib/definitions/jsx.js
var bE = T(() => {
  "use strict";
  var Ze = xn(), tr = (0, Ze.defineAliasedType)("JSX");
  tr("JSXAttribute", {
    visitor: ["name", "value"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, Ze.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
      },
      value: {
        optional: !0,
        validate: (0, Ze.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
      }
    }
  });
  tr("JSXClosingElement", {
    visitor: ["name"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, Ze.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
      }
    }
  });
  tr("JSXElement", {
    builder: ["openingElement", "closingElement", "children", "selfClosing"],
    visitor: ["openingElement", "children", "closingElement"],
    aliases: ["Immutable", "Expression"],
    fields: Object.assign({
      openingElement: {
        validate: (0, Ze.assertNodeType)("JSXOpeningElement")
      },
      closingElement: {
        optional: !0,
        validate: (0, Ze.assertNodeType)("JSXClosingElement")
      },
      children: {
        validate: (0, Ze.chain)((0, Ze.assertValueType)("array"), (0, Ze.assertEach)((0, Ze.assertNodeType)("JSXText", "JSXExpressionContain\
er", "JSXSpreadChild", "JSXElement", "JSXFragment")))
      }
    }, {
      selfClosing: {
        validate: (0, Ze.assertValueType)("boolean"),
        optional: !0
      }
    })
  });
  tr("JSXEmptyExpression", {});
  tr("JSXExpressionContainer", {
    visitor: ["expression"],
    aliases: ["Immutable"],
    fields: {
      expression: {
        validate: (0, Ze.assertNodeType)("Expression", "JSXEmptyExpression")
      }
    }
  });
  tr("JSXSpreadChild", {
    visitor: ["expression"],
    aliases: ["Immutable"],
    fields: {
      expression: {
        validate: (0, Ze.assertNodeType)("Expression")
      }
    }
  });
  tr("JSXIdentifier", {
    builder: ["name"],
    fields: {
      name: {
        validate: (0, Ze.assertValueType)("string")
      }
    }
  });
  tr("JSXMemberExpression", {
    visitor: ["object", "property"],
    fields: {
      object: {
        validate: (0, Ze.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
      },
      property: {
        validate: (0, Ze.assertNodeType)("JSXIdentifier")
      }
    }
  });
  tr("JSXNamespacedName", {
    visitor: ["namespace", "name"],
    fields: {
      namespace: {
        validate: (0, Ze.assertNodeType)("JSXIdentifier")
      },
      name: {
        validate: (0, Ze.assertNodeType)("JSXIdentifier")
      }
    }
  });
  tr("JSXOpeningElement", {
    builder: ["name", "attributes", "selfClosing"],
    visitor: ["name", "attributes"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, Ze.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
      },
      selfClosing: {
        default: !1
      },
      attributes: {
        validate: (0, Ze.chain)((0, Ze.assertValueType)("array"), (0, Ze.assertEach)((0, Ze.assertNodeType)("JSXAttribute", "JSXSpreadAttrib\
ute")))
      },
      typeParameters: {
        validate: (0, Ze.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: !0
      }
    }
  });
  tr("JSXSpreadAttribute", {
    visitor: ["argument"],
    fields: {
      argument: {
        validate: (0, Ze.assertNodeType)("Expression")
      }
    }
  });
  tr("JSXText", {
    aliases: ["Immutable"],
    builder: ["value"],
    fields: {
      value: {
        validate: (0, Ze.assertValueType)("string")
      }
    }
  });
  tr("JSXFragment", {
    builder: ["openingFragment", "closingFragment", "children"],
    visitor: ["openingFragment", "children", "closingFragment"],
    aliases: ["Immutable", "Expression"],
    fields: {
      openingFragment: {
        validate: (0, Ze.assertNodeType)("JSXOpeningFragment")
      },
      closingFragment: {
        validate: (0, Ze.assertNodeType)("JSXClosingFragment")
      },
      children: {
        validate: (0, Ze.chain)((0, Ze.assertValueType)("array"), (0, Ze.assertEach)((0, Ze.assertNodeType)("JSXText", "JSXExpressionContain\
er", "JSXSpreadChild", "JSXElement", "JSXFragment")))
      }
    }
  });
  tr("JSXOpeningFragment", {
    aliases: ["Immutable"]
  });
  tr("JSXClosingFragment", {
    aliases: ["Immutable"]
  });
});

// ../node_modules/@babel/types/lib/definitions/placeholders.js
var Sp = T((Xn) => {
  "use strict";
  Object.defineProperty(Xn, "__esModule", {
    value: !0
  });
  Xn.PLACEHOLDERS_FLIPPED_ALIAS = Xn.PLACEHOLDERS_ALIAS = Xn.PLACEHOLDERS = void 0;
  var Y8 = xn(), z8 = Xn.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBo\
dy", "Pattern"], xp = Xn.PLACEHOLDERS_ALIAS = {
    Declaration: ["Statement"],
    Pattern: ["PatternLike", "LVal"]
  };
  for (let e of z8) {
    let t = Y8.ALIAS_KEYS[e];
    t != null && t.length && (xp[e] = t);
  }
  var Tp = Xn.PLACEHOLDERS_FLIPPED_ALIAS = {};
  Object.keys(xp).forEach((e) => {
    xp[e].forEach((t) => {
      hasOwnProperty.call(Tp, t) || (Tp[t] = []), Tp[t].push(e);
    });
  });
});

// ../node_modules/@babel/types/lib/definitions/misc.js
var EE = T(() => {
  "use strict";
  var vl = xn(), J8 = Sp(), Pp = (0, vl.defineAliasedType)("Miscellaneous");
  Pp("Noop", {
    visitor: []
  });
  Pp("Placeholder", {
    visitor: [],
    builder: ["expectedNode", "name"],
    fields: {
      name: {
        validate: (0, vl.assertNodeType)("Identifier")
      },
      expectedNode: {
        validate: (0, vl.assertOneOf)(...J8.PLACEHOLDERS)
      }
    }
  });
  Pp("V8IntrinsicIdentifier", {
    builder: ["name"],
    fields: {
      name: {
        validate: (0, vl.assertValueType)("string")
      }
    }
  });
});

// ../node_modules/@babel/types/lib/definitions/experimental.js
var vE = T(() => {
  "use strict";
  var Xe = xn();
  (0, Xe.default)("ArgumentPlaceholder", {});
  (0, Xe.default)("BindExpression", {
    visitor: ["object", "callee"],
    aliases: ["Expression"],
    fields: process.env.BABEL_TYPES_8_BREAKING ? {
      object: {
        validate: (0, Xe.assertNodeType)("Expression")
      },
      callee: {
        validate: (0, Xe.assertNodeType)("Expression")
      }
    } : {
      object: {
        validate: Object.assign(() => {
        }, {
          oneOfNodeTypes: ["Expression"]
        })
      },
      callee: {
        validate: Object.assign(() => {
        }, {
          oneOfNodeTypes: ["Expression"]
        })
      }
    }
  });
  (0, Xe.default)("ImportAttribute", {
    visitor: ["key", "value"],
    fields: {
      key: {
        validate: (0, Xe.assertNodeType)("Identifier", "StringLiteral")
      },
      value: {
        validate: (0, Xe.assertNodeType)("StringLiteral")
      }
    }
  });
  (0, Xe.default)("Decorator", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, Xe.assertNodeType)("Expression")
      }
    }
  });
  (0, Xe.default)("DoExpression", {
    visitor: ["body"],
    builder: ["body", "async"],
    aliases: ["Expression"],
    fields: {
      body: {
        validate: (0, Xe.assertNodeType)("BlockStatement")
      },
      async: {
        validate: (0, Xe.assertValueType)("boolean"),
        default: !1
      }
    }
  });
  (0, Xe.default)("ExportDefaultSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, Xe.assertNodeType)("Identifier")
      }
    }
  });
  (0, Xe.default)("RecordExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: {
        validate: (0, Xe.chain)((0, Xe.assertValueType)("array"), (0, Xe.assertEach)((0, Xe.assertNodeType)("ObjectProperty", "SpreadElement")))
      }
    }
  });
  (0, Xe.default)("TupleExpression", {
    fields: {
      elements: {
        validate: (0, Xe.chain)((0, Xe.assertValueType)("array"), (0, Xe.assertEach)((0, Xe.assertNodeType)("Expression", "SpreadElement"))),
        default: []
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  (0, Xe.default)("DecimalLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, Xe.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  (0, Xe.default)("ModuleExpression", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, Xe.assertNodeType)("Program")
      }
    },
    aliases: ["Expression"]
  });
  (0, Xe.default)("TopicReference", {
    aliases: ["Expression"]
  });
  (0, Xe.default)("PipelineTopicExpression", {
    builder: ["expression"],
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, Xe.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression"]
  });
  (0, Xe.default)("PipelineBareFunction", {
    builder: ["callee"],
    visitor: ["callee"],
    fields: {
      callee: {
        validate: (0, Xe.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression"]
  });
  (0, Xe.default)("PipelinePrimaryTopicReference", {
    aliases: ["Expression"]
  });
});

// ../node_modules/@babel/types/lib/definitions/typescript.js
var DE = T(() => {
  "use strict";
  var $ = xn(), TE = Ep(), X8 = mi(), Ce = (0, $.defineAliasedType)("TypeScript"), dr = (0, $.assertValueType)("boolean"), xE = /* @__PURE__ */ s(
  () => ({
    returnType: {
      validate: (0, $.assertNodeType)("TSTypeAnnotation", "Noop"),
      optional: !0
    },
    typeParameters: {
      validate: (0, $.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
      optional: !0
    }
  }), "tSFunctionTypeAnnotationCommon");
  Ce("TSParameterProperty", {
    aliases: ["LVal"],
    visitor: ["parameter"],
    fields: {
      accessibility: {
        validate: (0, $.assertOneOf)("public", "private", "protected"),
        optional: !0
      },
      readonly: {
        validate: (0, $.assertValueType)("boolean"),
        optional: !0
      },
      parameter: {
        validate: (0, $.assertNodeType)("Identifier", "AssignmentPattern")
      },
      override: {
        validate: (0, $.assertValueType)("boolean"),
        optional: !0
      },
      decorators: {
        validate: (0, $.chain)((0, $.assertValueType)("array"), (0, $.assertEach)((0, $.assertNodeType)("Decorator"))),
        optional: !0
      }
    }
  });
  Ce("TSDeclareFunction", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "params", "returnType"],
    fields: Object.assign({}, (0, TE.functionDeclarationCommon)(), xE())
  });
  Ce("TSDeclareMethod", {
    visitor: ["decorators", "key", "typeParameters", "params", "returnType"],
    fields: Object.assign({}, (0, TE.classMethodOrDeclareMethodCommon)(), xE())
  });
  Ce("TSQualifiedName", {
    aliases: ["TSEntityName"],
    visitor: ["left", "right"],
    fields: {
      left: (0, $.validateType)("TSEntityName"),
      right: (0, $.validateType)("Identifier")
    }
  });
  var Tl = /* @__PURE__ */ s(() => ({
    typeParameters: (0, $.validateOptionalType)("TSTypeParameterDeclaration"),
    parameters: (0, $.validateArrayOfType)(["ArrayPattern", "Identifier", "ObjectPattern", "RestElement"]),
    typeAnnotation: (0, $.validateOptionalType)("TSTypeAnnotation")
  }), "signatureDeclarationCommon"), SE = {
    aliases: ["TSTypeElement"],
    visitor: ["typeParameters", "parameters", "typeAnnotation"],
    fields: Tl()
  };
  Ce("TSCallSignatureDeclaration", SE);
  Ce("TSConstructSignatureDeclaration", SE);
  var PE = /* @__PURE__ */ s(() => ({
    key: (0, $.validateType)("Expression"),
    computed: {
      default: !1
    },
    optional: (0, $.validateOptional)(dr)
  }), "namedTypeElementCommon");
  Ce("TSPropertySignature", {
    aliases: ["TSTypeElement"],
    visitor: ["key", "typeAnnotation"],
    fields: Object.assign({}, PE(), {
      readonly: (0, $.validateOptional)(dr),
      typeAnnotation: (0, $.validateOptionalType)("TSTypeAnnotation"),
      kind: {
        validate: (0, $.assertOneOf)("get", "set")
      }
    })
  });
  Ce("TSMethodSignature", {
    aliases: ["TSTypeElement"],
    visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
    fields: Object.assign({}, Tl(), PE(), {
      kind: {
        validate: (0, $.assertOneOf)("method", "get", "set")
      }
    })
  });
  Ce("TSIndexSignature", {
    aliases: ["TSTypeElement"],
    visitor: ["parameters", "typeAnnotation"],
    fields: {
      readonly: (0, $.validateOptional)(dr),
      static: (0, $.validateOptional)(dr),
      parameters: (0, $.validateArrayOfType)("Identifier"),
      typeAnnotation: (0, $.validateOptionalType)("TSTypeAnnotation")
    }
  });
  var Q8 = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword",
  "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
  for (let e of Q8)
    Ce(e, {
      aliases: ["TSType", "TSBaseType"],
      visitor: [],
      fields: {}
    });
  Ce("TSThisType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: [],
    fields: {}
  });
  var AE = {
    aliases: ["TSType"],
    visitor: ["typeParameters", "parameters", "typeAnnotation"]
  };
  Ce("TSFunctionType", Object.assign({}, AE, {
    fields: Tl()
  }));
  Ce("TSConstructorType", Object.assign({}, AE, {
    fields: Object.assign({}, Tl(), {
      abstract: (0, $.validateOptional)(dr)
    })
  }));
  Ce("TSTypeReference", {
    aliases: ["TSType"],
    visitor: ["typeName", "typeParameters"],
    fields: {
      typeName: (0, $.validateType)("TSEntityName"),
      typeParameters: (0, $.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  Ce("TSTypePredicate", {
    aliases: ["TSType"],
    visitor: ["parameterName", "typeAnnotation"],
    builder: ["parameterName", "typeAnnotation", "asserts"],
    fields: {
      parameterName: (0, $.validateType)(["Identifier", "TSThisType"]),
      typeAnnotation: (0, $.validateOptionalType)("TSTypeAnnotation"),
      asserts: (0, $.validateOptional)(dr)
    }
  });
  Ce("TSTypeQuery", {
    aliases: ["TSType"],
    visitor: ["exprName", "typeParameters"],
    fields: {
      exprName: (0, $.validateType)(["TSEntityName", "TSImportType"]),
      typeParameters: (0, $.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  Ce("TSTypeLiteral", {
    aliases: ["TSType"],
    visitor: ["members"],
    fields: {
      members: (0, $.validateArrayOfType)("TSTypeElement")
    }
  });
  Ce("TSArrayType", {
    aliases: ["TSType"],
    visitor: ["elementType"],
    fields: {
      elementType: (0, $.validateType)("TSType")
    }
  });
  Ce("TSTupleType", {
    aliases: ["TSType"],
    visitor: ["elementTypes"],
    fields: {
      elementTypes: (0, $.validateArrayOfType)(["TSType", "TSNamedTupleMember"])
    }
  });
  Ce("TSOptionalType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, $.validateType)("TSType")
    }
  });
  Ce("TSRestType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, $.validateType)("TSType")
    }
  });
  Ce("TSNamedTupleMember", {
    visitor: ["label", "elementType"],
    builder: ["label", "elementType", "optional"],
    fields: {
      label: (0, $.validateType)("Identifier"),
      optional: {
        validate: dr,
        default: !1
      },
      elementType: (0, $.validateType)("TSType")
    }
  });
  var CE = {
    aliases: ["TSType"],
    visitor: ["types"],
    fields: {
      types: (0, $.validateArrayOfType)("TSType")
    }
  };
  Ce("TSUnionType", CE);
  Ce("TSIntersectionType", CE);
  Ce("TSConditionalType", {
    aliases: ["TSType"],
    visitor: ["checkType", "extendsType", "trueType", "falseType"],
    fields: {
      checkType: (0, $.validateType)("TSType"),
      extendsType: (0, $.validateType)("TSType"),
      trueType: (0, $.validateType)("TSType"),
      falseType: (0, $.validateType)("TSType")
    }
  });
  Ce("TSInferType", {
    aliases: ["TSType"],
    visitor: ["typeParameter"],
    fields: {
      typeParameter: (0, $.validateType)("TSTypeParameter")
    }
  });
  Ce("TSParenthesizedType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, $.validateType)("TSType")
    }
  });
  Ce("TSTypeOperator", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      operator: (0, $.validate)((0, $.assertValueType)("string")),
      typeAnnotation: (0, $.validateType)("TSType")
    }
  });
  Ce("TSIndexedAccessType", {
    aliases: ["TSType"],
    visitor: ["objectType", "indexType"],
    fields: {
      objectType: (0, $.validateType)("TSType"),
      indexType: (0, $.validateType)("TSType")
    }
  });
  Ce("TSMappedType", {
    aliases: ["TSType"],
    visitor: ["typeParameter", "typeAnnotation", "nameType"],
    fields: {
      readonly: (0, $.validateOptional)((0, $.assertOneOf)(!0, !1, "+", "-")),
      typeParameter: (0, $.validateType)("TSTypeParameter"),
      optional: (0, $.validateOptional)((0, $.assertOneOf)(!0, !1, "+", "-")),
      typeAnnotation: (0, $.validateOptionalType)("TSType"),
      nameType: (0, $.validateOptionalType)("TSType")
    }
  });
  Ce("TSLiteralType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: ["literal"],
    fields: {
      literal: {
        validate: function() {
          let e = (0, $.assertNodeType)("NumericLiteral", "BigIntLiteral"), t = (0, $.assertOneOf)("-"), r = (0, $.assertNodeType)("NumericL\
iteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
          function n(i, a, o) {
            (0, X8.default)("UnaryExpression", o) ? (t(o, "operator", o.operator), e(o, "argument", o.argument)) : r(i, a, o);
          }
          return s(n, "validator"), n.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiter\
al", "UnaryExpression"], n;
        }()
      }
    }
  });
  Ce("TSExpressionWithTypeArguments", {
    aliases: ["TSType"],
    visitor: ["expression", "typeParameters"],
    fields: {
      expression: (0, $.validateType)("TSEntityName"),
      typeParameters: (0, $.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  Ce("TSInterfaceDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "extends", "body"],
    fields: {
      declare: (0, $.validateOptional)(dr),
      id: (0, $.validateType)("Identifier"),
      typeParameters: (0, $.validateOptionalType)("TSTypeParameterDeclaration"),
      extends: (0, $.validateOptional)((0, $.arrayOfType)("TSExpressionWithTypeArguments")),
      body: (0, $.validateType)("TSInterfaceBody")
    }
  });
  Ce("TSInterfaceBody", {
    visitor: ["body"],
    fields: {
      body: (0, $.validateArrayOfType)("TSTypeElement")
    }
  });
  Ce("TSTypeAliasDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "typeAnnotation"],
    fields: {
      declare: (0, $.validateOptional)(dr),
      id: (0, $.validateType)("Identifier"),
      typeParameters: (0, $.validateOptionalType)("TSTypeParameterDeclaration"),
      typeAnnotation: (0, $.validateType)("TSType")
    }
  });
  Ce("TSInstantiationExpression", {
    aliases: ["Expression"],
    visitor: ["expression", "typeParameters"],
    fields: {
      expression: (0, $.validateType)("Expression"),
      typeParameters: (0, $.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  var wE = {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["expression", "typeAnnotation"],
    fields: {
      expression: (0, $.validateType)("Expression"),
      typeAnnotation: (0, $.validateType)("TSType")
    }
  };
  Ce("TSAsExpression", wE);
  Ce("TSSatisfiesExpression", wE);
  Ce("TSTypeAssertion", {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["typeAnnotation", "expression"],
    fields: {
      typeAnnotation: (0, $.validateType)("TSType"),
      expression: (0, $.validateType)("Expression")
    }
  });
  Ce("TSEnumDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "members"],
    fields: {
      declare: (0, $.validateOptional)(dr),
      const: (0, $.validateOptional)(dr),
      id: (0, $.validateType)("Identifier"),
      members: (0, $.validateArrayOfType)("TSEnumMember"),
      initializer: (0, $.validateOptionalType)("Expression")
    }
  });
  Ce("TSEnumMember", {
    visitor: ["id", "initializer"],
    fields: {
      id: (0, $.validateType)(["Identifier", "StringLiteral"]),
      initializer: (0, $.validateOptionalType)("Expression")
    }
  });
  Ce("TSModuleDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "body"],
    fields: {
      declare: (0, $.validateOptional)(dr),
      global: (0, $.validateOptional)(dr),
      id: (0, $.validateType)(["Identifier", "StringLiteral"]),
      body: (0, $.validateType)(["TSModuleBlock", "TSModuleDeclaration"])
    }
  });
  Ce("TSModuleBlock", {
    aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"],
    visitor: ["body"],
    fields: {
      body: (0, $.validateArrayOfType)("Statement")
    }
  });
  Ce("TSImportType", {
    aliases: ["TSType"],
    visitor: ["argument", "qualifier", "typeParameters"],
    fields: {
      argument: (0, $.validateType)("StringLiteral"),
      qualifier: (0, $.validateOptionalType)("TSEntityName"),
      typeParameters: (0, $.validateOptionalType)("TSTypeParameterInstantiation"),
      options: {
        validate: (0, $.assertNodeType)("Expression"),
        optional: !0
      }
    }
  });
  Ce("TSImportEqualsDeclaration", {
    aliases: ["Statement"],
    visitor: ["id", "moduleReference"],
    fields: {
      isExport: (0, $.validate)(dr),
      id: (0, $.validateType)("Identifier"),
      moduleReference: (0, $.validateType)(["TSEntityName", "TSExternalModuleReference"]),
      importKind: {
        validate: (0, $.assertOneOf)("type", "value"),
        optional: !0
      }
    }
  });
  Ce("TSExternalModuleReference", {
    visitor: ["expression"],
    fields: {
      expression: (0, $.validateType)("StringLiteral")
    }
  });
  Ce("TSNonNullExpression", {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["expression"],
    fields: {
      expression: (0, $.validateType)("Expression")
    }
  });
  Ce("TSExportAssignment", {
    aliases: ["Statement"],
    visitor: ["expression"],
    fields: {
      expression: (0, $.validateType)("Expression")
    }
  });
  Ce("TSNamespaceExportDeclaration", {
    aliases: ["Statement"],
    visitor: ["id"],
    fields: {
      id: (0, $.validateType)("Identifier")
    }
  });
  Ce("TSTypeAnnotation", {
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: {
        validate: (0, $.assertNodeType)("TSType")
      }
    }
  });
  Ce("TSTypeParameterInstantiation", {
    visitor: ["params"],
    fields: {
      params: {
        validate: (0, $.chain)((0, $.assertValueType)("array"), (0, $.assertEach)((0, $.assertNodeType)("TSType")))
      }
    }
  });
  Ce("TSTypeParameterDeclaration", {
    visitor: ["params"],
    fields: {
      params: {
        validate: (0, $.chain)((0, $.assertValueType)("array"), (0, $.assertEach)((0, $.assertNodeType)("TSTypeParameter")))
      }
    }
  });
  Ce("TSTypeParameter", {
    builder: ["constraint", "default", "name"],
    visitor: ["constraint", "default"],
    fields: {
      name: {
        validate: (0, $.assertValueType)("string")
      },
      in: {
        validate: (0, $.assertValueType)("boolean"),
        optional: !0
      },
      out: {
        validate: (0, $.assertValueType)("boolean"),
        optional: !0
      },
      const: {
        validate: (0, $.assertValueType)("boolean"),
        optional: !0
      },
      constraint: {
        validate: (0, $.assertNodeType)("TSType"),
        optional: !0
      },
      default: {
        validate: (0, $.assertNodeType)("TSType"),
        optional: !0
      }
    }
  });
});

// ../node_modules/@babel/types/lib/definitions/deprecated-aliases.js
var IE = T((xl) => {
  "use strict";
  Object.defineProperty(xl, "__esModule", {
    value: !0
  });
  xl.DEPRECATED_ALIASES = void 0;
  var cve = xl.DEPRECATED_ALIASES = {
    ModuleDeclaration: "ImportOrExportDeclaration"
  };
});

// ../node_modules/@babel/types/lib/definitions/index.js
var Ar = T((rr) => {
  "use strict";
  Object.defineProperty(rr, "__esModule", {
    value: !0
  });
  Object.defineProperty(rr, "ALIAS_KEYS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return kt.ALIAS_KEYS;
    }, "get")
  });
  Object.defineProperty(rr, "BUILDER_KEYS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return kt.BUILDER_KEYS;
    }, "get")
  });
  Object.defineProperty(rr, "DEPRECATED_ALIASES", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Ap.DEPRECATED_ALIASES;
    }, "get")
  });
  Object.defineProperty(rr, "DEPRECATED_KEYS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return kt.DEPRECATED_KEYS;
    }, "get")
  });
  Object.defineProperty(rr, "FLIPPED_ALIAS_KEYS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return kt.FLIPPED_ALIAS_KEYS;
    }, "get")
  });
  Object.defineProperty(rr, "NODE_FIELDS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return kt.NODE_FIELDS;
    }, "get")
  });
  Object.defineProperty(rr, "NODE_PARENT_VALIDATIONS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return kt.NODE_PARENT_VALIDATIONS;
    }, "get")
  });
  Object.defineProperty(rr, "PLACEHOLDERS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ka.PLACEHOLDERS;
    }, "get")
  });
  Object.defineProperty(rr, "PLACEHOLDERS_ALIAS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ka.PLACEHOLDERS_ALIAS;
    }, "get")
  });
  Object.defineProperty(rr, "PLACEHOLDERS_FLIPPED_ALIAS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ka.PLACEHOLDERS_FLIPPED_ALIAS;
    }, "get")
  });
  rr.TYPES = void 0;
  Object.defineProperty(rr, "VISITOR_KEYS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return kt.VISITOR_KEYS;
    }, "get")
  });
  var Qn = H1();
  Ep();
  gE();
  bE();
  EE();
  vE();
  DE();
  var kt = xn(), ka = Sp(), Ap = IE();
  Object.keys(Ap.DEPRECATED_ALIASES).forEach((e) => {
    kt.FLIPPED_ALIAS_KEYS[e] = kt.FLIPPED_ALIAS_KEYS[Ap.DEPRECATED_ALIASES[e]];
  });
  Qn(kt.VISITOR_KEYS);
  Qn(kt.ALIAS_KEYS);
  Qn(kt.FLIPPED_ALIAS_KEYS);
  Qn(kt.NODE_FIELDS);
  Qn(kt.BUILDER_KEYS);
  Qn(kt.DEPRECATED_KEYS);
  Qn(ka.PLACEHOLDERS_ALIAS);
  Qn(ka.PLACEHOLDERS_FLIPPED_ALIAS);
  var pve = rr.TYPES = [].concat(Object.keys(kt.VISITOR_KEYS), Object.keys(kt.FLIPPED_ALIAS_KEYS), Object.keys(kt.DEPRECATED_KEYS));
});

// ../node_modules/@babel/types/lib/validators/validate.js
var bl = T((Fa) => {
  "use strict";
  Object.defineProperty(Fa, "__esModule", {
    value: !0
  });
  Fa.default = Z8;
  Fa.validateChild = NE;
  Fa.validateField = OE;
  var _E = Ar();
  function Z8(e, t, r) {
    if (!e) return;
    let n = _E.NODE_FIELDS[e.type];
    if (!n) return;
    let i = n[t];
    OE(e, t, r, i), NE(e, t, r);
  }
  s(Z8, "validate");
  function OE(e, t, r, n) {
    n != null && n.validate && (n.optional && r == null || n.validate(e, t, r));
  }
  s(OE, "validateField");
  function NE(e, t, r) {
    if (r == null) return;
    let n = _E.NODE_PARENT_VALIDATIONS[r.type];
    n && n(e, t, r);
  }
  s(NE, "validateChild");
});

// ../node_modules/@babel/types/lib/builders/validateNode.js
var BE = T((Cp) => {
  "use strict";
  Object.defineProperty(Cp, "__esModule", {
    value: !0
  });
  Cp.default = r6;
  var e6 = bl(), t6 = Se();
  function r6(e) {
    let t = t6.BUILDER_KEYS[e.type];
    for (let r of t)
      (0, e6.default)(e, r, e[r]);
    return e;
  }
  s(r6, "validateNode");
});

// ../node_modules/@babel/types/lib/builders/generated/index.js
var nr = T((g) => {
  "use strict";
  Object.defineProperty(g, "__esModule", {
    value: !0
  });
  g.anyTypeAnnotation = B5;
  g.argumentPlaceholder = lL;
  g.arrayExpression = n6;
  g.arrayPattern = Q6;
  g.arrayTypeAnnotation = k5;
  g.arrowFunctionExpression = Z6;
  g.assignmentExpression = s6;
  g.assignmentPattern = X6;
  g.awaitExpression = T5;
  g.bigIntLiteral = S5;
  g.binaryExpression = i6;
  g.bindExpression = uL;
  g.blockStatement = u6;
  g.booleanLiteral = I6;
  g.booleanLiteralTypeAnnotation = j5;
  g.booleanTypeAnnotation = F5;
  g.breakStatement = c6;
  g.callExpression = f6;
  g.catchClause = p6;
  g.classAccessorProperty = D5;
  g.classBody = e5;
  g.classDeclaration = r5;
  g.classExpression = t5;
  g.classImplements = M5;
  g.classMethod = h5;
  g.classPrivateMethod = _5;
  g.classPrivateProperty = I5;
  g.classProperty = w5;
  g.conditionalExpression = d6;
  g.continueStatement = h6;
  g.debuggerStatement = m6;
  g.decimalLiteral = yL;
  g.declareClass = R5;
  g.declareExportAllDeclaration = Y5;
  g.declareExportDeclaration = H5;
  g.declareFunction = q5;
  g.declareInterface = U5;
  g.declareModule = V5;
  g.declareModuleExports = $5;
  g.declareOpaqueType = K5;
  g.declareTypeAlias = W5;
  g.declareVariable = G5;
  g.declaredPredicate = z5;
  g.decorator = fL;
  g.directive = o6;
  g.directiveLiteral = l6;
  g.doExpression = pL;
  g.doWhileStatement = y6;
  g.emptyStatement = g6;
  g.emptyTypeAnnotation = aj;
  g.enumBooleanBody = kj;
  g.enumBooleanMember = Mj;
  g.enumDeclaration = Bj;
  g.enumDefaultedMember = Uj;
  g.enumNumberBody = Fj;
  g.enumNumberMember = Rj;
  g.enumStringBody = jj;
  g.enumStringMember = qj;
  g.enumSymbolBody = Lj;
  g.existsTypeAnnotation = J5;
  g.exportAllDeclaration = n5;
  g.exportDefaultDeclaration = s5;
  g.exportDefaultSpecifier = dL;
  g.exportNamedDeclaration = i5;
  g.exportNamespaceSpecifier = P5;
  g.exportSpecifier = a5;
  g.expressionStatement = b6;
  g.file = E6;
  g.forInStatement = v6;
  g.forOfStatement = o5;
  g.forStatement = T6;
  g.functionDeclaration = x6;
  g.functionExpression = S6;
  g.functionTypeAnnotation = X5;
  g.functionTypeParam = Q5;
  g.genericTypeAnnotation = Z5;
  g.identifier = P6;
  g.ifStatement = A6;
  g.import = x5;
  g.importAttribute = cL;
  g.importDeclaration = l5;
  g.importDefaultSpecifier = u5;
  g.importExpression = p5;
  g.importNamespaceSpecifier = c5;
  g.importSpecifier = f5;
  g.indexedAccessType = Vj;
  g.inferredPredicate = ej;
  g.interfaceDeclaration = rj;
  g.interfaceExtends = tj;
  g.interfaceTypeAnnotation = nj;
  g.interpreterDirective = a6;
  g.intersectionTypeAnnotation = sj;
  g.jSXAttribute = g.jsxAttribute = Wj;
  g.jSXClosingElement = g.jsxClosingElement = Kj;
  g.jSXClosingFragment = g.jsxClosingFragment = sL;
  g.jSXElement = g.jsxElement = Gj;
  g.jSXEmptyExpression = g.jsxEmptyExpression = Hj;
  g.jSXExpressionContainer = g.jsxExpressionContainer = Yj;
  g.jSXFragment = g.jsxFragment = rL;
  g.jSXIdentifier = g.jsxIdentifier = Jj;
  g.jSXMemberExpression = g.jsxMemberExpression = Xj;
  g.jSXNamespacedName = g.jsxNamespacedName = Qj;
  g.jSXOpeningElement = g.jsxOpeningElement = Zj;
  g.jSXOpeningFragment = g.jsxOpeningFragment = nL;
  g.jSXSpreadAttribute = g.jsxSpreadAttribute = eL;
  g.jSXSpreadChild = g.jsxSpreadChild = zj;
  g.jSXText = g.jsxText = tL;
  g.labeledStatement = C6;
  g.logicalExpression = _6;
  g.memberExpression = O6;
  g.metaProperty = d5;
  g.mixedTypeAnnotation = ij;
  g.moduleExpression = gL;
  g.newExpression = N6;
  g.noop = iL;
  g.nullLiteral = D6;
  g.nullLiteralTypeAnnotation = L5;
  g.nullableTypeAnnotation = oj;
  g.numberLiteral = BM;
  g.numberLiteralTypeAnnotation = lj;
  g.numberTypeAnnotation = uj;
  g.numericLiteral = kE;
  g.objectExpression = k6;
  g.objectMethod = F6;
  g.objectPattern = m5;
  g.objectProperty = j6;
  g.objectTypeAnnotation = cj;
  g.objectTypeCallProperty = pj;
  g.objectTypeIndexer = dj;
  g.objectTypeInternalSlot = fj;
  g.objectTypeProperty = hj;
  g.objectTypeSpreadProperty = mj;
  g.opaqueType = yj;
  g.optionalCallExpression = C5;
  g.optionalIndexedAccessType = $j;
  g.optionalMemberExpression = A5;
  g.parenthesizedExpression = R6;
  g.pipelineBareFunction = vL;
  g.pipelinePrimaryTopicReference = TL;
  g.pipelineTopicExpression = EL;
  g.placeholder = aL;
  g.privateName = O5;
  g.program = B6;
  g.qualifiedTypeIdentifier = gj;
  g.recordExpression = hL;
  g.regExpLiteral = FE;
  g.regexLiteral = kM;
  g.restElement = jE;
  g.restProperty = FM;
  g.returnStatement = L6;
  g.sequenceExpression = M6;
  g.spreadElement = LE;
  g.spreadProperty = jM;
  g.staticBlock = N5;
  g.stringLiteral = w6;
  g.stringLiteralTypeAnnotation = bj;
  g.stringTypeAnnotation = Ej;
  g.super = y5;
  g.switchCase = q6;
  g.switchStatement = U6;
  g.symbolTypeAnnotation = vj;
  g.taggedTemplateExpression = g5;
  g.templateElement = b5;
  g.templateLiteral = E5;
  g.thisExpression = V6;
  g.thisTypeAnnotation = Tj;
  g.throwStatement = $6;
  g.topicReference = bL;
  g.tryStatement = W6;
  g.tSAnyKeyword = g.tsAnyKeyword = OL;
  g.tSArrayType = g.tsArrayType = XL;
  g.tSAsExpression = g.tsAsExpression = yM;
  g.tSBigIntKeyword = g.tsBigIntKeyword = BL;
  g.tSBooleanKeyword = g.tsBooleanKeyword = NL;
  g.tSCallSignatureDeclaration = g.tsCallSignatureDeclaration = CL;
  g.tSConditionalType = g.tsConditionalType = sM;
  g.tSConstructSignatureDeclaration = g.tsConstructSignatureDeclaration = wL;
  g.tSConstructorType = g.tsConstructorType = GL;
  g.tSDeclareFunction = g.tsDeclareFunction = SL;
  g.tSDeclareMethod = g.tsDeclareMethod = PL;
  g.tSEnumDeclaration = g.tsEnumDeclaration = EM;
  g.tSEnumMember = g.tsEnumMember = vM;
  g.tSExportAssignment = g.tsExportAssignment = wM;
  g.tSExpressionWithTypeArguments = g.tsExpressionWithTypeArguments = fM;
  g.tSExternalModuleReference = g.tsExternalModuleReference = AM;
  g.tSFunctionType = g.tsFunctionType = KL;
  g.tSImportEqualsDeclaration = g.tsImportEqualsDeclaration = PM;
  g.tSImportType = g.tsImportType = SM;
  g.tSIndexSignature = g.tsIndexSignature = _L;
  g.tSIndexedAccessType = g.tsIndexedAccessType = lM;
  g.tSInferType = g.tsInferType = iM;
  g.tSInstantiationExpression = g.tsInstantiationExpression = mM;
  g.tSInterfaceBody = g.tsInterfaceBody = dM;
  g.tSInterfaceDeclaration = g.tsInterfaceDeclaration = pM;
  g.tSIntersectionType = g.tsIntersectionType = nM;
  g.tSIntrinsicKeyword = g.tsIntrinsicKeyword = kL;
  g.tSLiteralType = g.tsLiteralType = cM;
  g.tSMappedType = g.tsMappedType = uM;
  g.tSMethodSignature = g.tsMethodSignature = IL;
  g.tSModuleBlock = g.tsModuleBlock = xM;
  g.tSModuleDeclaration = g.tsModuleDeclaration = TM;
  g.tSNamedTupleMember = g.tsNamedTupleMember = tM;
  g.tSNamespaceExportDeclaration = g.tsNamespaceExportDeclaration = DM;
  g.tSNeverKeyword = g.tsNeverKeyword = FL;
  g.tSNonNullExpression = g.tsNonNullExpression = CM;
  g.tSNullKeyword = g.tsNullKeyword = jL;
  g.tSNumberKeyword = g.tsNumberKeyword = LL;
  g.tSObjectKeyword = g.tsObjectKeyword = ML;
  g.tSOptionalType = g.tsOptionalType = ZL;
  g.tSParameterProperty = g.tsParameterProperty = xL;
  g.tSParenthesizedType = g.tsParenthesizedType = aM;
  g.tSPropertySignature = g.tsPropertySignature = DL;
  g.tSQualifiedName = g.tsQualifiedName = AL;
  g.tSRestType = g.tsRestType = eM;
  g.tSSatisfiesExpression = g.tsSatisfiesExpression = gM;
  g.tSStringKeyword = g.tsStringKeyword = RL;
  g.tSSymbolKeyword = g.tsSymbolKeyword = qL;
  g.tSThisType = g.tsThisType = WL;
  g.tSTupleType = g.tsTupleType = QL;
  g.tSTypeAliasDeclaration = g.tsTypeAliasDeclaration = hM;
  g.tSTypeAnnotation = g.tsTypeAnnotation = IM;
  g.tSTypeAssertion = g.tsTypeAssertion = bM;
  g.tSTypeLiteral = g.tsTypeLiteral = JL;
  g.tSTypeOperator = g.tsTypeOperator = oM;
  g.tSTypeParameter = g.tsTypeParameter = NM;
  g.tSTypeParameterDeclaration = g.tsTypeParameterDeclaration = OM;
  g.tSTypeParameterInstantiation = g.tsTypeParameterInstantiation = _M;
  g.tSTypePredicate = g.tsTypePredicate = YL;
  g.tSTypeQuery = g.tsTypeQuery = zL;
  g.tSTypeReference = g.tsTypeReference = HL;
  g.tSUndefinedKeyword = g.tsUndefinedKeyword = UL;
  g.tSUnionType = g.tsUnionType = rM;
  g.tSUnknownKeyword = g.tsUnknownKeyword = VL;
  g.tSVoidKeyword = g.tsVoidKeyword = $L;
  g.tupleExpression = mL;
  g.tupleTypeAnnotation = xj;
  g.typeAlias = Pj;
  g.typeAnnotation = Aj;
  g.typeCastExpression = Cj;
  g.typeParameter = wj;
  g.typeParameterDeclaration = Dj;
  g.typeParameterInstantiation = Ij;
  g.typeofTypeAnnotation = Sj;
  g.unaryExpression = K6;
  g.unionTypeAnnotation = _j;
  g.updateExpression = G6;
  g.v8IntrinsicIdentifier = oL;
  g.variableDeclaration = H6;
  g.variableDeclarator = Y6;
  g.variance = Oj;
  g.voidTypeAnnotation = Nj;
  g.whileStatement = z6;
  g.withStatement = J6;
  g.yieldExpression = v5;
  var N = BE(), Sl = Aa();
  function n6(e = []) {
    return (0, N.default)({
      type: "ArrayExpression",
      elements: e
    });
  }
  s(n6, "arrayExpression");
  function s6(e, t, r) {
    return (0, N.default)({
      type: "AssignmentExpression",
      operator: e,
      left: t,
      right: r
    });
  }
  s(s6, "assignmentExpression");
  function i6(e, t, r) {
    return (0, N.default)({
      type: "BinaryExpression",
      operator: e,
      left: t,
      right: r
    });
  }
  s(i6, "binaryExpression");
  function a6(e) {
    return (0, N.default)({
      type: "InterpreterDirective",
      value: e
    });
  }
  s(a6, "interpreterDirective");
  function o6(e) {
    return (0, N.default)({
      type: "Directive",
      value: e
    });
  }
  s(o6, "directive");
  function l6(e) {
    return (0, N.default)({
      type: "DirectiveLiteral",
      value: e
    });
  }
  s(l6, "directiveLiteral");
  function u6(e, t = []) {
    return (0, N.default)({
      type: "BlockStatement",
      body: e,
      directives: t
    });
  }
  s(u6, "blockStatement");
  function c6(e = null) {
    return (0, N.default)({
      type: "BreakStatement",
      label: e
    });
  }
  s(c6, "breakStatement");
  function f6(e, t) {
    return (0, N.default)({
      type: "CallExpression",
      callee: e,
      arguments: t
    });
  }
  s(f6, "callExpression");
  function p6(e = null, t) {
    return (0, N.default)({
      type: "CatchClause",
      param: e,
      body: t
    });
  }
  s(p6, "catchClause");
  function d6(e, t, r) {
    return (0, N.default)({
      type: "ConditionalExpression",
      test: e,
      consequent: t,
      alternate: r
    });
  }
  s(d6, "conditionalExpression");
  function h6(e = null) {
    return (0, N.default)({
      type: "ContinueStatement",
      label: e
    });
  }
  s(h6, "continueStatement");
  function m6() {
    return {
      type: "DebuggerStatement"
    };
  }
  s(m6, "debuggerStatement");
  function y6(e, t) {
    return (0, N.default)({
      type: "DoWhileStatement",
      test: e,
      body: t
    });
  }
  s(y6, "doWhileStatement");
  function g6() {
    return {
      type: "EmptyStatement"
    };
  }
  s(g6, "emptyStatement");
  function b6(e) {
    return (0, N.default)({
      type: "ExpressionStatement",
      expression: e
    });
  }
  s(b6, "expressionStatement");
  function E6(e, t = null, r = null) {
    return (0, N.default)({
      type: "File",
      program: e,
      comments: t,
      tokens: r
    });
  }
  s(E6, "file");
  function v6(e, t, r) {
    return (0, N.default)({
      type: "ForInStatement",
      left: e,
      right: t,
      body: r
    });
  }
  s(v6, "forInStatement");
  function T6(e = null, t = null, r = null, n) {
    return (0, N.default)({
      type: "ForStatement",
      init: e,
      test: t,
      update: r,
      body: n
    });
  }
  s(T6, "forStatement");
  function x6(e = null, t, r, n = !1, i = !1) {
    return (0, N.default)({
      type: "FunctionDeclaration",
      id: e,
      params: t,
      body: r,
      generator: n,
      async: i
    });
  }
  s(x6, "functionDeclaration");
  function S6(e = null, t, r, n = !1, i = !1) {
    return (0, N.default)({
      type: "FunctionExpression",
      id: e,
      params: t,
      body: r,
      generator: n,
      async: i
    });
  }
  s(S6, "functionExpression");
  function P6(e) {
    return (0, N.default)({
      type: "Identifier",
      name: e
    });
  }
  s(P6, "identifier");
  function A6(e, t, r = null) {
    return (0, N.default)({
      type: "IfStatement",
      test: e,
      consequent: t,
      alternate: r
    });
  }
  s(A6, "ifStatement");
  function C6(e, t) {
    return (0, N.default)({
      type: "LabeledStatement",
      label: e,
      body: t
    });
  }
  s(C6, "labeledStatement");
  function w6(e) {
    return (0, N.default)({
      type: "StringLiteral",
      value: e
    });
  }
  s(w6, "stringLiteral");
  function kE(e) {
    return (0, N.default)({
      type: "NumericLiteral",
      value: e
    });
  }
  s(kE, "numericLiteral");
  function D6() {
    return {
      type: "NullLiteral"
    };
  }
  s(D6, "nullLiteral");
  function I6(e) {
    return (0, N.default)({
      type: "BooleanLiteral",
      value: e
    });
  }
  s(I6, "booleanLiteral");
  function FE(e, t = "") {
    return (0, N.default)({
      type: "RegExpLiteral",
      pattern: e,
      flags: t
    });
  }
  s(FE, "regExpLiteral");
  function _6(e, t, r) {
    return (0, N.default)({
      type: "LogicalExpression",
      operator: e,
      left: t,
      right: r
    });
  }
  s(_6, "logicalExpression");
  function O6(e, t, r = !1, n = null) {
    return (0, N.default)({
      type: "MemberExpression",
      object: e,
      property: t,
      computed: r,
      optional: n
    });
  }
  s(O6, "memberExpression");
  function N6(e, t) {
    return (0, N.default)({
      type: "NewExpression",
      callee: e,
      arguments: t
    });
  }
  s(N6, "newExpression");
  function B6(e, t = [], r = "script", n = null) {
    return (0, N.default)({
      type: "Program",
      body: e,
      directives: t,
      sourceType: r,
      interpreter: n
    });
  }
  s(B6, "program");
  function k6(e) {
    return (0, N.default)({
      type: "ObjectExpression",
      properties: e
    });
  }
  s(k6, "objectExpression");
  function F6(e = "method", t, r, n, i = !1, a = !1, o = !1) {
    return (0, N.default)({
      type: "ObjectMethod",
      kind: e,
      key: t,
      params: r,
      body: n,
      computed: i,
      generator: a,
      async: o
    });
  }
  s(F6, "objectMethod");
  function j6(e, t, r = !1, n = !1, i = null) {
    return (0, N.default)({
      type: "ObjectProperty",
      key: e,
      value: t,
      computed: r,
      shorthand: n,
      decorators: i
    });
  }
  s(j6, "objectProperty");
  function jE(e) {
    return (0, N.default)({
      type: "RestElement",
      argument: e
    });
  }
  s(jE, "restElement");
  function L6(e = null) {
    return (0, N.default)({
      type: "ReturnStatement",
      argument: e
    });
  }
  s(L6, "returnStatement");
  function M6(e) {
    return (0, N.default)({
      type: "SequenceExpression",
      expressions: e
    });
  }
  s(M6, "sequenceExpression");
  function R6(e) {
    return (0, N.default)({
      type: "ParenthesizedExpression",
      expression: e
    });
  }
  s(R6, "parenthesizedExpression");
  function q6(e = null, t) {
    return (0, N.default)({
      type: "SwitchCase",
      test: e,
      consequent: t
    });
  }
  s(q6, "switchCase");
  function U6(e, t) {
    return (0, N.default)({
      type: "SwitchStatement",
      discriminant: e,
      cases: t
    });
  }
  s(U6, "switchStatement");
  function V6() {
    return {
      type: "ThisExpression"
    };
  }
  s(V6, "thisExpression");
  function $6(e) {
    return (0, N.default)({
      type: "ThrowStatement",
      argument: e
    });
  }
  s($6, "throwStatement");
  function W6(e, t = null, r = null) {
    return (0, N.default)({
      type: "TryStatement",
      block: e,
      handler: t,
      finalizer: r
    });
  }
  s(W6, "tryStatement");
  function K6(e, t, r = !0) {
    return (0, N.default)({
      type: "UnaryExpression",
      operator: e,
      argument: t,
      prefix: r
    });
  }
  s(K6, "unaryExpression");
  function G6(e, t, r = !1) {
    return (0, N.default)({
      type: "UpdateExpression",
      operator: e,
      argument: t,
      prefix: r
    });
  }
  s(G6, "updateExpression");
  function H6(e, t) {
    return (0, N.default)({
      type: "VariableDeclaration",
      kind: e,
      declarations: t
    });
  }
  s(H6, "variableDeclaration");
  function Y6(e, t = null) {
    return (0, N.default)({
      type: "VariableDeclarator",
      id: e,
      init: t
    });
  }
  s(Y6, "variableDeclarator");
  function z6(e, t) {
    return (0, N.default)({
      type: "WhileStatement",
      test: e,
      body: t
    });
  }
  s(z6, "whileStatement");
  function J6(e, t) {
    return (0, N.default)({
      type: "WithStatement",
      object: e,
      body: t
    });
  }
  s(J6, "withStatement");
  function X6(e, t) {
    return (0, N.default)({
      type: "AssignmentPattern",
      left: e,
      right: t
    });
  }
  s(X6, "assignmentPattern");
  function Q6(e) {
    return (0, N.default)({
      type: "ArrayPattern",
      elements: e
    });
  }
  s(Q6, "arrayPattern");
  function Z6(e, t, r = !1) {
    return (0, N.default)({
      type: "ArrowFunctionExpression",
      params: e,
      body: t,
      async: r,
      expression: null
    });
  }
  s(Z6, "arrowFunctionExpression");
  function e5(e) {
    return (0, N.default)({
      type: "ClassBody",
      body: e
    });
  }
  s(e5, "classBody");
  function t5(e = null, t = null, r, n = null) {
    return (0, N.default)({
      type: "ClassExpression",
      id: e,
      superClass: t,
      body: r,
      decorators: n
    });
  }
  s(t5, "classExpression");
  function r5(e = null, t = null, r, n = null) {
    return (0, N.default)({
      type: "ClassDeclaration",
      id: e,
      superClass: t,
      body: r,
      decorators: n
    });
  }
  s(r5, "classDeclaration");
  function n5(e) {
    return (0, N.default)({
      type: "ExportAllDeclaration",
      source: e
    });
  }
  s(n5, "exportAllDeclaration");
  function s5(e) {
    return (0, N.default)({
      type: "ExportDefaultDeclaration",
      declaration: e
    });
  }
  s(s5, "exportDefaultDeclaration");
  function i5(e = null, t = [], r = null) {
    return (0, N.default)({
      type: "ExportNamedDeclaration",
      declaration: e,
      specifiers: t,
      source: r
    });
  }
  s(i5, "exportNamedDeclaration");
  function a5(e, t) {
    return (0, N.default)({
      type: "ExportSpecifier",
      local: e,
      exported: t
    });
  }
  s(a5, "exportSpecifier");
  function o5(e, t, r, n = !1) {
    return (0, N.default)({
      type: "ForOfStatement",
      left: e,
      right: t,
      body: r,
      await: n
    });
  }
  s(o5, "forOfStatement");
  function l5(e, t) {
    return (0, N.default)({
      type: "ImportDeclaration",
      specifiers: e,
      source: t
    });
  }
  s(l5, "importDeclaration");
  function u5(e) {
    return (0, N.default)({
      type: "ImportDefaultSpecifier",
      local: e
    });
  }
  s(u5, "importDefaultSpecifier");
  function c5(e) {
    return (0, N.default)({
      type: "ImportNamespaceSpecifier",
      local: e
    });
  }
  s(c5, "importNamespaceSpecifier");
  function f5(e, t) {
    return (0, N.default)({
      type: "ImportSpecifier",
      local: e,
      imported: t
    });
  }
  s(f5, "importSpecifier");
  function p5(e, t = null) {
    return (0, N.default)({
      type: "ImportExpression",
      source: e,
      options: t
    });
  }
  s(p5, "importExpression");
  function d5(e, t) {
    return (0, N.default)({
      type: "MetaProperty",
      meta: e,
      property: t
    });
  }
  s(d5, "metaProperty");
  function h5(e = "method", t, r, n, i = !1, a = !1, o = !1, l = !1) {
    return (0, N.default)({
      type: "ClassMethod",
      kind: e,
      key: t,
      params: r,
      body: n,
      computed: i,
      static: a,
      generator: o,
      async: l
    });
  }
  s(h5, "classMethod");
  function m5(e) {
    return (0, N.default)({
      type: "ObjectPattern",
      properties: e
    });
  }
  s(m5, "objectPattern");
  function LE(e) {
    return (0, N.default)({
      type: "SpreadElement",
      argument: e
    });
  }
  s(LE, "spreadElement");
  function y5() {
    return {
      type: "Super"
    };
  }
  s(y5, "_super");
  function g5(e, t) {
    return (0, N.default)({
      type: "TaggedTemplateExpression",
      tag: e,
      quasi: t
    });
  }
  s(g5, "taggedTemplateExpression");
  function b5(e, t = !1) {
    return (0, N.default)({
      type: "TemplateElement",
      value: e,
      tail: t
    });
  }
  s(b5, "templateElement");
  function E5(e, t) {
    return (0, N.default)({
      type: "TemplateLiteral",
      quasis: e,
      expressions: t
    });
  }
  s(E5, "templateLiteral");
  function v5(e = null, t = !1) {
    return (0, N.default)({
      type: "YieldExpression",
      argument: e,
      delegate: t
    });
  }
  s(v5, "yieldExpression");
  function T5(e) {
    return (0, N.default)({
      type: "AwaitExpression",
      argument: e
    });
  }
  s(T5, "awaitExpression");
  function x5() {
    return {
      type: "Import"
    };
  }
  s(x5, "_import");
  function S5(e) {
    return (0, N.default)({
      type: "BigIntLiteral",
      value: e
    });
  }
  s(S5, "bigIntLiteral");
  function P5(e) {
    return (0, N.default)({
      type: "ExportNamespaceSpecifier",
      exported: e
    });
  }
  s(P5, "exportNamespaceSpecifier");
  function A5(e, t, r = !1, n) {
    return (0, N.default)({
      type: "OptionalMemberExpression",
      object: e,
      property: t,
      computed: r,
      optional: n
    });
  }
  s(A5, "optionalMemberExpression");
  function C5(e, t, r) {
    return (0, N.default)({
      type: "OptionalCallExpression",
      callee: e,
      arguments: t,
      optional: r
    });
  }
  s(C5, "optionalCallExpression");
  function w5(e, t = null, r = null, n = null, i = !1, a = !1) {
    return (0, N.default)({
      type: "ClassProperty",
      key: e,
      value: t,
      typeAnnotation: r,
      decorators: n,
      computed: i,
      static: a
    });
  }
  s(w5, "classProperty");
  function D5(e, t = null, r = null, n = null, i = !1, a = !1) {
    return (0, N.default)({
      type: "ClassAccessorProperty",
      key: e,
      value: t,
      typeAnnotation: r,
      decorators: n,
      computed: i,
      static: a
    });
  }
  s(D5, "classAccessorProperty");
  function I5(e, t = null, r = null, n = !1) {
    return (0, N.default)({
      type: "ClassPrivateProperty",
      key: e,
      value: t,
      decorators: r,
      static: n
    });
  }
  s(I5, "classPrivateProperty");
  function _5(e = "method", t, r, n, i = !1) {
    return (0, N.default)({
      type: "ClassPrivateMethod",
      kind: e,
      key: t,
      params: r,
      body: n,
      static: i
    });
  }
  s(_5, "classPrivateMethod");
  function O5(e) {
    return (0, N.default)({
      type: "PrivateName",
      id: e
    });
  }
  s(O5, "privateName");
  function N5(e) {
    return (0, N.default)({
      type: "StaticBlock",
      body: e
    });
  }
  s(N5, "staticBlock");
  function B5() {
    return {
      type: "AnyTypeAnnotation"
    };
  }
  s(B5, "anyTypeAnnotation");
  function k5(e) {
    return (0, N.default)({
      type: "ArrayTypeAnnotation",
      elementType: e
    });
  }
  s(k5, "arrayTypeAnnotation");
  function F5() {
    return {
      type: "BooleanTypeAnnotation"
    };
  }
  s(F5, "booleanTypeAnnotation");
  function j5(e) {
    return (0, N.default)({
      type: "BooleanLiteralTypeAnnotation",
      value: e
    });
  }
  s(j5, "booleanLiteralTypeAnnotation");
  function L5() {
    return {
      type: "NullLiteralTypeAnnotation"
    };
  }
  s(L5, "nullLiteralTypeAnnotation");
  function M5(e, t = null) {
    return (0, N.default)({
      type: "ClassImplements",
      id: e,
      typeParameters: t
    });
  }
  s(M5, "classImplements");
  function R5(e, t = null, r = null, n) {
    return (0, N.default)({
      type: "DeclareClass",
      id: e,
      typeParameters: t,
      extends: r,
      body: n
    });
  }
  s(R5, "declareClass");
  function q5(e) {
    return (0, N.default)({
      type: "DeclareFunction",
      id: e
    });
  }
  s(q5, "declareFunction");
  function U5(e, t = null, r = null, n) {
    return (0, N.default)({
      type: "DeclareInterface",
      id: e,
      typeParameters: t,
      extends: r,
      body: n
    });
  }
  s(U5, "declareInterface");
  function V5(e, t, r = null) {
    return (0, N.default)({
      type: "DeclareModule",
      id: e,
      body: t,
      kind: r
    });
  }
  s(V5, "declareModule");
  function $5(e) {
    return (0, N.default)({
      type: "DeclareModuleExports",
      typeAnnotation: e
    });
  }
  s($5, "declareModuleExports");
  function W5(e, t = null, r) {
    return (0, N.default)({
      type: "DeclareTypeAlias",
      id: e,
      typeParameters: t,
      right: r
    });
  }
  s(W5, "declareTypeAlias");
  function K5(e, t = null, r = null) {
    return (0, N.default)({
      type: "DeclareOpaqueType",
      id: e,
      typeParameters: t,
      supertype: r
    });
  }
  s(K5, "declareOpaqueType");
  function G5(e) {
    return (0, N.default)({
      type: "DeclareVariable",
      id: e
    });
  }
  s(G5, "declareVariable");
  function H5(e = null, t = null, r = null) {
    return (0, N.default)({
      type: "DeclareExportDeclaration",
      declaration: e,
      specifiers: t,
      source: r
    });
  }
  s(H5, "declareExportDeclaration");
  function Y5(e) {
    return (0, N.default)({
      type: "DeclareExportAllDeclaration",
      source: e
    });
  }
  s(Y5, "declareExportAllDeclaration");
  function z5(e) {
    return (0, N.default)({
      type: "DeclaredPredicate",
      value: e
    });
  }
  s(z5, "declaredPredicate");
  function J5() {
    return {
      type: "ExistsTypeAnnotation"
    };
  }
  s(J5, "existsTypeAnnotation");
  function X5(e = null, t, r = null, n) {
    return (0, N.default)({
      type: "FunctionTypeAnnotation",
      typeParameters: e,
      params: t,
      rest: r,
      returnType: n
    });
  }
  s(X5, "functionTypeAnnotation");
  function Q5(e = null, t) {
    return (0, N.default)({
      type: "FunctionTypeParam",
      name: e,
      typeAnnotation: t
    });
  }
  s(Q5, "functionTypeParam");
  function Z5(e, t = null) {
    return (0, N.default)({
      type: "GenericTypeAnnotation",
      id: e,
      typeParameters: t
    });
  }
  s(Z5, "genericTypeAnnotation");
  function ej() {
    return {
      type: "InferredPredicate"
    };
  }
  s(ej, "inferredPredicate");
  function tj(e, t = null) {
    return (0, N.default)({
      type: "InterfaceExtends",
      id: e,
      typeParameters: t
    });
  }
  s(tj, "interfaceExtends");
  function rj(e, t = null, r = null, n) {
    return (0, N.default)({
      type: "InterfaceDeclaration",
      id: e,
      typeParameters: t,
      extends: r,
      body: n
    });
  }
  s(rj, "interfaceDeclaration");
  function nj(e = null, t) {
    return (0, N.default)({
      type: "InterfaceTypeAnnotation",
      extends: e,
      body: t
    });
  }
  s(nj, "interfaceTypeAnnotation");
  function sj(e) {
    return (0, N.default)({
      type: "IntersectionTypeAnnotation",
      types: e
    });
  }
  s(sj, "intersectionTypeAnnotation");
  function ij() {
    return {
      type: "MixedTypeAnnotation"
    };
  }
  s(ij, "mixedTypeAnnotation");
  function aj() {
    return {
      type: "EmptyTypeAnnotation"
    };
  }
  s(aj, "emptyTypeAnnotation");
  function oj(e) {
    return (0, N.default)({
      type: "NullableTypeAnnotation",
      typeAnnotation: e
    });
  }
  s(oj, "nullableTypeAnnotation");
  function lj(e) {
    return (0, N.default)({
      type: "NumberLiteralTypeAnnotation",
      value: e
    });
  }
  s(lj, "numberLiteralTypeAnnotation");
  function uj() {
    return {
      type: "NumberTypeAnnotation"
    };
  }
  s(uj, "numberTypeAnnotation");
  function cj(e, t = [], r = [], n = [], i = !1) {
    return (0, N.default)({
      type: "ObjectTypeAnnotation",
      properties: e,
      indexers: t,
      callProperties: r,
      internalSlots: n,
      exact: i
    });
  }
  s(cj, "objectTypeAnnotation");
  function fj(e, t, r, n, i) {
    return (0, N.default)({
      type: "ObjectTypeInternalSlot",
      id: e,
      value: t,
      optional: r,
      static: n,
      method: i
    });
  }
  s(fj, "objectTypeInternalSlot");
  function pj(e) {
    return (0, N.default)({
      type: "ObjectTypeCallProperty",
      value: e,
      static: null
    });
  }
  s(pj, "objectTypeCallProperty");
  function dj(e = null, t, r, n = null) {
    return (0, N.default)({
      type: "ObjectTypeIndexer",
      id: e,
      key: t,
      value: r,
      variance: n,
      static: null
    });
  }
  s(dj, "objectTypeIndexer");
  function hj(e, t, r = null) {
    return (0, N.default)({
      type: "ObjectTypeProperty",
      key: e,
      value: t,
      variance: r,
      kind: null,
      method: null,
      optional: null,
      proto: null,
      static: null
    });
  }
  s(hj, "objectTypeProperty");
  function mj(e) {
    return (0, N.default)({
      type: "ObjectTypeSpreadProperty",
      argument: e
    });
  }
  s(mj, "objectTypeSpreadProperty");
  function yj(e, t = null, r = null, n) {
    return (0, N.default)({
      type: "OpaqueType",
      id: e,
      typeParameters: t,
      supertype: r,
      impltype: n
    });
  }
  s(yj, "opaqueType");
  function gj(e, t) {
    return (0, N.default)({
      type: "QualifiedTypeIdentifier",
      id: e,
      qualification: t
    });
  }
  s(gj, "qualifiedTypeIdentifier");
  function bj(e) {
    return (0, N.default)({
      type: "StringLiteralTypeAnnotation",
      value: e
    });
  }
  s(bj, "stringLiteralTypeAnnotation");
  function Ej() {
    return {
      type: "StringTypeAnnotation"
    };
  }
  s(Ej, "stringTypeAnnotation");
  function vj() {
    return {
      type: "SymbolTypeAnnotation"
    };
  }
  s(vj, "symbolTypeAnnotation");
  function Tj() {
    return {
      type: "ThisTypeAnnotation"
    };
  }
  s(Tj, "thisTypeAnnotation");
  function xj(e) {
    return (0, N.default)({
      type: "TupleTypeAnnotation",
      types: e
    });
  }
  s(xj, "tupleTypeAnnotation");
  function Sj(e) {
    return (0, N.default)({
      type: "TypeofTypeAnnotation",
      argument: e
    });
  }
  s(Sj, "typeofTypeAnnotation");
  function Pj(e, t = null, r) {
    return (0, N.default)({
      type: "TypeAlias",
      id: e,
      typeParameters: t,
      right: r
    });
  }
  s(Pj, "typeAlias");
  function Aj(e) {
    return (0, N.default)({
      type: "TypeAnnotation",
      typeAnnotation: e
    });
  }
  s(Aj, "typeAnnotation");
  function Cj(e, t) {
    return (0, N.default)({
      type: "TypeCastExpression",
      expression: e,
      typeAnnotation: t
    });
  }
  s(Cj, "typeCastExpression");
  function wj(e = null, t = null, r = null) {
    return (0, N.default)({
      type: "TypeParameter",
      bound: e,
      default: t,
      variance: r,
      name: null
    });
  }
  s(wj, "typeParameter");
  function Dj(e) {
    return (0, N.default)({
      type: "TypeParameterDeclaration",
      params: e
    });
  }
  s(Dj, "typeParameterDeclaration");
  function Ij(e) {
    return (0, N.default)({
      type: "TypeParameterInstantiation",
      params: e
    });
  }
  s(Ij, "typeParameterInstantiation");
  function _j(e) {
    return (0, N.default)({
      type: "UnionTypeAnnotation",
      types: e
    });
  }
  s(_j, "unionTypeAnnotation");
  function Oj(e) {
    return (0, N.default)({
      type: "Variance",
      kind: e
    });
  }
  s(Oj, "variance");
  function Nj() {
    return {
      type: "VoidTypeAnnotation"
    };
  }
  s(Nj, "voidTypeAnnotation");
  function Bj(e, t) {
    return (0, N.default)({
      type: "EnumDeclaration",
      id: e,
      body: t
    });
  }
  s(Bj, "enumDeclaration");
  function kj(e) {
    return (0, N.default)({
      type: "EnumBooleanBody",
      members: e,
      explicitType: null,
      hasUnknownMembers: null
    });
  }
  s(kj, "enumBooleanBody");
  function Fj(e) {
    return (0, N.default)({
      type: "EnumNumberBody",
      members: e,
      explicitType: null,
      hasUnknownMembers: null
    });
  }
  s(Fj, "enumNumberBody");
  function jj(e) {
    return (0, N.default)({
      type: "EnumStringBody",
      members: e,
      explicitType: null,
      hasUnknownMembers: null
    });
  }
  s(jj, "enumStringBody");
  function Lj(e) {
    return (0, N.default)({
      type: "EnumSymbolBody",
      members: e,
      hasUnknownMembers: null
    });
  }
  s(Lj, "enumSymbolBody");
  function Mj(e) {
    return (0, N.default)({
      type: "EnumBooleanMember",
      id: e,
      init: null
    });
  }
  s(Mj, "enumBooleanMember");
  function Rj(e, t) {
    return (0, N.default)({
      type: "EnumNumberMember",
      id: e,
      init: t
    });
  }
  s(Rj, "enumNumberMember");
  function qj(e, t) {
    return (0, N.default)({
      type: "EnumStringMember",
      id: e,
      init: t
    });
  }
  s(qj, "enumStringMember");
  function Uj(e) {
    return (0, N.default)({
      type: "EnumDefaultedMember",
      id: e
    });
  }
  s(Uj, "enumDefaultedMember");
  function Vj(e, t) {
    return (0, N.default)({
      type: "IndexedAccessType",
      objectType: e,
      indexType: t
    });
  }
  s(Vj, "indexedAccessType");
  function $j(e, t) {
    return (0, N.default)({
      type: "OptionalIndexedAccessType",
      objectType: e,
      indexType: t,
      optional: null
    });
  }
  s($j, "optionalIndexedAccessType");
  function Wj(e, t = null) {
    return (0, N.default)({
      type: "JSXAttribute",
      name: e,
      value: t
    });
  }
  s(Wj, "jsxAttribute");
  function Kj(e) {
    return (0, N.default)({
      type: "JSXClosingElement",
      name: e
    });
  }
  s(Kj, "jsxClosingElement");
  function Gj(e, t = null, r, n = null) {
    return (0, N.default)({
      type: "JSXElement",
      openingElement: e,
      closingElement: t,
      children: r,
      selfClosing: n
    });
  }
  s(Gj, "jsxElement");
  function Hj() {
    return {
      type: "JSXEmptyExpression"
    };
  }
  s(Hj, "jsxEmptyExpression");
  function Yj(e) {
    return (0, N.default)({
      type: "JSXExpressionContainer",
      expression: e
    });
  }
  s(Yj, "jsxExpressionContainer");
  function zj(e) {
    return (0, N.default)({
      type: "JSXSpreadChild",
      expression: e
    });
  }
  s(zj, "jsxSpreadChild");
  function Jj(e) {
    return (0, N.default)({
      type: "JSXIdentifier",
      name: e
    });
  }
  s(Jj, "jsxIdentifier");
  function Xj(e, t) {
    return (0, N.default)({
      type: "JSXMemberExpression",
      object: e,
      property: t
    });
  }
  s(Xj, "jsxMemberExpression");
  function Qj(e, t) {
    return (0, N.default)({
      type: "JSXNamespacedName",
      namespace: e,
      name: t
    });
  }
  s(Qj, "jsxNamespacedName");
  function Zj(e, t, r = !1) {
    return (0, N.default)({
      type: "JSXOpeningElement",
      name: e,
      attributes: t,
      selfClosing: r
    });
  }
  s(Zj, "jsxOpeningElement");
  function eL(e) {
    return (0, N.default)({
      type: "JSXSpreadAttribute",
      argument: e
    });
  }
  s(eL, "jsxSpreadAttribute");
  function tL(e) {
    return (0, N.default)({
      type: "JSXText",
      value: e
    });
  }
  s(tL, "jsxText");
  function rL(e, t, r) {
    return (0, N.default)({
      type: "JSXFragment",
      openingFragment: e,
      closingFragment: t,
      children: r
    });
  }
  s(rL, "jsxFragment");
  function nL() {
    return {
      type: "JSXOpeningFragment"
    };
  }
  s(nL, "jsxOpeningFragment");
  function sL() {
    return {
      type: "JSXClosingFragment"
    };
  }
  s(sL, "jsxClosingFragment");
  function iL() {
    return {
      type: "Noop"
    };
  }
  s(iL, "noop");
  function aL(e, t) {
    return (0, N.default)({
      type: "Placeholder",
      expectedNode: e,
      name: t
    });
  }
  s(aL, "placeholder");
  function oL(e) {
    return (0, N.default)({
      type: "V8IntrinsicIdentifier",
      name: e
    });
  }
  s(oL, "v8IntrinsicIdentifier");
  function lL() {
    return {
      type: "ArgumentPlaceholder"
    };
  }
  s(lL, "argumentPlaceholder");
  function uL(e, t) {
    return (0, N.default)({
      type: "BindExpression",
      object: e,
      callee: t
    });
  }
  s(uL, "bindExpression");
  function cL(e, t) {
    return (0, N.default)({
      type: "ImportAttribute",
      key: e,
      value: t
    });
  }
  s(cL, "importAttribute");
  function fL(e) {
    return (0, N.default)({
      type: "Decorator",
      expression: e
    });
  }
  s(fL, "decorator");
  function pL(e, t = !1) {
    return (0, N.default)({
      type: "DoExpression",
      body: e,
      async: t
    });
  }
  s(pL, "doExpression");
  function dL(e) {
    return (0, N.default)({
      type: "ExportDefaultSpecifier",
      exported: e
    });
  }
  s(dL, "exportDefaultSpecifier");
  function hL(e) {
    return (0, N.default)({
      type: "RecordExpression",
      properties: e
    });
  }
  s(hL, "recordExpression");
  function mL(e = []) {
    return (0, N.default)({
      type: "TupleExpression",
      elements: e
    });
  }
  s(mL, "tupleExpression");
  function yL(e) {
    return (0, N.default)({
      type: "DecimalLiteral",
      value: e
    });
  }
  s(yL, "decimalLiteral");
  function gL(e) {
    return (0, N.default)({
      type: "ModuleExpression",
      body: e
    });
  }
  s(gL, "moduleExpression");
  function bL() {
    return {
      type: "TopicReference"
    };
  }
  s(bL, "topicReference");
  function EL(e) {
    return (0, N.default)({
      type: "PipelineTopicExpression",
      expression: e
    });
  }
  s(EL, "pipelineTopicExpression");
  function vL(e) {
    return (0, N.default)({
      type: "PipelineBareFunction",
      callee: e
    });
  }
  s(vL, "pipelineBareFunction");
  function TL() {
    return {
      type: "PipelinePrimaryTopicReference"
    };
  }
  s(TL, "pipelinePrimaryTopicReference");
  function xL(e) {
    return (0, N.default)({
      type: "TSParameterProperty",
      parameter: e
    });
  }
  s(xL, "tsParameterProperty");
  function SL(e = null, t = null, r, n = null) {
    return (0, N.default)({
      type: "TSDeclareFunction",
      id: e,
      typeParameters: t,
      params: r,
      returnType: n
    });
  }
  s(SL, "tsDeclareFunction");
  function PL(e = null, t, r = null, n, i = null) {
    return (0, N.default)({
      type: "TSDeclareMethod",
      decorators: e,
      key: t,
      typeParameters: r,
      params: n,
      returnType: i
    });
  }
  s(PL, "tsDeclareMethod");
  function AL(e, t) {
    return (0, N.default)({
      type: "TSQualifiedName",
      left: e,
      right: t
    });
  }
  s(AL, "tsQualifiedName");
  function CL(e = null, t, r = null) {
    return (0, N.default)({
      type: "TSCallSignatureDeclaration",
      typeParameters: e,
      parameters: t,
      typeAnnotation: r
    });
  }
  s(CL, "tsCallSignatureDeclaration");
  function wL(e = null, t, r = null) {
    return (0, N.default)({
      type: "TSConstructSignatureDeclaration",
      typeParameters: e,
      parameters: t,
      typeAnnotation: r
    });
  }
  s(wL, "tsConstructSignatureDeclaration");
  function DL(e, t = null) {
    return (0, N.default)({
      type: "TSPropertySignature",
      key: e,
      typeAnnotation: t,
      kind: null
    });
  }
  s(DL, "tsPropertySignature");
  function IL(e, t = null, r, n = null) {
    return (0, N.default)({
      type: "TSMethodSignature",
      key: e,
      typeParameters: t,
      parameters: r,
      typeAnnotation: n,
      kind: null
    });
  }
  s(IL, "tsMethodSignature");
  function _L(e, t = null) {
    return (0, N.default)({
      type: "TSIndexSignature",
      parameters: e,
      typeAnnotation: t
    });
  }
  s(_L, "tsIndexSignature");
  function OL() {
    return {
      type: "TSAnyKeyword"
    };
  }
  s(OL, "tsAnyKeyword");
  function NL() {
    return {
      type: "TSBooleanKeyword"
    };
  }
  s(NL, "tsBooleanKeyword");
  function BL() {
    return {
      type: "TSBigIntKeyword"
    };
  }
  s(BL, "tsBigIntKeyword");
  function kL() {
    return {
      type: "TSIntrinsicKeyword"
    };
  }
  s(kL, "tsIntrinsicKeyword");
  function FL() {
    return {
      type: "TSNeverKeyword"
    };
  }
  s(FL, "tsNeverKeyword");
  function jL() {
    return {
      type: "TSNullKeyword"
    };
  }
  s(jL, "tsNullKeyword");
  function LL() {
    return {
      type: "TSNumberKeyword"
    };
  }
  s(LL, "tsNumberKeyword");
  function ML() {
    return {
      type: "TSObjectKeyword"
    };
  }
  s(ML, "tsObjectKeyword");
  function RL() {
    return {
      type: "TSStringKeyword"
    };
  }
  s(RL, "tsStringKeyword");
  function qL() {
    return {
      type: "TSSymbolKeyword"
    };
  }
  s(qL, "tsSymbolKeyword");
  function UL() {
    return {
      type: "TSUndefinedKeyword"
    };
  }
  s(UL, "tsUndefinedKeyword");
  function VL() {
    return {
      type: "TSUnknownKeyword"
    };
  }
  s(VL, "tsUnknownKeyword");
  function $L() {
    return {
      type: "TSVoidKeyword"
    };
  }
  s($L, "tsVoidKeyword");
  function WL() {
    return {
      type: "TSThisType"
    };
  }
  s(WL, "tsThisType");
  function KL(e = null, t, r = null) {
    return (0, N.default)({
      type: "TSFunctionType",
      typeParameters: e,
      parameters: t,
      typeAnnotation: r
    });
  }
  s(KL, "tsFunctionType");
  function GL(e = null, t, r = null) {
    return (0, N.default)({
      type: "TSConstructorType",
      typeParameters: e,
      parameters: t,
      typeAnnotation: r
    });
  }
  s(GL, "tsConstructorType");
  function HL(e, t = null) {
    return (0, N.default)({
      type: "TSTypeReference",
      typeName: e,
      typeParameters: t
    });
  }
  s(HL, "tsTypeReference");
  function YL(e, t = null, r = null) {
    return (0, N.default)({
      type: "TSTypePredicate",
      parameterName: e,
      typeAnnotation: t,
      asserts: r
    });
  }
  s(YL, "tsTypePredicate");
  function zL(e, t = null) {
    return (0, N.default)({
      type: "TSTypeQuery",
      exprName: e,
      typeParameters: t
    });
  }
  s(zL, "tsTypeQuery");
  function JL(e) {
    return (0, N.default)({
      type: "TSTypeLiteral",
      members: e
    });
  }
  s(JL, "tsTypeLiteral");
  function XL(e) {
    return (0, N.default)({
      type: "TSArrayType",
      elementType: e
    });
  }
  s(XL, "tsArrayType");
  function QL(e) {
    return (0, N.default)({
      type: "TSTupleType",
      elementTypes: e
    });
  }
  s(QL, "tsTupleType");
  function ZL(e) {
    return (0, N.default)({
      type: "TSOptionalType",
      typeAnnotation: e
    });
  }
  s(ZL, "tsOptionalType");
  function eM(e) {
    return (0, N.default)({
      type: "TSRestType",
      typeAnnotation: e
    });
  }
  s(eM, "tsRestType");
  function tM(e, t, r = !1) {
    return (0, N.default)({
      type: "TSNamedTupleMember",
      label: e,
      elementType: t,
      optional: r
    });
  }
  s(tM, "tsNamedTupleMember");
  function rM(e) {
    return (0, N.default)({
      type: "TSUnionType",
      types: e
    });
  }
  s(rM, "tsUnionType");
  function nM(e) {
    return (0, N.default)({
      type: "TSIntersectionType",
      types: e
    });
  }
  s(nM, "tsIntersectionType");
  function sM(e, t, r, n) {
    return (0, N.default)({
      type: "TSConditionalType",
      checkType: e,
      extendsType: t,
      trueType: r,
      falseType: n
    });
  }
  s(sM, "tsConditionalType");
  function iM(e) {
    return (0, N.default)({
      type: "TSInferType",
      typeParameter: e
    });
  }
  s(iM, "tsInferType");
  function aM(e) {
    return (0, N.default)({
      type: "TSParenthesizedType",
      typeAnnotation: e
    });
  }
  s(aM, "tsParenthesizedType");
  function oM(e) {
    return (0, N.default)({
      type: "TSTypeOperator",
      typeAnnotation: e,
      operator: null
    });
  }
  s(oM, "tsTypeOperator");
  function lM(e, t) {
    return (0, N.default)({
      type: "TSIndexedAccessType",
      objectType: e,
      indexType: t
    });
  }
  s(lM, "tsIndexedAccessType");
  function uM(e, t = null, r = null) {
    return (0, N.default)({
      type: "TSMappedType",
      typeParameter: e,
      typeAnnotation: t,
      nameType: r
    });
  }
  s(uM, "tsMappedType");
  function cM(e) {
    return (0, N.default)({
      type: "TSLiteralType",
      literal: e
    });
  }
  s(cM, "tsLiteralType");
  function fM(e, t = null) {
    return (0, N.default)({
      type: "TSExpressionWithTypeArguments",
      expression: e,
      typeParameters: t
    });
  }
  s(fM, "tsExpressionWithTypeArguments");
  function pM(e, t = null, r = null, n) {
    return (0, N.default)({
      type: "TSInterfaceDeclaration",
      id: e,
      typeParameters: t,
      extends: r,
      body: n
    });
  }
  s(pM, "tsInterfaceDeclaration");
  function dM(e) {
    return (0, N.default)({
      type: "TSInterfaceBody",
      body: e
    });
  }
  s(dM, "tsInterfaceBody");
  function hM(e, t = null, r) {
    return (0, N.default)({
      type: "TSTypeAliasDeclaration",
      id: e,
      typeParameters: t,
      typeAnnotation: r
    });
  }
  s(hM, "tsTypeAliasDeclaration");
  function mM(e, t = null) {
    return (0, N.default)({
      type: "TSInstantiationExpression",
      expression: e,
      typeParameters: t
    });
  }
  s(mM, "tsInstantiationExpression");
  function yM(e, t) {
    return (0, N.default)({
      type: "TSAsExpression",
      expression: e,
      typeAnnotation: t
    });
  }
  s(yM, "tsAsExpression");
  function gM(e, t) {
    return (0, N.default)({
      type: "TSSatisfiesExpression",
      expression: e,
      typeAnnotation: t
    });
  }
  s(gM, "tsSatisfiesExpression");
  function bM(e, t) {
    return (0, N.default)({
      type: "TSTypeAssertion",
      typeAnnotation: e,
      expression: t
    });
  }
  s(bM, "tsTypeAssertion");
  function EM(e, t) {
    return (0, N.default)({
      type: "TSEnumDeclaration",
      id: e,
      members: t
    });
  }
  s(EM, "tsEnumDeclaration");
  function vM(e, t = null) {
    return (0, N.default)({
      type: "TSEnumMember",
      id: e,
      initializer: t
    });
  }
  s(vM, "tsEnumMember");
  function TM(e, t) {
    return (0, N.default)({
      type: "TSModuleDeclaration",
      id: e,
      body: t
    });
  }
  s(TM, "tsModuleDeclaration");
  function xM(e) {
    return (0, N.default)({
      type: "TSModuleBlock",
      body: e
    });
  }
  s(xM, "tsModuleBlock");
  function SM(e, t = null, r = null) {
    return (0, N.default)({
      type: "TSImportType",
      argument: e,
      qualifier: t,
      typeParameters: r
    });
  }
  s(SM, "tsImportType");
  function PM(e, t) {
    return (0, N.default)({
      type: "TSImportEqualsDeclaration",
      id: e,
      moduleReference: t,
      isExport: null
    });
  }
  s(PM, "tsImportEqualsDeclaration");
  function AM(e) {
    return (0, N.default)({
      type: "TSExternalModuleReference",
      expression: e
    });
  }
  s(AM, "tsExternalModuleReference");
  function CM(e) {
    return (0, N.default)({
      type: "TSNonNullExpression",
      expression: e
    });
  }
  s(CM, "tsNonNullExpression");
  function wM(e) {
    return (0, N.default)({
      type: "TSExportAssignment",
      expression: e
    });
  }
  s(wM, "tsExportAssignment");
  function DM(e) {
    return (0, N.default)({
      type: "TSNamespaceExportDeclaration",
      id: e
    });
  }
  s(DM, "tsNamespaceExportDeclaration");
  function IM(e) {
    return (0, N.default)({
      type: "TSTypeAnnotation",
      typeAnnotation: e
    });
  }
  s(IM, "tsTypeAnnotation");
  function _M(e) {
    return (0, N.default)({
      type: "TSTypeParameterInstantiation",
      params: e
    });
  }
  s(_M, "tsTypeParameterInstantiation");
  function OM(e) {
    return (0, N.default)({
      type: "TSTypeParameterDeclaration",
      params: e
    });
  }
  s(OM, "tsTypeParameterDeclaration");
  function NM(e = null, t = null, r) {
    return (0, N.default)({
      type: "TSTypeParameter",
      constraint: e,
      default: t,
      name: r
    });
  }
  s(NM, "tsTypeParameter");
  function BM(e) {
    return (0, Sl.default)("NumberLiteral", "NumericLiteral", "The node type "), kE(e);
  }
  s(BM, "NumberLiteral");
  function kM(e, t = "") {
    return (0, Sl.default)("RegexLiteral", "RegExpLiteral", "The node type "), FE(e, t);
  }
  s(kM, "RegexLiteral");
  function FM(e) {
    return (0, Sl.default)("RestProperty", "RestElement", "The node type "), jE(e);
  }
  s(FM, "RestProperty");
  function jM(e) {
    return (0, Sl.default)("SpreadProperty", "SpreadElement", "The node type "), LE(e);
  }
  s(jM, "SpreadProperty");
});

// ../node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js
var ME = T((wp) => {
  "use strict";
  Object.defineProperty(wp, "__esModule", {
    value: !0
  });
  wp.default = RM;
  var LM = nr(), MM = Se();
  function RM(e, t) {
    let r = e.value.split(/\r\n|\n|\r/), n = 0;
    for (let a = 0; a < r.length; a++)
      /[^ \t]/.exec(r[a]) && (n = a);
    let i = "";
    for (let a = 0; a < r.length; a++) {
      let o = r[a], l = a === 0, u = a === r.length - 1, c = a === n, f = o.replace(/\t/g, " ");
      l || (f = f.replace(/^ +/, "")), u || (f = f.replace(/ +$/, "")), f && (c || (f += " "), i += f);
    }
    i && t.push((0, MM.inherits)((0, LM.stringLiteral)(i), e));
  }
  s(RM, "cleanJSXElementLiteralChild");
});

// ../node_modules/@babel/types/lib/builders/react/buildChildren.js
var RE = T((Ip) => {
  "use strict";
  Object.defineProperty(Ip, "__esModule", {
    value: !0
  });
  Ip.default = UM;
  var Dp = vt(), qM = ME();
  function UM(e) {
    let t = [];
    for (let r = 0; r < e.children.length; r++) {
      let n = e.children[r];
      if ((0, Dp.isJSXText)(n)) {
        (0, qM.default)(n, t);
        continue;
      }
      (0, Dp.isJSXExpressionContainer)(n) && (n = n.expression), !(0, Dp.isJSXEmptyExpression)(n) && t.push(n);
    }
    return t;
  }
  s(UM, "buildChildren");
});

// ../node_modules/@babel/types/lib/validators/isNode.js
var Op = T((_p) => {
  "use strict";
  Object.defineProperty(_p, "__esModule", {
    value: !0
  });
  _p.default = $M;
  var VM = Ar();
  function $M(e) {
    return !!(e && VM.VISITOR_KEYS[e.type]);
  }
  s($M, "isNode");
});

// ../node_modules/@babel/types/lib/asserts/assertNode.js
var qE = T((Np) => {
  "use strict";
  Object.defineProperty(Np, "__esModule", {
    value: !0
  });
  Np.default = KM;
  var WM = Op();
  function KM(e) {
    if (!(0, WM.default)(e)) {
      var t;
      let r = (t = e?.type) != null ? t : JSON.stringify(e);
      throw new TypeError(`Not a valid node of type "${r}"`);
    }
  }
  s(KM, "assertNode");
});

// ../node_modules/@babel/types/lib/asserts/generated/index.js
var UE = T((S) => {
  "use strict";
  Object.defineProperty(S, "__esModule", {
    value: !0
  });
  S.assertAccessor = oV;
  S.assertAnyTypeAnnotation = wR;
  S.assertArgumentPlaceholder = rq;
  S.assertArrayExpression = HM;
  S.assertArrayPattern = K9;
  S.assertArrayTypeAnnotation = DR;
  S.assertArrowFunctionExpression = G9;
  S.assertAssignmentExpression = YM;
  S.assertAssignmentPattern = W9;
  S.assertAwaitExpression = mR;
  S.assertBigIntLiteral = gR;
  S.assertBinary = IU;
  S.assertBinaryExpression = zM;
  S.assertBindExpression = nq;
  S.assertBlock = NU;
  S.assertBlockParent = OU;
  S.assertBlockStatement = ZM;
  S.assertBooleanLiteral = v9;
  S.assertBooleanLiteralTypeAnnotation = _R;
  S.assertBooleanTypeAnnotation = IR;
  S.assertBreakStatement = e9;
  S.assertCallExpression = t9;
  S.assertCatchClause = r9;
  S.assertClass = nV;
  S.assertClassAccessorProperty = xR;
  S.assertClassBody = H9;
  S.assertClassDeclaration = z9;
  S.assertClassExpression = Y9;
  S.assertClassImplements = NR;
  S.assertClassMethod = oR;
  S.assertClassPrivateMethod = PR;
  S.assertClassPrivateProperty = SR;
  S.assertClassProperty = TR;
  S.assertCompletionStatement = FU;
  S.assertConditional = jU;
  S.assertConditionalExpression = n9;
  S.assertContinueStatement = s9;
  S.assertDebuggerStatement = i9;
  S.assertDecimalLiteral = cq;
  S.assertDeclaration = KU;
  S.assertDeclareClass = BR;
  S.assertDeclareExportAllDeclaration = VR;
  S.assertDeclareExportDeclaration = UR;
  S.assertDeclareFunction = kR;
  S.assertDeclareInterface = FR;
  S.assertDeclareModule = jR;
  S.assertDeclareModuleExports = LR;
  S.assertDeclareOpaqueType = RR;
  S.assertDeclareTypeAlias = MR;
  S.assertDeclareVariable = qR;
  S.assertDeclaredPredicate = $R;
  S.assertDecorator = iq;
  S.assertDirective = XM;
  S.assertDirectiveLiteral = QM;
  S.assertDoExpression = aq;
  S.assertDoWhileStatement = a9;
  S.assertEmptyStatement = o9;
  S.assertEmptyTypeAnnotation = e7;
  S.assertEnumBody = hV;
  S.assertEnumBooleanBody = D7;
  S.assertEnumBooleanMember = N7;
  S.assertEnumDeclaration = w7;
  S.assertEnumDefaultedMember = F7;
  S.assertEnumMember = mV;
  S.assertEnumNumberBody = I7;
  S.assertEnumNumberMember = B7;
  S.assertEnumStringBody = _7;
  S.assertEnumStringMember = k7;
  S.assertEnumSymbolBody = O7;
  S.assertExistsTypeAnnotation = WR;
  S.assertExportAllDeclaration = J9;
  S.assertExportDeclaration = iV;
  S.assertExportDefaultDeclaration = X9;
  S.assertExportDefaultSpecifier = oq;
  S.assertExportNamedDeclaration = Q9;
  S.assertExportNamespaceSpecifier = bR;
  S.assertExportSpecifier = Z9;
  S.assertExpression = DU;
  S.assertExpressionStatement = l9;
  S.assertExpressionWrapper = RU;
  S.assertFile = u9;
  S.assertFlow = uV;
  S.assertFlowBaseAnnotation = fV;
  S.assertFlowDeclaration = pV;
  S.assertFlowPredicate = dV;
  S.assertFlowType = cV;
  S.assertFor = qU;
  S.assertForInStatement = c9;
  S.assertForOfStatement = eR;
  S.assertForStatement = f9;
  S.assertForXStatement = UU;
  S.assertFunction = VU;
  S.assertFunctionDeclaration = p9;
  S.assertFunctionExpression = d9;
  S.assertFunctionParent = $U;
  S.assertFunctionTypeAnnotation = KR;
  S.assertFunctionTypeParam = GR;
  S.assertGenericTypeAnnotation = HR;
  S.assertIdentifier = h9;
  S.assertIfStatement = m9;
  S.assertImmutable = JU;
  S.assertImport = yR;
  S.assertImportAttribute = sq;
  S.assertImportDeclaration = tR;
  S.assertImportDefaultSpecifier = rR;
  S.assertImportExpression = iR;
  S.assertImportNamespaceSpecifier = nR;
  S.assertImportOrExportDeclaration = sV;
  S.assertImportSpecifier = sR;
  S.assertIndexedAccessType = j7;
  S.assertInferredPredicate = YR;
  S.assertInterfaceDeclaration = JR;
  S.assertInterfaceExtends = zR;
  S.assertInterfaceTypeAnnotation = XR;
  S.assertInterpreterDirective = JM;
  S.assertIntersectionTypeAnnotation = QR;
  S.assertJSX = yV;
  S.assertJSXAttribute = M7;
  S.assertJSXClosingElement = R7;
  S.assertJSXClosingFragment = Q7;
  S.assertJSXElement = q7;
  S.assertJSXEmptyExpression = U7;
  S.assertJSXExpressionContainer = V7;
  S.assertJSXFragment = J7;
  S.assertJSXIdentifier = W7;
  S.assertJSXMemberExpression = K7;
  S.assertJSXNamespacedName = G7;
  S.assertJSXOpeningElement = H7;
  S.assertJSXOpeningFragment = X7;
  S.assertJSXSpreadAttribute = Y7;
  S.assertJSXSpreadChild = $7;
  S.assertJSXText = z7;
  S.assertLVal = HU;
  S.assertLabeledStatement = y9;
  S.assertLiteral = zU;
  S.assertLogicalExpression = x9;
  S.assertLoop = LU;
  S.assertMemberExpression = S9;
  S.assertMetaProperty = aR;
  S.assertMethod = QU;
  S.assertMiscellaneous = gV;
  S.assertMixedTypeAnnotation = ZR;
  S.assertModuleDeclaration = CV;
  S.assertModuleExpression = fq;
  S.assertModuleSpecifier = aV;
  S.assertNewExpression = P9;
  S.assertNoop = Z7;
  S.assertNullLiteral = E9;
  S.assertNullLiteralTypeAnnotation = OR;
  S.assertNullableTypeAnnotation = t7;
  S.assertNumberLiteral = xV;
  S.assertNumberLiteralTypeAnnotation = r7;
  S.assertNumberTypeAnnotation = n7;
  S.assertNumericLiteral = b9;
  S.assertObjectExpression = C9;
  S.assertObjectMember = ZU;
  S.assertObjectMethod = w9;
  S.assertObjectPattern = lR;
  S.assertObjectProperty = D9;
  S.assertObjectTypeAnnotation = s7;
  S.assertObjectTypeCallProperty = a7;
  S.assertObjectTypeIndexer = o7;
  S.assertObjectTypeInternalSlot = i7;
  S.assertObjectTypeProperty = l7;
  S.assertObjectTypeSpreadProperty = u7;
  S.assertOpaqueType = c7;
  S.assertOptionalCallExpression = vR;
  S.assertOptionalIndexedAccessType = L7;
  S.assertOptionalMemberExpression = ER;
  S.assertParenthesizedExpression = N9;
  S.assertPattern = rV;
  S.assertPatternLike = GU;
  S.assertPipelineBareFunction = hq;
  S.assertPipelinePrimaryTopicReference = mq;
  S.assertPipelineTopicExpression = dq;
  S.assertPlaceholder = eq;
  S.assertPrivate = lV;
  S.assertPrivateName = AR;
  S.assertProgram = A9;
  S.assertProperty = eV;
  S.assertPureish = WU;
  S.assertQualifiedTypeIdentifier = f7;
  S.assertRecordExpression = lq;
  S.assertRegExpLiteral = T9;
  S.assertRegexLiteral = SV;
  S.assertRestElement = I9;
  S.assertRestProperty = PV;
  S.assertReturnStatement = _9;
  S.assertScopable = _U;
  S.assertSequenceExpression = O9;
  S.assertSpreadElement = uR;
  S.assertSpreadProperty = AV;
  S.assertStandardized = wU;
  S.assertStatement = BU;
  S.assertStaticBlock = CR;
  S.assertStringLiteral = g9;
  S.assertStringLiteralTypeAnnotation = p7;
  S.assertStringTypeAnnotation = d7;
  S.assertSuper = cR;
  S.assertSwitchCase = B9;
  S.assertSwitchStatement = k9;
  S.assertSymbolTypeAnnotation = h7;
  S.assertTSAnyKeyword = Aq;
  S.assertTSArrayType = Kq;
  S.assertTSAsExpression = cU;
  S.assertTSBaseType = TV;
  S.assertTSBigIntKeyword = wq;
  S.assertTSBooleanKeyword = Cq;
  S.assertTSCallSignatureDeclaration = vq;
  S.assertTSConditionalType = Qq;
  S.assertTSConstructSignatureDeclaration = Tq;
  S.assertTSConstructorType = qq;
  S.assertTSDeclareFunction = gq;
  S.assertTSDeclareMethod = bq;
  S.assertTSEntityName = YU;
  S.assertTSEnumDeclaration = dU;
  S.assertTSEnumMember = hU;
  S.assertTSExportAssignment = TU;
  S.assertTSExpressionWithTypeArguments = iU;
  S.assertTSExternalModuleReference = EU;
  S.assertTSFunctionType = Rq;
  S.assertTSImportEqualsDeclaration = bU;
  S.assertTSImportType = gU;
  S.assertTSIndexSignature = Pq;
  S.assertTSIndexedAccessType = rU;
  S.assertTSInferType = Zq;
  S.assertTSInstantiationExpression = uU;
  S.assertTSInterfaceBody = oU;
  S.assertTSInterfaceDeclaration = aU;
  S.assertTSIntersectionType = Xq;
  S.assertTSIntrinsicKeyword = Dq;
  S.assertTSLiteralType = sU;
  S.assertTSMappedType = nU;
  S.assertTSMethodSignature = Sq;
  S.assertTSModuleBlock = yU;
  S.assertTSModuleDeclaration = mU;
  S.assertTSNamedTupleMember = zq;
  S.assertTSNamespaceExportDeclaration = xU;
  S.assertTSNeverKeyword = Iq;
  S.assertTSNonNullExpression = vU;
  S.assertTSNullKeyword = _q;
  S.assertTSNumberKeyword = Oq;
  S.assertTSObjectKeyword = Nq;
  S.assertTSOptionalType = Hq;
  S.assertTSParameterProperty = yq;
  S.assertTSParenthesizedType = eU;
  S.assertTSPropertySignature = xq;
  S.assertTSQualifiedName = Eq;
  S.assertTSRestType = Yq;
  S.assertTSSatisfiesExpression = fU;
  S.assertTSStringKeyword = Bq;
  S.assertTSSymbolKeyword = kq;
  S.assertTSThisType = Mq;
  S.assertTSTupleType = Gq;
  S.assertTSType = vV;
  S.assertTSTypeAliasDeclaration = lU;
  S.assertTSTypeAnnotation = SU;
  S.assertTSTypeAssertion = pU;
  S.assertTSTypeElement = EV;
  S.assertTSTypeLiteral = Wq;
  S.assertTSTypeOperator = tU;
  S.assertTSTypeParameter = CU;
  S.assertTSTypeParameterDeclaration = AU;
  S.assertTSTypeParameterInstantiation = PU;
  S.assertTSTypePredicate = Vq;
  S.assertTSTypeQuery = $q;
  S.assertTSTypeReference = Uq;
  S.assertTSUndefinedKeyword = Fq;
  S.assertTSUnionType = Jq;
  S.assertTSUnknownKeyword = jq;
  S.assertTSVoidKeyword = Lq;
  S.assertTaggedTemplateExpression = fR;
  S.assertTemplateElement = pR;
  S.assertTemplateLiteral = dR;
  S.assertTerminatorless = kU;
  S.assertThisExpression = F9;
  S.assertThisTypeAnnotation = m7;
  S.assertThrowStatement = j9;
  S.assertTopicReference = pq;
  S.assertTryStatement = L9;
  S.assertTupleExpression = uq;
  S.assertTupleTypeAnnotation = y7;
  S.assertTypeAlias = b7;
  S.assertTypeAnnotation = E7;
  S.assertTypeCastExpression = v7;
  S.assertTypeParameter = T7;
  S.assertTypeParameterDeclaration = x7;
  S.assertTypeParameterInstantiation = S7;
  S.assertTypeScript = bV;
  S.assertTypeofTypeAnnotation = g7;
  S.assertUnaryExpression = M9;
  S.assertUnaryLike = tV;
  S.assertUnionTypeAnnotation = P7;
  S.assertUpdateExpression = R9;
  S.assertUserWhitespacable = XU;
  S.assertV8IntrinsicIdentifier = tq;
  S.assertVariableDeclaration = q9;
  S.assertVariableDeclarator = U9;
  S.assertVariance = A7;
  S.assertVoidTypeAnnotation = C7;
  S.assertWhile = MU;
  S.assertWhileStatement = V9;
  S.assertWithStatement = $9;
  S.assertYieldExpression = hR;
  var GM = mi(), ja = Aa();
  function P(e, t, r) {
    if (!(0, GM.default)(e, t, r))
      throw new Error(`Expected type "${e}" with option ${JSON.stringify(r)}, but instead got "${t.type}".`);
  }
  s(P, "assert");
  function HM(e, t) {
    P("ArrayExpression", e, t);
  }
  s(HM, "assertArrayExpression");
  function YM(e, t) {
    P("AssignmentExpression", e, t);
  }
  s(YM, "assertAssignmentExpression");
  function zM(e, t) {
    P("BinaryExpression", e, t);
  }
  s(zM, "assertBinaryExpression");
  function JM(e, t) {
    P("InterpreterDirective", e, t);
  }
  s(JM, "assertInterpreterDirective");
  function XM(e, t) {
    P("Directive", e, t);
  }
  s(XM, "assertDirective");
  function QM(e, t) {
    P("DirectiveLiteral", e, t);
  }
  s(QM, "assertDirectiveLiteral");
  function ZM(e, t) {
    P("BlockStatement", e, t);
  }
  s(ZM, "assertBlockStatement");
  function e9(e, t) {
    P("BreakStatement", e, t);
  }
  s(e9, "assertBreakStatement");
  function t9(e, t) {
    P("CallExpression", e, t);
  }
  s(t9, "assertCallExpression");
  function r9(e, t) {
    P("CatchClause", e, t);
  }
  s(r9, "assertCatchClause");
  function n9(e, t) {
    P("ConditionalExpression", e, t);
  }
  s(n9, "assertConditionalExpression");
  function s9(e, t) {
    P("ContinueStatement", e, t);
  }
  s(s9, "assertContinueStatement");
  function i9(e, t) {
    P("DebuggerStatement", e, t);
  }
  s(i9, "assertDebuggerStatement");
  function a9(e, t) {
    P("DoWhileStatement", e, t);
  }
  s(a9, "assertDoWhileStatement");
  function o9(e, t) {
    P("EmptyStatement", e, t);
  }
  s(o9, "assertEmptyStatement");
  function l9(e, t) {
    P("ExpressionStatement", e, t);
  }
  s(l9, "assertExpressionStatement");
  function u9(e, t) {
    P("File", e, t);
  }
  s(u9, "assertFile");
  function c9(e, t) {
    P("ForInStatement", e, t);
  }
  s(c9, "assertForInStatement");
  function f9(e, t) {
    P("ForStatement", e, t);
  }
  s(f9, "assertForStatement");
  function p9(e, t) {
    P("FunctionDeclaration", e, t);
  }
  s(p9, "assertFunctionDeclaration");
  function d9(e, t) {
    P("FunctionExpression", e, t);
  }
  s(d9, "assertFunctionExpression");
  function h9(e, t) {
    P("Identifier", e, t);
  }
  s(h9, "assertIdentifier");
  function m9(e, t) {
    P("IfStatement", e, t);
  }
  s(m9, "assertIfStatement");
  function y9(e, t) {
    P("LabeledStatement", e, t);
  }
  s(y9, "assertLabeledStatement");
  function g9(e, t) {
    P("StringLiteral", e, t);
  }
  s(g9, "assertStringLiteral");
  function b9(e, t) {
    P("NumericLiteral", e, t);
  }
  s(b9, "assertNumericLiteral");
  function E9(e, t) {
    P("NullLiteral", e, t);
  }
  s(E9, "assertNullLiteral");
  function v9(e, t) {
    P("BooleanLiteral", e, t);
  }
  s(v9, "assertBooleanLiteral");
  function T9(e, t) {
    P("RegExpLiteral", e, t);
  }
  s(T9, "assertRegExpLiteral");
  function x9(e, t) {
    P("LogicalExpression", e, t);
  }
  s(x9, "assertLogicalExpression");
  function S9(e, t) {
    P("MemberExpression", e, t);
  }
  s(S9, "assertMemberExpression");
  function P9(e, t) {
    P("NewExpression", e, t);
  }
  s(P9, "assertNewExpression");
  function A9(e, t) {
    P("Program", e, t);
  }
  s(A9, "assertProgram");
  function C9(e, t) {
    P("ObjectExpression", e, t);
  }
  s(C9, "assertObjectExpression");
  function w9(e, t) {
    P("ObjectMethod", e, t);
  }
  s(w9, "assertObjectMethod");
  function D9(e, t) {
    P("ObjectProperty", e, t);
  }
  s(D9, "assertObjectProperty");
  function I9(e, t) {
    P("RestElement", e, t);
  }
  s(I9, "assertRestElement");
  function _9(e, t) {
    P("ReturnStatement", e, t);
  }
  s(_9, "assertReturnStatement");
  function O9(e, t) {
    P("SequenceExpression", e, t);
  }
  s(O9, "assertSequenceExpression");
  function N9(e, t) {
    P("ParenthesizedExpression", e, t);
  }
  s(N9, "assertParenthesizedExpression");
  function B9(e, t) {
    P("SwitchCase", e, t);
  }
  s(B9, "assertSwitchCase");
  function k9(e, t) {
    P("SwitchStatement", e, t);
  }
  s(k9, "assertSwitchStatement");
  function F9(e, t) {
    P("ThisExpression", e, t);
  }
  s(F9, "assertThisExpression");
  function j9(e, t) {
    P("ThrowStatement", e, t);
  }
  s(j9, "assertThrowStatement");
  function L9(e, t) {
    P("TryStatement", e, t);
  }
  s(L9, "assertTryStatement");
  function M9(e, t) {
    P("UnaryExpression", e, t);
  }
  s(M9, "assertUnaryExpression");
  function R9(e, t) {
    P("UpdateExpression", e, t);
  }
  s(R9, "assertUpdateExpression");
  function q9(e, t) {
    P("VariableDeclaration", e, t);
  }
  s(q9, "assertVariableDeclaration");
  function U9(e, t) {
    P("VariableDeclarator", e, t);
  }
  s(U9, "assertVariableDeclarator");
  function V9(e, t) {
    P("WhileStatement", e, t);
  }
  s(V9, "assertWhileStatement");
  function $9(e, t) {
    P("WithStatement", e, t);
  }
  s($9, "assertWithStatement");
  function W9(e, t) {
    P("AssignmentPattern", e, t);
  }
  s(W9, "assertAssignmentPattern");
  function K9(e, t) {
    P("ArrayPattern", e, t);
  }
  s(K9, "assertArrayPattern");
  function G9(e, t) {
    P("ArrowFunctionExpression", e, t);
  }
  s(G9, "assertArrowFunctionExpression");
  function H9(e, t) {
    P("ClassBody", e, t);
  }
  s(H9, "assertClassBody");
  function Y9(e, t) {
    P("ClassExpression", e, t);
  }
  s(Y9, "assertClassExpression");
  function z9(e, t) {
    P("ClassDeclaration", e, t);
  }
  s(z9, "assertClassDeclaration");
  function J9(e, t) {
    P("ExportAllDeclaration", e, t);
  }
  s(J9, "assertExportAllDeclaration");
  function X9(e, t) {
    P("ExportDefaultDeclaration", e, t);
  }
  s(X9, "assertExportDefaultDeclaration");
  function Q9(e, t) {
    P("ExportNamedDeclaration", e, t);
  }
  s(Q9, "assertExportNamedDeclaration");
  function Z9(e, t) {
    P("ExportSpecifier", e, t);
  }
  s(Z9, "assertExportSpecifier");
  function eR(e, t) {
    P("ForOfStatement", e, t);
  }
  s(eR, "assertForOfStatement");
  function tR(e, t) {
    P("ImportDeclaration", e, t);
  }
  s(tR, "assertImportDeclaration");
  function rR(e, t) {
    P("ImportDefaultSpecifier", e, t);
  }
  s(rR, "assertImportDefaultSpecifier");
  function nR(e, t) {
    P("ImportNamespaceSpecifier", e, t);
  }
  s(nR, "assertImportNamespaceSpecifier");
  function sR(e, t) {
    P("ImportSpecifier", e, t);
  }
  s(sR, "assertImportSpecifier");
  function iR(e, t) {
    P("ImportExpression", e, t);
  }
  s(iR, "assertImportExpression");
  function aR(e, t) {
    P("MetaProperty", e, t);
  }
  s(aR, "assertMetaProperty");
  function oR(e, t) {
    P("ClassMethod", e, t);
  }
  s(oR, "assertClassMethod");
  function lR(e, t) {
    P("ObjectPattern", e, t);
  }
  s(lR, "assertObjectPattern");
  function uR(e, t) {
    P("SpreadElement", e, t);
  }
  s(uR, "assertSpreadElement");
  function cR(e, t) {
    P("Super", e, t);
  }
  s(cR, "assertSuper");
  function fR(e, t) {
    P("TaggedTemplateExpression", e, t);
  }
  s(fR, "assertTaggedTemplateExpression");
  function pR(e, t) {
    P("TemplateElement", e, t);
  }
  s(pR, "assertTemplateElement");
  function dR(e, t) {
    P("TemplateLiteral", e, t);
  }
  s(dR, "assertTemplateLiteral");
  function hR(e, t) {
    P("YieldExpression", e, t);
  }
  s(hR, "assertYieldExpression");
  function mR(e, t) {
    P("AwaitExpression", e, t);
  }
  s(mR, "assertAwaitExpression");
  function yR(e, t) {
    P("Import", e, t);
  }
  s(yR, "assertImport");
  function gR(e, t) {
    P("BigIntLiteral", e, t);
  }
  s(gR, "assertBigIntLiteral");
  function bR(e, t) {
    P("ExportNamespaceSpecifier", e, t);
  }
  s(bR, "assertExportNamespaceSpecifier");
  function ER(e, t) {
    P("OptionalMemberExpression", e, t);
  }
  s(ER, "assertOptionalMemberExpression");
  function vR(e, t) {
    P("OptionalCallExpression", e, t);
  }
  s(vR, "assertOptionalCallExpression");
  function TR(e, t) {
    P("ClassProperty", e, t);
  }
  s(TR, "assertClassProperty");
  function xR(e, t) {
    P("ClassAccessorProperty", e, t);
  }
  s(xR, "assertClassAccessorProperty");
  function SR(e, t) {
    P("ClassPrivateProperty", e, t);
  }
  s(SR, "assertClassPrivateProperty");
  function PR(e, t) {
    P("ClassPrivateMethod", e, t);
  }
  s(PR, "assertClassPrivateMethod");
  function AR(e, t) {
    P("PrivateName", e, t);
  }
  s(AR, "assertPrivateName");
  function CR(e, t) {
    P("StaticBlock", e, t);
  }
  s(CR, "assertStaticBlock");
  function wR(e, t) {
    P("AnyTypeAnnotation", e, t);
  }
  s(wR, "assertAnyTypeAnnotation");
  function DR(e, t) {
    P("ArrayTypeAnnotation", e, t);
  }
  s(DR, "assertArrayTypeAnnotation");
  function IR(e, t) {
    P("BooleanTypeAnnotation", e, t);
  }
  s(IR, "assertBooleanTypeAnnotation");
  function _R(e, t) {
    P("BooleanLiteralTypeAnnotation", e, t);
  }
  s(_R, "assertBooleanLiteralTypeAnnotation");
  function OR(e, t) {
    P("NullLiteralTypeAnnotation", e, t);
  }
  s(OR, "assertNullLiteralTypeAnnotation");
  function NR(e, t) {
    P("ClassImplements", e, t);
  }
  s(NR, "assertClassImplements");
  function BR(e, t) {
    P("DeclareClass", e, t);
  }
  s(BR, "assertDeclareClass");
  function kR(e, t) {
    P("DeclareFunction", e, t);
  }
  s(kR, "assertDeclareFunction");
  function FR(e, t) {
    P("DeclareInterface", e, t);
  }
  s(FR, "assertDeclareInterface");
  function jR(e, t) {
    P("DeclareModule", e, t);
  }
  s(jR, "assertDeclareModule");
  function LR(e, t) {
    P("DeclareModuleExports", e, t);
  }
  s(LR, "assertDeclareModuleExports");
  function MR(e, t) {
    P("DeclareTypeAlias", e, t);
  }
  s(MR, "assertDeclareTypeAlias");
  function RR(e, t) {
    P("DeclareOpaqueType", e, t);
  }
  s(RR, "assertDeclareOpaqueType");
  function qR(e, t) {
    P("DeclareVariable", e, t);
  }
  s(qR, "assertDeclareVariable");
  function UR(e, t) {
    P("DeclareExportDeclaration", e, t);
  }
  s(UR, "assertDeclareExportDeclaration");
  function VR(e, t) {
    P("DeclareExportAllDeclaration", e, t);
  }
  s(VR, "assertDeclareExportAllDeclaration");
  function $R(e, t) {
    P("DeclaredPredicate", e, t);
  }
  s($R, "assertDeclaredPredicate");
  function WR(e, t) {
    P("ExistsTypeAnnotation", e, t);
  }
  s(WR, "assertExistsTypeAnnotation");
  function KR(e, t) {
    P("FunctionTypeAnnotation", e, t);
  }
  s(KR, "assertFunctionTypeAnnotation");
  function GR(e, t) {
    P("FunctionTypeParam", e, t);
  }
  s(GR, "assertFunctionTypeParam");
  function HR(e, t) {
    P("GenericTypeAnnotation", e, t);
  }
  s(HR, "assertGenericTypeAnnotation");
  function YR(e, t) {
    P("InferredPredicate", e, t);
  }
  s(YR, "assertInferredPredicate");
  function zR(e, t) {
    P("InterfaceExtends", e, t);
  }
  s(zR, "assertInterfaceExtends");
  function JR(e, t) {
    P("InterfaceDeclaration", e, t);
  }
  s(JR, "assertInterfaceDeclaration");
  function XR(e, t) {
    P("InterfaceTypeAnnotation", e, t);
  }
  s(XR, "assertInterfaceTypeAnnotation");
  function QR(e, t) {
    P("IntersectionTypeAnnotation", e, t);
  }
  s(QR, "assertIntersectionTypeAnnotation");
  function ZR(e, t) {
    P("MixedTypeAnnotation", e, t);
  }
  s(ZR, "assertMixedTypeAnnotation");
  function e7(e, t) {
    P("EmptyTypeAnnotation", e, t);
  }
  s(e7, "assertEmptyTypeAnnotation");
  function t7(e, t) {
    P("NullableTypeAnnotation", e, t);
  }
  s(t7, "assertNullableTypeAnnotation");
  function r7(e, t) {
    P("NumberLiteralTypeAnnotation", e, t);
  }
  s(r7, "assertNumberLiteralTypeAnnotation");
  function n7(e, t) {
    P("NumberTypeAnnotation", e, t);
  }
  s(n7, "assertNumberTypeAnnotation");
  function s7(e, t) {
    P("ObjectTypeAnnotation", e, t);
  }
  s(s7, "assertObjectTypeAnnotation");
  function i7(e, t) {
    P("ObjectTypeInternalSlot", e, t);
  }
  s(i7, "assertObjectTypeInternalSlot");
  function a7(e, t) {
    P("ObjectTypeCallProperty", e, t);
  }
  s(a7, "assertObjectTypeCallProperty");
  function o7(e, t) {
    P("ObjectTypeIndexer", e, t);
  }
  s(o7, "assertObjectTypeIndexer");
  function l7(e, t) {
    P("ObjectTypeProperty", e, t);
  }
  s(l7, "assertObjectTypeProperty");
  function u7(e, t) {
    P("ObjectTypeSpreadProperty", e, t);
  }
  s(u7, "assertObjectTypeSpreadProperty");
  function c7(e, t) {
    P("OpaqueType", e, t);
  }
  s(c7, "assertOpaqueType");
  function f7(e, t) {
    P("QualifiedTypeIdentifier", e, t);
  }
  s(f7, "assertQualifiedTypeIdentifier");
  function p7(e, t) {
    P("StringLiteralTypeAnnotation", e, t);
  }
  s(p7, "assertStringLiteralTypeAnnotation");
  function d7(e, t) {
    P("StringTypeAnnotation", e, t);
  }
  s(d7, "assertStringTypeAnnotation");
  function h7(e, t) {
    P("SymbolTypeAnnotation", e, t);
  }
  s(h7, "assertSymbolTypeAnnotation");
  function m7(e, t) {
    P("ThisTypeAnnotation", e, t);
  }
  s(m7, "assertThisTypeAnnotation");
  function y7(e, t) {
    P("TupleTypeAnnotation", e, t);
  }
  s(y7, "assertTupleTypeAnnotation");
  function g7(e, t) {
    P("TypeofTypeAnnotation", e, t);
  }
  s(g7, "assertTypeofTypeAnnotation");
  function b7(e, t) {
    P("TypeAlias", e, t);
  }
  s(b7, "assertTypeAlias");
  function E7(e, t) {
    P("TypeAnnotation", e, t);
  }
  s(E7, "assertTypeAnnotation");
  function v7(e, t) {
    P("TypeCastExpression", e, t);
  }
  s(v7, "assertTypeCastExpression");
  function T7(e, t) {
    P("TypeParameter", e, t);
  }
  s(T7, "assertTypeParameter");
  function x7(e, t) {
    P("TypeParameterDeclaration", e, t);
  }
  s(x7, "assertTypeParameterDeclaration");
  function S7(e, t) {
    P("TypeParameterInstantiation", e, t);
  }
  s(S7, "assertTypeParameterInstantiation");
  function P7(e, t) {
    P("UnionTypeAnnotation", e, t);
  }
  s(P7, "assertUnionTypeAnnotation");
  function A7(e, t) {
    P("Variance", e, t);
  }
  s(A7, "assertVariance");
  function C7(e, t) {
    P("VoidTypeAnnotation", e, t);
  }
  s(C7, "assertVoidTypeAnnotation");
  function w7(e, t) {
    P("EnumDeclaration", e, t);
  }
  s(w7, "assertEnumDeclaration");
  function D7(e, t) {
    P("EnumBooleanBody", e, t);
  }
  s(D7, "assertEnumBooleanBody");
  function I7(e, t) {
    P("EnumNumberBody", e, t);
  }
  s(I7, "assertEnumNumberBody");
  function _7(e, t) {
    P("EnumStringBody", e, t);
  }
  s(_7, "assertEnumStringBody");
  function O7(e, t) {
    P("EnumSymbolBody", e, t);
  }
  s(O7, "assertEnumSymbolBody");
  function N7(e, t) {
    P("EnumBooleanMember", e, t);
  }
  s(N7, "assertEnumBooleanMember");
  function B7(e, t) {
    P("EnumNumberMember", e, t);
  }
  s(B7, "assertEnumNumberMember");
  function k7(e, t) {
    P("EnumStringMember", e, t);
  }
  s(k7, "assertEnumStringMember");
  function F7(e, t) {
    P("EnumDefaultedMember", e, t);
  }
  s(F7, "assertEnumDefaultedMember");
  function j7(e, t) {
    P("IndexedAccessType", e, t);
  }
  s(j7, "assertIndexedAccessType");
  function L7(e, t) {
    P("OptionalIndexedAccessType", e, t);
  }
  s(L7, "assertOptionalIndexedAccessType");
  function M7(e, t) {
    P("JSXAttribute", e, t);
  }
  s(M7, "assertJSXAttribute");
  function R7(e, t) {
    P("JSXClosingElement", e, t);
  }
  s(R7, "assertJSXClosingElement");
  function q7(e, t) {
    P("JSXElement", e, t);
  }
  s(q7, "assertJSXElement");
  function U7(e, t) {
    P("JSXEmptyExpression", e, t);
  }
  s(U7, "assertJSXEmptyExpression");
  function V7(e, t) {
    P("JSXExpressionContainer", e, t);
  }
  s(V7, "assertJSXExpressionContainer");
  function $7(e, t) {
    P("JSXSpreadChild", e, t);
  }
  s($7, "assertJSXSpreadChild");
  function W7(e, t) {
    P("JSXIdentifier", e, t);
  }
  s(W7, "assertJSXIdentifier");
  function K7(e, t) {
    P("JSXMemberExpression", e, t);
  }
  s(K7, "assertJSXMemberExpression");
  function G7(e, t) {
    P("JSXNamespacedName", e, t);
  }
  s(G7, "assertJSXNamespacedName");
  function H7(e, t) {
    P("JSXOpeningElement", e, t);
  }
  s(H7, "assertJSXOpeningElement");
  function Y7(e, t) {
    P("JSXSpreadAttribute", e, t);
  }
  s(Y7, "assertJSXSpreadAttribute");
  function z7(e, t) {
    P("JSXText", e, t);
  }
  s(z7, "assertJSXText");
  function J7(e, t) {
    P("JSXFragment", e, t);
  }
  s(J7, "assertJSXFragment");
  function X7(e, t) {
    P("JSXOpeningFragment", e, t);
  }
  s(X7, "assertJSXOpeningFragment");
  function Q7(e, t) {
    P("JSXClosingFragment", e, t);
  }
  s(Q7, "assertJSXClosingFragment");
  function Z7(e, t) {
    P("Noop", e, t);
  }
  s(Z7, "assertNoop");
  function eq(e, t) {
    P("Placeholder", e, t);
  }
  s(eq, "assertPlaceholder");
  function tq(e, t) {
    P("V8IntrinsicIdentifier", e, t);
  }
  s(tq, "assertV8IntrinsicIdentifier");
  function rq(e, t) {
    P("ArgumentPlaceholder", e, t);
  }
  s(rq, "assertArgumentPlaceholder");
  function nq(e, t) {
    P("BindExpression", e, t);
  }
  s(nq, "assertBindExpression");
  function sq(e, t) {
    P("ImportAttribute", e, t);
  }
  s(sq, "assertImportAttribute");
  function iq(e, t) {
    P("Decorator", e, t);
  }
  s(iq, "assertDecorator");
  function aq(e, t) {
    P("DoExpression", e, t);
  }
  s(aq, "assertDoExpression");
  function oq(e, t) {
    P("ExportDefaultSpecifier", e, t);
  }
  s(oq, "assertExportDefaultSpecifier");
  function lq(e, t) {
    P("RecordExpression", e, t);
  }
  s(lq, "assertRecordExpression");
  function uq(e, t) {
    P("TupleExpression", e, t);
  }
  s(uq, "assertTupleExpression");
  function cq(e, t) {
    P("DecimalLiteral", e, t);
  }
  s(cq, "assertDecimalLiteral");
  function fq(e, t) {
    P("ModuleExpression", e, t);
  }
  s(fq, "assertModuleExpression");
  function pq(e, t) {
    P("TopicReference", e, t);
  }
  s(pq, "assertTopicReference");
  function dq(e, t) {
    P("PipelineTopicExpression", e, t);
  }
  s(dq, "assertPipelineTopicExpression");
  function hq(e, t) {
    P("PipelineBareFunction", e, t);
  }
  s(hq, "assertPipelineBareFunction");
  function mq(e, t) {
    P("PipelinePrimaryTopicReference", e, t);
  }
  s(mq, "assertPipelinePrimaryTopicReference");
  function yq(e, t) {
    P("TSParameterProperty", e, t);
  }
  s(yq, "assertTSParameterProperty");
  function gq(e, t) {
    P("TSDeclareFunction", e, t);
  }
  s(gq, "assertTSDeclareFunction");
  function bq(e, t) {
    P("TSDeclareMethod", e, t);
  }
  s(bq, "assertTSDeclareMethod");
  function Eq(e, t) {
    P("TSQualifiedName", e, t);
  }
  s(Eq, "assertTSQualifiedName");
  function vq(e, t) {
    P("TSCallSignatureDeclaration", e, t);
  }
  s(vq, "assertTSCallSignatureDeclaration");
  function Tq(e, t) {
    P("TSConstructSignatureDeclaration", e, t);
  }
  s(Tq, "assertTSConstructSignatureDeclaration");
  function xq(e, t) {
    P("TSPropertySignature", e, t);
  }
  s(xq, "assertTSPropertySignature");
  function Sq(e, t) {
    P("TSMethodSignature", e, t);
  }
  s(Sq, "assertTSMethodSignature");
  function Pq(e, t) {
    P("TSIndexSignature", e, t);
  }
  s(Pq, "assertTSIndexSignature");
  function Aq(e, t) {
    P("TSAnyKeyword", e, t);
  }
  s(Aq, "assertTSAnyKeyword");
  function Cq(e, t) {
    P("TSBooleanKeyword", e, t);
  }
  s(Cq, "assertTSBooleanKeyword");
  function wq(e, t) {
    P("TSBigIntKeyword", e, t);
  }
  s(wq, "assertTSBigIntKeyword");
  function Dq(e, t) {
    P("TSIntrinsicKeyword", e, t);
  }
  s(Dq, "assertTSIntrinsicKeyword");
  function Iq(e, t) {
    P("TSNeverKeyword", e, t);
  }
  s(Iq, "assertTSNeverKeyword");
  function _q(e, t) {
    P("TSNullKeyword", e, t);
  }
  s(_q, "assertTSNullKeyword");
  function Oq(e, t) {
    P("TSNumberKeyword", e, t);
  }
  s(Oq, "assertTSNumberKeyword");
  function Nq(e, t) {
    P("TSObjectKeyword", e, t);
  }
  s(Nq, "assertTSObjectKeyword");
  function Bq(e, t) {
    P("TSStringKeyword", e, t);
  }
  s(Bq, "assertTSStringKeyword");
  function kq(e, t) {
    P("TSSymbolKeyword", e, t);
  }
  s(kq, "assertTSSymbolKeyword");
  function Fq(e, t) {
    P("TSUndefinedKeyword", e, t);
  }
  s(Fq, "assertTSUndefinedKeyword");
  function jq(e, t) {
    P("TSUnknownKeyword", e, t);
  }
  s(jq, "assertTSUnknownKeyword");
  function Lq(e, t) {
    P("TSVoidKeyword", e, t);
  }
  s(Lq, "assertTSVoidKeyword");
  function Mq(e, t) {
    P("TSThisType", e, t);
  }
  s(Mq, "assertTSThisType");
  function Rq(e, t) {
    P("TSFunctionType", e, t);
  }
  s(Rq, "assertTSFunctionType");
  function qq(e, t) {
    P("TSConstructorType", e, t);
  }
  s(qq, "assertTSConstructorType");
  function Uq(e, t) {
    P("TSTypeReference", e, t);
  }
  s(Uq, "assertTSTypeReference");
  function Vq(e, t) {
    P("TSTypePredicate", e, t);
  }
  s(Vq, "assertTSTypePredicate");
  function $q(e, t) {
    P("TSTypeQuery", e, t);
  }
  s($q, "assertTSTypeQuery");
  function Wq(e, t) {
    P("TSTypeLiteral", e, t);
  }
  s(Wq, "assertTSTypeLiteral");
  function Kq(e, t) {
    P("TSArrayType", e, t);
  }
  s(Kq, "assertTSArrayType");
  function Gq(e, t) {
    P("TSTupleType", e, t);
  }
  s(Gq, "assertTSTupleType");
  function Hq(e, t) {
    P("TSOptionalType", e, t);
  }
  s(Hq, "assertTSOptionalType");
  function Yq(e, t) {
    P("TSRestType", e, t);
  }
  s(Yq, "assertTSRestType");
  function zq(e, t) {
    P("TSNamedTupleMember", e, t);
  }
  s(zq, "assertTSNamedTupleMember");
  function Jq(e, t) {
    P("TSUnionType", e, t);
  }
  s(Jq, "assertTSUnionType");
  function Xq(e, t) {
    P("TSIntersectionType", e, t);
  }
  s(Xq, "assertTSIntersectionType");
  function Qq(e, t) {
    P("TSConditionalType", e, t);
  }
  s(Qq, "assertTSConditionalType");
  function Zq(e, t) {
    P("TSInferType", e, t);
  }
  s(Zq, "assertTSInferType");
  function eU(e, t) {
    P("TSParenthesizedType", e, t);
  }
  s(eU, "assertTSParenthesizedType");
  function tU(e, t) {
    P("TSTypeOperator", e, t);
  }
  s(tU, "assertTSTypeOperator");
  function rU(e, t) {
    P("TSIndexedAccessType", e, t);
  }
  s(rU, "assertTSIndexedAccessType");
  function nU(e, t) {
    P("TSMappedType", e, t);
  }
  s(nU, "assertTSMappedType");
  function sU(e, t) {
    P("TSLiteralType", e, t);
  }
  s(sU, "assertTSLiteralType");
  function iU(e, t) {
    P("TSExpressionWithTypeArguments", e, t);
  }
  s(iU, "assertTSExpressionWithTypeArguments");
  function aU(e, t) {
    P("TSInterfaceDeclaration", e, t);
  }
  s(aU, "assertTSInterfaceDeclaration");
  function oU(e, t) {
    P("TSInterfaceBody", e, t);
  }
  s(oU, "assertTSInterfaceBody");
  function lU(e, t) {
    P("TSTypeAliasDeclaration", e, t);
  }
  s(lU, "assertTSTypeAliasDeclaration");
  function uU(e, t) {
    P("TSInstantiationExpression", e, t);
  }
  s(uU, "assertTSInstantiationExpression");
  function cU(e, t) {
    P("TSAsExpression", e, t);
  }
  s(cU, "assertTSAsExpression");
  function fU(e, t) {
    P("TSSatisfiesExpression", e, t);
  }
  s(fU, "assertTSSatisfiesExpression");
  function pU(e, t) {
    P("TSTypeAssertion", e, t);
  }
  s(pU, "assertTSTypeAssertion");
  function dU(e, t) {
    P("TSEnumDeclaration", e, t);
  }
  s(dU, "assertTSEnumDeclaration");
  function hU(e, t) {
    P("TSEnumMember", e, t);
  }
  s(hU, "assertTSEnumMember");
  function mU(e, t) {
    P("TSModuleDeclaration", e, t);
  }
  s(mU, "assertTSModuleDeclaration");
  function yU(e, t) {
    P("TSModuleBlock", e, t);
  }
  s(yU, "assertTSModuleBlock");
  function gU(e, t) {
    P("TSImportType", e, t);
  }
  s(gU, "assertTSImportType");
  function bU(e, t) {
    P("TSImportEqualsDeclaration", e, t);
  }
  s(bU, "assertTSImportEqualsDeclaration");
  function EU(e, t) {
    P("TSExternalModuleReference", e, t);
  }
  s(EU, "assertTSExternalModuleReference");
  function vU(e, t) {
    P("TSNonNullExpression", e, t);
  }
  s(vU, "assertTSNonNullExpression");
  function TU(e, t) {
    P("TSExportAssignment", e, t);
  }
  s(TU, "assertTSExportAssignment");
  function xU(e, t) {
    P("TSNamespaceExportDeclaration", e, t);
  }
  s(xU, "assertTSNamespaceExportDeclaration");
  function SU(e, t) {
    P("TSTypeAnnotation", e, t);
  }
  s(SU, "assertTSTypeAnnotation");
  function PU(e, t) {
    P("TSTypeParameterInstantiation", e, t);
  }
  s(PU, "assertTSTypeParameterInstantiation");
  function AU(e, t) {
    P("TSTypeParameterDeclaration", e, t);
  }
  s(AU, "assertTSTypeParameterDeclaration");
  function CU(e, t) {
    P("TSTypeParameter", e, t);
  }
  s(CU, "assertTSTypeParameter");
  function wU(e, t) {
    P("Standardized", e, t);
  }
  s(wU, "assertStandardized");
  function DU(e, t) {
    P("Expression", e, t);
  }
  s(DU, "assertExpression");
  function IU(e, t) {
    P("Binary", e, t);
  }
  s(IU, "assertBinary");
  function _U(e, t) {
    P("Scopable", e, t);
  }
  s(_U, "assertScopable");
  function OU(e, t) {
    P("BlockParent", e, t);
  }
  s(OU, "assertBlockParent");
  function NU(e, t) {
    P("Block", e, t);
  }
  s(NU, "assertBlock");
  function BU(e, t) {
    P("Statement", e, t);
  }
  s(BU, "assertStatement");
  function kU(e, t) {
    P("Terminatorless", e, t);
  }
  s(kU, "assertTerminatorless");
  function FU(e, t) {
    P("CompletionStatement", e, t);
  }
  s(FU, "assertCompletionStatement");
  function jU(e, t) {
    P("Conditional", e, t);
  }
  s(jU, "assertConditional");
  function LU(e, t) {
    P("Loop", e, t);
  }
  s(LU, "assertLoop");
  function MU(e, t) {
    P("While", e, t);
  }
  s(MU, "assertWhile");
  function RU(e, t) {
    P("ExpressionWrapper", e, t);
  }
  s(RU, "assertExpressionWrapper");
  function qU(e, t) {
    P("For", e, t);
  }
  s(qU, "assertFor");
  function UU(e, t) {
    P("ForXStatement", e, t);
  }
  s(UU, "assertForXStatement");
  function VU(e, t) {
    P("Function", e, t);
  }
  s(VU, "assertFunction");
  function $U(e, t) {
    P("FunctionParent", e, t);
  }
  s($U, "assertFunctionParent");
  function WU(e, t) {
    P("Pureish", e, t);
  }
  s(WU, "assertPureish");
  function KU(e, t) {
    P("Declaration", e, t);
  }
  s(KU, "assertDeclaration");
  function GU(e, t) {
    P("PatternLike", e, t);
  }
  s(GU, "assertPatternLike");
  function HU(e, t) {
    P("LVal", e, t);
  }
  s(HU, "assertLVal");
  function YU(e, t) {
    P("TSEntityName", e, t);
  }
  s(YU, "assertTSEntityName");
  function zU(e, t) {
    P("Literal", e, t);
  }
  s(zU, "assertLiteral");
  function JU(e, t) {
    P("Immutable", e, t);
  }
  s(JU, "assertImmutable");
  function XU(e, t) {
    P("UserWhitespacable", e, t);
  }
  s(XU, "assertUserWhitespacable");
  function QU(e, t) {
    P("Method", e, t);
  }
  s(QU, "assertMethod");
  function ZU(e, t) {
    P("ObjectMember", e, t);
  }
  s(ZU, "assertObjectMember");
  function eV(e, t) {
    P("Property", e, t);
  }
  s(eV, "assertProperty");
  function tV(e, t) {
    P("UnaryLike", e, t);
  }
  s(tV, "assertUnaryLike");
  function rV(e, t) {
    P("Pattern", e, t);
  }
  s(rV, "assertPattern");
  function nV(e, t) {
    P("Class", e, t);
  }
  s(nV, "assertClass");
  function sV(e, t) {
    P("ImportOrExportDeclaration", e, t);
  }
  s(sV, "assertImportOrExportDeclaration");
  function iV(e, t) {
    P("ExportDeclaration", e, t);
  }
  s(iV, "assertExportDeclaration");
  function aV(e, t) {
    P("ModuleSpecifier", e, t);
  }
  s(aV, "assertModuleSpecifier");
  function oV(e, t) {
    P("Accessor", e, t);
  }
  s(oV, "assertAccessor");
  function lV(e, t) {
    P("Private", e, t);
  }
  s(lV, "assertPrivate");
  function uV(e, t) {
    P("Flow", e, t);
  }
  s(uV, "assertFlow");
  function cV(e, t) {
    P("FlowType", e, t);
  }
  s(cV, "assertFlowType");
  function fV(e, t) {
    P("FlowBaseAnnotation", e, t);
  }
  s(fV, "assertFlowBaseAnnotation");
  function pV(e, t) {
    P("FlowDeclaration", e, t);
  }
  s(pV, "assertFlowDeclaration");
  function dV(e, t) {
    P("FlowPredicate", e, t);
  }
  s(dV, "assertFlowPredicate");
  function hV(e, t) {
    P("EnumBody", e, t);
  }
  s(hV, "assertEnumBody");
  function mV(e, t) {
    P("EnumMember", e, t);
  }
  s(mV, "assertEnumMember");
  function yV(e, t) {
    P("JSX", e, t);
  }
  s(yV, "assertJSX");
  function gV(e, t) {
    P("Miscellaneous", e, t);
  }
  s(gV, "assertMiscellaneous");
  function bV(e, t) {
    P("TypeScript", e, t);
  }
  s(bV, "assertTypeScript");
  function EV(e, t) {
    P("TSTypeElement", e, t);
  }
  s(EV, "assertTSTypeElement");
  function vV(e, t) {
    P("TSType", e, t);
  }
  s(vV, "assertTSType");
  function TV(e, t) {
    P("TSBaseType", e, t);
  }
  s(TV, "assertTSBaseType");
  function xV(e, t) {
    (0, ja.default)("assertNumberLiteral", "assertNumericLiteral"), P("NumberLiteral", e, t);
  }
  s(xV, "assertNumberLiteral");
  function SV(e, t) {
    (0, ja.default)("assertRegexLiteral", "assertRegExpLiteral"), P("RegexLiteral", e, t);
  }
  s(SV, "assertRegexLiteral");
  function PV(e, t) {
    (0, ja.default)("assertRestProperty", "assertRestElement"), P("RestProperty", e, t);
  }
  s(PV, "assertRestProperty");
  function AV(e, t) {
    (0, ja.default)("assertSpreadProperty", "assertSpreadElement"), P("SpreadProperty", e, t);
  }
  s(AV, "assertSpreadProperty");
  function CV(e, t) {
    (0, ja.default)("assertModuleDeclaration", "assertImportOrExportDeclaration"), P("ModuleDeclaration", e, t);
  }
  s(CV, "assertModuleDeclaration");
});

// ../node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js
var VE = T((Pl) => {
  "use strict";
  Object.defineProperty(Pl, "__esModule", {
    value: !0
  });
  Pl.default = void 0;
  var Vr = nr(), Ove = Pl.default = wV;
  function wV(e) {
    switch (e) {
      case "string":
        return (0, Vr.stringTypeAnnotation)();
      case "number":
        return (0, Vr.numberTypeAnnotation)();
      case "undefined":
        return (0, Vr.voidTypeAnnotation)();
      case "boolean":
        return (0, Vr.booleanTypeAnnotation)();
      case "function":
        return (0, Vr.genericTypeAnnotation)((0, Vr.identifier)("Function"));
      case "object":
        return (0, Vr.genericTypeAnnotation)((0, Vr.identifier)("Object"));
      case "symbol":
        return (0, Vr.genericTypeAnnotation)((0, Vr.identifier)("Symbol"));
      case "bigint":
        return (0, Vr.anyTypeAnnotation)();
    }
    throw new Error("Invalid typeof value: " + e);
  }
  s(wV, "createTypeAnnotationBasedOnTypeof");
});

// ../node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js
var kp = T((Bp) => {
  "use strict";
  Object.defineProperty(Bp, "__esModule", {
    value: !0
  });
  Bp.default = WE;
  var La = vt();
  function $E(e) {
    return (0, La.isIdentifier)(e) ? e.name : `${e.id.name}.${$E(e.qualification)}`;
  }
  s($E, "getQualifiedName");
  function WE(e) {
    let t = Array.from(e), r = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Set(), a = [];
    for (let o = 0; o < t.length; o++) {
      let l = t[o];
      if (l && !a.includes(l)) {
        if ((0, La.isAnyTypeAnnotation)(l))
          return [l];
        if ((0, La.isFlowBaseAnnotation)(l)) {
          n.set(l.type, l);
          continue;
        }
        if ((0, La.isUnionTypeAnnotation)(l)) {
          i.has(l.types) || (t.push(...l.types), i.add(l.types));
          continue;
        }
        if ((0, La.isGenericTypeAnnotation)(l)) {
          let u = $E(l.id);
          if (r.has(u)) {
            let c = r.get(u);
            c.typeParameters ? l.typeParameters && (c.typeParameters.params.push(...l.typeParameters.params), c.typeParameters.params = WE(c.
            typeParameters.params)) : c = l.typeParameters;
          } else
            r.set(u, l);
          continue;
        }
        a.push(l);
      }
    }
    for (let [, o] of n)
      a.push(o);
    for (let [, o] of r)
      a.push(o);
    return a;
  }
  s(WE, "removeTypeDuplicates");
});

// ../node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js
var KE = T((Fp) => {
  "use strict";
  Object.defineProperty(Fp, "__esModule", {
    value: !0
  });
  Fp.default = _V;
  var DV = nr(), IV = kp();
  function _V(e) {
    let t = (0, IV.default)(e);
    return t.length === 1 ? t[0] : (0, DV.unionTypeAnnotation)(t);
  }
  s(_V, "createFlowUnionType");
});

// ../node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js
var YE = T((jp) => {
  "use strict";
  Object.defineProperty(jp, "__esModule", {
    value: !0
  });
  jp.default = HE;
  var Ma = vt();
  function GE(e) {
    return (0, Ma.isIdentifier)(e) ? e.name : `${e.right.name}.${GE(e.left)}`;
  }
  s(GE, "getQualifiedName");
  function HE(e) {
    let t = Array.from(e), r = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Set(), a = [];
    for (let o = 0; o < t.length; o++) {
      let l = t[o];
      if (l && !a.includes(l)) {
        if ((0, Ma.isTSAnyKeyword)(l))
          return [l];
        if ((0, Ma.isTSBaseType)(l)) {
          n.set(l.type, l);
          continue;
        }
        if ((0, Ma.isTSUnionType)(l)) {
          i.has(l.types) || (t.push(...l.types), i.add(l.types));
          continue;
        }
        if ((0, Ma.isTSTypeReference)(l) && l.typeParameters) {
          let u = GE(l.typeName);
          if (r.has(u)) {
            let c = r.get(u);
            c.typeParameters ? l.typeParameters && (c.typeParameters.params.push(...l.typeParameters.params), c.typeParameters.params = HE(c.
            typeParameters.params)) : c = l.typeParameters;
          } else
            r.set(u, l);
          continue;
        }
        a.push(l);
      }
    }
    for (let [, o] of n)
      a.push(o);
    for (let [, o] of r)
      a.push(o);
    return a;
  }
  s(HE, "removeTypeDuplicates");
});

// ../node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js
var zE = T((Lp) => {
  "use strict";
  Object.defineProperty(Lp, "__esModule", {
    value: !0
  });
  Lp.default = kV;
  var OV = nr(), NV = YE(), BV = vt();
  function kV(e) {
    let t = e.map((n) => (0, BV.isTSTypeAnnotation)(n) ? n.typeAnnotation : n), r = (0, NV.default)(t);
    return r.length === 1 ? r[0] : (0, OV.tsUnionType)(r);
  }
  s(kV, "createTSUnionType");
});

// ../node_modules/@babel/types/lib/builders/generated/uppercase.js
var JE = T((w) => {
  "use strict";
  Object.defineProperty(w, "__esModule", {
    value: !0
  });
  Object.defineProperty(w, "AnyTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.anyTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ArgumentPlaceholder", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.argumentPlaceholder;
    }, "get")
  });
  Object.defineProperty(w, "ArrayExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.arrayExpression;
    }, "get")
  });
  Object.defineProperty(w, "ArrayPattern", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.arrayPattern;
    }, "get")
  });
  Object.defineProperty(w, "ArrayTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.arrayTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ArrowFunctionExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.arrowFunctionExpression;
    }, "get")
  });
  Object.defineProperty(w, "AssignmentExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.assignmentExpression;
    }, "get")
  });
  Object.defineProperty(w, "AssignmentPattern", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.assignmentPattern;
    }, "get")
  });
  Object.defineProperty(w, "AwaitExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.awaitExpression;
    }, "get")
  });
  Object.defineProperty(w, "BigIntLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.bigIntLiteral;
    }, "get")
  });
  Object.defineProperty(w, "BinaryExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.binaryExpression;
    }, "get")
  });
  Object.defineProperty(w, "BindExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.bindExpression;
    }, "get")
  });
  Object.defineProperty(w, "BlockStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.blockStatement;
    }, "get")
  });
  Object.defineProperty(w, "BooleanLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.booleanLiteral;
    }, "get")
  });
  Object.defineProperty(w, "BooleanLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.booleanLiteralTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "BooleanTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.booleanTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "BreakStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.breakStatement;
    }, "get")
  });
  Object.defineProperty(w, "CallExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.callExpression;
    }, "get")
  });
  Object.defineProperty(w, "CatchClause", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.catchClause;
    }, "get")
  });
  Object.defineProperty(w, "ClassAccessorProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.classAccessorProperty;
    }, "get")
  });
  Object.defineProperty(w, "ClassBody", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.classBody;
    }, "get")
  });
  Object.defineProperty(w, "ClassDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.classDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "ClassExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.classExpression;
    }, "get")
  });
  Object.defineProperty(w, "ClassImplements", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.classImplements;
    }, "get")
  });
  Object.defineProperty(w, "ClassMethod", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.classMethod;
    }, "get")
  });
  Object.defineProperty(w, "ClassPrivateMethod", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.classPrivateMethod;
    }, "get")
  });
  Object.defineProperty(w, "ClassPrivateProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.classPrivateProperty;
    }, "get")
  });
  Object.defineProperty(w, "ClassProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.classProperty;
    }, "get")
  });
  Object.defineProperty(w, "ConditionalExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.conditionalExpression;
    }, "get")
  });
  Object.defineProperty(w, "ContinueStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.continueStatement;
    }, "get")
  });
  Object.defineProperty(w, "DebuggerStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.debuggerStatement;
    }, "get")
  });
  Object.defineProperty(w, "DecimalLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.decimalLiteral;
    }, "get")
  });
  Object.defineProperty(w, "DeclareClass", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declareClass;
    }, "get")
  });
  Object.defineProperty(w, "DeclareExportAllDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declareExportAllDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "DeclareExportDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declareExportDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "DeclareFunction", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declareFunction;
    }, "get")
  });
  Object.defineProperty(w, "DeclareInterface", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declareInterface;
    }, "get")
  });
  Object.defineProperty(w, "DeclareModule", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declareModule;
    }, "get")
  });
  Object.defineProperty(w, "DeclareModuleExports", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declareModuleExports;
    }, "get")
  });
  Object.defineProperty(w, "DeclareOpaqueType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declareOpaqueType;
    }, "get")
  });
  Object.defineProperty(w, "DeclareTypeAlias", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declareTypeAlias;
    }, "get")
  });
  Object.defineProperty(w, "DeclareVariable", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declareVariable;
    }, "get")
  });
  Object.defineProperty(w, "DeclaredPredicate", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.declaredPredicate;
    }, "get")
  });
  Object.defineProperty(w, "Decorator", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.decorator;
    }, "get")
  });
  Object.defineProperty(w, "Directive", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.directive;
    }, "get")
  });
  Object.defineProperty(w, "DirectiveLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.directiveLiteral;
    }, "get")
  });
  Object.defineProperty(w, "DoExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.doExpression;
    }, "get")
  });
  Object.defineProperty(w, "DoWhileStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.doWhileStatement;
    }, "get")
  });
  Object.defineProperty(w, "EmptyStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.emptyStatement;
    }, "get")
  });
  Object.defineProperty(w, "EmptyTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.emptyTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "EnumBooleanBody", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.enumBooleanBody;
    }, "get")
  });
  Object.defineProperty(w, "EnumBooleanMember", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.enumBooleanMember;
    }, "get")
  });
  Object.defineProperty(w, "EnumDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.enumDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "EnumDefaultedMember", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.enumDefaultedMember;
    }, "get")
  });
  Object.defineProperty(w, "EnumNumberBody", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.enumNumberBody;
    }, "get")
  });
  Object.defineProperty(w, "EnumNumberMember", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.enumNumberMember;
    }, "get")
  });
  Object.defineProperty(w, "EnumStringBody", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.enumStringBody;
    }, "get")
  });
  Object.defineProperty(w, "EnumStringMember", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.enumStringMember;
    }, "get")
  });
  Object.defineProperty(w, "EnumSymbolBody", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.enumSymbolBody;
    }, "get")
  });
  Object.defineProperty(w, "ExistsTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.existsTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ExportAllDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.exportAllDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "ExportDefaultDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.exportDefaultDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "ExportDefaultSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.exportDefaultSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "ExportNamedDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.exportNamedDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "ExportNamespaceSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.exportNamespaceSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "ExportSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.exportSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "ExpressionStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.expressionStatement;
    }, "get")
  });
  Object.defineProperty(w, "File", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.file;
    }, "get")
  });
  Object.defineProperty(w, "ForInStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.forInStatement;
    }, "get")
  });
  Object.defineProperty(w, "ForOfStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.forOfStatement;
    }, "get")
  });
  Object.defineProperty(w, "ForStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.forStatement;
    }, "get")
  });
  Object.defineProperty(w, "FunctionDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.functionDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "FunctionExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.functionExpression;
    }, "get")
  });
  Object.defineProperty(w, "FunctionTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.functionTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "FunctionTypeParam", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.functionTypeParam;
    }, "get")
  });
  Object.defineProperty(w, "GenericTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.genericTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "Identifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.identifier;
    }, "get")
  });
  Object.defineProperty(w, "IfStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.ifStatement;
    }, "get")
  });
  Object.defineProperty(w, "Import", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.import;
    }, "get")
  });
  Object.defineProperty(w, "ImportAttribute", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.importAttribute;
    }, "get")
  });
  Object.defineProperty(w, "ImportDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.importDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "ImportDefaultSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.importDefaultSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "ImportExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.importExpression;
    }, "get")
  });
  Object.defineProperty(w, "ImportNamespaceSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.importNamespaceSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "ImportSpecifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.importSpecifier;
    }, "get")
  });
  Object.defineProperty(w, "IndexedAccessType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.indexedAccessType;
    }, "get")
  });
  Object.defineProperty(w, "InferredPredicate", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.inferredPredicate;
    }, "get")
  });
  Object.defineProperty(w, "InterfaceDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.interfaceDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "InterfaceExtends", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.interfaceExtends;
    }, "get")
  });
  Object.defineProperty(w, "InterfaceTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.interfaceTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "InterpreterDirective", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.interpreterDirective;
    }, "get")
  });
  Object.defineProperty(w, "IntersectionTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.intersectionTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "JSXAttribute", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxAttribute;
    }, "get")
  });
  Object.defineProperty(w, "JSXClosingElement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxClosingElement;
    }, "get")
  });
  Object.defineProperty(w, "JSXClosingFragment", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxClosingFragment;
    }, "get")
  });
  Object.defineProperty(w, "JSXElement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxElement;
    }, "get")
  });
  Object.defineProperty(w, "JSXEmptyExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxEmptyExpression;
    }, "get")
  });
  Object.defineProperty(w, "JSXExpressionContainer", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxExpressionContainer;
    }, "get")
  });
  Object.defineProperty(w, "JSXFragment", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxFragment;
    }, "get")
  });
  Object.defineProperty(w, "JSXIdentifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxIdentifier;
    }, "get")
  });
  Object.defineProperty(w, "JSXMemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxMemberExpression;
    }, "get")
  });
  Object.defineProperty(w, "JSXNamespacedName", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxNamespacedName;
    }, "get")
  });
  Object.defineProperty(w, "JSXOpeningElement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxOpeningElement;
    }, "get")
  });
  Object.defineProperty(w, "JSXOpeningFragment", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxOpeningFragment;
    }, "get")
  });
  Object.defineProperty(w, "JSXSpreadAttribute", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxSpreadAttribute;
    }, "get")
  });
  Object.defineProperty(w, "JSXSpreadChild", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxSpreadChild;
    }, "get")
  });
  Object.defineProperty(w, "JSXText", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.jsxText;
    }, "get")
  });
  Object.defineProperty(w, "LabeledStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.labeledStatement;
    }, "get")
  });
  Object.defineProperty(w, "LogicalExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.logicalExpression;
    }, "get")
  });
  Object.defineProperty(w, "MemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.memberExpression;
    }, "get")
  });
  Object.defineProperty(w, "MetaProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.metaProperty;
    }, "get")
  });
  Object.defineProperty(w, "MixedTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.mixedTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ModuleExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.moduleExpression;
    }, "get")
  });
  Object.defineProperty(w, "NewExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.newExpression;
    }, "get")
  });
  Object.defineProperty(w, "Noop", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.noop;
    }, "get")
  });
  Object.defineProperty(w, "NullLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.nullLiteral;
    }, "get")
  });
  Object.defineProperty(w, "NullLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.nullLiteralTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "NullableTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.nullableTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "NumberLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.numberLiteral;
    }, "get")
  });
  Object.defineProperty(w, "NumberLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.numberLiteralTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "NumberTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.numberTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "NumericLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.numericLiteral;
    }, "get")
  });
  Object.defineProperty(w, "ObjectExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.objectExpression;
    }, "get")
  });
  Object.defineProperty(w, "ObjectMethod", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.objectMethod;
    }, "get")
  });
  Object.defineProperty(w, "ObjectPattern", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.objectPattern;
    }, "get")
  });
  Object.defineProperty(w, "ObjectProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.objectProperty;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.objectTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeCallProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.objectTypeCallProperty;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeIndexer", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.objectTypeIndexer;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeInternalSlot", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.objectTypeInternalSlot;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.objectTypeProperty;
    }, "get")
  });
  Object.defineProperty(w, "ObjectTypeSpreadProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.objectTypeSpreadProperty;
    }, "get")
  });
  Object.defineProperty(w, "OpaqueType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.opaqueType;
    }, "get")
  });
  Object.defineProperty(w, "OptionalCallExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.optionalCallExpression;
    }, "get")
  });
  Object.defineProperty(w, "OptionalIndexedAccessType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.optionalIndexedAccessType;
    }, "get")
  });
  Object.defineProperty(w, "OptionalMemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.optionalMemberExpression;
    }, "get")
  });
  Object.defineProperty(w, "ParenthesizedExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.parenthesizedExpression;
    }, "get")
  });
  Object.defineProperty(w, "PipelineBareFunction", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.pipelineBareFunction;
    }, "get")
  });
  Object.defineProperty(w, "PipelinePrimaryTopicReference", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.pipelinePrimaryTopicReference;
    }, "get")
  });
  Object.defineProperty(w, "PipelineTopicExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.pipelineTopicExpression;
    }, "get")
  });
  Object.defineProperty(w, "Placeholder", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.placeholder;
    }, "get")
  });
  Object.defineProperty(w, "PrivateName", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.privateName;
    }, "get")
  });
  Object.defineProperty(w, "Program", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.program;
    }, "get")
  });
  Object.defineProperty(w, "QualifiedTypeIdentifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.qualifiedTypeIdentifier;
    }, "get")
  });
  Object.defineProperty(w, "RecordExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.recordExpression;
    }, "get")
  });
  Object.defineProperty(w, "RegExpLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.regExpLiteral;
    }, "get")
  });
  Object.defineProperty(w, "RegexLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.regexLiteral;
    }, "get")
  });
  Object.defineProperty(w, "RestElement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.restElement;
    }, "get")
  });
  Object.defineProperty(w, "RestProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.restProperty;
    }, "get")
  });
  Object.defineProperty(w, "ReturnStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.returnStatement;
    }, "get")
  });
  Object.defineProperty(w, "SequenceExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.sequenceExpression;
    }, "get")
  });
  Object.defineProperty(w, "SpreadElement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.spreadElement;
    }, "get")
  });
  Object.defineProperty(w, "SpreadProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.spreadProperty;
    }, "get")
  });
  Object.defineProperty(w, "StaticBlock", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.staticBlock;
    }, "get")
  });
  Object.defineProperty(w, "StringLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.stringLiteral;
    }, "get")
  });
  Object.defineProperty(w, "StringLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.stringLiteralTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "StringTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.stringTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "Super", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.super;
    }, "get")
  });
  Object.defineProperty(w, "SwitchCase", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.switchCase;
    }, "get")
  });
  Object.defineProperty(w, "SwitchStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.switchStatement;
    }, "get")
  });
  Object.defineProperty(w, "SymbolTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.symbolTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "TSAnyKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsAnyKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSArrayType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsArrayType;
    }, "get")
  });
  Object.defineProperty(w, "TSAsExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsAsExpression;
    }, "get")
  });
  Object.defineProperty(w, "TSBigIntKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsBigIntKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSBooleanKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsBooleanKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSCallSignatureDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsCallSignatureDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSConditionalType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsConditionalType;
    }, "get")
  });
  Object.defineProperty(w, "TSConstructSignatureDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsConstructSignatureDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSConstructorType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsConstructorType;
    }, "get")
  });
  Object.defineProperty(w, "TSDeclareFunction", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsDeclareFunction;
    }, "get")
  });
  Object.defineProperty(w, "TSDeclareMethod", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsDeclareMethod;
    }, "get")
  });
  Object.defineProperty(w, "TSEnumDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsEnumDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSEnumMember", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsEnumMember;
    }, "get")
  });
  Object.defineProperty(w, "TSExportAssignment", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsExportAssignment;
    }, "get")
  });
  Object.defineProperty(w, "TSExpressionWithTypeArguments", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsExpressionWithTypeArguments;
    }, "get")
  });
  Object.defineProperty(w, "TSExternalModuleReference", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsExternalModuleReference;
    }, "get")
  });
  Object.defineProperty(w, "TSFunctionType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsFunctionType;
    }, "get")
  });
  Object.defineProperty(w, "TSImportEqualsDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsImportEqualsDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSImportType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsImportType;
    }, "get")
  });
  Object.defineProperty(w, "TSIndexSignature", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsIndexSignature;
    }, "get")
  });
  Object.defineProperty(w, "TSIndexedAccessType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsIndexedAccessType;
    }, "get")
  });
  Object.defineProperty(w, "TSInferType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsInferType;
    }, "get")
  });
  Object.defineProperty(w, "TSInstantiationExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsInstantiationExpression;
    }, "get")
  });
  Object.defineProperty(w, "TSInterfaceBody", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsInterfaceBody;
    }, "get")
  });
  Object.defineProperty(w, "TSInterfaceDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsInterfaceDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSIntersectionType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsIntersectionType;
    }, "get")
  });
  Object.defineProperty(w, "TSIntrinsicKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsIntrinsicKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSLiteralType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsLiteralType;
    }, "get")
  });
  Object.defineProperty(w, "TSMappedType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsMappedType;
    }, "get")
  });
  Object.defineProperty(w, "TSMethodSignature", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsMethodSignature;
    }, "get")
  });
  Object.defineProperty(w, "TSModuleBlock", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsModuleBlock;
    }, "get")
  });
  Object.defineProperty(w, "TSModuleDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsModuleDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSNamedTupleMember", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsNamedTupleMember;
    }, "get")
  });
  Object.defineProperty(w, "TSNamespaceExportDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsNamespaceExportDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSNeverKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsNeverKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSNonNullExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsNonNullExpression;
    }, "get")
  });
  Object.defineProperty(w, "TSNullKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsNullKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSNumberKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsNumberKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSObjectKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsObjectKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSOptionalType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsOptionalType;
    }, "get")
  });
  Object.defineProperty(w, "TSParameterProperty", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsParameterProperty;
    }, "get")
  });
  Object.defineProperty(w, "TSParenthesizedType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsParenthesizedType;
    }, "get")
  });
  Object.defineProperty(w, "TSPropertySignature", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsPropertySignature;
    }, "get")
  });
  Object.defineProperty(w, "TSQualifiedName", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsQualifiedName;
    }, "get")
  });
  Object.defineProperty(w, "TSRestType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsRestType;
    }, "get")
  });
  Object.defineProperty(w, "TSSatisfiesExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsSatisfiesExpression;
    }, "get")
  });
  Object.defineProperty(w, "TSStringKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsStringKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSSymbolKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsSymbolKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSThisType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsThisType;
    }, "get")
  });
  Object.defineProperty(w, "TSTupleType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTupleType;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeAliasDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypeAliasDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeAssertion", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypeAssertion;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypeLiteral;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeOperator", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypeOperator;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeParameter", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypeParameter;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeParameterDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypeParameterDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeParameterInstantiation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypeParameterInstantiation;
    }, "get")
  });
  Object.defineProperty(w, "TSTypePredicate", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypePredicate;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeQuery", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypeQuery;
    }, "get")
  });
  Object.defineProperty(w, "TSTypeReference", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsTypeReference;
    }, "get")
  });
  Object.defineProperty(w, "TSUndefinedKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsUndefinedKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSUnionType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsUnionType;
    }, "get")
  });
  Object.defineProperty(w, "TSUnknownKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsUnknownKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TSVoidKeyword", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tsVoidKeyword;
    }, "get")
  });
  Object.defineProperty(w, "TaggedTemplateExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.taggedTemplateExpression;
    }, "get")
  });
  Object.defineProperty(w, "TemplateElement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.templateElement;
    }, "get")
  });
  Object.defineProperty(w, "TemplateLiteral", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.templateLiteral;
    }, "get")
  });
  Object.defineProperty(w, "ThisExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.thisExpression;
    }, "get")
  });
  Object.defineProperty(w, "ThisTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.thisTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "ThrowStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.throwStatement;
    }, "get")
  });
  Object.defineProperty(w, "TopicReference", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.topicReference;
    }, "get")
  });
  Object.defineProperty(w, "TryStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tryStatement;
    }, "get")
  });
  Object.defineProperty(w, "TupleExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tupleExpression;
    }, "get")
  });
  Object.defineProperty(w, "TupleTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.tupleTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "TypeAlias", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.typeAlias;
    }, "get")
  });
  Object.defineProperty(w, "TypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.typeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "TypeCastExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.typeCastExpression;
    }, "get")
  });
  Object.defineProperty(w, "TypeParameter", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.typeParameter;
    }, "get")
  });
  Object.defineProperty(w, "TypeParameterDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.typeParameterDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "TypeParameterInstantiation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.typeParameterInstantiation;
    }, "get")
  });
  Object.defineProperty(w, "TypeofTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.typeofTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "UnaryExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.unaryExpression;
    }, "get")
  });
  Object.defineProperty(w, "UnionTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.unionTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "UpdateExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.updateExpression;
    }, "get")
  });
  Object.defineProperty(w, "V8IntrinsicIdentifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.v8IntrinsicIdentifier;
    }, "get")
  });
  Object.defineProperty(w, "VariableDeclaration", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.variableDeclaration;
    }, "get")
  });
  Object.defineProperty(w, "VariableDeclarator", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.variableDeclarator;
    }, "get")
  });
  Object.defineProperty(w, "Variance", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.variance;
    }, "get")
  });
  Object.defineProperty(w, "VoidTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.voidTypeAnnotation;
    }, "get")
  });
  Object.defineProperty(w, "WhileStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.whileStatement;
    }, "get")
  });
  Object.defineProperty(w, "WithStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.withStatement;
    }, "get")
  });
  Object.defineProperty(w, "YieldExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return D.yieldExpression;
    }, "get")
  });
  var D = nr();
});

// ../node_modules/@babel/types/lib/builders/productions.js
var Rp = T((Mp) => {
  "use strict";
  Object.defineProperty(Mp, "__esModule", {
    value: !0
  });
  Mp.buildUndefinedNode = FV;
  var XE = nr();
  function FV() {
    return (0, XE.unaryExpression)("void", (0, XE.numericLiteral)(0), !0);
  }
  s(FV, "buildUndefinedNode");
});

// ../node_modules/@babel/types/lib/clone/cloneNode.js
var Zn = T((Up) => {
  "use strict";
  Object.defineProperty(Up, "__esModule", {
    value: !0
  });
  Up.default = jV;
  var QE = Ar(), ZE = vt(), {
    hasOwn: ln
  } = {
    hasOwn: Function.call.bind(Object.prototype.hasOwnProperty)
  };
  function ev(e, t, r, n) {
    return e && typeof e.type == "string" ? tv(e, t, r, n) : e;
  }
  s(ev, "cloneIfNode");
  function qp(e, t, r, n) {
    return Array.isArray(e) ? e.map((i) => ev(i, t, r, n)) : ev(e, t, r, n);
  }
  s(qp, "cloneIfNodeOrArray");
  function jV(e, t = !0, r = !1) {
    return tv(e, t, r, /* @__PURE__ */ new Map());
  }
  s(jV, "cloneNode");
  function tv(e, t = !0, r = !1, n) {
    if (!e) return e;
    let {
      type: i
    } = e, a = {
      type: e.type
    };
    if ((0, ZE.isIdentifier)(e))
      a.name = e.name, ln(e, "optional") && typeof e.optional == "boolean" && (a.optional = e.optional), ln(e, "typeAnnotation") && (a.typeAnnotation =
      t ? qp(e.typeAnnotation, !0, r, n) : e.typeAnnotation), ln(e, "decorators") && (a.decorators = t ? qp(e.decorators, !0, r, n) : e.decorators);
    else if (ln(QE.NODE_FIELDS, i))
      for (let o of Object.keys(QE.NODE_FIELDS[i]))
        ln(e, o) && (t ? a[o] = (0, ZE.isFile)(e) && o === "comments" ? Al(e.comments, t, r, n) : qp(e[o], !0, r, n) : a[o] = e[o]);
    else
      throw new Error(`Unknown node type: "${i}"`);
    return ln(e, "loc") && (r ? a.loc = null : a.loc = e.loc), ln(e, "leadingComments") && (a.leadingComments = Al(e.leadingComments, t, r, n)),
    ln(e, "innerComments") && (a.innerComments = Al(e.innerComments, t, r, n)), ln(e, "trailingComments") && (a.trailingComments = Al(e.trailingComments,
    t, r, n)), ln(e, "extra") && (a.extra = Object.assign({}, e.extra)), a;
  }
  s(tv, "cloneNodeInternal");
  function Al(e, t, r, n) {
    return !e || !t ? e : e.map((i) => {
      let a = n.get(i);
      if (a) return a;
      let {
        type: o,
        value: l,
        loc: u
      } = i, c = {
        type: o,
        value: l,
        loc: u
      };
      return r && (c.loc = null), n.set(i, c), c;
    });
  }
  s(Al, "maybeCloneComments");
});

// ../node_modules/@babel/types/lib/clone/clone.js
var rv = T((Vp) => {
  "use strict";
  Object.defineProperty(Vp, "__esModule", {
    value: !0
  });
  Vp.default = MV;
  var LV = Zn();
  function MV(e) {
    return (0, LV.default)(e, !1);
  }
  s(MV, "clone");
});

// ../node_modules/@babel/types/lib/clone/cloneDeep.js
var nv = T(($p) => {
  "use strict";
  Object.defineProperty($p, "__esModule", {
    value: !0
  });
  $p.default = qV;
  var RV = Zn();
  function qV(e) {
    return (0, RV.default)(e);
  }
  s(qV, "cloneDeep");
});

// ../node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js
var sv = T((Wp) => {
  "use strict";
  Object.defineProperty(Wp, "__esModule", {
    value: !0
  });
  Wp.default = VV;
  var UV = Zn();
  function VV(e) {
    return (0, UV.default)(e, !0, !0);
  }
  s(VV, "cloneDeepWithoutLoc");
});

// ../node_modules/@babel/types/lib/clone/cloneWithoutLoc.js
var iv = T((Kp) => {
  "use strict";
  Object.defineProperty(Kp, "__esModule", {
    value: !0
  });
  Kp.default = WV;
  var $V = Zn();
  function WV(e) {
    return (0, $V.default)(e, !1, !0);
  }
  s(WV, "cloneWithoutLoc");
});

// ../node_modules/@babel/types/lib/comments/addComments.js
var Hp = T((Gp) => {
  "use strict";
  Object.defineProperty(Gp, "__esModule", {
    value: !0
  });
  Gp.default = KV;
  function KV(e, t, r) {
    if (!r || !e) return e;
    let n = `${t}Comments`;
    return e[n] ? t === "leading" ? e[n] = r.concat(e[n]) : e[n].push(...r) : e[n] = r, e;
  }
  s(KV, "addComments");
});

// ../node_modules/@babel/types/lib/comments/addComment.js
var av = T((Yp) => {
  "use strict";
  Object.defineProperty(Yp, "__esModule", {
    value: !0
  });
  Yp.default = HV;
  var GV = Hp();
  function HV(e, t, r, n) {
    return (0, GV.default)(e, t, [{
      type: n ? "CommentLine" : "CommentBlock",
      value: r
    }]);
  }
  s(HV, "addComment");
});

// ../node_modules/@babel/types/lib/utils/inherit.js
var Cl = T((zp) => {
  "use strict";
  Object.defineProperty(zp, "__esModule", {
    value: !0
  });
  zp.default = YV;
  function YV(e, t, r) {
    t && r && (t[e] = Array.from(new Set([].concat(t[e], r[e]).filter(Boolean))));
  }
  s(YV, "inherit");
});

// ../node_modules/@babel/types/lib/comments/inheritInnerComments.js
var Xp = T((Jp) => {
  "use strict";
  Object.defineProperty(Jp, "__esModule", {
    value: !0
  });
  Jp.default = JV;
  var zV = Cl();
  function JV(e, t) {
    (0, zV.default)("innerComments", e, t);
  }
  s(JV, "inheritInnerComments");
});

// ../node_modules/@babel/types/lib/comments/inheritLeadingComments.js
var Zp = T((Qp) => {
  "use strict";
  Object.defineProperty(Qp, "__esModule", {
    value: !0
  });
  Qp.default = QV;
  var XV = Cl();
  function QV(e, t) {
    (0, XV.default)("leadingComments", e, t);
  }
  s(QV, "inheritLeadingComments");
});

// ../node_modules/@babel/types/lib/comments/inheritTrailingComments.js
var td = T((ed) => {
  "use strict";
  Object.defineProperty(ed, "__esModule", {
    value: !0
  });
  ed.default = e$;
  var ZV = Cl();
  function e$(e, t) {
    (0, ZV.default)("trailingComments", e, t);
  }
  s(e$, "inheritTrailingComments");
});

// ../node_modules/@babel/types/lib/comments/inheritsComments.js
var nd = T((rd) => {
  "use strict";
  Object.defineProperty(rd, "__esModule", {
    value: !0
  });
  rd.default = s$;
  var t$ = td(), r$ = Zp(), n$ = Xp();
  function s$(e, t) {
    return (0, t$.default)(e, t), (0, r$.default)(e, t), (0, n$.default)(e, t), e;
  }
  s(s$, "inheritsComments");
});

// ../node_modules/@babel/types/lib/comments/removeComments.js
var ov = T((sd) => {
  "use strict";
  Object.defineProperty(sd, "__esModule", {
    value: !0
  });
  sd.default = a$;
  var i$ = Jn();
  function a$(e) {
    return i$.COMMENT_KEYS.forEach((t) => {
      e[t] = null;
    }), e;
  }
  s(a$, "removeComments");
});

// ../node_modules/@babel/types/lib/constants/generated/index.js
var lv = T((z) => {
  "use strict";
  Object.defineProperty(z, "__esModule", {
    value: !0
  });
  z.WHILE_TYPES = z.USERWHITESPACABLE_TYPES = z.UNARYLIKE_TYPES = z.TYPESCRIPT_TYPES = z.TSTYPE_TYPES = z.TSTYPEELEMENT_TYPES = z.TSENTITYNAME_TYPES =
  z.TSBASETYPE_TYPES = z.TERMINATORLESS_TYPES = z.STATEMENT_TYPES = z.STANDARDIZED_TYPES = z.SCOPABLE_TYPES = z.PUREISH_TYPES = z.PROPERTY_TYPES =
  z.PRIVATE_TYPES = z.PATTERN_TYPES = z.PATTERNLIKE_TYPES = z.OBJECTMEMBER_TYPES = z.MODULESPECIFIER_TYPES = z.MODULEDECLARATION_TYPES = z.MISCELLANEOUS_TYPES =
  z.METHOD_TYPES = z.LVAL_TYPES = z.LOOP_TYPES = z.LITERAL_TYPES = z.JSX_TYPES = z.IMPORTOREXPORTDECLARATION_TYPES = z.IMMUTABLE_TYPES = z.FUNCTION_TYPES =
  z.FUNCTIONPARENT_TYPES = z.FOR_TYPES = z.FORXSTATEMENT_TYPES = z.FLOW_TYPES = z.FLOWTYPE_TYPES = z.FLOWPREDICATE_TYPES = z.FLOWDECLARATION_TYPES =
  z.FLOWBASEANNOTATION_TYPES = z.EXPRESSION_TYPES = z.EXPRESSIONWRAPPER_TYPES = z.EXPORTDECLARATION_TYPES = z.ENUMMEMBER_TYPES = z.ENUMBODY_TYPES =
  z.DECLARATION_TYPES = z.CONDITIONAL_TYPES = z.COMPLETIONSTATEMENT_TYPES = z.CLASS_TYPES = z.BLOCK_TYPES = z.BLOCKPARENT_TYPES = z.BINARY_TYPES =
  z.ACCESSOR_TYPES = void 0;
  var Ie = Ar(), bTe = z.STANDARDIZED_TYPES = Ie.FLIPPED_ALIAS_KEYS.Standardized, ETe = z.EXPRESSION_TYPES = Ie.FLIPPED_ALIAS_KEYS.Expression,
  vTe = z.BINARY_TYPES = Ie.FLIPPED_ALIAS_KEYS.Binary, TTe = z.SCOPABLE_TYPES = Ie.FLIPPED_ALIAS_KEYS.Scopable, xTe = z.BLOCKPARENT_TYPES = Ie.
  FLIPPED_ALIAS_KEYS.BlockParent, STe = z.BLOCK_TYPES = Ie.FLIPPED_ALIAS_KEYS.Block, PTe = z.STATEMENT_TYPES = Ie.FLIPPED_ALIAS_KEYS.Statement,
  ATe = z.TERMINATORLESS_TYPES = Ie.FLIPPED_ALIAS_KEYS.Terminatorless, CTe = z.COMPLETIONSTATEMENT_TYPES = Ie.FLIPPED_ALIAS_KEYS.CompletionStatement,
  wTe = z.CONDITIONAL_TYPES = Ie.FLIPPED_ALIAS_KEYS.Conditional, DTe = z.LOOP_TYPES = Ie.FLIPPED_ALIAS_KEYS.Loop, ITe = z.WHILE_TYPES = Ie.FLIPPED_ALIAS_KEYS.
  While, _Te = z.EXPRESSIONWRAPPER_TYPES = Ie.FLIPPED_ALIAS_KEYS.ExpressionWrapper, OTe = z.FOR_TYPES = Ie.FLIPPED_ALIAS_KEYS.For, NTe = z.FORXSTATEMENT_TYPES =
  Ie.FLIPPED_ALIAS_KEYS.ForXStatement, BTe = z.FUNCTION_TYPES = Ie.FLIPPED_ALIAS_KEYS.Function, kTe = z.FUNCTIONPARENT_TYPES = Ie.FLIPPED_ALIAS_KEYS.
  FunctionParent, FTe = z.PUREISH_TYPES = Ie.FLIPPED_ALIAS_KEYS.Pureish, jTe = z.DECLARATION_TYPES = Ie.FLIPPED_ALIAS_KEYS.Declaration, LTe = z.
  PATTERNLIKE_TYPES = Ie.FLIPPED_ALIAS_KEYS.PatternLike, MTe = z.LVAL_TYPES = Ie.FLIPPED_ALIAS_KEYS.LVal, RTe = z.TSENTITYNAME_TYPES = Ie.FLIPPED_ALIAS_KEYS.
  TSEntityName, qTe = z.LITERAL_TYPES = Ie.FLIPPED_ALIAS_KEYS.Literal, UTe = z.IMMUTABLE_TYPES = Ie.FLIPPED_ALIAS_KEYS.Immutable, VTe = z.USERWHITESPACABLE_TYPES =
  Ie.FLIPPED_ALIAS_KEYS.UserWhitespacable, $Te = z.METHOD_TYPES = Ie.FLIPPED_ALIAS_KEYS.Method, WTe = z.OBJECTMEMBER_TYPES = Ie.FLIPPED_ALIAS_KEYS.
  ObjectMember, KTe = z.PROPERTY_TYPES = Ie.FLIPPED_ALIAS_KEYS.Property, GTe = z.UNARYLIKE_TYPES = Ie.FLIPPED_ALIAS_KEYS.UnaryLike, HTe = z.
  PATTERN_TYPES = Ie.FLIPPED_ALIAS_KEYS.Pattern, YTe = z.CLASS_TYPES = Ie.FLIPPED_ALIAS_KEYS.Class, o$ = z.IMPORTOREXPORTDECLARATION_TYPES =
  Ie.FLIPPED_ALIAS_KEYS.ImportOrExportDeclaration, zTe = z.EXPORTDECLARATION_TYPES = Ie.FLIPPED_ALIAS_KEYS.ExportDeclaration, JTe = z.MODULESPECIFIER_TYPES =
  Ie.FLIPPED_ALIAS_KEYS.ModuleSpecifier, XTe = z.ACCESSOR_TYPES = Ie.FLIPPED_ALIAS_KEYS.Accessor, QTe = z.PRIVATE_TYPES = Ie.FLIPPED_ALIAS_KEYS.
  Private, ZTe = z.FLOW_TYPES = Ie.FLIPPED_ALIAS_KEYS.Flow, exe = z.FLOWTYPE_TYPES = Ie.FLIPPED_ALIAS_KEYS.FlowType, txe = z.FLOWBASEANNOTATION_TYPES =
  Ie.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation, rxe = z.FLOWDECLARATION_TYPES = Ie.FLIPPED_ALIAS_KEYS.FlowDeclaration, nxe = z.FLOWPREDICATE_TYPES =
  Ie.FLIPPED_ALIAS_KEYS.FlowPredicate, sxe = z.ENUMBODY_TYPES = Ie.FLIPPED_ALIAS_KEYS.EnumBody, ixe = z.ENUMMEMBER_TYPES = Ie.FLIPPED_ALIAS_KEYS.
  EnumMember, axe = z.JSX_TYPES = Ie.FLIPPED_ALIAS_KEYS.JSX, oxe = z.MISCELLANEOUS_TYPES = Ie.FLIPPED_ALIAS_KEYS.Miscellaneous, lxe = z.TYPESCRIPT_TYPES =
  Ie.FLIPPED_ALIAS_KEYS.TypeScript, uxe = z.TSTYPEELEMENT_TYPES = Ie.FLIPPED_ALIAS_KEYS.TSTypeElement, cxe = z.TSTYPE_TYPES = Ie.FLIPPED_ALIAS_KEYS.
  TSType, fxe = z.TSBASETYPE_TYPES = Ie.FLIPPED_ALIAS_KEYS.TSBaseType, pxe = z.MODULEDECLARATION_TYPES = o$;
});

// ../node_modules/@babel/types/lib/converters/toBlock.js
var od = T((ad) => {
  "use strict";
  Object.defineProperty(ad, "__esModule", {
    value: !0
  });
  ad.default = l$;
  var wl = vt(), id = nr();
  function l$(e, t) {
    if ((0, wl.isBlockStatement)(e))
      return e;
    let r = [];
    return (0, wl.isEmptyStatement)(e) ? r = [] : ((0, wl.isStatement)(e) || ((0, wl.isFunction)(t) ? e = (0, id.returnStatement)(e) : e = (0, id.
    expressionStatement)(e)), r = [e]), (0, id.blockStatement)(r);
  }
  s(l$, "toBlock");
});

// ../node_modules/@babel/types/lib/converters/ensureBlock.js
var uv = T((ld) => {
  "use strict";
  Object.defineProperty(ld, "__esModule", {
    value: !0
  });
  ld.default = c$;
  var u$ = od();
  function c$(e, t = "body") {
    let r = (0, u$.default)(e[t], e);
    return e[t] = r, r;
  }
  s(c$, "ensureBlock");
});

// ../node_modules/@babel/types/lib/converters/toIdentifier.js
var cd = T((ud) => {
  "use strict";
  Object.defineProperty(ud, "__esModule", {
    value: !0
  });
  ud.default = d$;
  var f$ = gi(), p$ = yi();
  function d$(e) {
    e = e + "";
    let t = "";
    for (let r of e)
      t += (0, p$.isIdentifierChar)(r.codePointAt(0)) ? r : "-";
    return t = t.replace(/^[-0-9]+/, ""), t = t.replace(/[-\s]+(.)?/g, function(r, n) {
      return n ? n.toUpperCase() : "";
    }), (0, f$.default)(t) || (t = `_${t}`), t || "_";
  }
  s(d$, "toIdentifier");
});

// ../node_modules/@babel/types/lib/converters/toBindingIdentifierName.js
var cv = T((fd) => {
  "use strict";
  Object.defineProperty(fd, "__esModule", {
    value: !0
  });
  fd.default = m$;
  var h$ = cd();
  function m$(e) {
    return e = (0, h$.default)(e), (e === "eval" || e === "arguments") && (e = "_" + e), e;
  }
  s(m$, "toBindingIdentifierName");
});

// ../node_modules/@babel/types/lib/converters/toComputedKey.js
var fv = T((pd) => {
  "use strict";
  Object.defineProperty(pd, "__esModule", {
    value: !0
  });
  pd.default = b$;
  var y$ = vt(), g$ = nr();
  function b$(e, t = e.key || e.property) {
    return !e.computed && (0, y$.isIdentifier)(t) && (t = (0, g$.stringLiteral)(t.name)), t;
  }
  s(b$, "toComputedKey");
});

// ../node_modules/@babel/types/lib/converters/toExpression.js
var pv = T((Dl) => {
  "use strict";
  Object.defineProperty(Dl, "__esModule", {
    value: !0
  });
  Dl.default = void 0;
  var Ra = vt(), Pxe = Dl.default = E$;
  function E$(e) {
    if ((0, Ra.isExpressionStatement)(e) && (e = e.expression), (0, Ra.isExpression)(e))
      return e;
    if ((0, Ra.isClass)(e) ? e.type = "ClassExpression" : (0, Ra.isFunction)(e) && (e.type = "FunctionExpression"), !(0, Ra.isExpression)(e))
      throw new Error(`cannot turn ${e.type} to an expression`);
    return e;
  }
  s(E$, "toExpression");
});

// ../node_modules/@babel/types/lib/traverse/traverseFast.js
var md = T((hd) => {
  "use strict";
  Object.defineProperty(hd, "__esModule", {
    value: !0
  });
  hd.default = dd;
  var v$ = Ar();
  function dd(e, t, r) {
    if (!e) return;
    let n = v$.VISITOR_KEYS[e.type];
    if (n) {
      r = r || {}, t(e, r);
      for (let i of n) {
        let a = e[i];
        if (Array.isArray(a))
          for (let o of a)
            dd(o, t, r);
        else
          dd(a, t, r);
      }
    }
  }
  s(dd, "traverseFast");
});

// ../node_modules/@babel/types/lib/modifications/removeProperties.js
var gd = T((yd) => {
  "use strict";
  Object.defineProperty(yd, "__esModule", {
    value: !0
  });
  yd.default = S$;
  var T$ = Jn(), dv = ["tokens", "start", "end", "loc", "raw", "rawValue"], x$ = [...T$.COMMENT_KEYS, "comments", ...dv];
  function S$(e, t = {}) {
    let r = t.preserveComments ? dv : x$;
    for (let i of r)
      e[i] != null && (e[i] = void 0);
    for (let i of Object.keys(e))
      i[0] === "_" && e[i] != null && (e[i] = void 0);
    let n = Object.getOwnPropertySymbols(e);
    for (let i of n)
      e[i] = null;
  }
  s(S$, "removeProperties");
});

// ../node_modules/@babel/types/lib/modifications/removePropertiesDeep.js
var Ed = T((bd) => {
  "use strict";
  Object.defineProperty(bd, "__esModule", {
    value: !0
  });
  bd.default = C$;
  var P$ = md(), A$ = gd();
  function C$(e, t) {
    return (0, P$.default)(e, A$.default, t), e;
  }
  s(C$, "removePropertiesDeep");
});

// ../node_modules/@babel/types/lib/converters/toKeyAlias.js
var mv = T((vd) => {
  "use strict";
  Object.defineProperty(vd, "__esModule", {
    value: !0
  });
  vd.default = Os;
  var hv = vt(), w$ = Zn(), D$ = Ed();
  function Os(e, t = e.key) {
    let r;
    return e.kind === "method" ? Os.increment() + "" : ((0, hv.isIdentifier)(t) ? r = t.name : (0, hv.isStringLiteral)(t) ? r = JSON.stringify(
    t.value) : r = JSON.stringify((0, D$.default)((0, w$.default)(t))), e.computed && (r = `[${r}]`), e.static && (r = `static:${r}`), r);
  }
  s(Os, "toKeyAlias");
  Os.uid = 0;
  Os.increment = function() {
    return Os.uid >= Number.MAX_SAFE_INTEGER ? Os.uid = 0 : Os.uid++;
  };
});

// ../node_modules/@babel/types/lib/converters/toStatement.js
var yv = T((_l) => {
  "use strict";
  Object.defineProperty(_l, "__esModule", {
    value: !0
  });
  _l.default = void 0;
  var Il = vt(), I$ = nr(), Fxe = _l.default = _$;
  function _$(e, t) {
    if ((0, Il.isStatement)(e))
      return e;
    let r = !1, n;
    if ((0, Il.isClass)(e))
      r = !0, n = "ClassDeclaration";
    else if ((0, Il.isFunction)(e))
      r = !0, n = "FunctionDeclaration";
    else if ((0, Il.isAssignmentExpression)(e))
      return (0, I$.expressionStatement)(e);
    if (r && !e.id && (n = !1), !n) {
      if (t)
        return !1;
      throw new Error(`cannot turn ${e.type} to a statement`);
    }
    return e.type = n, e;
  }
  s(_$, "toStatement");
});

// ../node_modules/@babel/types/lib/converters/valueToNode.js
var gv = T((Ol) => {
  "use strict";
  Object.defineProperty(Ol, "__esModule", {
    value: !0
  });
  Ol.default = void 0;
  var O$ = gi(), Gt = nr(), Mxe = Ol.default = Td, N$ = Function.call.bind(Object.prototype.toString);
  function B$(e) {
    return N$(e) === "[object RegExp]";
  }
  s(B$, "isRegExp");
  function k$(e) {
    if (typeof e != "object" || e === null || Object.prototype.toString.call(e) !== "[object Object]")
      return !1;
    let t = Object.getPrototypeOf(e);
    return t === null || Object.getPrototypeOf(t) === null;
  }
  s(k$, "isPlainObject");
  function Td(e) {
    if (e === void 0)
      return (0, Gt.identifier)("undefined");
    if (e === !0 || e === !1)
      return (0, Gt.booleanLiteral)(e);
    if (e === null)
      return (0, Gt.nullLiteral)();
    if (typeof e == "string")
      return (0, Gt.stringLiteral)(e);
    if (typeof e == "number") {
      let t;
      if (Number.isFinite(e))
        t = (0, Gt.numericLiteral)(Math.abs(e));
      else {
        let r;
        Number.isNaN(e) ? r = (0, Gt.numericLiteral)(0) : r = (0, Gt.numericLiteral)(1), t = (0, Gt.binaryExpression)("/", r, (0, Gt.numericLiteral)(
        0));
      }
      return (e < 0 || Object.is(e, -0)) && (t = (0, Gt.unaryExpression)("-", t)), t;
    }
    if (B$(e)) {
      let t = e.source, r = /\/([a-z]*)$/.exec(e.toString())[1];
      return (0, Gt.regExpLiteral)(t, r);
    }
    if (Array.isArray(e))
      return (0, Gt.arrayExpression)(e.map(Td));
    if (k$(e)) {
      let t = [];
      for (let r of Object.keys(e)) {
        let n;
        (0, O$.default)(r) ? n = (0, Gt.identifier)(r) : n = (0, Gt.stringLiteral)(r), t.push((0, Gt.objectProperty)(n, Td(e[r])));
      }
      return (0, Gt.objectExpression)(t);
    }
    throw new Error("don't know how to turn this value into a node");
  }
  s(Td, "valueToNode");
});

// ../node_modules/@babel/types/lib/modifications/appendToMemberExpression.js
var bv = T((xd) => {
  "use strict";
  Object.defineProperty(xd, "__esModule", {
    value: !0
  });
  xd.default = j$;
  var F$ = nr();
  function j$(e, t, r = !1) {
    return e.object = (0, F$.memberExpression)(e.object, e.property, e.computed), e.property = t, e.computed = !!r, e;
  }
  s(j$, "appendToMemberExpression");
});

// ../node_modules/@babel/types/lib/modifications/inherits.js
var vv = T((Sd) => {
  "use strict";
  Object.defineProperty(Sd, "__esModule", {
    value: !0
  });
  Sd.default = M$;
  var Ev = Jn(), L$ = nd();
  function M$(e, t) {
    if (!e || !t) return e;
    for (let r of Ev.INHERIT_KEYS.optional)
      e[r] == null && (e[r] = t[r]);
    for (let r of Object.keys(t))
      r[0] === "_" && r !== "__clone" && (e[r] = t[r]);
    for (let r of Ev.INHERIT_KEYS.force)
      e[r] = t[r];
    return (0, L$.default)(e, t), e;
  }
  s(M$, "inherits");
});

// ../node_modules/@babel/types/lib/modifications/prependToMemberExpression.js
var Tv = T((Pd) => {
  "use strict";
  Object.defineProperty(Pd, "__esModule", {
    value: !0
  });
  Pd.default = U$;
  var R$ = nr(), q$ = Se();
  function U$(e, t) {
    if ((0, q$.isSuper)(e.object))
      throw new Error("Cannot prepend node to super property access (`super.foo`).");
    return e.object = (0, R$.memberExpression)(t, e.object), e;
  }
  s(U$, "prependToMemberExpression");
});

// ../node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js
var xv = T((Ad) => {
  "use strict";
  Object.defineProperty(Ad, "__esModule", {
    value: !0
  });
  Ad.default = V$;
  function V$(e) {
    let t = [].concat(e), r = /* @__PURE__ */ Object.create(null);
    for (; t.length; ) {
      let n = t.pop();
      if (n)
        switch (n.type) {
          case "ArrayPattern":
            t.push(...n.elements);
            break;
          case "AssignmentExpression":
          case "AssignmentPattern":
          case "ForInStatement":
          case "ForOfStatement":
            t.push(n.left);
            break;
          case "ObjectPattern":
            t.push(...n.properties);
            break;
          case "ObjectProperty":
            t.push(n.value);
            break;
          case "RestElement":
          case "UpdateExpression":
            t.push(n.argument);
            break;
          case "UnaryExpression":
            n.operator === "delete" && t.push(n.argument);
            break;
          case "Identifier":
            r[n.name] = n;
            break;
          default:
            break;
        }
    }
    return r;
  }
  s(V$, "getAssignmentIdentifiers");
});

// ../node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js
var qa = T((wd) => {
  "use strict";
  Object.defineProperty(wd, "__esModule", {
    value: !0
  });
  wd.default = Cd;
  var Sn = vt();
  function Cd(e, t, r, n) {
    let i = [].concat(e), a = /* @__PURE__ */ Object.create(null);
    for (; i.length; ) {
      let o = i.shift();
      if (!o || n && ((0, Sn.isAssignmentExpression)(o) || (0, Sn.isUnaryExpression)(o) || (0, Sn.isUpdateExpression)(o)))
        continue;
      if ((0, Sn.isIdentifier)(o)) {
        t ? (a[o.name] = a[o.name] || []).push(o) : a[o.name] = o;
        continue;
      }
      if ((0, Sn.isExportDeclaration)(o) && !(0, Sn.isExportAllDeclaration)(o)) {
        (0, Sn.isDeclaration)(o.declaration) && i.push(o.declaration);
        continue;
      }
      if (r) {
        if ((0, Sn.isFunctionDeclaration)(o)) {
          i.push(o.id);
          continue;
        }
        if ((0, Sn.isFunctionExpression)(o))
          continue;
      }
      let l = Cd.keys[o.type];
      if (l)
        for (let u = 0; u < l.length; u++) {
          let c = l[u], f = o[c];
          f && (Array.isArray(f) ? i.push(...f) : i.push(f));
        }
    }
    return a;
  }
  s(Cd, "getBindingIdentifiers");
  var $$ = {
    DeclareClass: ["id"],
    DeclareFunction: ["id"],
    DeclareModule: ["id"],
    DeclareVariable: ["id"],
    DeclareInterface: ["id"],
    DeclareTypeAlias: ["id"],
    DeclareOpaqueType: ["id"],
    InterfaceDeclaration: ["id"],
    TypeAlias: ["id"],
    OpaqueType: ["id"],
    CatchClause: ["param"],
    LabeledStatement: ["label"],
    UnaryExpression: ["argument"],
    AssignmentExpression: ["left"],
    ImportSpecifier: ["local"],
    ImportNamespaceSpecifier: ["local"],
    ImportDefaultSpecifier: ["local"],
    ImportDeclaration: ["specifiers"],
    ExportSpecifier: ["exported"],
    ExportNamespaceSpecifier: ["exported"],
    ExportDefaultSpecifier: ["exported"],
    FunctionDeclaration: ["id", "params"],
    FunctionExpression: ["id", "params"],
    ArrowFunctionExpression: ["params"],
    ObjectMethod: ["params"],
    ClassMethod: ["params"],
    ClassPrivateMethod: ["params"],
    ForInStatement: ["left"],
    ForOfStatement: ["left"],
    ClassDeclaration: ["id"],
    ClassExpression: ["id"],
    RestElement: ["argument"],
    UpdateExpression: ["argument"],
    ObjectProperty: ["value"],
    AssignmentPattern: ["left"],
    ArrayPattern: ["elements"],
    ObjectPattern: ["properties"],
    VariableDeclaration: ["declarations"],
    VariableDeclarator: ["id"]
  };
  Cd.keys = $$;
});

// ../node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js
var Sv = T((Nl) => {
  "use strict";
  Object.defineProperty(Nl, "__esModule", {
    value: !0
  });
  Nl.default = void 0;
  var W$ = qa(), Xxe = Nl.default = K$;
  function K$(e, t) {
    return (0, W$.default)(e, t, !0);
  }
  s(K$, "getOuterBindingIdentifiers");
});

// ../node_modules/@babel/types/lib/retrievers/getFunctionName.js
var Av = T((Dd) => {
  "use strict";
  Object.defineProperty(Dd, "__esModule", {
    value: !0
  });
  Dd.default = H$;
  var Cr = vt();
  function G$(e) {
    return (0, Cr.isNullLiteral)(e) ? "null" : (0, Cr.isRegExpLiteral)(e) ? `/${e.pattern}/${e.flags}` : (0, Cr.isTemplateLiteral)(e) ? e.quasis.
    map((t) => t.value.raw).join("") : e.value !== void 0 ? String(e.value) : null;
  }
  s(G$, "getNameFromLiteralId");
  function Pv(e) {
    if (!e.computed || (0, Cr.isLiteral)(e.key))
      return e.key;
  }
  s(Pv, "getObjectMemberKey");
  function H$(e, t) {
    if ("id" in e && e.id)
      return {
        name: e.id.name,
        originalNode: e.id
      };
    let r = "", n;
    if ((0, Cr.isObjectProperty)(t, {
      value: e
    }) ? n = Pv(t) : (0, Cr.isObjectMethod)(e) || (0, Cr.isClassMethod)(e) ? (n = Pv(e), e.kind === "get" ? r = "get " : e.kind === "set" &&
    (r = "set ")) : (0, Cr.isVariableDeclarator)(t, {
      init: e
    }) ? n = t.id : (0, Cr.isAssignmentExpression)(t, {
      operator: "=",
      right: e
    }) && (n = t.left), !n) return null;
    let i = (0, Cr.isLiteral)(n) ? G$(n) : (0, Cr.isIdentifier)(n) ? n.name : (0, Cr.isPrivateName)(n) ? n.id.name : null;
    return i == null ? null : {
      name: r + i,
      originalNode: n
    };
  }
  s(H$, "getFunctionName");
});

// ../node_modules/@babel/types/lib/traverse/traverse.js
var Cv = T((_d) => {
  "use strict";
  Object.defineProperty(_d, "__esModule", {
    value: !0
  });
  _d.default = z$;
  var Y$ = Ar();
  function z$(e, t, r) {
    typeof t == "function" && (t = {
      enter: t
    });
    let {
      enter: n,
      exit: i
    } = t;
    Id(e, n, i, r, []);
  }
  s(z$, "traverse");
  function Id(e, t, r, n, i) {
    let a = Y$.VISITOR_KEYS[e.type];
    if (a) {
      t && t(e, i, n);
      for (let o of a) {
        let l = e[o];
        if (Array.isArray(l))
          for (let u = 0; u < l.length; u++) {
            let c = l[u];
            c && (i.push({
              node: e,
              key: o,
              index: u
            }), Id(c, t, r, n, i), i.pop());
          }
        else l && (i.push({
          node: e,
          key: o
        }), Id(l, t, r, n, i), i.pop());
      }
      r && r(e, i, n);
    }
  }
  s(Id, "traverseSimpleImpl");
});

// ../node_modules/@babel/types/lib/validators/isBinding.js
var wv = T((Od) => {
  "use strict";
  Object.defineProperty(Od, "__esModule", {
    value: !0
  });
  Od.default = X$;
  var J$ = qa();
  function X$(e, t, r) {
    if (r && e.type === "Identifier" && t.type === "ObjectProperty" && r.type === "ObjectExpression")
      return !1;
    let n = J$.default.keys[t.type];
    if (n)
      for (let i = 0; i < n.length; i++) {
        let a = n[i], o = t[a];
        if (Array.isArray(o)) {
          if (o.includes(e)) return !0;
        } else if (o === e) return !0;
      }
    return !1;
  }
  s(X$, "isBinding");
});

// ../node_modules/@babel/types/lib/validators/isLet.js
var Bd = T((Nd) => {
  "use strict";
  Object.defineProperty(Nd, "__esModule", {
    value: !0
  });
  Nd.default = eW;
  var Q$ = vt(), Z$ = Jn();
  function eW(e) {
    return (0, Q$.isVariableDeclaration)(e) && (e.kind !== "var" || e[Z$.BLOCK_SCOPED_SYMBOL]);
  }
  s(eW, "isLet");
});

// ../node_modules/@babel/types/lib/validators/isBlockScoped.js
var Iv = T((kd) => {
  "use strict";
  Object.defineProperty(kd, "__esModule", {
    value: !0
  });
  kd.default = rW;
  var Dv = vt(), tW = Bd();
  function rW(e) {
    return (0, Dv.isFunctionDeclaration)(e) || (0, Dv.isClassDeclaration)(e) || (0, tW.default)(e);
  }
  s(rW, "isBlockScoped");
});

// ../node_modules/@babel/types/lib/validators/isImmutable.js
var _v = T((Fd) => {
  "use strict";
  Object.defineProperty(Fd, "__esModule", {
    value: !0
  });
  Fd.default = iW;
  var nW = dl(), sW = vt();
  function iW(e) {
    return (0, nW.default)(e.type, "Immutable") ? !0 : (0, sW.isIdentifier)(e) ? e.name === "undefined" : !1;
  }
  s(iW, "isImmutable");
});

// ../node_modules/@babel/types/lib/validators/isNodesEquivalent.js
var Nv = T((Ld) => {
  "use strict";
  Object.defineProperty(Ld, "__esModule", {
    value: !0
  });
  Ld.default = jd;
  var Ov = Ar();
  function jd(e, t) {
    if (typeof e != "object" || typeof t != "object" || e == null || t == null)
      return e === t;
    if (e.type !== t.type)
      return !1;
    let r = Object.keys(Ov.NODE_FIELDS[e.type] || e.type), n = Ov.VISITOR_KEYS[e.type];
    for (let i of r) {
      let a = e[i], o = t[i];
      if (typeof a != typeof o)
        return !1;
      if (!(a == null && o == null)) {
        if (a == null || o == null)
          return !1;
        if (Array.isArray(a)) {
          if (!Array.isArray(o) || a.length !== o.length)
            return !1;
          for (let l = 0; l < a.length; l++)
            if (!jd(a[l], o[l]))
              return !1;
          continue;
        }
        if (typeof a == "object" && !(n != null && n.includes(i))) {
          for (let l of Object.keys(a))
            if (a[l] !== o[l])
              return !1;
          continue;
        }
        if (!jd(a, o))
          return !1;
      }
    }
    return !0;
  }
  s(jd, "isNodesEquivalent");
});

// ../node_modules/@babel/types/lib/validators/isReferenced.js
var Bv = T((Md) => {
  "use strict";
  Object.defineProperty(Md, "__esModule", {
    value: !0
  });
  Md.default = aW;
  function aW(e, t, r) {
    switch (t.type) {
      case "MemberExpression":
      case "OptionalMemberExpression":
        return t.property === e ? !!t.computed : t.object === e;
      case "JSXMemberExpression":
        return t.object === e;
      case "VariableDeclarator":
        return t.init === e;
      case "ArrowFunctionExpression":
        return t.body === e;
      case "PrivateName":
        return !1;
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "ObjectMethod":
        return t.key === e ? !!t.computed : !1;
      case "ObjectProperty":
        return t.key === e ? !!t.computed : !r || r.type !== "ObjectPattern";
      case "ClassProperty":
      case "ClassAccessorProperty":
        return t.key === e ? !!t.computed : !0;
      case "ClassPrivateProperty":
        return t.key !== e;
      case "ClassDeclaration":
      case "ClassExpression":
        return t.superClass === e;
      case "AssignmentExpression":
        return t.right === e;
      case "AssignmentPattern":
        return t.right === e;
      case "LabeledStatement":
        return !1;
      case "CatchClause":
        return !1;
      case "RestElement":
        return !1;
      case "BreakStatement":
      case "ContinueStatement":
        return !1;
      case "FunctionDeclaration":
      case "FunctionExpression":
        return !1;
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        return !1;
      case "ExportSpecifier":
        return r != null && r.source ? !1 : t.local === e;
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
        return !1;
      case "ImportAttribute":
        return !1;
      case "JSXAttribute":
        return !1;
      case "ObjectPattern":
      case "ArrayPattern":
        return !1;
      case "MetaProperty":
        return !1;
      case "ObjectTypeProperty":
        return t.key !== e;
      case "TSEnumMember":
        return t.id !== e;
      case "TSPropertySignature":
        return t.key === e ? !!t.computed : !0;
    }
    return !0;
  }
  s(aW, "isReferenced");
});

// ../node_modules/@babel/types/lib/validators/isScope.js
var kv = T((Rd) => {
  "use strict";
  Object.defineProperty(Rd, "__esModule", {
    value: !0
  });
  Rd.default = oW;
  var Ns = vt();
  function oW(e, t) {
    return (0, Ns.isBlockStatement)(e) && ((0, Ns.isFunction)(t) || (0, Ns.isCatchClause)(t)) ? !1 : (0, Ns.isPattern)(e) && ((0, Ns.isFunction)(
    t) || (0, Ns.isCatchClause)(t)) ? !0 : (0, Ns.isScopable)(e);
  }
  s(oW, "isScope");
});

// ../node_modules/@babel/types/lib/validators/isSpecifierDefault.js
var jv = T((qd) => {
  "use strict";
  Object.defineProperty(qd, "__esModule", {
    value: !0
  });
  qd.default = lW;
  var Fv = vt();
  function lW(e) {
    return (0, Fv.isImportDefaultSpecifier)(e) || (0, Fv.isIdentifier)(e.imported || e.exported, {
      name: "default"
    });
  }
  s(lW, "isSpecifierDefault");
});

// ../node_modules/@babel/types/lib/validators/isValidES3Identifier.js
var Lv = T((Ud) => {
  "use strict";
  Object.defineProperty(Ud, "__esModule", {
    value: !0
  });
  Ud.default = fW;
  var uW = gi(), cW = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implement\
s", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transie\
nt", "volatile"]);
  function fW(e) {
    return (0, uW.default)(e) && !cW.has(e);
  }
  s(fW, "isValidES3Identifier");
});

// ../node_modules/@babel/types/lib/validators/isVar.js
var Mv = T((Vd) => {
  "use strict";
  Object.defineProperty(Vd, "__esModule", {
    value: !0
  });
  Vd.default = hW;
  var pW = vt(), dW = Jn();
  function hW(e) {
    return (0, pW.isVariableDeclaration)(e, {
      kind: "var"
    }) && !e[dW.BLOCK_SCOPED_SYMBOL];
  }
  s(hW, "isVar");
});

// ../node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js
var Rv = T((Kd) => {
  "use strict";
  Object.defineProperty(Kd, "__esModule", {
    value: !0
  });
  Kd.default = Bl;
  var mW = qa(), Bs = vt(), $d = nr(), Wd = Rp(), yW = Zn();
  function Bl(e, t) {
    let r = [], n = !0;
    for (let i of e)
      if ((0, Bs.isEmptyStatement)(i) || (n = !1), (0, Bs.isExpression)(i))
        r.push(i);
      else if ((0, Bs.isExpressionStatement)(i))
        r.push(i.expression);
      else if ((0, Bs.isVariableDeclaration)(i)) {
        if (i.kind !== "var") return;
        for (let a of i.declarations) {
          let o = (0, mW.default)(a);
          for (let l of Object.keys(o))
            t.push({
              kind: i.kind,
              id: (0, yW.default)(o[l])
            });
          a.init && r.push((0, $d.assignmentExpression)("=", a.id, a.init));
        }
        n = !0;
      } else if ((0, Bs.isIfStatement)(i)) {
        let a = i.consequent ? Bl([i.consequent], t) : (0, Wd.buildUndefinedNode)(), o = i.alternate ? Bl([i.alternate], t) : (0, Wd.buildUndefinedNode)();
        if (!a || !o) return;
        r.push((0, $d.conditionalExpression)(i.test, a, o));
      } else if ((0, Bs.isBlockStatement)(i)) {
        let a = Bl(i.body, t);
        if (!a) return;
        r.push(a);
      } else if ((0, Bs.isEmptyStatement)(i))
        e.indexOf(i) === 0 && (n = !0);
      else
        return;
    return n && r.push((0, Wd.buildUndefinedNode)()), r.length === 1 ? r[0] : (0, $d.sequenceExpression)(r);
  }
  s(Bl, "gatherSequenceExpressions");
});

// ../node_modules/@babel/types/lib/converters/toSequenceExpression.js
var qv = T((Gd) => {
  "use strict";
  Object.defineProperty(Gd, "__esModule", {
    value: !0
  });
  Gd.default = bW;
  var gW = Rv();
  function bW(e, t) {
    if (!(e != null && e.length)) return;
    let r = [], n = (0, gW.default)(e, r);
    if (n) {
      for (let i of r)
        t.push(i);
      return n;
    }
  }
  s(bW, "toSequenceExpression");
});

// ../node_modules/@babel/types/lib/index.js
var Se = T((ee) => {
  "use strict";
  Object.defineProperty(ee, "__esModule", {
    value: !0
  });
  var Pn = {
    react: !0,
    assertNode: !0,
    createTypeAnnotationBasedOnTypeof: !0,
    createUnionTypeAnnotation: !0,
    createFlowUnionType: !0,
    createTSUnionType: !0,
    cloneNode: !0,
    clone: !0,
    cloneDeep: !0,
    cloneDeepWithoutLoc: !0,
    cloneWithoutLoc: !0,
    addComment: !0,
    addComments: !0,
    inheritInnerComments: !0,
    inheritLeadingComments: !0,
    inheritsComments: !0,
    inheritTrailingComments: !0,
    removeComments: !0,
    ensureBlock: !0,
    toBindingIdentifierName: !0,
    toBlock: !0,
    toComputedKey: !0,
    toExpression: !0,
    toIdentifier: !0,
    toKeyAlias: !0,
    toStatement: !0,
    valueToNode: !0,
    appendToMemberExpression: !0,
    inherits: !0,
    prependToMemberExpression: !0,
    removeProperties: !0,
    removePropertiesDeep: !0,
    removeTypeDuplicates: !0,
    getAssignmentIdentifiers: !0,
    getBindingIdentifiers: !0,
    getOuterBindingIdentifiers: !0,
    getFunctionName: !0,
    traverse: !0,
    traverseFast: !0,
    shallowEqual: !0,
    is: !0,
    isBinding: !0,
    isBlockScoped: !0,
    isImmutable: !0,
    isLet: !0,
    isNode: !0,
    isNodesEquivalent: !0,
    isPlaceholderType: !0,
    isReferenced: !0,
    isScope: !0,
    isSpecifierDefault: !0,
    isType: !0,
    isValidES3Identifier: !0,
    isValidIdentifier: !0,
    isVar: !0,
    matchesPattern: !0,
    validate: !0,
    buildMatchMemberExpression: !0,
    __internal__deprecationWarning: !0
  };
  Object.defineProperty(ee, "__internal__deprecationWarning", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return xK.default;
    }, "get")
  });
  Object.defineProperty(ee, "addComment", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return _W.default;
    }, "get")
  });
  Object.defineProperty(ee, "addComments", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return OW.default;
    }, "get")
  });
  Object.defineProperty(ee, "appendToMemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return GW.default;
    }, "get")
  });
  Object.defineProperty(ee, "assertNode", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return xW.default;
    }, "get")
  });
  Object.defineProperty(ee, "buildMatchMemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return TK.default;
    }, "get")
  });
  Object.defineProperty(ee, "clone", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return CW.default;
    }, "get")
  });
  Object.defineProperty(ee, "cloneDeep", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return wW.default;
    }, "get")
  });
  Object.defineProperty(ee, "cloneDeepWithoutLoc", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return DW.default;
    }, "get")
  });
  Object.defineProperty(ee, "cloneNode", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return AW.default;
    }, "get")
  });
  Object.defineProperty(ee, "cloneWithoutLoc", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return IW.default;
    }, "get")
  });
  Object.defineProperty(ee, "createFlowUnionType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Uv.default;
    }, "get")
  });
  Object.defineProperty(ee, "createTSUnionType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return PW.default;
    }, "get")
  });
  Object.defineProperty(ee, "createTypeAnnotationBasedOnTypeof", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return SW.default;
    }, "get")
  });
  Object.defineProperty(ee, "createUnionTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Uv.default;
    }, "get")
  });
  Object.defineProperty(ee, "ensureBlock", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return LW.default;
    }, "get")
  });
  Object.defineProperty(ee, "getAssignmentIdentifiers", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return QW.default;
    }, "get")
  });
  Object.defineProperty(ee, "getBindingIdentifiers", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ZW.default;
    }, "get")
  });
  Object.defineProperty(ee, "getFunctionName", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return tK.default;
    }, "get")
  });
  Object.defineProperty(ee, "getOuterBindingIdentifiers", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return eK.default;
    }, "get")
  });
  Object.defineProperty(ee, "inheritInnerComments", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return NW.default;
    }, "get")
  });
  Object.defineProperty(ee, "inheritLeadingComments", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return BW.default;
    }, "get")
  });
  Object.defineProperty(ee, "inheritTrailingComments", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return FW.default;
    }, "get")
  });
  Object.defineProperty(ee, "inherits", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return HW.default;
    }, "get")
  });
  Object.defineProperty(ee, "inheritsComments", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return kW.default;
    }, "get")
  });
  Object.defineProperty(ee, "is", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return sK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isBinding", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return iK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isBlockScoped", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return aK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isImmutable", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return oK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isLet", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return lK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isNode", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return uK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isNodesEquivalent", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return cK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isPlaceholderType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return fK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isReferenced", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return pK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isScope", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return dK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isSpecifierDefault", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return hK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isType", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return mK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isValidES3Identifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return yK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isValidIdentifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return gK.default;
    }, "get")
  });
  Object.defineProperty(ee, "isVar", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return bK.default;
    }, "get")
  });
  Object.defineProperty(ee, "matchesPattern", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return EK.default;
    }, "get")
  });
  Object.defineProperty(ee, "prependToMemberExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return YW.default;
    }, "get")
  });
  ee.react = void 0;
  Object.defineProperty(ee, "removeComments", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return jW.default;
    }, "get")
  });
  Object.defineProperty(ee, "removeProperties", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return zW.default;
    }, "get")
  });
  Object.defineProperty(ee, "removePropertiesDeep", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return JW.default;
    }, "get")
  });
  Object.defineProperty(ee, "removeTypeDuplicates", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return XW.default;
    }, "get")
  });
  Object.defineProperty(ee, "shallowEqual", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return nK.default;
    }, "get")
  });
  Object.defineProperty(ee, "toBindingIdentifierName", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return MW.default;
    }, "get")
  });
  Object.defineProperty(ee, "toBlock", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return RW.default;
    }, "get")
  });
  Object.defineProperty(ee, "toComputedKey", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return qW.default;
    }, "get")
  });
  Object.defineProperty(ee, "toExpression", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return UW.default;
    }, "get")
  });
  Object.defineProperty(ee, "toIdentifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return VW.default;
    }, "get")
  });
  Object.defineProperty(ee, "toKeyAlias", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return $W.default;
    }, "get")
  });
  Object.defineProperty(ee, "toStatement", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return WW.default;
    }, "get")
  });
  Object.defineProperty(ee, "traverse", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return kl.default;
    }, "get")
  });
  Object.defineProperty(ee, "traverseFast", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return rK.default;
    }, "get")
  });
  Object.defineProperty(ee, "validate", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return vK.default;
    }, "get")
  });
  Object.defineProperty(ee, "valueToNode", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return KW.default;
    }, "get")
  });
  var EW = W1(), vW = K1(), TW = RE(), xW = qE(), Hd = UE();
  Object.keys(Hd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(Pn, e) || e in ee && ee[e] === Hd[e] || Object.defineProperty(
    ee, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Hd[e];
      }, "get")
    });
  });
  var SW = VE(), Uv = KE(), PW = zE(), Yd = nr();
  Object.keys(Yd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(Pn, e) || e in ee && ee[e] === Yd[e] || Object.defineProperty(
    ee, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Yd[e];
      }, "get")
    });
  });
  var zd = JE();
  Object.keys(zd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(Pn, e) || e in ee && ee[e] === zd[e] || Object.defineProperty(
    ee, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return zd[e];
      }, "get")
    });
  });
  var Jd = Rp();
  Object.keys(Jd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(Pn, e) || e in ee && ee[e] === Jd[e] || Object.defineProperty(
    ee, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Jd[e];
      }, "get")
    });
  });
  var AW = Zn(), CW = rv(), wW = nv(), DW = sv(), IW = iv(), _W = av(), OW = Hp(), NW = Xp(), BW = Zp(), kW = nd(), FW = td(), jW = ov(), Xd = lv();
  Object.keys(Xd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(Pn, e) || e in ee && ee[e] === Xd[e] || Object.defineProperty(
    ee, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Xd[e];
      }, "get")
    });
  });
  var Qd = Jn();
  Object.keys(Qd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(Pn, e) || e in ee && ee[e] === Qd[e] || Object.defineProperty(
    ee, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Qd[e];
      }, "get")
    });
  });
  var LW = uv(), MW = cv(), RW = od(), qW = fv(), UW = pv(), VW = cd(), $W = mv(), WW = yv(), KW = gv(), Zd = Ar();
  Object.keys(Zd).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(Pn, e) || e in ee && ee[e] === Zd[e] || Object.defineProperty(
    ee, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Zd[e];
      }, "get")
    });
  });
  var GW = bv(), HW = vv(), YW = Tv(), zW = gd(), JW = Ed(), XW = kp(), QW = xv(), ZW = qa(), eK = Sv(), tK = Av(), kl = Cv();
  Object.keys(kl).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(Pn, e) || e in ee && ee[e] === kl[e] || Object.defineProperty(
    ee, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return kl[e];
      }, "get")
    });
  });
  var rK = md(), nK = fl(), sK = mi(), iK = wv(), aK = Iv(), oK = _v(), lK = Bd(), uK = Op(), cK = Nv(), fK = sp(), pK = Bv(), dK = kv(), hK = jv(),
  mK = dl(), yK = Lv(), gK = gi(), bK = Mv(), EK = Qf(), vK = bl(), TK = ep(), eh = vt();
  Object.keys(eh).forEach(function(e) {
    e === "default" || e === "__esModule" || Object.prototype.hasOwnProperty.call(Pn, e) || e in ee && ee[e] === eh[e] || Object.defineProperty(
    ee, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return eh[e];
      }, "get")
    });
  });
  var xK = Aa(), DSe = ee.react = {
    isReactComponent: EW.default,
    isCompatTag: vW.default,
    buildChildren: TW.default
  };
  ee.toSequenceExpression = qv().default;
});

// ../node_modules/@babel/template/lib/formatters.js
var Vv = T((wr) => {
  "use strict";
  Object.defineProperty(wr, "__esModule", {
    value: !0
  });
  wr.statements = wr.statement = wr.smart = wr.program = wr.expression = void 0;
  var SK = Se(), {
    assertExpressionStatement: PK
  } = SK;
  function th(e) {
    return {
      code: /* @__PURE__ */ s((t) => `/* @babel/template */;
${t}`, "code"),
      validate: /* @__PURE__ */ s(() => {
      }, "validate"),
      unwrap: /* @__PURE__ */ s((t) => e(t.program.body.slice(1)), "unwrap")
    };
  }
  s(th, "makeStatementFormatter");
  var OSe = wr.smart = th((e) => e.length > 1 ? e : e[0]), NSe = wr.statements = th((e) => e), BSe = wr.statement = th((e) => {
    if (e.length === 0)
      throw new Error("Found nothing to return.");
    if (e.length > 1)
      throw new Error("Found multiple statements but wanted one");
    return e[0];
  }), AK = wr.expression = {
    code: /* @__PURE__ */ s((e) => `(
${e}
)`, "code"),
    validate: /* @__PURE__ */ s((e) => {
      if (e.program.body.length > 1)
        throw new Error("Found multiple statements but wanted one");
      if (AK.unwrap(e).start === 0)
        throw new Error("Parse result included parens.");
    }, "validate"),
    unwrap: /* @__PURE__ */ s(({
      program: e
    }) => {
      let [t] = e.body;
      return PK(t), t.expression;
    }, "unwrap")
  }, kSe = wr.program = {
    code: /* @__PURE__ */ s((e) => e, "code"),
    validate: /* @__PURE__ */ s(() => {
    }, "validate"),
    unwrap: /* @__PURE__ */ s((e) => e.program, "unwrap")
  };
});

// ../node_modules/@babel/template/lib/options.js
var Fl = T((Ua) => {
  "use strict";
  Object.defineProperty(Ua, "__esModule", {
    value: !0
  });
  Ua.merge = DK;
  Ua.normalizeReplacements = _K;
  Ua.validate = IK;
  var CK = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
  function wK(e, t) {
    if (e == null) return {};
    var r = {}, n = Object.keys(e), i, a;
    for (a = 0; a < n.length; a++)
      i = n[a], !(t.indexOf(i) >= 0) && (r[i] = e[i]);
    return r;
  }
  s(wK, "_objectWithoutPropertiesLoose");
  function DK(e, t) {
    let {
      placeholderWhitelist: r = e.placeholderWhitelist,
      placeholderPattern: n = e.placeholderPattern,
      preserveComments: i = e.preserveComments,
      syntacticPlaceholders: a = e.syntacticPlaceholders
    } = t;
    return {
      parser: Object.assign({}, e.parser, t.parser),
      placeholderWhitelist: r,
      placeholderPattern: n,
      preserveComments: i,
      syntacticPlaceholders: a
    };
  }
  s(DK, "merge");
  function IK(e) {
    if (e != null && typeof e != "object")
      throw new Error("Unknown template options.");
    let t = e || {}, {
      placeholderWhitelist: r,
      placeholderPattern: n,
      preserveComments: i,
      syntacticPlaceholders: a
    } = t, o = wK(t, CK);
    if (r != null && !(r instanceof Set))
      throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
    if (n != null && !(n instanceof RegExp) && n !== !1)
      throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
    if (i != null && typeof i != "boolean")
      throw new Error("'.preserveComments' must be a boolean, null, or undefined");
    if (a != null && typeof a != "boolean")
      throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
    if (a === !0 && (r != null || n != null))
      throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
    return {
      parser: o,
      placeholderWhitelist: r || void 0,
      placeholderPattern: n ?? void 0,
      preserveComments: i ?? void 0,
      syntacticPlaceholders: a ?? void 0
    };
  }
  s(IK, "validate");
  function _K(e) {
    if (Array.isArray(e))
      return e.reduce((t, r, n) => (t["$" + n] = r, t), {});
    if (typeof e == "object" || e == null)
      return e || void 0;
    throw new Error("Template replacements must be an array, object, null, or undefined");
  }
  s(_K, "normalizeReplacements");
});

// ../node_modules/@babel/parser/lib/index.js
var js = T((Xa) => {
  "use strict";
  Object.defineProperty(Xa, "__esModule", {
    value: !0
  });
  function OK(e, t) {
    if (e == null) return {};
    var r = {};
    for (var n in e) if ({}.hasOwnProperty.call(e, n)) {
      if (t.includes(n)) continue;
      r[n] = e[n];
    }
    return r;
  }
  s(OK, "_objectWithoutPropertiesLoose");
  var cn = class {
    static {
      s(this, "Position");
    }
    constructor(t, r, n) {
      this.line = void 0, this.column = void 0, this.index = void 0, this.line = t, this.column = r, this.index = n;
    }
  }, Pi = class {
    static {
      s(this, "SourceLocation");
    }
    constructor(t, r) {
      this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = t, this.end = r;
    }
  };
  function ir(e, t) {
    let {
      line: r,
      column: n,
      index: i
    } = e;
    return new cn(r, n + t, i + t);
  }
  s(ir, "createPositionWithColumnOffset");
  var $v = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED", NK = {
    ImportMetaOutsideModule: {
      message: `import.meta may appear only with 'sourceType: "module"'`,
      code: $v
    },
    ImportOutsideModule: {
      message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
      code: $v
    }
  }, Wv = {
    ArrayPattern: "array destructuring pattern",
    AssignmentExpression: "assignment expression",
    AssignmentPattern: "assignment expression",
    ArrowFunctionExpression: "arrow function expression",
    ConditionalExpression: "conditional expression",
    CatchClause: "catch clause",
    ForOfStatement: "for-of statement",
    ForInStatement: "for-in statement",
    ForStatement: "for-loop",
    FormalParameters: "function parameter list",
    Identifier: "identifier",
    ImportSpecifier: "import specifier",
    ImportDefaultSpecifier: "import default specifier",
    ImportNamespaceSpecifier: "import namespace specifier",
    ObjectPattern: "object destructuring pattern",
    ParenthesizedExpression: "parenthesized expression",
    RestElement: "rest element",
    UpdateExpression: {
      true: "prefix operation",
      false: "postfix operation"
    },
    VariableDeclarator: "variable declaration",
    YieldExpression: "yield expression"
  }, Ml = /* @__PURE__ */ s((e) => e.type === "UpdateExpression" ? Wv.UpdateExpression[`${e.prefix}`] : Wv[e.type], "toNodeDescription"), BK = {
    AccessorIsGenerator: /* @__PURE__ */ s(({
      kind: e
    }) => `A ${e}ter cannot be a generator.`, "AccessorIsGenerator"),
    ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
    AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
    AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
    AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
    AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
    AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
    BadGetterArity: "A 'get' accessor must not have any formal parameters.",
    BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
    BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
    ConstructorClassField: "Classes may not have a field named 'constructor'.",
    ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
    ConstructorIsAccessor: "Class constructor may not be an accessor.",
    ConstructorIsAsync: "Constructor can't be an async function.",
    ConstructorIsGenerator: "Constructor can't be a generator.",
    DeclarationMissingInitializer: /* @__PURE__ */ s(({
      kind: e
    }) => `Missing initializer in ${e} declaration.`, "DeclarationMissingInitializer"),
    DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(deco\
rator)(args)'.",
    DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use\
 the 'export @decorator class {}' syntax.",
    DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the s\
ame time.",
    DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
    DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use \
the '@decorator export class {}' syntax.",
    DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
    DecoratorStaticBlock: "Decorators can't be used with a static block.",
    DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.',
    DeletePrivateField: "Deleting a private field is not allowed.",
    DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
    DuplicateConstructor: "Duplicate constructor in the same class.",
    DuplicateDefaultExport: "Only one default export allowed per module.",
    DuplicateExport: /* @__PURE__ */ s(({
      exportName: e
    }) => `\`${e}\` has already been exported. Exported identifiers must be unique.`, "DuplicateExport"),
    DuplicateProto: "Redefinition of __proto__ property.",
    DuplicateRegExpFlags: "Duplicate regular expression flag.",
    DynamicImportPhaseRequiresImportExpressions: /* @__PURE__ */ s(({
      phase: e
    }) => `'import.${e}(...)' can only be parsed when using the 'createImportExpressions' option.`, "DynamicImportPhaseRequiresImportExpress\
ions"),
    ElementAfterRest: "Rest element must be last element.",
    EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
    ExportBindingIsString: /* @__PURE__ */ s(({
      localName: e,
      exportName: t
    }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${e}' as '${t}' } from 'some-module'\`?`, "ExportBindingIsString"),
    ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
    ForInOfLoopInitializer: /* @__PURE__ */ s(({
      type: e
    }) => `'${e === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`, "ForInOfLoopInitialize\
r"),
    ForInUsing: "For-in loop may not start with 'using' declaration.",
    ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
    ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
    GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
    IllegalBreakContinue: /* @__PURE__ */ s(({
      type: e
    }) => `Unsyntactic ${e === "BreakStatement" ? "break" : "continue"}.`, "IllegalBreakContinue"),
    IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
    IllegalReturn: "'return' outside of function.",
    ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You \
can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.",
    ImportBindingIsString: /* @__PURE__ */ s(({
      importName: e
    }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${e}" as foo }\`?`, "ImportBindingIsString"),
    ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
    ImportCallArity: /* @__PURE__ */ s(({
      maxArgumentCount: e
    }) => `\`import()\` requires exactly ${e === 1 ? "one argument" : "one or two arguments"}.`, "ImportCallArity"),
    ImportCallNotNewExpression: "Cannot use new with import(...).",
    ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
    ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
    ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
    ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
    IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
    InvalidBigIntLiteral: "Invalid BigIntLiteral.",
    InvalidCodePoint: "Code point out of bounds.",
    InvalidCoverInitializedName: "Invalid shorthand property initializer.",
    InvalidDecimal: "Invalid decimal.",
    InvalidDigit: /* @__PURE__ */ s(({
      radix: e
    }) => `Expected number in radix ${e}.`, "InvalidDigit"),
    InvalidEscapeSequence: "Bad character escape sequence.",
    InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
    InvalidEscapedReservedWord: /* @__PURE__ */ s(({
      reservedWord: e
    }) => `Escape sequence in keyword ${e}.`, "InvalidEscapedReservedWord"),
    InvalidIdentifier: /* @__PURE__ */ s(({
      identifierName: e
    }) => `Invalid identifier ${e}.`, "InvalidIdentifier"),
    InvalidLhs: /* @__PURE__ */ s(({
      ancestor: e
    }) => `Invalid left-hand side in ${Ml(e)}.`, "InvalidLhs"),
    InvalidLhsBinding: /* @__PURE__ */ s(({
      ancestor: e
    }) => `Binding invalid left-hand side in ${Ml(e)}.`, "InvalidLhsBinding"),
    InvalidLhsOptionalChaining: /* @__PURE__ */ s(({
      ancestor: e
    }) => `Invalid optional chaining in the left-hand side of ${Ml(e)}.`, "InvalidLhsOptionalChaining"),
    InvalidNumber: "Invalid number.",
    InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
    InvalidOrUnexpectedToken: /* @__PURE__ */ s(({
      unexpected: e
    }) => `Unexpected character '${e}'.`, "InvalidOrUnexpectedToken"),
    InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
    InvalidPrivateFieldResolution: /* @__PURE__ */ s(({
      identifierName: e
    }) => `Private name #${e} is not defined.`, "InvalidPrivateFieldResolution"),
    InvalidPropertyBindingPattern: "Binding member expression.",
    InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
    InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
    LabelRedeclaration: /* @__PURE__ */ s(({
      labelName: e
    }) => `Label '${e}' is already declared.`, "LabelRedeclaration"),
    LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
    LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
    MalformedRegExpFlags: "Invalid regular expression flag.",
    MissingClassName: "A class name is required.",
    MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
    MissingSemicolon: "Missing semicolon.",
    MissingPlugin: /* @__PURE__ */ s(({
      missingPlugin: e
    }) => `This experimental syntax requires enabling the parser plugin: ${e.map((t) => JSON.stringify(t)).join(", ")}.`, "MissingPlugin"),
    MissingOneOfPlugins: /* @__PURE__ */ s(({
      missingPlugin: e
    }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${e.map((t) => JSON.stringify(t)).join(", ")}.`,
    "MissingOneOfPlugins"),
    MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
    MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
    ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
    ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
    ModuleAttributesWithDuplicateKeys: /* @__PURE__ */ s(({
      key: e
    }) => `Duplicate key "${e}" is not allowed in module attributes.`, "ModuleAttributesWithDuplicateKeys"),
    ModuleExportNameHasLoneSurrogate: /* @__PURE__ */ s(({
      surrogateCharCode: e
    }) => `An export name cannot include a lone surrogate, found '\\u${e.toString(16)}'.`, "ModuleExportNameHasLoneSurrogate"),
    ModuleExportUndefined: /* @__PURE__ */ s(({
      localName: e
    }) => `Export '${e}' is not defined.`, "ModuleExportUndefined"),
    MultipleDefaultsInSwitch: "Multiple default clauses.",
    NewlineAfterThrow: "Illegal newline after throw.",
    NoCatchOrFinally: "Missing catch or finally clause.",
    NumberIdentifier: "Identifier directly after number.",
    NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
    ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
    OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
    OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
    OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
    ParamDupe: "Argument name clash.",
    PatternHasAccessor: "Object pattern can't contain getter or setter.",
    PatternHasMethod: "Object pattern can't contain methods.",
    PrivateInExpectedIn: /* @__PURE__ */ s(({
      identifierName: e
    }) => `Private names are only allowed in property accesses (\`obj.#${e}\`) or in \`in\` expressions (\`#${e} in obj\`).`, "PrivateInExpe\
ctedIn"),
    PrivateNameRedeclaration: /* @__PURE__ */ s(({
      identifierName: e
    }) => `Duplicate private name #${e}.`, "PrivateNameRedeclaration"),
    RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 're\
cordAndTuple' plugin is set to 'bar'.",
    RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the\
 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of th\
e 'recordAndTuple' plugin is set to 'hash'.",
    RecordNoProto: "'__proto__' is not allowed in Record expressions.",
    RestTrailingComma: "Unexpected trailing comma after rest element.",
    SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
    SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if sta\
tement.",
    SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.',
    StaticPrototype: "Classes may not have static property named prototype.",
    SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or n\
ot extending another class?",
    SuperPrivateField: "Private fields can't be accessed on super.",
    TrailingDecorator: "Decorators must be attached to a class element.",
    TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'reco\
rdAndTuple' plugin is set to 'bar'.",
    TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the '\
recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the \
'recordAndTuple' plugin is set to 'hash'.",
    UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
    UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
    UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
    UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
    UnexpectedKeyword: /* @__PURE__ */ s(({
      keyword: e
    }) => `Unexpected keyword '${e}'.`, "UnexpectedKeyword"),
    UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
    UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
    UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
    UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
    UnexpectedPrivateField: "Unexpected private name.",
    UnexpectedReservedWord: /* @__PURE__ */ s(({
      reservedWord: e
    }) => `Unexpected reserved word '${e}'.`, "UnexpectedReservedWord"),
    UnexpectedSuper: "'super' is only allowed in object methods and classes.",
    UnexpectedToken: /* @__PURE__ */ s(({
      expected: e,
      unexpected: t
    }) => `Unexpected token${t ? ` '${t}'.` : ""}${e ? `, expected "${e}"` : ""}`, "UnexpectedToken"),
    UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
    UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
    UnsupportedBind: "Binding should be performed on object property.",
    UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
    UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
    UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
    UnsupportedMetaProperty: /* @__PURE__ */ s(({
      target: e,
      onlyValidPropertyName: t
    }) => `The only valid meta property for ${e} is ${e}.${t}.`, "UnsupportedMetaProperty"),
    UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
    UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
    UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
    UnterminatedComment: "Unterminated comment.",
    UnterminatedRegExp: "Unterminated regular expression.",
    UnterminatedString: "Unterminated string constant.",
    UnterminatedTemplate: "Unterminated template.",
    UsingDeclarationExport: "Using declaration cannot be exported.",
    UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
    VarRedeclaration: /* @__PURE__ */ s(({
      identifierName: e
    }) => `Identifier '${e}' has already been declared.`, "VarRedeclaration"),
    YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
    YieldInParameter: "Yield expression is not allowed in formal parameters.",
    ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
  }, kK = {
    StrictDelete: "Deleting local variable in strict mode.",
    StrictEvalArguments: /* @__PURE__ */ s(({
      referenceName: e
    }) => `Assigning to '${e}' in strict mode.`, "StrictEvalArguments"),
    StrictEvalArgumentsBinding: /* @__PURE__ */ s(({
      bindingName: e
    }) => `Binding '${e}' in strict mode.`, "StrictEvalArgumentsBinding"),
    StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
    StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
    StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
    StrictWith: "'with' in strict mode."
  }, FK = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]), jK = {
    PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due \
to its loose operator precedence.",
    PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" opt\
ion.',
    PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
    PipeTopicUnconfiguredToken: /* @__PURE__ */ s(({
      token: e
    }) => `Invalid topic token ${e}. In order to use ${e} as a topic reference, the pipelineOperator plugin must be configured with { "propo\
sal": "hack", "topicToken": "${e}" }.`, "PipeTopicUnconfiguredToken"),
    PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
    PipeUnparenthesizedBody: /* @__PURE__ */ s(({
      type: e
    }) => `Hack-style pipe body cannot be an unparenthesized ${Ml({
      type: e
    })}; please wrap it in parentheses.`, "PipeUnparenthesizedBody"),
    PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
    PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
    PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
    PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
    PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
    PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "sma\
rt" option.'
  }, LK = ["message"];
  function Kv(e, t, r) {
    Object.defineProperty(e, t, {
      enumerable: !1,
      configurable: !0,
      value: r
    });
  }
  s(Kv, "defineHidden");
  function MK({
    toMessage: e,
    code: t,
    reasonCode: r,
    syntaxPlugin: n
  }) {
    let i = r === "MissingPlugin" || r === "MissingOneOfPlugins";
    return /* @__PURE__ */ s(function a(o, l) {
      let u = new SyntaxError();
      return u.code = t, u.reasonCode = r, u.loc = o, u.pos = o.index, u.syntaxPlugin = n, i && (u.missingPlugin = l.missingPlugin), Kv(u, "\
clone", /* @__PURE__ */ s(function(f = {}) {
        var p;
        let {
          line: h,
          column: y,
          index: v
        } = (p = f.loc) != null ? p : o;
        return a(new cn(h, y, v), Object.assign({}, l, f.details));
      }, "clone")), Kv(u, "details", l), Object.defineProperty(u, "message", {
        configurable: !0,
        get() {
          let c = `${e(l)} (${o.line}:${o.column})`;
          return this.message = c, c;
        },
        set(c) {
          Object.defineProperty(this, "message", {
            value: c,
            writable: !0
          });
        }
      }), u;
    }, "constructor");
  }
  s(MK, "toParseErrorConstructor");
  function Dn(e, t) {
    if (Array.isArray(e))
      return (n) => Dn(n, e[0]);
    let r = {};
    for (let n of Object.keys(e)) {
      let i = e[n], a = typeof i == "string" ? {
        message: /* @__PURE__ */ s(() => i, "message")
      } : typeof i == "function" ? {
        message: i
      } : i, {
        message: o
      } = a, l = OK(a, LK), u = typeof o == "string" ? () => o : o;
      r[n] = MK(Object.assign({
        code: "BABEL_PARSER_SYNTAX_ERROR",
        reasonCode: n,
        toMessage: u
      }, t ? {
        syntaxPlugin: t
      } : {}, l));
    }
    return r;
  }
  s(Dn, "ParseErrorEnum");
  var _ = Object.assign({}, Dn(NK), Dn(BK), Dn(kK), Dn`pipelineOperator`(jK)), {
    defineProperty: RK
  } = Object, Gv = /* @__PURE__ */ s((e, t) => {
    e && RK(e, t, {
      enumerable: !1,
      value: e[t]
    });
  }, "toUnenumerable");
  function Va(e) {
    return Gv(e.loc.start, "index"), Gv(e.loc.end, "index"), e;
  }
  s(Va, "toESTreeLocation");
  var qK = /* @__PURE__ */ s((e) => class extends e {
    static {
      s(this, "ESTreeParserMixin");
    }
    parse() {
      let r = Va(super.parse());
      return this.options.tokens && (r.tokens = r.tokens.map(Va)), r;
    }
    parseRegExpLiteral({
      pattern: r,
      flags: n
    }) {
      let i = null;
      try {
        i = new RegExp(r, n);
      } catch {
      }
      let a = this.estreeParseLiteral(i);
      return a.regex = {
        pattern: r,
        flags: n
      }, a;
    }
    parseBigIntLiteral(r) {
      let n;
      try {
        n = BigInt(r);
      } catch {
        n = null;
      }
      let i = this.estreeParseLiteral(n);
      return i.bigint = String(i.value || r), i;
    }
    parseDecimalLiteral(r) {
      let i = this.estreeParseLiteral(null);
      return i.decimal = String(i.value || r), i;
    }
    estreeParseLiteral(r) {
      return this.parseLiteral(r, "Literal");
    }
    parseStringLiteral(r) {
      return this.estreeParseLiteral(r);
    }
    parseNumericLiteral(r) {
      return this.estreeParseLiteral(r);
    }
    parseNullLiteral() {
      return this.estreeParseLiteral(null);
    }
    parseBooleanLiteral(r) {
      return this.estreeParseLiteral(r);
    }
    directiveToStmt(r) {
      let n = r.value;
      delete r.value, n.type = "Literal", n.raw = n.extra.raw, n.value = n.extra.expressionValue;
      let i = r;
      return i.type = "ExpressionStatement", i.expression = n, i.directive = n.extra.rawValue, delete n.extra, i;
    }
    initFunction(r, n) {
      super.initFunction(r, n), r.expression = !1;
    }
    checkDeclaration(r) {
      r != null && this.isObjectProperty(r) ? this.checkDeclaration(r.value) : super.checkDeclaration(r);
    }
    getObjectOrClassMethodParams(r) {
      return r.value.params;
    }
    isValidDirective(r) {
      var n;
      return r.type === "ExpressionStatement" && r.expression.type === "Literal" && typeof r.expression.value == "string" && !((n = r.expression.
      extra) != null && n.parenthesized);
    }
    parseBlockBody(r, n, i, a, o) {
      super.parseBlockBody(r, n, i, a, o);
      let l = r.directives.map((u) => this.directiveToStmt(u));
      r.body = l.concat(r.body), delete r.directives;
    }
    pushClassMethod(r, n, i, a, o, l) {
      this.parseMethod(n, i, a, o, l, "ClassMethod", !0), n.typeParameters && (n.value.typeParameters = n.typeParameters, delete n.typeParameters),
      r.body.push(n);
    }
    parsePrivateName() {
      let r = super.parsePrivateName();
      return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(r) : r;
    }
    convertPrivateNameToPrivateIdentifier(r) {
      let n = super.getPrivateNameSV(r);
      return r = r, delete r.id, r.name = n, r.type = "PrivateIdentifier", r;
    }
    isPrivateName(r) {
      return this.getPluginOption("estree", "classFeatures") ? r.type === "PrivateIdentifier" : super.isPrivateName(r);
    }
    getPrivateNameSV(r) {
      return this.getPluginOption("estree", "classFeatures") ? r.name : super.getPrivateNameSV(r);
    }
    parseLiteral(r, n) {
      let i = super.parseLiteral(r, n);
      return i.raw = i.extra.raw, delete i.extra, i;
    }
    parseFunctionBody(r, n, i = !1) {
      super.parseFunctionBody(r, n, i), r.expression = r.body.type !== "BlockStatement";
    }
    parseMethod(r, n, i, a, o, l, u = !1) {
      let c = this.startNode();
      return c.kind = r.kind, c = super.parseMethod(c, n, i, a, o, l, u), c.type = "FunctionExpression", delete c.kind, r.value = c, l === "\
ClassPrivateMethod" && (r.computed = !1), this.finishNode(r, "MethodDefinition");
    }
    nameIsConstructor(r) {
      return r.type === "Literal" ? r.value === "constructor" : super.nameIsConstructor(r);
    }
    parseClassProperty(...r) {
      let n = super.parseClassProperty(...r);
      return this.getPluginOption("estree", "classFeatures") && (n.type = "PropertyDefinition"), n;
    }
    parseClassPrivateProperty(...r) {
      let n = super.parseClassPrivateProperty(...r);
      return this.getPluginOption("estree", "classFeatures") && (n.type = "PropertyDefinition", n.computed = !1), n;
    }
    parseObjectMethod(r, n, i, a, o) {
      let l = super.parseObjectMethod(r, n, i, a, o);
      return l && (l.type = "Property", l.kind === "method" && (l.kind = "init"), l.shorthand = !1), l;
    }
    parseObjectProperty(r, n, i, a) {
      let o = super.parseObjectProperty(r, n, i, a);
      return o && (o.kind = "init", o.type = "Property"), o;
    }
    isValidLVal(r, n, i) {
      return r === "Property" ? "value" : super.isValidLVal(r, n, i);
    }
    isAssignable(r, n) {
      return r != null && this.isObjectProperty(r) ? this.isAssignable(r.value, n) : super.isAssignable(r, n);
    }
    toAssignable(r, n = !1) {
      if (r != null && this.isObjectProperty(r)) {
        let {
          key: i,
          value: a
        } = r;
        this.isPrivateName(i) && this.classScope.usePrivateName(this.getPrivateNameSV(i), i.loc.start), this.toAssignable(a, n);
      } else
        super.toAssignable(r, n);
    }
    toAssignableObjectExpressionProp(r, n, i) {
      r.type === "Property" && (r.kind === "get" || r.kind === "set") ? this.raise(_.PatternHasAccessor, r.key) : r.type === "Property" && r.
      method ? this.raise(_.PatternHasMethod, r.key) : super.toAssignableObjectExpressionProp(r, n, i);
    }
    finishCallExpression(r, n) {
      let i = super.finishCallExpression(r, n);
      if (i.callee.type === "Import") {
        if (i.type = "ImportExpression", i.source = i.arguments[0], this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
          var a, o;
          i.options = (a = i.arguments[1]) != null ? a : null, i.attributes = (o = i.arguments[1]) != null ? o : null;
        }
        delete i.arguments, delete i.callee;
      }
      return i;
    }
    toReferencedArguments(r) {
      r.type !== "ImportExpression" && super.toReferencedArguments(r);
    }
    parseExport(r, n) {
      let i = this.state.lastTokStartLoc, a = super.parseExport(r, n);
      switch (a.type) {
        case "ExportAllDeclaration":
          a.exported = null;
          break;
        case "ExportNamedDeclaration":
          a.specifiers.length === 1 && a.specifiers[0].type === "ExportNamespaceSpecifier" && (a.type = "ExportAllDeclaration", a.exported =
          a.specifiers[0].exported, delete a.specifiers);
        case "ExportDefaultDeclaration":
          {
            var o;
            let {
              declaration: l
            } = a;
            l?.type === "ClassDeclaration" && ((o = l.decorators) == null ? void 0 : o.length) > 0 && l.start === a.start && this.resetStartLocation(
            a, i);
          }
          break;
      }
      return a;
    }
    parseSubscript(r, n, i, a) {
      let o = super.parseSubscript(r, n, i, a);
      if (a.optionalChainMember) {
        if ((o.type === "OptionalMemberExpression" || o.type === "OptionalCallExpression") && (o.type = o.type.substring(8)), a.stop) {
          let l = this.startNodeAtNode(o);
          return l.expression = o, this.finishNode(l, "ChainExpression");
        }
      } else (o.type === "MemberExpression" || o.type === "CallExpression") && (o.optional = !1);
      return o;
    }
    isOptionalMemberExpression(r) {
      return r.type === "ChainExpression" ? r.expression.type === "MemberExpression" : super.isOptionalMemberExpression(r);
    }
    hasPropertyAsPrivateName(r) {
      return r.type === "ChainExpression" && (r = r.expression), super.hasPropertyAsPrivateName(r);
    }
    isObjectProperty(r) {
      return r.type === "Property" && r.kind === "init" && !r.method;
    }
    isObjectMethod(r) {
      return r.type === "Property" && (r.method || r.kind === "get" || r.kind === "set");
    }
    finishNodeAt(r, n, i) {
      return Va(super.finishNodeAt(r, n, i));
    }
    resetStartLocation(r, n) {
      super.resetStartLocation(r, n), Va(r);
    }
    resetEndLocation(r, n = this.state.lastTokEndLoc) {
      super.resetEndLocation(r, n), Va(r);
    }
  }, "estree"), Fs = class {
    static {
      s(this, "TokContext");
    }
    constructor(t, r) {
      this.token = void 0, this.preserveSpace = void 0, this.token = t, this.preserveSpace = !!r;
    }
  }, it = {
    brace: new Fs("{"),
    j_oTag: new Fs("<tag"),
    j_cTag: new Fs("</tag"),
    j_expr: new Fs("<tag>...</tag>", !0)
  };
  it.template = new Fs("`", !0);
  var qe = !0, se = !0, rh = !0, $a = !0, es = !0, UK = !0, Ul = class {
    static {
      s(this, "ExportedTokenType");
    }
    constructor(t, r = {}) {
      this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop =
      void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = t, this.keyword = r.keyword,
      this.beforeExpr = !!r.beforeExpr, this.startsExpr = !!r.startsExpr, this.rightAssociative = !!r.rightAssociative, this.isLoop = !!r.isLoop,
      this.isAssign = !!r.isAssign, this.prefix = !!r.prefix, this.postfix = !!r.postfix, this.binop = r.binop != null ? r.binop : null, this.
      updateContext = null;
    }
  }, Dh = /* @__PURE__ */ new Map();
  function He(e, t = {}) {
    t.keyword = e;
    let r = Te(e, t);
    return Dh.set(e, r), r;
  }
  s(He, "createKeyword");
  function sr(e, t) {
    return Te(e, {
      beforeExpr: qe,
      binop: t
    });
  }
  s(sr, "createBinop");
  var Ha = -1, Cn = [], Ih = [], _h = [], Oh = [], Nh = [], Bh = [];
  function Te(e, t = {}) {
    var r, n, i, a;
    return ++Ha, Ih.push(e), _h.push((r = t.binop) != null ? r : -1), Oh.push((n = t.beforeExpr) != null ? n : !1), Nh.push((i = t.startsExpr) !=
    null ? i : !1), Bh.push((a = t.prefix) != null ? a : !1), Cn.push(new Ul(e, t)), Ha;
  }
  s(Te, "createToken");
  function Re(e, t = {}) {
    var r, n, i, a;
    return ++Ha, Dh.set(e, Ha), Ih.push(e), _h.push((r = t.binop) != null ? r : -1), Oh.push((n = t.beforeExpr) != null ? n : !1), Nh.push((i =
    t.startsExpr) != null ? i : !1), Bh.push((a = t.prefix) != null ? a : !1), Cn.push(new Ul("name", t)), Ha;
  }
  s(Re, "createKeywordLike");
  var VK = {
    bracketL: Te("[", {
      beforeExpr: qe,
      startsExpr: se
    }),
    bracketHashL: Te("#[", {
      beforeExpr: qe,
      startsExpr: se
    }),
    bracketBarL: Te("[|", {
      beforeExpr: qe,
      startsExpr: se
    }),
    bracketR: Te("]"),
    bracketBarR: Te("|]"),
    braceL: Te("{", {
      beforeExpr: qe,
      startsExpr: se
    }),
    braceBarL: Te("{|", {
      beforeExpr: qe,
      startsExpr: se
    }),
    braceHashL: Te("#{", {
      beforeExpr: qe,
      startsExpr: se
    }),
    braceR: Te("}"),
    braceBarR: Te("|}"),
    parenL: Te("(", {
      beforeExpr: qe,
      startsExpr: se
    }),
    parenR: Te(")"),
    comma: Te(",", {
      beforeExpr: qe
    }),
    semi: Te(";", {
      beforeExpr: qe
    }),
    colon: Te(":", {
      beforeExpr: qe
    }),
    doubleColon: Te("::", {
      beforeExpr: qe
    }),
    dot: Te("."),
    question: Te("?", {
      beforeExpr: qe
    }),
    questionDot: Te("?."),
    arrow: Te("=>", {
      beforeExpr: qe
    }),
    template: Te("template"),
    ellipsis: Te("...", {
      beforeExpr: qe
    }),
    backQuote: Te("`", {
      startsExpr: se
    }),
    dollarBraceL: Te("${", {
      beforeExpr: qe,
      startsExpr: se
    }),
    templateTail: Te("...`", {
      startsExpr: se
    }),
    templateNonTail: Te("...${", {
      beforeExpr: qe,
      startsExpr: se
    }),
    at: Te("@"),
    hash: Te("#", {
      startsExpr: se
    }),
    interpreterDirective: Te("#!..."),
    eq: Te("=", {
      beforeExpr: qe,
      isAssign: $a
    }),
    assign: Te("_=", {
      beforeExpr: qe,
      isAssign: $a
    }),
    slashAssign: Te("_=", {
      beforeExpr: qe,
      isAssign: $a
    }),
    xorAssign: Te("_=", {
      beforeExpr: qe,
      isAssign: $a
    }),
    moduloAssign: Te("_=", {
      beforeExpr: qe,
      isAssign: $a
    }),
    incDec: Te("++/--", {
      prefix: es,
      postfix: UK,
      startsExpr: se
    }),
    bang: Te("!", {
      beforeExpr: qe,
      prefix: es,
      startsExpr: se
    }),
    tilde: Te("~", {
      beforeExpr: qe,
      prefix: es,
      startsExpr: se
    }),
    doubleCaret: Te("^^", {
      startsExpr: se
    }),
    doubleAt: Te("@@", {
      startsExpr: se
    }),
    pipeline: sr("|>", 0),
    nullishCoalescing: sr("??", 1),
    logicalOR: sr("||", 1),
    logicalAND: sr("&&", 2),
    bitwiseOR: sr("|", 3),
    bitwiseXOR: sr("^", 4),
    bitwiseAND: sr("&", 5),
    equality: sr("==/!=/===/!==", 6),
    lt: sr("</>/<=/>=", 7),
    gt: sr("</>/<=/>=", 7),
    relational: sr("</>/<=/>=", 7),
    bitShift: sr("<</>>/>>>", 8),
    bitShiftL: sr("<</>>/>>>", 8),
    bitShiftR: sr("<</>>/>>>", 8),
    plusMin: Te("+/-", {
      beforeExpr: qe,
      binop: 9,
      prefix: es,
      startsExpr: se
    }),
    modulo: Te("%", {
      binop: 10,
      startsExpr: se
    }),
    star: Te("*", {
      binop: 10
    }),
    slash: sr("/", 10),
    exponent: Te("**", {
      beforeExpr: qe,
      binop: 11,
      rightAssociative: !0
    }),
    _in: He("in", {
      beforeExpr: qe,
      binop: 7
    }),
    _instanceof: He("instanceof", {
      beforeExpr: qe,
      binop: 7
    }),
    _break: He("break"),
    _case: He("case", {
      beforeExpr: qe
    }),
    _catch: He("catch"),
    _continue: He("continue"),
    _debugger: He("debugger"),
    _default: He("default", {
      beforeExpr: qe
    }),
    _else: He("else", {
      beforeExpr: qe
    }),
    _finally: He("finally"),
    _function: He("function", {
      startsExpr: se
    }),
    _if: He("if"),
    _return: He("return", {
      beforeExpr: qe
    }),
    _switch: He("switch"),
    _throw: He("throw", {
      beforeExpr: qe,
      prefix: es,
      startsExpr: se
    }),
    _try: He("try"),
    _var: He("var"),
    _const: He("const"),
    _with: He("with"),
    _new: He("new", {
      beforeExpr: qe,
      startsExpr: se
    }),
    _this: He("this", {
      startsExpr: se
    }),
    _super: He("super", {
      startsExpr: se
    }),
    _class: He("class", {
      startsExpr: se
    }),
    _extends: He("extends", {
      beforeExpr: qe
    }),
    _export: He("export"),
    _import: He("import", {
      startsExpr: se
    }),
    _null: He("null", {
      startsExpr: se
    }),
    _true: He("true", {
      startsExpr: se
    }),
    _false: He("false", {
      startsExpr: se
    }),
    _typeof: He("typeof", {
      beforeExpr: qe,
      prefix: es,
      startsExpr: se
    }),
    _void: He("void", {
      beforeExpr: qe,
      prefix: es,
      startsExpr: se
    }),
    _delete: He("delete", {
      beforeExpr: qe,
      prefix: es,
      startsExpr: se
    }),
    _do: He("do", {
      isLoop: rh,
      beforeExpr: qe
    }),
    _for: He("for", {
      isLoop: rh
    }),
    _while: He("while", {
      isLoop: rh
    }),
    _as: Re("as", {
      startsExpr: se
    }),
    _assert: Re("assert", {
      startsExpr: se
    }),
    _async: Re("async", {
      startsExpr: se
    }),
    _await: Re("await", {
      startsExpr: se
    }),
    _defer: Re("defer", {
      startsExpr: se
    }),
    _from: Re("from", {
      startsExpr: se
    }),
    _get: Re("get", {
      startsExpr: se
    }),
    _let: Re("let", {
      startsExpr: se
    }),
    _meta: Re("meta", {
      startsExpr: se
    }),
    _of: Re("of", {
      startsExpr: se
    }),
    _sent: Re("sent", {
      startsExpr: se
    }),
    _set: Re("set", {
      startsExpr: se
    }),
    _source: Re("source", {
      startsExpr: se
    }),
    _static: Re("static", {
      startsExpr: se
    }),
    _using: Re("using", {
      startsExpr: se
    }),
    _yield: Re("yield", {
      startsExpr: se
    }),
    _asserts: Re("asserts", {
      startsExpr: se
    }),
    _checks: Re("checks", {
      startsExpr: se
    }),
    _exports: Re("exports", {
      startsExpr: se
    }),
    _global: Re("global", {
      startsExpr: se
    }),
    _implements: Re("implements", {
      startsExpr: se
    }),
    _intrinsic: Re("intrinsic", {
      startsExpr: se
    }),
    _infer: Re("infer", {
      startsExpr: se
    }),
    _is: Re("is", {
      startsExpr: se
    }),
    _mixins: Re("mixins", {
      startsExpr: se
    }),
    _proto: Re("proto", {
      startsExpr: se
    }),
    _require: Re("require", {
      startsExpr: se
    }),
    _satisfies: Re("satisfies", {
      startsExpr: se
    }),
    _keyof: Re("keyof", {
      startsExpr: se
    }),
    _readonly: Re("readonly", {
      startsExpr: se
    }),
    _unique: Re("unique", {
      startsExpr: se
    }),
    _abstract: Re("abstract", {
      startsExpr: se
    }),
    _declare: Re("declare", {
      startsExpr: se
    }),
    _enum: Re("enum", {
      startsExpr: se
    }),
    _module: Re("module", {
      startsExpr: se
    }),
    _namespace: Re("namespace", {
      startsExpr: se
    }),
    _interface: Re("interface", {
      startsExpr: se
    }),
    _type: Re("type", {
      startsExpr: se
    }),
    _opaque: Re("opaque", {
      startsExpr: se
    }),
    name: Te("name", {
      startsExpr: se
    }),
    string: Te("string", {
      startsExpr: se
    }),
    num: Te("num", {
      startsExpr: se
    }),
    bigint: Te("bigint", {
      startsExpr: se
    }),
    decimal: Te("decimal", {
      startsExpr: se
    }),
    regexp: Te("regexp", {
      startsExpr: se
    }),
    privateName: Te("#name", {
      startsExpr: se
    }),
    eof: Te("eof"),
    jsxName: Te("jsxName"),
    jsxText: Te("jsxText", {
      beforeExpr: !0
    }),
    jsxTagStart: Te("jsxTagStart", {
      startsExpr: !0
    }),
    jsxTagEnd: Te("jsxTagEnd"),
    placeholder: Te("%%", {
      startsExpr: !0
    })
  };
  function et(e) {
    return e >= 93 && e <= 132;
  }
  s(et, "tokenIsIdentifier");
  function $K(e) {
    return e <= 92;
  }
  s($K, "tokenKeywordOrIdentifierIsKeyword");
  function $r(e) {
    return e >= 58 && e <= 132;
  }
  s($r, "tokenIsKeywordOrIdentifier");
  function sT(e) {
    return e >= 58 && e <= 136;
  }
  s(sT, "tokenIsLiteralPropertyName");
  function WK(e) {
    return Oh[e];
  }
  s(WK, "tokenComesBeforeExpression");
  function lh(e) {
    return Nh[e];
  }
  s(lh, "tokenCanStartExpression");
  function KK(e) {
    return e >= 29 && e <= 33;
  }
  s(KK, "tokenIsAssignment");
  function Hv(e) {
    return e >= 129 && e <= 131;
  }
  s(Hv, "tokenIsFlowInterfaceOrTypeOrOpaque");
  function GK(e) {
    return e >= 90 && e <= 92;
  }
  s(GK, "tokenIsLoop");
  function kh(e) {
    return e >= 58 && e <= 92;
  }
  s(kh, "tokenIsKeyword");
  function HK(e) {
    return e >= 39 && e <= 59;
  }
  s(HK, "tokenIsOperator");
  function YK(e) {
    return e === 34;
  }
  s(YK, "tokenIsPostfix");
  function zK(e) {
    return Bh[e];
  }
  s(zK, "tokenIsPrefix");
  function JK(e) {
    return e >= 121 && e <= 123;
  }
  s(JK, "tokenIsTSTypeOperator");
  function XK(e) {
    return e >= 124 && e <= 130;
  }
  s(XK, "tokenIsTSDeclarationStart");
  function rs(e) {
    return Ih[e];
  }
  s(rs, "tokenLabelName");
  function Rl(e) {
    return _h[e];
  }
  s(Rl, "tokenOperatorPrecedence");
  function QK(e) {
    return e === 57;
  }
  s(QK, "tokenIsRightAssociative");
  function Vl(e) {
    return e >= 24 && e <= 25;
  }
  s(Vl, "tokenIsTemplate");
  function An(e) {
    return Cn[e];
  }
  s(An, "getExportedToken");
  Cn[8].updateContext = (e) => {
    e.pop();
  }, Cn[5].updateContext = Cn[7].updateContext = Cn[23].updateContext = (e) => {
    e.push(it.brace);
  }, Cn[22].updateContext = (e) => {
    e[e.length - 1] === it.template ? e.pop() : e.push(it.template);
  }, Cn[142].updateContext = (e) => {
    e.push(it.j_expr, it.j_oTag);
  };
  var Fh = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993\
-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\
\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\
\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\
\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\
\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01\
-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
  iT = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\
\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4\
-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\
\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\
\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65", ZK = new RegExp("[" + Fh + "]"), eG = new RegExp("[" + Fh + iT + "]");
  Fh = iT = null;
  var aT = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157,
  19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0,
  2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27,
  28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1,
  3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8,
  46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60,
  42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22,
  0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33,
  125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689,
  63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106,
  6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339,
  3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43,
  485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0,
  2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33,
  4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], tG = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2,
  5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6,
  1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17,
  10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1,
  13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9,
  9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54,
  8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14,
  1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function uh(e, t) {
    let r = 65536;
    for (let n = 0, i = t.length; n < i; n += 2) {
      if (r += t[n], r > e) return !1;
      if (r += t[n + 1], r >= e) return !0;
    }
    return !1;
  }
  s(uh, "isInAstralSet");
  function wn(e) {
    return e < 65 ? e === 36 : e <= 90 ? !0 : e < 97 ? e === 95 : e <= 122 ? !0 : e <= 65535 ? e >= 170 && ZK.test(String.fromCharCode(e)) :
    uh(e, aT);
  }
  s(wn, "isIdentifierStart");
  function Ti(e) {
    return e < 48 ? e === 36 : e < 58 ? !0 : e < 65 ? !1 : e <= 90 ? !0 : e < 97 ? e === 95 : e <= 122 ? !0 : e <= 65535 ? e >= 170 && eG.test(
    String.fromCharCode(e)) : uh(e, aT) || uh(e, tG);
  }
  s(Ti, "isIdentifierChar");
  var jh = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "swit\
ch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false",
    "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  }, rG = new Set(jh.keyword), nG = new Set(jh.strict), sG = new Set(jh.strictBind);
  function oT(e, t) {
    return t && e === "await" || e === "enum";
  }
  s(oT, "isReservedWord");
  function lT(e, t) {
    return oT(e, t) || nG.has(e);
  }
  s(lT, "isStrictReservedWord");
  function uT(e) {
    return sG.has(e);
  }
  s(uT, "isStrictBindOnlyReservedWord");
  function cT(e, t) {
    return lT(e, t) || uT(e);
  }
  s(cT, "isStrictBindReservedWord");
  function iG(e) {
    return rG.has(e);
  }
  s(iG, "isKeyword");
  function aG(e, t, r) {
    return e === 64 && t === 64 && wn(r);
  }
  s(aG, "isIteratorStart");
  var oG = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function",
  "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import",
  "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protecte\
d", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
  function lG(e) {
    return oG.has(e);
  }
  s(lG, "canBeReservedWord");
  var Ya = class {
    static {
      s(this, "Scope");
    }
    constructor(t) {
      this.flags = 0, this.names = /* @__PURE__ */ new Map(), this.firstLexicalName = "", this.flags = t;
    }
  }, za = class {
    static {
      s(this, "ScopeHandler");
    }
    constructor(t, r) {
      this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = /* @__PURE__ */ new Map(), this.parser = t,
      this.inModule = r;
    }
    get inTopLevel() {
      return (this.currentScope().flags & 1) > 0;
    }
    get inFunction() {
      return (this.currentVarScopeFlags() & 2) > 0;
    }
    get allowSuper() {
      return (this.currentThisScopeFlags() & 16) > 0;
    }
    get allowDirectSuper() {
      return (this.currentThisScopeFlags() & 32) > 0;
    }
    get inClass() {
      return (this.currentThisScopeFlags() & 64) > 0;
    }
    get inClassAndNotInNonArrowFunction() {
      let t = this.currentThisScopeFlags();
      return (t & 64) > 0 && (t & 2) === 0;
    }
    get inStaticBlock() {
      for (let t = this.scopeStack.length - 1; ; t--) {
        let {
          flags: r
        } = this.scopeStack[t];
        if (r & 128)
          return !0;
        if (r & 451)
          return !1;
      }
    }
    get inNonArrowFunction() {
      return (this.currentThisScopeFlags() & 2) > 0;
    }
    get treatFunctionsAsVar() {
      return this.treatFunctionsAsVarInScope(this.currentScope());
    }
    createScope(t) {
      return new Ya(t);
    }
    enter(t) {
      this.scopeStack.push(this.createScope(t));
    }
    exit() {
      return this.scopeStack.pop().flags;
    }
    treatFunctionsAsVarInScope(t) {
      return !!(t.flags & 130 || !this.parser.inModule && t.flags & 1);
    }
    declareName(t, r, n) {
      let i = this.currentScope();
      if (r & 8 || r & 16) {
        this.checkRedeclarationInScope(i, t, r, n);
        let a = i.names.get(t) || 0;
        r & 16 ? a = a | 4 : (i.firstLexicalName || (i.firstLexicalName = t), a = a | 2), i.names.set(t, a), r & 8 && this.maybeExportDefined(
        i, t);
      } else if (r & 4)
        for (let a = this.scopeStack.length - 1; a >= 0 && (i = this.scopeStack[a], this.checkRedeclarationInScope(i, t, r, n), i.names.set(
        t, (i.names.get(t) || 0) | 1), this.maybeExportDefined(i, t), !(i.flags & 387)); --a)
          ;
      this.parser.inModule && i.flags & 1 && this.undefinedExports.delete(t);
    }
    maybeExportDefined(t, r) {
      this.parser.inModule && t.flags & 1 && this.undefinedExports.delete(r);
    }
    checkRedeclarationInScope(t, r, n, i) {
      this.isRedeclaredInScope(t, r, n) && this.parser.raise(_.VarRedeclaration, i, {
        identifierName: r
      });
    }
    isRedeclaredInScope(t, r, n) {
      if (!(n & 1)) return !1;
      if (n & 8)
        return t.names.has(r);
      let i = t.names.get(r);
      return n & 16 ? (i & 2) > 0 || !this.treatFunctionsAsVarInScope(t) && (i & 1) > 0 : (i & 2) > 0 && !(t.flags & 8 && t.firstLexicalName ===
      r) || !this.treatFunctionsAsVarInScope(t) && (i & 4) > 0;
    }
    checkLocalExport(t) {
      let {
        name: r
      } = t;
      this.scopeStack[0].names.has(r) || this.undefinedExports.set(r, t.loc.start);
    }
    currentScope() {
      return this.scopeStack[this.scopeStack.length - 1];
    }
    currentVarScopeFlags() {
      for (let t = this.scopeStack.length - 1; ; t--) {
        let {
          flags: r
        } = this.scopeStack[t];
        if (r & 387)
          return r;
      }
    }
    currentThisScopeFlags() {
      for (let t = this.scopeStack.length - 1; ; t--) {
        let {
          flags: r
        } = this.scopeStack[t];
        if (r & 451 && !(r & 4))
          return r;
      }
    }
  }, ch = class extends Ya {
    static {
      s(this, "FlowScope");
    }
    constructor(...t) {
      super(...t), this.declareFunctions = /* @__PURE__ */ new Set();
    }
  }, fh = class extends za {
    static {
      s(this, "FlowScopeHandler");
    }
    createScope(t) {
      return new ch(t);
    }
    declareName(t, r, n) {
      let i = this.currentScope();
      if (r & 2048) {
        this.checkRedeclarationInScope(i, t, r, n), this.maybeExportDefined(i, t), i.declareFunctions.add(t);
        return;
      }
      super.declareName(t, r, n);
    }
    isRedeclaredInScope(t, r, n) {
      if (super.isRedeclaredInScope(t, r, n)) return !0;
      if (n & 2048 && !t.declareFunctions.has(r)) {
        let i = t.names.get(r);
        return (i & 4) > 0 || (i & 2) > 0;
      }
      return !1;
    }
    checkLocalExport(t) {
      this.scopeStack[0].declareFunctions.has(t.name) || super.checkLocalExport(t);
    }
  }, ph = class {
    static {
      s(this, "BaseParser");
    }
    constructor() {
      this.sawUnambiguousESM = !1, this.ambiguousScriptDifferentAst = !1;
    }
    hasPlugin(t) {
      if (typeof t == "string")
        return this.plugins.has(t);
      {
        let [r, n] = t;
        if (!this.hasPlugin(r))
          return !1;
        let i = this.plugins.get(r);
        for (let a of Object.keys(n))
          if (i?.[a] !== n[a])
            return !1;
        return !0;
      }
    }
    getPluginOption(t, r) {
      var n;
      return (n = this.plugins.get(t)) == null ? void 0 : n[r];
    }
  };
  function fT(e, t) {
    e.trailingComments === void 0 ? e.trailingComments = t : e.trailingComments.unshift(...t);
  }
  s(fT, "setTrailingComments");
  function uG(e, t) {
    e.leadingComments === void 0 ? e.leadingComments = t : e.leadingComments.unshift(...t);
  }
  s(uG, "setLeadingComments");
  function Ja(e, t) {
    e.innerComments === void 0 ? e.innerComments = t : e.innerComments.unshift(...t);
  }
  s(Ja, "setInnerComments");
  function Wa(e, t, r) {
    let n = null, i = t.length;
    for (; n === null && i > 0; )
      n = t[--i];
    n === null || n.start > r.start ? Ja(e, r.comments) : fT(n, r.comments);
  }
  s(Wa, "adjustInnerComments");
  var dh = class extends ph {
    static {
      s(this, "CommentsParser");
    }
    addComment(t) {
      this.filename && (t.loc.filename = this.filename);
      let {
        commentsLen: r
      } = this.state;
      this.comments.length !== r && (this.comments.length = r), this.comments.push(t), this.state.commentsLen++;
    }
    processComment(t) {
      let {
        commentStack: r
      } = this.state, n = r.length;
      if (n === 0) return;
      let i = n - 1, a = r[i];
      a.start === t.end && (a.leadingNode = t, i--);
      let {
        start: o
      } = t;
      for (; i >= 0; i--) {
        let l = r[i], u = l.end;
        if (u > o)
          l.containingNode = t, this.finalizeComment(l), r.splice(i, 1);
        else {
          u === o && (l.trailingNode = t);
          break;
        }
      }
    }
    finalizeComment(t) {
      let {
        comments: r
      } = t;
      if (t.leadingNode !== null || t.trailingNode !== null)
        t.leadingNode !== null && fT(t.leadingNode, r), t.trailingNode !== null && uG(t.trailingNode, r);
      else {
        let {
          containingNode: n,
          start: i
        } = t;
        if (this.input.charCodeAt(i - 1) === 44)
          switch (n.type) {
            case "ObjectExpression":
            case "ObjectPattern":
            case "RecordExpression":
              Wa(n, n.properties, t);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
              Wa(n, n.arguments, t);
              break;
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ArrowFunctionExpression":
            case "ObjectMethod":
            case "ClassMethod":
            case "ClassPrivateMethod":
              Wa(n, n.params, t);
              break;
            case "ArrayExpression":
            case "ArrayPattern":
            case "TupleExpression":
              Wa(n, n.elements, t);
              break;
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
              Wa(n, n.specifiers, t);
              break;
            default:
              Ja(n, r);
          }
        else
          Ja(n, r);
      }
    }
    finalizeRemainingComments() {
      let {
        commentStack: t
      } = this.state;
      for (let r = t.length - 1; r >= 0; r--)
        this.finalizeComment(t[r]);
      this.state.commentStack = [];
    }
    resetPreviousNodeTrailingComments(t) {
      let {
        commentStack: r
      } = this.state, {
        length: n
      } = r;
      if (n === 0) return;
      let i = r[n - 1];
      i.leadingNode === t && (i.leadingNode = null);
    }
    resetPreviousIdentifierLeadingComments(t) {
      let {
        commentStack: r
      } = this.state, {
        length: n
      } = r;
      n !== 0 && (r[n - 1].trailingNode === t ? r[n - 1].trailingNode = null : n >= 2 && r[n - 2].trailingNode === t && (r[n - 2].trailingNode =
      null));
    }
    takeSurroundingComments(t, r, n) {
      let {
        commentStack: i
      } = this.state, a = i.length;
      if (a === 0) return;
      let o = a - 1;
      for (; o >= 0; o--) {
        let l = i[o], u = l.end;
        if (l.start === n)
          l.leadingNode = t;
        else if (u === r)
          l.trailingNode = t;
        else if (u < r)
          break;
      }
    }
  }, cG = /\r\n|[\r\n\u2028\u2029]/, jl = new RegExp(cG.source, "g");
  function xi(e) {
    switch (e) {
      case 10:
      case 13:
      case 8232:
      case 8233:
        return !0;
      default:
        return !1;
    }
  }
  s(xi, "isNewLine");
  function Yv(e, t, r) {
    for (let n = t; n < r; n++)
      if (xi(e.charCodeAt(n)))
        return !0;
    return !1;
  }
  s(Yv, "hasNewLine");
  var nh = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, sh = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
  function fG(e) {
    switch (e) {
      case 9:
      case 11:
      case 12:
      case 32:
      case 160:
      case 5760:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8239:
      case 8287:
      case 12288:
      case 65279:
        return !0;
      default:
        return !1;
    }
  }
  s(fG, "isWhitespace");
  var hh = class e {
    static {
      s(this, "State");
    }
    constructor() {
      this.flags = 1024, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.
      potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.topicContext = {
        maxNumOfResolvableTopics: 0,
        maxTopicIndex: null
      }, this.labels = [], this.commentsLen = 0, this.commentStack = [], this.pos = 0, this.type = 139, this.value = null, this.start = 0, this.
      end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.context = [it.brace], this.firstInvalidTemplateEscapePos = null,
      this.strictErrors = /* @__PURE__ */ new Map(), this.tokensLength = 0;
    }
    get strict() {
      return (this.flags & 1) > 0;
    }
    set strict(t) {
      t ? this.flags |= 1 : this.flags &= -2;
    }
    init({
      strictMode: t,
      sourceType: r,
      startLine: n,
      startColumn: i
    }) {
      this.strict = t === !1 ? !1 : t === !0 ? !0 : r === "module", this.curLine = n, this.lineStart = -i, this.startLoc = this.endLoc = new cn(
      n, i, 0);
    }
    get maybeInArrowParameters() {
      return (this.flags & 2) > 0;
    }
    set maybeInArrowParameters(t) {
      t ? this.flags |= 2 : this.flags &= -3;
    }
    get inType() {
      return (this.flags & 4) > 0;
    }
    set inType(t) {
      t ? this.flags |= 4 : this.flags &= -5;
    }
    get noAnonFunctionType() {
      return (this.flags & 8) > 0;
    }
    set noAnonFunctionType(t) {
      t ? this.flags |= 8 : this.flags &= -9;
    }
    get hasFlowComment() {
      return (this.flags & 16) > 0;
    }
    set hasFlowComment(t) {
      t ? this.flags |= 16 : this.flags &= -17;
    }
    get isAmbientContext() {
      return (this.flags & 32) > 0;
    }
    set isAmbientContext(t) {
      t ? this.flags |= 32 : this.flags &= -33;
    }
    get inAbstractClass() {
      return (this.flags & 64) > 0;
    }
    set inAbstractClass(t) {
      t ? this.flags |= 64 : this.flags &= -65;
    }
    get inDisallowConditionalTypesContext() {
      return (this.flags & 128) > 0;
    }
    set inDisallowConditionalTypesContext(t) {
      t ? this.flags |= 128 : this.flags &= -129;
    }
    get soloAwait() {
      return (this.flags & 256) > 0;
    }
    set soloAwait(t) {
      t ? this.flags |= 256 : this.flags &= -257;
    }
    get inFSharpPipelineDirectBody() {
      return (this.flags & 512) > 0;
    }
    set inFSharpPipelineDirectBody(t) {
      t ? this.flags |= 512 : this.flags &= -513;
    }
    get canStartJSXElement() {
      return (this.flags & 1024) > 0;
    }
    set canStartJSXElement(t) {
      t ? this.flags |= 1024 : this.flags &= -1025;
    }
    get containsEsc() {
      return (this.flags & 2048) > 0;
    }
    set containsEsc(t) {
      t ? this.flags |= 2048 : this.flags &= -2049;
    }
    get hasTopLevelAwait() {
      return (this.flags & 4096) > 0;
    }
    set hasTopLevelAwait(t) {
      t ? this.flags |= 4096 : this.flags &= -4097;
    }
    curPosition() {
      return new cn(this.curLine, this.pos - this.lineStart, this.pos);
    }
    clone() {
      let t = new e();
      return t.flags = this.flags, t.curLine = this.curLine, t.lineStart = this.lineStart, t.startLoc = this.startLoc, t.endLoc = this.endLoc,
      t.errors = this.errors.slice(), t.potentialArrowAt = this.potentialArrowAt, t.noArrowAt = this.noArrowAt.slice(), t.noArrowParamsConversionAt =
      this.noArrowParamsConversionAt.slice(), t.topicContext = this.topicContext, t.labels = this.labels.slice(), t.commentsLen = this.commentsLen,
      t.commentStack = this.commentStack.slice(), t.pos = this.pos, t.type = this.type, t.value = this.value, t.start = this.start, t.end = this.
      end, t.lastTokEndLoc = this.lastTokEndLoc, t.lastTokStartLoc = this.lastTokStartLoc, t.context = this.context.slice(), t.firstInvalidTemplateEscapePos =
      this.firstInvalidTemplateEscapePos, t.strictErrors = this.strictErrors, t.tokensLength = this.tokensLength, t;
    }
  }, pG = /* @__PURE__ */ s(function(t) {
    return t >= 48 && t <= 57;
  }, "isDigit"), zv = {
    decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
  }, Ll = {
    bin: /* @__PURE__ */ s((e) => e === 48 || e === 49, "bin"),
    oct: /* @__PURE__ */ s((e) => e >= 48 && e <= 55, "oct"),
    dec: /* @__PURE__ */ s((e) => e >= 48 && e <= 57, "dec"),
    hex: /* @__PURE__ */ s((e) => e >= 48 && e <= 57 || e >= 65 && e <= 70 || e >= 97 && e <= 102, "hex")
  };
  function Jv(e, t, r, n, i, a) {
    let o = r, l = n, u = i, c = "", f = null, p = r, {
      length: h
    } = t;
    for (; ; ) {
      if (r >= h) {
        a.unterminated(o, l, u), c += t.slice(p, r);
        break;
      }
      let y = t.charCodeAt(r);
      if (dG(e, y, t, r)) {
        c += t.slice(p, r);
        break;
      }
      if (y === 92) {
        c += t.slice(p, r);
        let v = hG(t, r, n, i, e === "template", a);
        v.ch === null && !f ? f = {
          pos: r,
          lineStart: n,
          curLine: i
        } : c += v.ch, {
          pos: r,
          lineStart: n,
          curLine: i
        } = v, p = r;
      } else y === 8232 || y === 8233 ? (++r, ++i, n = r) : y === 10 || y === 13 ? e === "template" ? (c += t.slice(p, r) + `
`, ++r, y === 13 && t.charCodeAt(r) === 10 && ++r, ++i, p = n = r) : a.unterminated(o, l, u) : ++r;
    }
    return {
      pos: r,
      str: c,
      firstInvalidLoc: f,
      lineStart: n,
      curLine: i,
      containsInvalid: !!f
    };
  }
  s(Jv, "readStringContents");
  function dG(e, t, r, n) {
    return e === "template" ? t === 96 || t === 36 && r.charCodeAt(n + 1) === 123 : t === (e === "double" ? 34 : 39);
  }
  s(dG, "isStringEnd");
  function hG(e, t, r, n, i, a) {
    let o = !i;
    t++;
    let l = /* @__PURE__ */ s((c) => ({
      pos: t,
      ch: c,
      lineStart: r,
      curLine: n
    }), "res"), u = e.charCodeAt(t++);
    switch (u) {
      case 110:
        return l(`
`);
      case 114:
        return l("\r");
      case 120: {
        let c;
        return {
          code: c,
          pos: t
        } = mh(e, t, r, n, 2, !1, o, a), l(c === null ? null : String.fromCharCode(c));
      }
      case 117: {
        let c;
        return {
          code: c,
          pos: t
        } = dT(e, t, r, n, o, a), l(c === null ? null : String.fromCodePoint(c));
      }
      case 116:
        return l("	");
      case 98:
        return l("\b");
      case 118:
        return l("\v");
      case 102:
        return l("\f");
      case 13:
        e.charCodeAt(t) === 10 && ++t;
      case 10:
        r = t, ++n;
      case 8232:
      case 8233:
        return l("");
      case 56:
      case 57:
        if (i)
          return l(null);
        a.strictNumericEscape(t - 1, r, n);
      default:
        if (u >= 48 && u <= 55) {
          let c = t - 1, p = /^[0-7]+/.exec(e.slice(c, t + 2))[0], h = parseInt(p, 8);
          h > 255 && (p = p.slice(0, -1), h = parseInt(p, 8)), t += p.length - 1;
          let y = e.charCodeAt(t);
          if (p !== "0" || y === 56 || y === 57) {
            if (i)
              return l(null);
            a.strictNumericEscape(c, r, n);
          }
          return l(String.fromCharCode(h));
        }
        return l(String.fromCharCode(u));
    }
  }
  s(hG, "readEscapedChar");
  function mh(e, t, r, n, i, a, o, l) {
    let u = t, c;
    return {
      n: c,
      pos: t
    } = pT(e, t, r, n, 16, i, a, !1, l, !o), c === null && (o ? l.invalidEscapeSequence(u, r, n) : t = u - 1), {
      code: c,
      pos: t
    };
  }
  s(mh, "readHexChar");
  function pT(e, t, r, n, i, a, o, l, u, c) {
    let f = t, p = i === 16 ? zv.hex : zv.decBinOct, h = i === 16 ? Ll.hex : i === 10 ? Ll.dec : i === 8 ? Ll.oct : Ll.bin, y = !1, v = 0;
    for (let d = 0, b = a ?? 1 / 0; d < b; ++d) {
      let E = e.charCodeAt(t), I;
      if (E === 95 && l !== "bail") {
        let O = e.charCodeAt(t - 1), k = e.charCodeAt(t + 1);
        if (l) {
          if (Number.isNaN(k) || !h(k) || p.has(O) || p.has(k)) {
            if (c) return {
              n: null,
              pos: t
            };
            u.unexpectedNumericSeparator(t, r, n);
          }
        } else {
          if (c) return {
            n: null,
            pos: t
          };
          u.numericSeparatorInEscapeSequence(t, r, n);
        }
        ++t;
        continue;
      }
      if (E >= 97 ? I = E - 97 + 10 : E >= 65 ? I = E - 65 + 10 : pG(E) ? I = E - 48 : I = 1 / 0, I >= i) {
        if (I <= 9 && c)
          return {
            n: null,
            pos: t
          };
        if (I <= 9 && u.invalidDigit(t, r, n, i))
          I = 0;
        else if (o)
          I = 0, y = !0;
        else
          break;
      }
      ++t, v = v * i + I;
    }
    return t === f || a != null && t - f !== a || y ? {
      n: null,
      pos: t
    } : {
      n: v,
      pos: t
    };
  }
  s(pT, "readInt");
  function dT(e, t, r, n, i, a) {
    let o = e.charCodeAt(t), l;
    if (o === 123) {
      if (++t, {
        code: l,
        pos: t
      } = mh(e, t, r, n, e.indexOf("}", t) - t, !0, i, a), ++t, l !== null && l > 1114111)
        if (i)
          a.invalidCodePoint(t, r, n);
        else
          return {
            code: null,
            pos: t
          };
    } else
      ({
        code: l,
        pos: t
      } = mh(e, t, r, n, 4, !1, i, a));
    return {
      code: l,
      pos: t
    };
  }
  s(dT, "readCodePoint");
  function Ka(e, t, r) {
    return new cn(r, e - t, e);
  }
  s(Ka, "buildPosition");
  var mG = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]), un = class {
    static {
      s(this, "Token");
    }
    constructor(t) {
      this.type = t.type, this.value = t.value, this.start = t.start, this.end = t.end, this.loc = new Pi(t.startLoc, t.endLoc);
    }
  }, yh = class extends dh {
    static {
      s(this, "Tokenizer");
    }
    constructor(t, r) {
      super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = {
        invalidDigit: /* @__PURE__ */ s((n, i, a, o) => this.options.errorRecovery ? (this.raise(_.InvalidDigit, Ka(n, i, a), {
          radix: o
        }), !0) : !1, "invalidDigit"),
        numericSeparatorInEscapeSequence: this.errorBuilder(_.NumericSeparatorInEscapeSequence),
        unexpectedNumericSeparator: this.errorBuilder(_.UnexpectedNumericSeparator)
      }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
        invalidEscapeSequence: this.errorBuilder(_.InvalidEscapeSequence),
        invalidCodePoint: this.errorBuilder(_.InvalidCodePoint)
      }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
        strictNumericEscape: /* @__PURE__ */ s((n, i, a) => {
          this.recordStrictModeErrors(_.StrictNumericEscape, Ka(n, i, a));
        }, "strictNumericEscape"),
        unterminated: /* @__PURE__ */ s((n, i, a) => {
          throw this.raise(_.UnterminatedString, Ka(n - 1, i, a));
        }, "unterminated")
      }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
        strictNumericEscape: this.errorBuilder(_.StrictNumericEscape),
        unterminated: /* @__PURE__ */ s((n, i, a) => {
          throw this.raise(_.UnterminatedTemplate, Ka(n, i, a));
        }, "unterminated")
      }), this.state = new hh(), this.state.init(t), this.input = r, this.length = r.length, this.comments = [], this.isLookahead = !1;
    }
    pushToken(t) {
      this.tokens.length = this.state.tokensLength, this.tokens.push(t), ++this.state.tokensLength;
    }
    next() {
      this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new un(this.state)), this.state.lastTokEndLoc = this.state.endLoc, this.
      state.lastTokStartLoc = this.state.startLoc, this.nextToken();
    }
    eat(t) {
      return this.match(t) ? (this.next(), !0) : !1;
    }
    match(t) {
      return this.state.type === t;
    }
    createLookaheadState(t) {
      return {
        pos: t.pos,
        value: null,
        type: t.type,
        start: t.start,
        end: t.end,
        context: [this.curContext()],
        inType: t.inType,
        startLoc: t.startLoc,
        lastTokEndLoc: t.lastTokEndLoc,
        curLine: t.curLine,
        lineStart: t.lineStart,
        curPosition: t.curPosition
      };
    }
    lookahead() {
      let t = this.state;
      this.state = this.createLookaheadState(t), this.isLookahead = !0, this.nextToken(), this.isLookahead = !1;
      let r = this.state;
      return this.state = t, r;
    }
    nextTokenStart() {
      return this.nextTokenStartSince(this.state.pos);
    }
    nextTokenStartSince(t) {
      return nh.lastIndex = t, nh.test(this.input) ? nh.lastIndex : t;
    }
    lookaheadCharCode() {
      return this.input.charCodeAt(this.nextTokenStart());
    }
    nextTokenInLineStart() {
      return this.nextTokenInLineStartSince(this.state.pos);
    }
    nextTokenInLineStartSince(t) {
      return sh.lastIndex = t, sh.test(this.input) ? sh.lastIndex : t;
    }
    lookaheadInLineCharCode() {
      return this.input.charCodeAt(this.nextTokenInLineStart());
    }
    codePointAtPos(t) {
      let r = this.input.charCodeAt(t);
      if ((r & 64512) === 55296 && ++t < this.input.length) {
        let n = this.input.charCodeAt(t);
        (n & 64512) === 56320 && (r = 65536 + ((r & 1023) << 10) + (n & 1023));
      }
      return r;
    }
    setStrict(t) {
      this.state.strict = t, t && (this.state.strictErrors.forEach(([r, n]) => this.raise(r, n)), this.state.strictErrors.clear());
    }
    curContext() {
      return this.state.context[this.state.context.length - 1];
    }
    nextToken() {
      if (this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.
      pos >= this.length) {
        this.finishToken(139);
        return;
      }
      this.getTokenFromCode(this.codePointAtPos(this.state.pos));
    }
    skipBlockComment(t) {
      let r;
      this.isLookahead || (r = this.state.curPosition());
      let n = this.state.pos, i = this.input.indexOf(t, n + 2);
      if (i === -1)
        throw this.raise(_.UnterminatedComment, this.state.curPosition());
      for (this.state.pos = i + t.length, jl.lastIndex = n + 2; jl.test(this.input) && jl.lastIndex <= i; )
        ++this.state.curLine, this.state.lineStart = jl.lastIndex;
      if (this.isLookahead) return;
      let a = {
        type: "CommentBlock",
        value: this.input.slice(n + 2, i),
        start: n,
        end: i + t.length,
        loc: new Pi(r, this.state.curPosition())
      };
      return this.options.tokens && this.pushToken(a), a;
    }
    skipLineComment(t) {
      let r = this.state.pos, n;
      this.isLookahead || (n = this.state.curPosition());
      let i = this.input.charCodeAt(this.state.pos += t);
      if (this.state.pos < this.length)
        for (; !xi(i) && ++this.state.pos < this.length; )
          i = this.input.charCodeAt(this.state.pos);
      if (this.isLookahead) return;
      let a = this.state.pos, l = {
        type: "CommentLine",
        value: this.input.slice(r + t, a),
        start: r,
        end: a,
        loc: new Pi(n, this.state.curPosition())
      };
      return this.options.tokens && this.pushToken(l), l;
    }
    skipSpace() {
      let t = this.state.pos, r = [];
      e: for (; this.state.pos < this.length; ) {
        let n = this.input.charCodeAt(this.state.pos);
        switch (n) {
          case 32:
          case 160:
          case 9:
            ++this.state.pos;
            break;
          case 13:
            this.input.charCodeAt(this.state.pos + 1) === 10 && ++this.state.pos;
          case 10:
          case 8232:
          case 8233:
            ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
            break;
          case 47:
            switch (this.input.charCodeAt(this.state.pos + 1)) {
              case 42: {
                let i = this.skipBlockComment("*/");
                i !== void 0 && (this.addComment(i), this.options.attachComment && r.push(i));
                break;
              }
              case 47: {
                let i = this.skipLineComment(2);
                i !== void 0 && (this.addComment(i), this.options.attachComment && r.push(i));
                break;
              }
              default:
                break e;
            }
            break;
          default:
            if (fG(n))
              ++this.state.pos;
            else if (n === 45 && !this.inModule && this.options.annexB) {
              let i = this.state.pos;
              if (this.input.charCodeAt(i + 1) === 45 && this.input.charCodeAt(i + 2) === 62 && (t === 0 || this.state.lineStart > t)) {
                let a = this.skipLineComment(3);
                a !== void 0 && (this.addComment(a), this.options.attachComment && r.push(a));
              } else
                break e;
            } else if (n === 60 && !this.inModule && this.options.annexB) {
              let i = this.state.pos;
              if (this.input.charCodeAt(i + 1) === 33 && this.input.charCodeAt(i + 2) === 45 && this.input.charCodeAt(i + 3) === 45) {
                let a = this.skipLineComment(4);
                a !== void 0 && (this.addComment(a), this.options.attachComment && r.push(a));
              } else
                break e;
            } else
              break e;
        }
      }
      if (r.length > 0) {
        let n = this.state.pos, i = {
          start: t,
          end: n,
          comments: r,
          leadingNode: null,
          trailingNode: null,
          containingNode: null
        };
        this.state.commentStack.push(i);
      }
    }
    finishToken(t, r) {
      this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
      let n = this.state.type;
      this.state.type = t, this.state.value = r, this.isLookahead || this.updateContext(n);
    }
    replaceToken(t) {
      this.state.type = t, this.updateContext();
    }
    readToken_numberSign() {
      if (this.state.pos === 0 && this.readToken_interpreter())
        return;
      let t = this.state.pos + 1, r = this.codePointAtPos(t);
      if (r >= 48 && r <= 57)
        throw this.raise(_.UnexpectedDigitAfterHash, this.state.curPosition());
      if (r === 123 || r === 91 && this.hasPlugin("recordAndTuple")) {
        if (this.expectPlugin("recordAndTuple"), this.getPluginOption("recordAndTuple", "syntaxType") === "bar")
          throw this.raise(r === 123 ? _.RecordExpressionHashIncorrectStartSyntaxType : _.TupleExpressionHashIncorrectStartSyntaxType, this.
          state.curPosition());
        this.state.pos += 2, r === 123 ? this.finishToken(7) : this.finishToken(1);
      } else wn(r) ? (++this.state.pos, this.finishToken(138, this.readWord1(r))) : r === 92 ? (++this.state.pos, this.finishToken(138, this.
      readWord1())) : this.finishOp(27, 1);
    }
    readToken_dot() {
      let t = this.input.charCodeAt(this.state.pos + 1);
      if (t >= 48 && t <= 57) {
        this.readNumber(!0);
        return;
      }
      t === 46 && this.input.charCodeAt(this.state.pos + 2) === 46 ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(
      16));
    }
    readToken_slash() {
      this.input.charCodeAt(this.state.pos + 1) === 61 ? this.finishOp(31, 2) : this.finishOp(56, 1);
    }
    readToken_interpreter() {
      if (this.state.pos !== 0 || this.length < 2) return !1;
      let t = this.input.charCodeAt(this.state.pos + 1);
      if (t !== 33) return !1;
      let r = this.state.pos;
      for (this.state.pos += 1; !xi(t) && ++this.state.pos < this.length; )
        t = this.input.charCodeAt(this.state.pos);
      let n = this.input.slice(r + 2, this.state.pos);
      return this.finishToken(28, n), !0;
    }
    readToken_mult_modulo(t) {
      let r = t === 42 ? 55 : 54, n = 1, i = this.input.charCodeAt(this.state.pos + 1);
      t === 42 && i === 42 && (n++, i = this.input.charCodeAt(this.state.pos + 2), r = 57), i === 61 && !this.state.inType && (n++, r = t ===
      37 ? 33 : 30), this.finishOp(r, n);
    }
    readToken_pipe_amp(t) {
      let r = this.input.charCodeAt(this.state.pos + 1);
      if (r === t) {
        this.input.charCodeAt(this.state.pos + 2) === 61 ? this.finishOp(30, 3) : this.finishOp(t === 124 ? 41 : 42, 2);
        return;
      }
      if (t === 124) {
        if (r === 62) {
          this.finishOp(39, 2);
          return;
        }
        if (this.hasPlugin("recordAndTuple") && r === 125) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
            throw this.raise(_.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
          this.state.pos += 2, this.finishToken(9);
          return;
        }
        if (this.hasPlugin("recordAndTuple") && r === 93) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
            throw this.raise(_.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
          this.state.pos += 2, this.finishToken(4);
          return;
        }
      }
      if (r === 61) {
        this.finishOp(30, 2);
        return;
      }
      this.finishOp(t === 124 ? 43 : 45, 1);
    }
    readToken_caret() {
      let t = this.input.charCodeAt(this.state.pos + 1);
      t === 61 && !this.state.inType ? this.finishOp(32, 2) : t === 94 && this.hasPlugin(["pipelineOperator", {
        proposal: "hack",
        topicToken: "^^"
      }]) ? (this.finishOp(37, 2), this.input.codePointAt(this.state.pos) === 94 && this.unexpected()) : this.finishOp(44, 1);
    }
    readToken_atSign() {
      this.input.charCodeAt(this.state.pos + 1) === 64 && this.hasPlugin(["pipelineOperator", {
        proposal: "hack",
        topicToken: "@@"
      }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
    }
    readToken_plus_min(t) {
      let r = this.input.charCodeAt(this.state.pos + 1);
      if (r === t) {
        this.finishOp(34, 2);
        return;
      }
      r === 61 ? this.finishOp(30, 2) : this.finishOp(53, 1);
    }
    readToken_lt() {
      let {
        pos: t
      } = this.state, r = this.input.charCodeAt(t + 1);
      if (r === 60) {
        if (this.input.charCodeAt(t + 2) === 61) {
          this.finishOp(30, 3);
          return;
        }
        this.finishOp(51, 2);
        return;
      }
      if (r === 61) {
        this.finishOp(49, 2);
        return;
      }
      this.finishOp(47, 1);
    }
    readToken_gt() {
      let {
        pos: t
      } = this.state, r = this.input.charCodeAt(t + 1);
      if (r === 62) {
        let n = this.input.charCodeAt(t + 2) === 62 ? 3 : 2;
        if (this.input.charCodeAt(t + n) === 61) {
          this.finishOp(30, n + 1);
          return;
        }
        this.finishOp(52, n);
        return;
      }
      if (r === 61) {
        this.finishOp(49, 2);
        return;
      }
      this.finishOp(48, 1);
    }
    readToken_eq_excl(t) {
      let r = this.input.charCodeAt(this.state.pos + 1);
      if (r === 61) {
        this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
        return;
      }
      if (t === 61 && r === 62) {
        this.state.pos += 2, this.finishToken(19);
        return;
      }
      this.finishOp(t === 61 ? 29 : 35, 1);
    }
    readToken_question() {
      let t = this.input.charCodeAt(this.state.pos + 1), r = this.input.charCodeAt(this.state.pos + 2);
      t === 63 ? r === 61 ? this.finishOp(30, 3) : this.finishOp(40, 2) : t === 46 && !(r >= 48 && r <= 57) ? (this.state.pos += 2, this.finishToken(
      18)) : (++this.state.pos, this.finishToken(17));
    }
    getTokenFromCode(t) {
      switch (t) {
        case 46:
          this.readToken_dot();
          return;
        case 40:
          ++this.state.pos, this.finishToken(10);
          return;
        case 41:
          ++this.state.pos, this.finishToken(11);
          return;
        case 59:
          ++this.state.pos, this.finishToken(13);
          return;
        case 44:
          ++this.state.pos, this.finishToken(12);
          return;
        case 91:
          if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
              throw this.raise(_.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
            this.state.pos += 2, this.finishToken(2);
          } else
            ++this.state.pos, this.finishToken(0);
          return;
        case 93:
          ++this.state.pos, this.finishToken(3);
          return;
        case 123:
          if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
              throw this.raise(_.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
            this.state.pos += 2, this.finishToken(6);
          } else
            ++this.state.pos, this.finishToken(5);
          return;
        case 125:
          ++this.state.pos, this.finishToken(8);
          return;
        case 58:
          this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58 ? this.finishOp(15, 2) : (++this.state.pos, this.
          finishToken(14));
          return;
        case 63:
          this.readToken_question();
          return;
        case 96:
          this.readTemplateToken();
          return;
        case 48: {
          let r = this.input.charCodeAt(this.state.pos + 1);
          if (r === 120 || r === 88) {
            this.readRadixNumber(16);
            return;
          }
          if (r === 111 || r === 79) {
            this.readRadixNumber(8);
            return;
          }
          if (r === 98 || r === 66) {
            this.readRadixNumber(2);
            return;
          }
        }
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          this.readNumber(!1);
          return;
        case 34:
        case 39:
          this.readString(t);
          return;
        case 47:
          this.readToken_slash();
          return;
        case 37:
        case 42:
          this.readToken_mult_modulo(t);
          return;
        case 124:
        case 38:
          this.readToken_pipe_amp(t);
          return;
        case 94:
          this.readToken_caret();
          return;
        case 43:
        case 45:
          this.readToken_plus_min(t);
          return;
        case 60:
          this.readToken_lt();
          return;
        case 62:
          this.readToken_gt();
          return;
        case 61:
        case 33:
          this.readToken_eq_excl(t);
          return;
        case 126:
          this.finishOp(36, 1);
          return;
        case 64:
          this.readToken_atSign();
          return;
        case 35:
          this.readToken_numberSign();
          return;
        case 92:
          this.readWord();
          return;
        default:
          if (wn(t)) {
            this.readWord(t);
            return;
          }
      }
      throw this.raise(_.InvalidOrUnexpectedToken, this.state.curPosition(), {
        unexpected: String.fromCodePoint(t)
      });
    }
    finishOp(t, r) {
      let n = this.input.slice(this.state.pos, this.state.pos + r);
      this.state.pos += r, this.finishToken(t, n);
    }
    readRegexp() {
      let t = this.state.startLoc, r = this.state.start + 1, n, i, {
        pos: a
      } = this.state;
      for (; ; ++a) {
        if (a >= this.length)
          throw this.raise(_.UnterminatedRegExp, ir(t, 1));
        let c = this.input.charCodeAt(a);
        if (xi(c))
          throw this.raise(_.UnterminatedRegExp, ir(t, 1));
        if (n)
          n = !1;
        else {
          if (c === 91)
            i = !0;
          else if (c === 93 && i)
            i = !1;
          else if (c === 47 && !i)
            break;
          n = c === 92;
        }
      }
      let o = this.input.slice(r, a);
      ++a;
      let l = "", u = /* @__PURE__ */ s(() => ir(t, a + 2 - r), "nextPos");
      for (; a < this.length; ) {
        let c = this.codePointAtPos(a), f = String.fromCharCode(c);
        if (mG.has(c))
          c === 118 ? l.includes("u") && this.raise(_.IncompatibleRegExpUVFlags, u()) : c === 117 && l.includes("v") && this.raise(_.IncompatibleRegExpUVFlags,
          u()), l.includes(f) && this.raise(_.DuplicateRegExpFlags, u());
        else if (Ti(c) || c === 92)
          this.raise(_.MalformedRegExpFlags, u());
        else
          break;
        ++a, l += f;
      }
      this.state.pos = a, this.finishToken(137, {
        pattern: o,
        flags: l
      });
    }
    readInt(t, r, n = !1, i = !0) {
      let {
        n: a,
        pos: o
      } = pT(this.input, this.state.pos, this.state.lineStart, this.state.curLine, t, r, n, i, this.errorHandlers_readInt, !1);
      return this.state.pos = o, a;
    }
    readRadixNumber(t) {
      let r = this.state.curPosition(), n = !1;
      this.state.pos += 2;
      let i = this.readInt(t);
      i == null && this.raise(_.InvalidDigit, ir(r, 2), {
        radix: t
      });
      let a = this.input.charCodeAt(this.state.pos);
      if (a === 110)
        ++this.state.pos, n = !0;
      else if (a === 109)
        throw this.raise(_.InvalidDecimal, r);
      if (wn(this.codePointAtPos(this.state.pos)))
        throw this.raise(_.NumberIdentifier, this.state.curPosition());
      if (n) {
        let o = this.input.slice(r.index, this.state.pos).replace(/[_n]/g, "");
        this.finishToken(135, o);
        return;
      }
      this.finishToken(134, i);
    }
    readNumber(t) {
      let r = this.state.pos, n = this.state.curPosition(), i = !1, a = !1, o = !1, l = !1, u = !1;
      !t && this.readInt(10) === null && this.raise(_.InvalidNumber, this.state.curPosition());
      let c = this.state.pos - r >= 2 && this.input.charCodeAt(r) === 48;
      if (c) {
        let y = this.input.slice(r, this.state.pos);
        if (this.recordStrictModeErrors(_.StrictOctalLiteral, n), !this.state.strict) {
          let v = y.indexOf("_");
          v > 0 && this.raise(_.ZeroDigitNumericSeparator, ir(n, v));
        }
        u = c && !/[89]/.test(y);
      }
      let f = this.input.charCodeAt(this.state.pos);
      if (f === 46 && !u && (++this.state.pos, this.readInt(10), i = !0, f = this.input.charCodeAt(this.state.pos)), (f === 69 || f === 101) &&
      !u && (f = this.input.charCodeAt(++this.state.pos), (f === 43 || f === 45) && ++this.state.pos, this.readInt(10) === null && this.raise(
      _.InvalidOrMissingExponent, n), i = !0, l = !0, f = this.input.charCodeAt(this.state.pos)), f === 110 && ((i || c) && this.raise(_.InvalidBigIntLiteral,
      n), ++this.state.pos, a = !0), f === 109 && (this.expectPlugin("decimal", this.state.curPosition()), (l || c) && this.raise(_.InvalidDecimal,
      n), ++this.state.pos, o = !0), wn(this.codePointAtPos(this.state.pos)))
        throw this.raise(_.NumberIdentifier, this.state.curPosition());
      let p = this.input.slice(r, this.state.pos).replace(/[_mn]/g, "");
      if (a) {
        this.finishToken(135, p);
        return;
      }
      if (o) {
        this.finishToken(136, p);
        return;
      }
      let h = u ? parseInt(p, 8) : parseFloat(p);
      this.finishToken(134, h);
    }
    readCodePoint(t) {
      let {
        code: r,
        pos: n
      } = dT(this.input, this.state.pos, this.state.lineStart, this.state.curLine, t, this.errorHandlers_readCodePoint);
      return this.state.pos = n, r;
    }
    readString(t) {
      let {
        str: r,
        pos: n,
        curLine: i,
        lineStart: a
      } = Jv(t === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
      this.state.pos = n + 1, this.state.lineStart = a, this.state.curLine = i, this.finishToken(133, r);
    }
    readTemplateContinuation() {
      this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
    }
    readTemplateToken() {
      let t = this.input[this.state.pos], {
        str: r,
        firstInvalidLoc: n,
        pos: i,
        curLine: a,
        lineStart: o
      } = Jv("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
      this.state.pos = i + 1, this.state.lineStart = o, this.state.curLine = a, n && (this.state.firstInvalidTemplateEscapePos = new cn(n.curLine,
      n.pos - n.lineStart, n.pos)), this.input.codePointAt(i) === 96 ? this.finishToken(24, n ? null : t + r + "`") : (this.state.pos++, this.
      finishToken(25, n ? null : t + r + "${"));
    }
    recordStrictModeErrors(t, r) {
      let n = r.index;
      this.state.strict && !this.state.strictErrors.has(n) ? this.raise(t, r) : this.state.strictErrors.set(n, [t, r]);
    }
    readWord1(t) {
      this.state.containsEsc = !1;
      let r = "", n = this.state.pos, i = this.state.pos;
      for (t !== void 0 && (this.state.pos += t <= 65535 ? 1 : 2); this.state.pos < this.length; ) {
        let a = this.codePointAtPos(this.state.pos);
        if (Ti(a))
          this.state.pos += a <= 65535 ? 1 : 2;
        else if (a === 92) {
          this.state.containsEsc = !0, r += this.input.slice(i, this.state.pos);
          let o = this.state.curPosition(), l = this.state.pos === n ? wn : Ti;
          if (this.input.charCodeAt(++this.state.pos) !== 117) {
            this.raise(_.MissingUnicodeEscape, this.state.curPosition()), i = this.state.pos - 1;
            continue;
          }
          ++this.state.pos;
          let u = this.readCodePoint(!0);
          u !== null && (l(u) || this.raise(_.EscapedCharNotAnIdentifier, o), r += String.fromCodePoint(u)), i = this.state.pos;
        } else
          break;
      }
      return r + this.input.slice(i, this.state.pos);
    }
    readWord(t) {
      let r = this.readWord1(t), n = Dh.get(r);
      n !== void 0 ? this.finishToken(n, rs(n)) : this.finishToken(132, r);
    }
    checkKeywordEscapes() {
      let {
        type: t
      } = this.state;
      kh(t) && this.state.containsEsc && this.raise(_.InvalidEscapedReservedWord, this.state.startLoc, {
        reservedWord: rs(t)
      });
    }
    raise(t, r, n = {}) {
      let i = r instanceof cn ? r : r.loc.start, a = t(i, n);
      if (!this.options.errorRecovery) throw a;
      return this.isLookahead || this.state.errors.push(a), a;
    }
    raiseOverwrite(t, r, n = {}) {
      let i = r instanceof cn ? r : r.loc.start, a = i.index, o = this.state.errors;
      for (let l = o.length - 1; l >= 0; l--) {
        let u = o[l];
        if (u.loc.index === a)
          return o[l] = t(i, n);
        if (u.loc.index < a) break;
      }
      return this.raise(t, r, n);
    }
    updateContext(t) {
    }
    unexpected(t, r) {
      throw this.raise(_.UnexpectedToken, t ?? this.state.startLoc, {
        expected: r ? rs(r) : null
      });
    }
    expectPlugin(t, r) {
      if (this.hasPlugin(t))
        return !0;
      throw this.raise(_.MissingPlugin, r ?? this.state.startLoc, {
        missingPlugin: [t]
      });
    }
    expectOnePlugin(t) {
      if (!t.some((r) => this.hasPlugin(r)))
        throw this.raise(_.MissingOneOfPlugins, this.state.startLoc, {
          missingPlugin: t
        });
    }
    errorBuilder(t) {
      return (r, n, i) => {
        this.raise(t, Ka(r, n, i));
      };
    }
  }, gh = class {
    static {
      s(this, "ClassScope");
    }
    constructor() {
      this.privateNames = /* @__PURE__ */ new Set(), this.loneAccessors = /* @__PURE__ */ new Map(), this.undefinedPrivateNames = /* @__PURE__ */ new Map();
    }
  }, bh = class {
    static {
      s(this, "ClassScopeHandler");
    }
    constructor(t) {
      this.parser = void 0, this.stack = [], this.undefinedPrivateNames = /* @__PURE__ */ new Map(), this.parser = t;
    }
    current() {
      return this.stack[this.stack.length - 1];
    }
    enter() {
      this.stack.push(new gh());
    }
    exit() {
      let t = this.stack.pop(), r = this.current();
      for (let [n, i] of Array.from(t.undefinedPrivateNames))
        r ? r.undefinedPrivateNames.has(n) || r.undefinedPrivateNames.set(n, i) : this.parser.raise(_.InvalidPrivateFieldResolution, i, {
          identifierName: n
        });
    }
    declarePrivateName(t, r, n) {
      let {
        privateNames: i,
        loneAccessors: a,
        undefinedPrivateNames: o
      } = this.current(), l = i.has(t);
      if (r & 3) {
        let u = l && a.get(t);
        if (u) {
          let c = u & 4, f = r & 4, p = u & 3, h = r & 3;
          l = p === h || c !== f, l || a.delete(t);
        } else l || a.set(t, r);
      }
      l && this.parser.raise(_.PrivateNameRedeclaration, n, {
        identifierName: t
      }), i.add(t), o.delete(t);
    }
    usePrivateName(t, r) {
      let n;
      for (n of this.stack)
        if (n.privateNames.has(t)) return;
      n ? n.undefinedPrivateNames.set(t, r) : this.parser.raise(_.InvalidPrivateFieldResolution, r, {
        identifierName: t
      });
    }
  }, Ai = class {
    static {
      s(this, "ExpressionScope");
    }
    constructor(t = 0) {
      this.type = t;
    }
    canBeArrowParameterDeclaration() {
      return this.type === 2 || this.type === 1;
    }
    isCertainlyParameterDeclaration() {
      return this.type === 3;
    }
  }, $l = class extends Ai {
    static {
      s(this, "ArrowHeadParsingScope");
    }
    constructor(t) {
      super(t), this.declarationErrors = /* @__PURE__ */ new Map();
    }
    recordDeclarationError(t, r) {
      let n = r.index;
      this.declarationErrors.set(n, [t, r]);
    }
    clearDeclarationError(t) {
      this.declarationErrors.delete(t);
    }
    iterateErrors(t) {
      this.declarationErrors.forEach(t);
    }
  }, Eh = class {
    static {
      s(this, "ExpressionScopeHandler");
    }
    constructor(t) {
      this.parser = void 0, this.stack = [new Ai()], this.parser = t;
    }
    enter(t) {
      this.stack.push(t);
    }
    exit() {
      this.stack.pop();
    }
    recordParameterInitializerError(t, r) {
      let n = r.loc.start, {
        stack: i
      } = this, a = i.length - 1, o = i[a];
      for (; !o.isCertainlyParameterDeclaration(); ) {
        if (o.canBeArrowParameterDeclaration())
          o.recordDeclarationError(t, n);
        else
          return;
        o = i[--a];
      }
      this.parser.raise(t, n);
    }
    recordArrowParameterBindingError(t, r) {
      let {
        stack: n
      } = this, i = n[n.length - 1], a = r.loc.start;
      if (i.isCertainlyParameterDeclaration())
        this.parser.raise(t, a);
      else if (i.canBeArrowParameterDeclaration())
        i.recordDeclarationError(t, a);
      else
        return;
    }
    recordAsyncArrowParametersError(t) {
      let {
        stack: r
      } = this, n = r.length - 1, i = r[n];
      for (; i.canBeArrowParameterDeclaration(); )
        i.type === 2 && i.recordDeclarationError(_.AwaitBindingIdentifier, t), i = r[--n];
    }
    validateAsPattern() {
      let {
        stack: t
      } = this, r = t[t.length - 1];
      r.canBeArrowParameterDeclaration() && r.iterateErrors(([n, i]) => {
        this.parser.raise(n, i);
        let a = t.length - 2, o = t[a];
        for (; o.canBeArrowParameterDeclaration(); )
          o.clearDeclarationError(i.index), o = t[--a];
      });
    }
  };
  function yG() {
    return new Ai(3);
  }
  s(yG, "newParameterDeclarationScope");
  function gG() {
    return new $l(1);
  }
  s(gG, "newArrowHeadScope");
  function bG() {
    return new $l(2);
  }
  s(bG, "newAsyncArrowScope");
  function hT() {
    return new Ai();
  }
  s(hT, "newExpressionScope");
  var vh = class {
    static {
      s(this, "ProductionParameterHandler");
    }
    constructor() {
      this.stacks = [];
    }
    enter(t) {
      this.stacks.push(t);
    }
    exit() {
      this.stacks.pop();
    }
    currentFlags() {
      return this.stacks[this.stacks.length - 1];
    }
    get hasAwait() {
      return (this.currentFlags() & 2) > 0;
    }
    get hasYield() {
      return (this.currentFlags() & 1) > 0;
    }
    get hasReturn() {
      return (this.currentFlags() & 4) > 0;
    }
    get hasIn() {
      return (this.currentFlags() & 8) > 0;
    }
  };
  function ql(e, t) {
    return (e ? 2 : 0) | (t ? 1 : 0);
  }
  s(ql, "functionFlags");
  var Th = class extends yh {
    static {
      s(this, "UtilParser");
    }
    addExtra(t, r, n, i = !0) {
      if (!t) return;
      let {
        extra: a
      } = t;
      a == null && (a = {}, t.extra = a), i ? a[r] = n : Object.defineProperty(a, r, {
        enumerable: i,
        value: n
      });
    }
    isContextual(t) {
      return this.state.type === t && !this.state.containsEsc;
    }
    isUnparsedContextual(t, r) {
      let n = t + r.length;
      if (this.input.slice(t, n) === r) {
        let i = this.input.charCodeAt(n);
        return !(Ti(i) || (i & 64512) === 55296);
      }
      return !1;
    }
    isLookaheadContextual(t) {
      let r = this.nextTokenStart();
      return this.isUnparsedContextual(r, t);
    }
    eatContextual(t) {
      return this.isContextual(t) ? (this.next(), !0) : !1;
    }
    expectContextual(t, r) {
      if (!this.eatContextual(t)) {
        if (r != null)
          throw this.raise(r, this.state.startLoc);
        this.unexpected(null, t);
      }
    }
    canInsertSemicolon() {
      return this.match(139) || this.match(8) || this.hasPrecedingLineBreak();
    }
    hasPrecedingLineBreak() {
      return Yv(this.input, this.state.lastTokEndLoc.index, this.state.start);
    }
    hasFollowingLineBreak() {
      return Yv(this.input, this.state.end, this.nextTokenStart());
    }
    isLineTerminator() {
      return this.eat(13) || this.canInsertSemicolon();
    }
    semicolon(t = !0) {
      (t ? this.isLineTerminator() : this.eat(13)) || this.raise(_.MissingSemicolon, this.state.lastTokEndLoc);
    }
    expect(t, r) {
      this.eat(t) || this.unexpected(r, t);
    }
    tryParse(t, r = this.state.clone()) {
      let n = {
        node: null
      };
      try {
        let i = t((a = null) => {
          throw n.node = a, n;
        });
        if (this.state.errors.length > r.errors.length) {
          let a = this.state;
          return this.state = r, this.state.tokensLength = a.tokensLength, {
            node: i,
            error: a.errors[r.errors.length],
            thrown: !1,
            aborted: !1,
            failState: a
          };
        }
        return {
          node: i,
          error: null,
          thrown: !1,
          aborted: !1,
          failState: null
        };
      } catch (i) {
        let a = this.state;
        if (this.state = r, i instanceof SyntaxError)
          return {
            node: null,
            error: i,
            thrown: !0,
            aborted: !1,
            failState: a
          };
        if (i === n)
          return {
            node: n.node,
            error: null,
            thrown: !1,
            aborted: !0,
            failState: a
          };
        throw i;
      }
    }
    checkExpressionErrors(t, r) {
      if (!t) return !1;
      let {
        shorthandAssignLoc: n,
        doubleProtoLoc: i,
        privateKeyLoc: a,
        optionalParametersLoc: o
      } = t, l = !!n || !!i || !!o || !!a;
      if (!r)
        return l;
      n != null && this.raise(_.InvalidCoverInitializedName, n), i != null && this.raise(_.DuplicateProto, i), a != null && this.raise(_.UnexpectedPrivateField,
      a), o != null && this.unexpected(o);
    }
    isLiteralPropertyName() {
      return sT(this.state.type);
    }
    isPrivateName(t) {
      return t.type === "PrivateName";
    }
    getPrivateNameSV(t) {
      return t.id.name;
    }
    hasPropertyAsPrivateName(t) {
      return (t.type === "MemberExpression" || t.type === "OptionalMemberExpression") && this.isPrivateName(t.property);
    }
    isObjectProperty(t) {
      return t.type === "ObjectProperty";
    }
    isObjectMethod(t) {
      return t.type === "ObjectMethod";
    }
    initializeScopes(t = this.options.sourceType === "module") {
      let r = this.state.labels;
      this.state.labels = [];
      let n = this.exportedIdentifiers;
      this.exportedIdentifiers = /* @__PURE__ */ new Set();
      let i = this.inModule;
      this.inModule = t;
      let a = this.scope, o = this.getScopeHandler();
      this.scope = new o(this, t);
      let l = this.prodParam;
      this.prodParam = new vh();
      let u = this.classScope;
      this.classScope = new bh(this);
      let c = this.expressionScope;
      return this.expressionScope = new Eh(this), () => {
        this.state.labels = r, this.exportedIdentifiers = n, this.inModule = i, this.scope = a, this.prodParam = l, this.classScope = u, this.
        expressionScope = c;
      };
    }
    enterInitialScopes() {
      let t = 0;
      this.inModule && (t |= 2), this.scope.enter(1), this.prodParam.enter(t);
    }
    checkDestructuringPrivate(t) {
      let {
        privateKeyLoc: r
      } = t;
      r !== null && this.expectPlugin("destructuringPrivate", r);
    }
  }, Si = class {
    static {
      s(this, "ExpressionErrors");
    }
    constructor() {
      this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
    }
  }, Ci = class {
    static {
      s(this, "Node");
    }
    constructor(t, r, n) {
      this.type = "", this.start = r, this.end = 0, this.loc = new Pi(n), t != null && t.options.ranges && (this.range = [r, 0]), t != null &&
      t.filename && (this.loc.filename = t.filename);
    }
  }, Lh = Ci.prototype;
  Lh.__clone = function() {
    let e = new Ci(void 0, this.start, this.loc.start), t = Object.keys(this);
    for (let r = 0, n = t.length; r < n; r++) {
      let i = t[r];
      i !== "leadingComments" && i !== "trailingComments" && i !== "innerComments" && (e[i] = this[i]);
    }
    return e;
  };
  function EG(e) {
    return In(e);
  }
  s(EG, "clonePlaceholder");
  function In(e) {
    let {
      type: t,
      start: r,
      end: n,
      loc: i,
      range: a,
      extra: o,
      name: l
    } = e, u = Object.create(Lh);
    return u.type = t, u.start = r, u.end = n, u.loc = i, u.range = a, u.extra = o, u.name = l, t === "Placeholder" && (u.expectedNode = e.expectedNode),
    u;
  }
  s(In, "cloneIdentifier");
  function vG(e) {
    let {
      type: t,
      start: r,
      end: n,
      loc: i,
      range: a,
      extra: o
    } = e;
    if (t === "Placeholder")
      return EG(e);
    let l = Object.create(Lh);
    return l.type = t, l.start = r, l.end = n, l.loc = i, l.range = a, e.raw !== void 0 ? l.raw = e.raw : l.extra = o, l.value = e.value, l;
  }
  s(vG, "cloneStringLiteral");
  var xh = class extends Th {
    static {
      s(this, "NodeUtils");
    }
    startNode() {
      let t = this.state.startLoc;
      return new Ci(this, t.index, t);
    }
    startNodeAt(t) {
      return new Ci(this, t.index, t);
    }
    startNodeAtNode(t) {
      return this.startNodeAt(t.loc.start);
    }
    finishNode(t, r) {
      return this.finishNodeAt(t, r, this.state.lastTokEndLoc);
    }
    finishNodeAt(t, r, n) {
      return t.type = r, t.end = n.index, t.loc.end = n, this.options.ranges && (t.range[1] = n.index), this.options.attachComment && this.processComment(
      t), t;
    }
    resetStartLocation(t, r) {
      t.start = r.index, t.loc.start = r, this.options.ranges && (t.range[0] = r.index);
    }
    resetEndLocation(t, r = this.state.lastTokEndLoc) {
      t.end = r.index, t.loc.end = r, this.options.ranges && (t.range[1] = r.index);
    }
    resetStartLocationFromNode(t, r) {
      this.resetStartLocation(t, r.loc.start);
    }
  }, TG = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "stat\
ic", "string", "true", "typeof", "void"]), Pe = Dn`flow`({
    AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
    AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since \
they are either an ES module or they are a CommonJS module.",
    AssignReservedType: /* @__PURE__ */ s(({
      reservedType: e
    }) => `Cannot overwrite reserved type ${e}.`, "AssignReservedType"),
    DeclareClassElement: "The `declare` modifier can only appear on class fields.",
    DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
    DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
    EnumBooleanMemberNotInitialized: /* @__PURE__ */ s(({
      memberName: e,
      enumName: t
    }) => `Boolean enum members need to be initialized. Use either \`${e} = true,\` or \`${e} = false,\` in enum \`${t}\`.`, "EnumBooleanMem\
berNotInitialized"),
    EnumDuplicateMemberName: /* @__PURE__ */ s(({
      memberName: e,
      enumName: t
    }) => `Enum member names need to be unique, but the name \`${e}\` has already been used before in enum \`${t}\`.`, "EnumDuplicateMemberN\
ame"),
    EnumInconsistentMemberValues: /* @__PURE__ */ s(({
      enumName: e
    }) => `Enum \`${e}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, num\
bers, or strings) for all member initializers.`, "EnumInconsistentMemberValues"),
    EnumInvalidExplicitType: /* @__PURE__ */ s(({
      invalidEnumType: e,
      enumName: t
    }) => `Enum type \`${e}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${t}\`.`, "EnumInvalidEx\
plicitType"),
    EnumInvalidExplicitTypeUnknownSupplied: /* @__PURE__ */ s(({
      enumName: e
    }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${e}\`.`, "EnumInvalidEx\
plicitTypeUnknownSupplied"),
    EnumInvalidMemberInitializerPrimaryType: /* @__PURE__ */ s(({
      enumName: e,
      memberName: t,
      explicitType: r
    }) => `Enum \`${e}\` has type \`${r}\`, so the initializer of \`${t}\` needs to be a ${r} literal.`, "EnumInvalidMemberInitializerPrimar\
yType"),
    EnumInvalidMemberInitializerSymbolType: /* @__PURE__ */ s(({
      enumName: e,
      memberName: t
    }) => `Symbol enum members cannot be initialized. Use \`${t},\` in enum \`${e}\`.`, "EnumInvalidMemberInitializerSymbolType"),
    EnumInvalidMemberInitializerUnknownType: /* @__PURE__ */ s(({
      enumName: e,
      memberName: t
    }) => `The enum member initializer for \`${t}\` needs to be a literal (either a boolean, number, or string) in enum \`${e}\`.`, "EnumInv\
alidMemberInitializerUnknownType"),
    EnumInvalidMemberName: /* @__PURE__ */ s(({
      enumName: e,
      memberName: t,
      suggestion: r
    }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${t}\`, consider using \`${r}\`, in enum \`${e}\
\`.`, "EnumInvalidMemberName"),
    EnumNumberMemberNotInitialized: /* @__PURE__ */ s(({
      enumName: e,
      memberName: t
    }) => `Number enum members need to be initialized, e.g. \`${t} = 1\` in enum \`${e}\`.`, "EnumNumberMemberNotInitialized"),
    EnumStringMemberInconsistentlyInitialized: /* @__PURE__ */ s(({
      enumName: e
    }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${e}\`.`, "EnumStringMemb\
erInconsistentlyInitialized"),
    GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
    ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements.\
 It cannot be used with `import type` or `import typeof` statements.",
    InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
    InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
    InexactVariance: "Explicit inexact syntax cannot have variance.",
    InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
    MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
    NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
    NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
    PatternIsOptional: Object.assign({
      message: "A binding pattern parameter cannot be optional in an implementation signature."
    }, {
      reasonCode: "OptionalBindingPattern"
    }),
    SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
    SpreadVariance: "Spread properties cannot have variance.",
    ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
    ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
    ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
    ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
    ThisParamNoDefault: "The `this` parameter may not have a default value.",
    TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\
.",
    TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
    UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
    UnexpectedReservedType: /* @__PURE__ */ s(({
      reservedType: e
    }) => `Unexpected reserved type ${e}.`, "UnexpectedReservedType"),
    UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
    UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
    UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
    UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
    UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
    UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}\
`, use `async <T>() => {}`.",
    UnsupportedDeclareExportKind: /* @__PURE__ */ s(({
      unsupportedExportKind: e,
      suggestion: t
    }) => `\`declare export ${e}\` is not supported. Use \`${t}\` instead.`, "UnsupportedDeclareExportKind"),
    UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
    UnterminatedFlowComment: "Unterminated flow-comment."
  });
  function xG(e) {
    return e.type === "DeclareExportAllDeclaration" || e.type === "DeclareExportDeclaration" && (!e.declaration || e.declaration.type !== "T\
ypeAlias" && e.declaration.type !== "InterfaceDeclaration");
  }
  s(xG, "isEsModuleType");
  function Xv(e) {
    return e.importKind === "type" || e.importKind === "typeof";
  }
  s(Xv, "hasTypeImportKind");
  var SG = {
    const: "declare export var",
    let: "declare export var",
    type: "export type",
    interface: "export interface"
  };
  function PG(e, t) {
    let r = [], n = [];
    for (let i = 0; i < e.length; i++)
      (t(e[i], i, e) ? r : n).push(e[i]);
    return [r, n];
  }
  s(PG, "partition");
  var AG = /\*?\s*@((?:no)?flow)\b/, CG = /* @__PURE__ */ s((e) => class extends e {
    static {
      s(this, "FlowParserMixin");
    }
    constructor(...r) {
      super(...r), this.flowPragma = void 0;
    }
    getScopeHandler() {
      return fh;
    }
    shouldParseTypes() {
      return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
    }
    shouldParseEnums() {
      return !!this.getPluginOption("flow", "enums");
    }
    finishToken(r, n) {
      r !== 133 && r !== 13 && r !== 28 && this.flowPragma === void 0 && (this.flowPragma = null), super.finishToken(r, n);
    }
    addComment(r) {
      if (this.flowPragma === void 0) {
        let n = AG.exec(r.value);
        if (n) if (n[1] === "flow")
          this.flowPragma = "flow";
        else if (n[1] === "noflow")
          this.flowPragma = "noflow";
        else
          throw new Error("Unexpected flow pragma");
      }
      super.addComment(r);
    }
    flowParseTypeInitialiser(r) {
      let n = this.state.inType;
      this.state.inType = !0, this.expect(r || 14);
      let i = this.flowParseType();
      return this.state.inType = n, i;
    }
    flowParsePredicate() {
      let r = this.startNode(), n = this.state.startLoc;
      return this.next(), this.expectContextual(110), this.state.lastTokStartLoc.index > n.index + 1 && this.raise(Pe.UnexpectedSpaceBetweenModuloChecks,
      n), this.eat(10) ? (r.value = super.parseExpression(), this.expect(11), this.finishNode(r, "DeclaredPredicate")) : this.finishNode(r, "\
InferredPredicate");
    }
    flowParseTypeAndPredicateInitialiser() {
      let r = this.state.inType;
      this.state.inType = !0, this.expect(14);
      let n = null, i = null;
      return this.match(54) ? (this.state.inType = r, i = this.flowParsePredicate()) : (n = this.flowParseType(), this.state.inType = r, this.
      match(54) && (i = this.flowParsePredicate())), [n, i];
    }
    flowParseDeclareClass(r) {
      return this.next(), this.flowParseInterfaceish(r, !0), this.finishNode(r, "DeclareClass");
    }
    flowParseDeclareFunction(r) {
      this.next();
      let n = r.id = this.parseIdentifier(), i = this.startNode(), a = this.startNode();
      this.match(47) ? i.typeParameters = this.flowParseTypeParameterDeclaration() : i.typeParameters = null, this.expect(10);
      let o = this.flowParseFunctionTypeParams();
      return i.params = o.params, i.rest = o.rest, i.this = o._this, this.expect(11), [i.returnType, r.predicate] = this.flowParseTypeAndPredicateInitialiser(),
      a.typeAnnotation = this.finishNode(i, "FunctionTypeAnnotation"), n.typeAnnotation = this.finishNode(a, "TypeAnnotation"), this.resetEndLocation(
      n), this.semicolon(), this.scope.declareName(r.id.name, 2048, r.id.loc.start), this.finishNode(r, "DeclareFunction");
    }
    flowParseDeclare(r, n) {
      if (this.match(80))
        return this.flowParseDeclareClass(r);
      if (this.match(68))
        return this.flowParseDeclareFunction(r);
      if (this.match(74))
        return this.flowParseDeclareVariable(r);
      if (this.eatContextual(127))
        return this.match(16) ? this.flowParseDeclareModuleExports(r) : (n && this.raise(Pe.NestedDeclareModule, this.state.lastTokStartLoc),
        this.flowParseDeclareModule(r));
      if (this.isContextual(130))
        return this.flowParseDeclareTypeAlias(r);
      if (this.isContextual(131))
        return this.flowParseDeclareOpaqueType(r);
      if (this.isContextual(129))
        return this.flowParseDeclareInterface(r);
      if (this.match(82))
        return this.flowParseDeclareExportDeclaration(r, n);
      this.unexpected();
    }
    flowParseDeclareVariable(r) {
      return this.next(), r.id = this.flowParseTypeAnnotatableIdentifier(!0), this.scope.declareName(r.id.name, 5, r.id.loc.start), this.semicolon(),
      this.finishNode(r, "DeclareVariable");
    }
    flowParseDeclareModule(r) {
      this.scope.enter(0), this.match(133) ? r.id = super.parseExprAtom() : r.id = this.parseIdentifier();
      let n = r.body = this.startNode(), i = n.body = [];
      for (this.expect(5); !this.match(8); ) {
        let l = this.startNode();
        this.match(83) ? (this.next(), !this.isContextual(130) && !this.match(87) && this.raise(Pe.InvalidNonTypeImportInDeclareModule, this.
        state.lastTokStartLoc), super.parseImport(l)) : (this.expectContextual(125, Pe.UnsupportedStatementInDeclareModule), l = this.flowParseDeclare(
        l, !0)), i.push(l);
      }
      this.scope.exit(), this.expect(8), this.finishNode(n, "BlockStatement");
      let a = null, o = !1;
      return i.forEach((l) => {
        xG(l) ? (a === "CommonJS" && this.raise(Pe.AmbiguousDeclareModuleKind, l), a = "ES") : l.type === "DeclareModuleExports" && (o && this.
        raise(Pe.DuplicateDeclareModuleExports, l), a === "ES" && this.raise(Pe.AmbiguousDeclareModuleKind, l), a = "CommonJS", o = !0);
      }), r.kind = a || "CommonJS", this.finishNode(r, "DeclareModule");
    }
    flowParseDeclareExportDeclaration(r, n) {
      if (this.expect(82), this.eat(65))
        return this.match(68) || this.match(80) ? r.declaration = this.flowParseDeclare(this.startNode()) : (r.declaration = this.flowParseType(),
        this.semicolon()), r.default = !0, this.finishNode(r, "DeclareExportDeclaration");
      if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !n) {
        let i = this.state.value;
        throw this.raise(Pe.UnsupportedDeclareExportKind, this.state.startLoc, {
          unsupportedExportKind: i,
          suggestion: SG[i]
        });
      }
      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131))
        return r.declaration = this.flowParseDeclare(this.startNode()), r.default = !1, this.finishNode(r, "DeclareExportDeclaration");
      if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131))
        return r = this.parseExport(r, null), r.type === "ExportNamedDeclaration" && (r.type = "ExportDeclaration", r.default = !1, delete r.
        exportKind), r.type = "Declare" + r.type, r;
      this.unexpected();
    }
    flowParseDeclareModuleExports(r) {
      return this.next(), this.expectContextual(111), r.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(r,
      "DeclareModuleExports");
    }
    flowParseDeclareTypeAlias(r) {
      this.next();
      let n = this.flowParseTypeAlias(r);
      return n.type = "DeclareTypeAlias", n;
    }
    flowParseDeclareOpaqueType(r) {
      this.next();
      let n = this.flowParseOpaqueType(r, !0);
      return n.type = "DeclareOpaqueType", n;
    }
    flowParseDeclareInterface(r) {
      return this.next(), this.flowParseInterfaceish(r, !1), this.finishNode(r, "DeclareInterface");
    }
    flowParseInterfaceish(r, n) {
      if (r.id = this.flowParseRestrictedIdentifier(!n, !0), this.scope.declareName(r.id.name, n ? 17 : 8201, r.id.loc.start), this.match(47) ?
      r.typeParameters = this.flowParseTypeParameterDeclaration() : r.typeParameters = null, r.extends = [], this.eat(81))
        do
          r.extends.push(this.flowParseInterfaceExtends());
        while (!n && this.eat(12));
      if (n) {
        if (r.implements = [], r.mixins = [], this.eatContextual(117))
          do
            r.mixins.push(this.flowParseInterfaceExtends());
          while (this.eat(12));
        if (this.eatContextual(113))
          do
            r.implements.push(this.flowParseInterfaceExtends());
          while (this.eat(12));
      }
      r.body = this.flowParseObjectType({
        allowStatic: n,
        allowExact: !1,
        allowSpread: !1,
        allowProto: n,
        allowInexact: !1
      });
    }
    flowParseInterfaceExtends() {
      let r = this.startNode();
      return r.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? r.typeParameters = this.flowParseTypeParameterInstantiation() :
      r.typeParameters = null, this.finishNode(r, "InterfaceExtends");
    }
    flowParseInterface(r) {
      return this.flowParseInterfaceish(r, !1), this.finishNode(r, "InterfaceDeclaration");
    }
    checkNotUnderscore(r) {
      r === "_" && this.raise(Pe.UnexpectedReservedUnderscore, this.state.startLoc);
    }
    checkReservedType(r, n, i) {
      TG.has(r) && this.raise(i ? Pe.AssignReservedType : Pe.UnexpectedReservedType, n, {
        reservedType: r
      });
    }
    flowParseRestrictedIdentifier(r, n) {
      return this.checkReservedType(this.state.value, this.state.startLoc, n), this.parseIdentifier(r);
    }
    flowParseTypeAlias(r) {
      return r.id = this.flowParseRestrictedIdentifier(!1, !0), this.scope.declareName(r.id.name, 8201, r.id.loc.start), this.match(47) ? r.
      typeParameters = this.flowParseTypeParameterDeclaration() : r.typeParameters = null, r.right = this.flowParseTypeInitialiser(29), this.
      semicolon(), this.finishNode(r, "TypeAlias");
    }
    flowParseOpaqueType(r, n) {
      return this.expectContextual(130), r.id = this.flowParseRestrictedIdentifier(!0, !0), this.scope.declareName(r.id.name, 8201, r.id.loc.
      start), this.match(47) ? r.typeParameters = this.flowParseTypeParameterDeclaration() : r.typeParameters = null, r.supertype = null, this.
      match(14) && (r.supertype = this.flowParseTypeInitialiser(14)), r.impltype = null, n || (r.impltype = this.flowParseTypeInitialiser(29)),
      this.semicolon(), this.finishNode(r, "OpaqueType");
    }
    flowParseTypeParameter(r = !1) {
      let n = this.state.startLoc, i = this.startNode(), a = this.flowParseVariance(), o = this.flowParseTypeAnnotatableIdentifier();
      return i.name = o.name, i.variance = a, i.bound = o.typeAnnotation, this.match(29) ? (this.eat(29), i.default = this.flowParseType()) :
      r && this.raise(Pe.MissingTypeParamDefault, n), this.finishNode(i, "TypeParameter");
    }
    flowParseTypeParameterDeclaration() {
      let r = this.state.inType, n = this.startNode();
      n.params = [], this.state.inType = !0, this.match(47) || this.match(142) ? this.next() : this.unexpected();
      let i = !1;
      do {
        let a = this.flowParseTypeParameter(i);
        n.params.push(a), a.default && (i = !0), this.match(48) || this.expect(12);
      } while (!this.match(48));
      return this.expect(48), this.state.inType = r, this.finishNode(n, "TypeParameterDeclaration");
    }
    flowParseTypeParameterInstantiation() {
      let r = this.startNode(), n = this.state.inType;
      r.params = [], this.state.inType = !0, this.expect(47);
      let i = this.state.noAnonFunctionType;
      for (this.state.noAnonFunctionType = !1; !this.match(48); )
        r.params.push(this.flowParseType()), this.match(48) || this.expect(12);
      return this.state.noAnonFunctionType = i, this.expect(48), this.state.inType = n, this.finishNode(r, "TypeParameterInstantiation");
    }
    flowParseTypeParameterInstantiationCallOrNew() {
      let r = this.startNode(), n = this.state.inType;
      for (r.params = [], this.state.inType = !0, this.expect(47); !this.match(48); )
        r.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
      return this.expect(48), this.state.inType = n, this.finishNode(r, "TypeParameterInstantiation");
    }
    flowParseInterfaceType() {
      let r = this.startNode();
      if (this.expectContextual(129), r.extends = [], this.eat(81))
        do
          r.extends.push(this.flowParseInterfaceExtends());
        while (this.eat(12));
      return r.body = this.flowParseObjectType({
        allowStatic: !1,
        allowExact: !1,
        allowSpread: !1,
        allowProto: !1,
        allowInexact: !1
      }), this.finishNode(r, "InterfaceTypeAnnotation");
    }
    flowParseObjectPropertyKey() {
      return this.match(134) || this.match(133) ? super.parseExprAtom() : this.parseIdentifier(!0);
    }
    flowParseObjectTypeIndexer(r, n, i) {
      return r.static = n, this.lookahead().type === 14 ? (r.id = this.flowParseObjectPropertyKey(), r.key = this.flowParseTypeInitialiser()) :
      (r.id = null, r.key = this.flowParseType()), this.expect(3), r.value = this.flowParseTypeInitialiser(), r.variance = i, this.finishNode(
      r, "ObjectTypeIndexer");
    }
    flowParseObjectTypeInternalSlot(r, n) {
      return r.static = n, r.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (r.method =
      !0, r.optional = !1, r.value = this.flowParseObjectTypeMethodish(this.startNodeAt(r.loc.start))) : (r.method = !1, this.eat(17) && (r.
      optional = !0), r.value = this.flowParseTypeInitialiser()), this.finishNode(r, "ObjectTypeInternalSlot");
    }
    flowParseObjectTypeMethodish(r) {
      for (r.params = [], r.rest = null, r.typeParameters = null, r.this = null, this.match(47) && (r.typeParameters = this.flowParseTypeParameterDeclaration()),
      this.expect(10), this.match(78) && (r.this = this.flowParseFunctionTypeParam(!0), r.this.name = null, this.match(11) || this.expect(12)); !this.
      match(11) && !this.match(21); )
        r.params.push(this.flowParseFunctionTypeParam(!1)), this.match(11) || this.expect(12);
      return this.eat(21) && (r.rest = this.flowParseFunctionTypeParam(!1)), this.expect(11), r.returnType = this.flowParseTypeInitialiser(),
      this.finishNode(r, "FunctionTypeAnnotation");
    }
    flowParseObjectTypeCallProperty(r, n) {
      let i = this.startNode();
      return r.static = n, r.value = this.flowParseObjectTypeMethodish(i), this.finishNode(r, "ObjectTypeCallProperty");
    }
    flowParseObjectType({
      allowStatic: r,
      allowExact: n,
      allowSpread: i,
      allowProto: a,
      allowInexact: o
    }) {
      let l = this.state.inType;
      this.state.inType = !0;
      let u = this.startNode();
      u.callProperties = [], u.properties = [], u.indexers = [], u.internalSlots = [];
      let c, f, p = !1;
      for (n && this.match(6) ? (this.expect(6), c = 9, f = !0) : (this.expect(5), c = 8, f = !1), u.exact = f; !this.match(c); ) {
        let y = !1, v = null, d = null, b = this.startNode();
        if (a && this.isContextual(118)) {
          let I = this.lookahead();
          I.type !== 14 && I.type !== 17 && (this.next(), v = this.state.startLoc, r = !1);
        }
        if (r && this.isContextual(106)) {
          let I = this.lookahead();
          I.type !== 14 && I.type !== 17 && (this.next(), y = !0);
        }
        let E = this.flowParseVariance();
        if (this.eat(0))
          v != null && this.unexpected(v), this.eat(0) ? (E && this.unexpected(E.loc.start), u.internalSlots.push(this.flowParseObjectTypeInternalSlot(
          b, y))) : u.indexers.push(this.flowParseObjectTypeIndexer(b, y, E));
        else if (this.match(10) || this.match(47))
          v != null && this.unexpected(v), E && this.unexpected(E.loc.start), u.callProperties.push(this.flowParseObjectTypeCallProperty(b, y));
        else {
          let I = "init";
          if (this.isContextual(99) || this.isContextual(104)) {
            let k = this.lookahead();
            sT(k.type) && (I = this.state.value, this.next());
          }
          let O = this.flowParseObjectTypeProperty(b, y, v, E, I, i, o ?? !f);
          O === null ? (p = !0, d = this.state.lastTokStartLoc) : u.properties.push(O);
        }
        this.flowObjectTypeSemicolon(), d && !this.match(8) && !this.match(9) && this.raise(Pe.UnexpectedExplicitInexactInObject, d);
      }
      this.expect(c), i && (u.inexact = p);
      let h = this.finishNode(u, "ObjectTypeAnnotation");
      return this.state.inType = l, h;
    }
    flowParseObjectTypeProperty(r, n, i, a, o, l, u) {
      if (this.eat(21))
        return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (l ? u || this.raise(Pe.InexactInsideExact, this.state.lastTokStartLoc) :
        this.raise(Pe.InexactInsideNonObject, this.state.lastTokStartLoc), a && this.raise(Pe.InexactVariance, a), null) : (l || this.raise(
        Pe.UnexpectedSpreadType, this.state.lastTokStartLoc), i != null && this.unexpected(i), a && this.raise(Pe.SpreadVariance, a), r.argument =
        this.flowParseType(), this.finishNode(r, "ObjectTypeSpreadProperty"));
      {
        r.key = this.flowParseObjectPropertyKey(), r.static = n, r.proto = i != null, r.kind = o;
        let c = !1;
        return this.match(47) || this.match(10) ? (r.method = !0, i != null && this.unexpected(i), a && this.unexpected(a.loc.start), r.value =
        this.flowParseObjectTypeMethodish(this.startNodeAt(r.loc.start)), (o === "get" || o === "set") && this.flowCheckGetterSetterParams(r),
        !l && r.key.name === "constructor" && r.value.this && this.raise(Pe.ThisParamBannedInConstructor, r.value.this)) : (o !== "init" && this.
        unexpected(), r.method = !1, this.eat(17) && (c = !0), r.value = this.flowParseTypeInitialiser(), r.variance = a), r.optional = c, this.
        finishNode(r, "ObjectTypeProperty");
      }
    }
    flowCheckGetterSetterParams(r) {
      let n = r.kind === "get" ? 0 : 1, i = r.value.params.length + (r.value.rest ? 1 : 0);
      r.value.this && this.raise(r.kind === "get" ? Pe.GetterMayNotHaveThisParam : Pe.SetterMayNotHaveThisParam, r.value.this), i !== n && this.
      raise(r.kind === "get" ? _.BadGetterArity : _.BadSetterArity, r), r.kind === "set" && r.value.rest && this.raise(_.BadSetterRestParameter,
      r);
    }
    flowObjectTypeSemicolon() {
      !this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9) && this.unexpected();
    }
    flowParseQualifiedTypeIdentifier(r, n) {
      var i;
      (i = r) != null || (r = this.state.startLoc);
      let a = n || this.flowParseRestrictedIdentifier(!0);
      for (; this.eat(16); ) {
        let o = this.startNodeAt(r);
        o.qualification = a, o.id = this.flowParseRestrictedIdentifier(!0), a = this.finishNode(o, "QualifiedTypeIdentifier");
      }
      return a;
    }
    flowParseGenericType(r, n) {
      let i = this.startNodeAt(r);
      return i.typeParameters = null, i.id = this.flowParseQualifiedTypeIdentifier(r, n), this.match(47) && (i.typeParameters = this.flowParseTypeParameterInstantiation()),
      this.finishNode(i, "GenericTypeAnnotation");
    }
    flowParseTypeofType() {
      let r = this.startNode();
      return this.expect(87), r.argument = this.flowParsePrimaryType(), this.finishNode(r, "TypeofTypeAnnotation");
    }
    flowParseTupleType() {
      let r = this.startNode();
      for (r.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (r.types.push(this.flowParseType()), !this.match(
      3)); )
        this.expect(12);
      return this.expect(3), this.finishNode(r, "TupleTypeAnnotation");
    }
    flowParseFunctionTypeParam(r) {
      let n = null, i = !1, a = null, o = this.startNode(), l = this.lookahead(), u = this.state.type === 78;
      return l.type === 14 || l.type === 17 ? (u && !r && this.raise(Pe.ThisParamMustBeFirst, o), n = this.parseIdentifier(u), this.eat(17) &&
      (i = !0, u && this.raise(Pe.ThisParamMayNotBeOptional, o)), a = this.flowParseTypeInitialiser()) : a = this.flowParseType(), o.name = n,
      o.optional = i, o.typeAnnotation = a, this.finishNode(o, "FunctionTypeParam");
    }
    reinterpretTypeAsFunctionTypeParam(r) {
      let n = this.startNodeAt(r.loc.start);
      return n.name = null, n.optional = !1, n.typeAnnotation = r, this.finishNode(n, "FunctionTypeParam");
    }
    flowParseFunctionTypeParams(r = []) {
      let n = null, i = null;
      for (this.match(78) && (i = this.flowParseFunctionTypeParam(!0), i.name = null, this.match(11) || this.expect(12)); !this.match(11) &&
      !this.match(21); )
        r.push(this.flowParseFunctionTypeParam(!1)), this.match(11) || this.expect(12);
      return this.eat(21) && (n = this.flowParseFunctionTypeParam(!1)), {
        params: r,
        rest: n,
        _this: i
      };
    }
    flowIdentToTypeAnnotation(r, n, i) {
      switch (i.name) {
        case "any":
          return this.finishNode(n, "AnyTypeAnnotation");
        case "bool":
        case "boolean":
          return this.finishNode(n, "BooleanTypeAnnotation");
        case "mixed":
          return this.finishNode(n, "MixedTypeAnnotation");
        case "empty":
          return this.finishNode(n, "EmptyTypeAnnotation");
        case "number":
          return this.finishNode(n, "NumberTypeAnnotation");
        case "string":
          return this.finishNode(n, "StringTypeAnnotation");
        case "symbol":
          return this.finishNode(n, "SymbolTypeAnnotation");
        default:
          return this.checkNotUnderscore(i.name), this.flowParseGenericType(r, i);
      }
    }
    flowParsePrimaryType() {
      let r = this.state.startLoc, n = this.startNode(), i, a, o = !1, l = this.state.noAnonFunctionType;
      switch (this.state.type) {
        case 5:
          return this.flowParseObjectType({
            allowStatic: !1,
            allowExact: !1,
            allowSpread: !0,
            allowProto: !1,
            allowInexact: !0
          });
        case 6:
          return this.flowParseObjectType({
            allowStatic: !1,
            allowExact: !0,
            allowSpread: !0,
            allowProto: !1,
            allowInexact: !1
          });
        case 0:
          return this.state.noAnonFunctionType = !1, a = this.flowParseTupleType(), this.state.noAnonFunctionType = l, a;
        case 47: {
          let u = this.startNode();
          return u.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), i = this.flowParseFunctionTypeParams(), u.params =
          i.params, u.rest = i.rest, u.this = i._this, this.expect(11), this.expect(19), u.returnType = this.flowParseType(), this.finishNode(
          u, "FunctionTypeAnnotation");
        }
        case 10: {
          let u = this.startNode();
          if (this.next(), !this.match(11) && !this.match(21))
            if (et(this.state.type) || this.match(78)) {
              let c = this.lookahead().type;
              o = c !== 17 && c !== 14;
            } else
              o = !0;
          if (o) {
            if (this.state.noAnonFunctionType = !1, a = this.flowParseType(), this.state.noAnonFunctionType = l, this.state.noAnonFunctionType ||
            !(this.match(12) || this.match(11) && this.lookahead().type === 19))
              return this.expect(11), a;
            this.eat(12);
          }
          return a ? i = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(a)]) : i = this.flowParseFunctionTypeParams(),
          u.params = i.params, u.rest = i.rest, u.this = i._this, this.expect(11), this.expect(19), u.returnType = this.flowParseType(), u.typeParameters =
          null, this.finishNode(u, "FunctionTypeAnnotation");
        }
        case 133:
          return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
        case 85:
        case 86:
          return n.value = this.match(85), this.next(), this.finishNode(n, "BooleanLiteralTypeAnnotation");
        case 53:
          if (this.state.value === "-") {
            if (this.next(), this.match(134))
              return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", n);
            if (this.match(135))
              return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", n);
            throw this.raise(Pe.UnexpectedSubtractionOperand, this.state.startLoc);
          }
          this.unexpected();
          return;
        case 134:
          return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
        case 135:
          return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
        case 88:
          return this.next(), this.finishNode(n, "VoidTypeAnnotation");
        case 84:
          return this.next(), this.finishNode(n, "NullLiteralTypeAnnotation");
        case 78:
          return this.next(), this.finishNode(n, "ThisTypeAnnotation");
        case 55:
          return this.next(), this.finishNode(n, "ExistsTypeAnnotation");
        case 87:
          return this.flowParseTypeofType();
        default:
          if (kh(this.state.type)) {
            let u = rs(this.state.type);
            return this.next(), super.createIdentifier(n, u);
          } else if (et(this.state.type))
            return this.isContextual(129) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(r, n, this.parseIdentifier());
      }
      this.unexpected();
    }
    flowParsePostfixType() {
      let r = this.state.startLoc, n = this.flowParsePrimaryType(), i = !1;
      for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
        let a = this.startNodeAt(r), o = this.eat(18);
        i = i || o, this.expect(0), !o && this.match(3) ? (a.elementType = n, this.next(), n = this.finishNode(a, "ArrayTypeAnnotation")) : (a.
        objectType = n, a.indexType = this.flowParseType(), this.expect(3), i ? (a.optional = o, n = this.finishNode(a, "OptionalIndexedAcce\
ssType")) : n = this.finishNode(a, "IndexedAccessType"));
      }
      return n;
    }
    flowParsePrefixType() {
      let r = this.startNode();
      return this.eat(17) ? (r.typeAnnotation = this.flowParsePrefixType(), this.finishNode(r, "NullableTypeAnnotation")) : this.flowParsePostfixType();
    }
    flowParseAnonFunctionWithoutParens() {
      let r = this.flowParsePrefixType();
      if (!this.state.noAnonFunctionType && this.eat(19)) {
        let n = this.startNodeAt(r.loc.start);
        return n.params = [this.reinterpretTypeAsFunctionTypeParam(r)], n.rest = null, n.this = null, n.returnType = this.flowParseType(), n.
        typeParameters = null, this.finishNode(n, "FunctionTypeAnnotation");
      }
      return r;
    }
    flowParseIntersectionType() {
      let r = this.startNode();
      this.eat(45);
      let n = this.flowParseAnonFunctionWithoutParens();
      for (r.types = [n]; this.eat(45); )
        r.types.push(this.flowParseAnonFunctionWithoutParens());
      return r.types.length === 1 ? n : this.finishNode(r, "IntersectionTypeAnnotation");
    }
    flowParseUnionType() {
      let r = this.startNode();
      this.eat(43);
      let n = this.flowParseIntersectionType();
      for (r.types = [n]; this.eat(43); )
        r.types.push(this.flowParseIntersectionType());
      return r.types.length === 1 ? n : this.finishNode(r, "UnionTypeAnnotation");
    }
    flowParseType() {
      let r = this.state.inType;
      this.state.inType = !0;
      let n = this.flowParseUnionType();
      return this.state.inType = r, n;
    }
    flowParseTypeOrImplicitInstantiation() {
      if (this.state.type === 132 && this.state.value === "_") {
        let r = this.state.startLoc, n = this.parseIdentifier();
        return this.flowParseGenericType(r, n);
      } else
        return this.flowParseType();
    }
    flowParseTypeAnnotation() {
      let r = this.startNode();
      return r.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(r, "TypeAnnotation");
    }
    flowParseTypeAnnotatableIdentifier(r) {
      let n = r ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
      return this.match(14) && (n.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(n)), n;
    }
    typeCastToParameter(r) {
      return r.expression.typeAnnotation = r.typeAnnotation, this.resetEndLocation(r.expression, r.typeAnnotation.loc.end), r.expression;
    }
    flowParseVariance() {
      let r = null;
      return this.match(53) ? (r = this.startNode(), this.state.value === "+" ? r.kind = "plus" : r.kind = "minus", this.next(), this.finishNode(
      r, "Variance")) : r;
    }
    parseFunctionBody(r, n, i = !1) {
      if (n) {
        this.forwardNoArrowParamsConversionAt(r, () => super.parseFunctionBody(r, !0, i));
        return;
      }
      super.parseFunctionBody(r, !1, i);
    }
    parseFunctionBodyAndFinish(r, n, i = !1) {
      if (this.match(14)) {
        let a = this.startNode();
        [a.typeAnnotation, r.predicate] = this.flowParseTypeAndPredicateInitialiser(), r.returnType = a.typeAnnotation ? this.finishNode(a, "\
TypeAnnotation") : null;
      }
      return super.parseFunctionBodyAndFinish(r, n, i);
    }
    parseStatementLike(r) {
      if (this.state.strict && this.isContextual(129)) {
        let i = this.lookahead();
        if ($r(i.type)) {
          let a = this.startNode();
          return this.next(), this.flowParseInterface(a);
        }
      } else if (this.shouldParseEnums() && this.isContextual(126)) {
        let i = this.startNode();
        return this.next(), this.flowParseEnumDeclaration(i);
      }
      let n = super.parseStatementLike(r);
      return this.flowPragma === void 0 && !this.isValidDirective(n) && (this.flowPragma = null), n;
    }
    parseExpressionStatement(r, n, i) {
      if (n.type === "Identifier") {
        if (n.name === "declare") {
          if (this.match(80) || et(this.state.type) || this.match(68) || this.match(74) || this.match(82))
            return this.flowParseDeclare(r);
        } else if (et(this.state.type)) {
          if (n.name === "interface")
            return this.flowParseInterface(r);
          if (n.name === "type")
            return this.flowParseTypeAlias(r);
          if (n.name === "opaque")
            return this.flowParseOpaqueType(r, !1);
        }
      }
      return super.parseExpressionStatement(r, n, i);
    }
    shouldParseExportDeclaration() {
      let {
        type: r
      } = this.state;
      return Hv(r) || this.shouldParseEnums() && r === 126 ? !this.state.containsEsc : super.shouldParseExportDeclaration();
    }
    isExportDefaultSpecifier() {
      let {
        type: r
      } = this.state;
      return Hv(r) || this.shouldParseEnums() && r === 126 ? this.state.containsEsc : super.isExportDefaultSpecifier();
    }
    parseExportDefaultExpression() {
      if (this.shouldParseEnums() && this.isContextual(126)) {
        let r = this.startNode();
        return this.next(), this.flowParseEnumDeclaration(r);
      }
      return super.parseExportDefaultExpression();
    }
    parseConditional(r, n, i) {
      if (!this.match(17)) return r;
      if (this.state.maybeInArrowParameters) {
        let h = this.lookaheadCharCode();
        if (h === 44 || h === 61 || h === 58 || h === 41)
          return this.setOptionalParametersError(i), r;
      }
      this.expect(17);
      let a = this.state.clone(), o = this.state.noArrowAt, l = this.startNodeAt(n), {
        consequent: u,
        failed: c
      } = this.tryParseConditionalConsequent(), [f, p] = this.getArrowLikeExpressions(u);
      if (c || p.length > 0) {
        let h = [...o];
        if (p.length > 0) {
          this.state = a, this.state.noArrowAt = h;
          for (let y = 0; y < p.length; y++)
            h.push(p[y].start);
          ({
            consequent: u,
            failed: c
          } = this.tryParseConditionalConsequent()), [f, p] = this.getArrowLikeExpressions(u);
        }
        c && f.length > 1 && this.raise(Pe.AmbiguousConditionalArrow, a.startLoc), c && f.length === 1 && (this.state = a, h.push(f[0].start),
        this.state.noArrowAt = h, {
          consequent: u,
          failed: c
        } = this.tryParseConditionalConsequent());
      }
      return this.getArrowLikeExpressions(u, !0), this.state.noArrowAt = o, this.expect(14), l.test = r, l.consequent = u, l.alternate = this.
      forwardNoArrowParamsConversionAt(l, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(l, "ConditionalExpression");
    }
    tryParseConditionalConsequent() {
      this.state.noArrowParamsConversionAt.push(this.state.start);
      let r = this.parseMaybeAssignAllowIn(), n = !this.match(14);
      return this.state.noArrowParamsConversionAt.pop(), {
        consequent: r,
        failed: n
      };
    }
    getArrowLikeExpressions(r, n) {
      let i = [r], a = [];
      for (; i.length !== 0; ) {
        let o = i.pop();
        o.type === "ArrowFunctionExpression" && o.body.type !== "BlockStatement" ? (o.typeParameters || !o.returnType ? this.finishArrowValidation(
        o) : a.push(o), i.push(o.body)) : o.type === "ConditionalExpression" && (i.push(o.consequent), i.push(o.alternate));
      }
      return n ? (a.forEach((o) => this.finishArrowValidation(o)), [a, []]) : PG(a, (o) => o.params.every((l) => this.isAssignable(l, !0)));
    }
    finishArrowValidation(r) {
      var n;
      this.toAssignableList(r.params, (n = r.extra) == null ? void 0 : n.trailingCommaLoc, !1), this.scope.enter(6), super.checkParams(r, !1,
      !0), this.scope.exit();
    }
    forwardNoArrowParamsConversionAt(r, n) {
      let i;
      return this.state.noArrowParamsConversionAt.includes(r.start) ? (this.state.noArrowParamsConversionAt.push(this.state.start), i = n(),
      this.state.noArrowParamsConversionAt.pop()) : i = n(), i;
    }
    parseParenItem(r, n) {
      let i = super.parseParenItem(r, n);
      if (this.eat(17) && (i.optional = !0, this.resetEndLocation(r)), this.match(14)) {
        let a = this.startNodeAt(n);
        return a.expression = i, a.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(a, "TypeCastExpression");
      }
      return i;
    }
    assertModuleNodeAllowed(r) {
      r.type === "ImportDeclaration" && (r.importKind === "type" || r.importKind === "typeof") || r.type === "ExportNamedDeclaration" && r.exportKind ===
      "type" || r.type === "ExportAllDeclaration" && r.exportKind === "type" || super.assertModuleNodeAllowed(r);
    }
    parseExportDeclaration(r) {
      if (this.isContextual(130)) {
        r.exportKind = "type";
        let n = this.startNode();
        return this.next(), this.match(5) ? (r.specifiers = this.parseExportSpecifiers(!0), super.parseExportFrom(r), null) : this.flowParseTypeAlias(
        n);
      } else if (this.isContextual(131)) {
        r.exportKind = "type";
        let n = this.startNode();
        return this.next(), this.flowParseOpaqueType(n, !1);
      } else if (this.isContextual(129)) {
        r.exportKind = "type";
        let n = this.startNode();
        return this.next(), this.flowParseInterface(n);
      } else if (this.shouldParseEnums() && this.isContextual(126)) {
        r.exportKind = "value";
        let n = this.startNode();
        return this.next(), this.flowParseEnumDeclaration(n);
      } else
        return super.parseExportDeclaration(r);
    }
    eatExportStar(r) {
      return super.eatExportStar(r) ? !0 : this.isContextual(130) && this.lookahead().type === 55 ? (r.exportKind = "type", this.next(), this.
      next(), !0) : !1;
    }
    maybeParseExportNamespaceSpecifier(r) {
      let {
        startLoc: n
      } = this.state, i = super.maybeParseExportNamespaceSpecifier(r);
      return i && r.exportKind === "type" && this.unexpected(n), i;
    }
    parseClassId(r, n, i) {
      super.parseClassId(r, n, i), this.match(47) && (r.typeParameters = this.flowParseTypeParameterDeclaration());
    }
    parseClassMember(r, n, i) {
      let {
        startLoc: a
      } = this.state;
      if (this.isContextual(125)) {
        if (super.parseClassMemberFromModifier(r, n))
          return;
        n.declare = !0;
      }
      super.parseClassMember(r, n, i), n.declare && (n.type !== "ClassProperty" && n.type !== "ClassPrivateProperty" && n.type !== "Property\
Definition" ? this.raise(Pe.DeclareClassElement, a) : n.value && this.raise(Pe.DeclareClassFieldInitializer, n.value));
    }
    isIterator(r) {
      return r === "iterator" || r === "asyncIterator";
    }
    readIterator() {
      let r = super.readWord1(), n = "@@" + r;
      (!this.isIterator(r) || !this.state.inType) && this.raise(_.InvalidIdentifier, this.state.curPosition(), {
        identifierName: n
      }), this.finishToken(132, n);
    }
    getTokenFromCode(r) {
      let n = this.input.charCodeAt(this.state.pos + 1);
      r === 123 && n === 124 ? this.finishOp(6, 2) : this.state.inType && (r === 62 || r === 60) ? this.finishOp(r === 62 ? 48 : 47, 1) : this.
      state.inType && r === 63 ? n === 46 ? this.finishOp(18, 2) : this.finishOp(17, 1) : aG(r, n, this.input.charCodeAt(this.state.pos + 2)) ?
      (this.state.pos += 2, this.readIterator()) : super.getTokenFromCode(r);
    }
    isAssignable(r, n) {
      return r.type === "TypeCastExpression" ? this.isAssignable(r.expression, n) : super.isAssignable(r, n);
    }
    toAssignable(r, n = !1) {
      !n && r.type === "AssignmentExpression" && r.left.type === "TypeCastExpression" && (r.left = this.typeCastToParameter(r.left)), super.
      toAssignable(r, n);
    }
    toAssignableList(r, n, i) {
      for (let a = 0; a < r.length; a++) {
        let o = r[a];
        o?.type === "TypeCastExpression" && (r[a] = this.typeCastToParameter(o));
      }
      super.toAssignableList(r, n, i);
    }
    toReferencedList(r, n) {
      for (let a = 0; a < r.length; a++) {
        var i;
        let o = r[a];
        o && o.type === "TypeCastExpression" && !((i = o.extra) != null && i.parenthesized) && (r.length > 1 || !n) && this.raise(Pe.TypeCastInPattern,
        o.typeAnnotation);
      }
      return r;
    }
    parseArrayLike(r, n, i, a) {
      let o = super.parseArrayLike(r, n, i, a);
      return n && !this.state.maybeInArrowParameters && this.toReferencedList(o.elements), o;
    }
    isValidLVal(r, n, i) {
      return r === "TypeCastExpression" || super.isValidLVal(r, n, i);
    }
    parseClassProperty(r) {
      return this.match(14) && (r.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(r);
    }
    parseClassPrivateProperty(r) {
      return this.match(14) && (r.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(r);
    }
    isClassMethod() {
      return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
      return this.match(14) || super.isClassProperty();
    }
    isNonstaticConstructor(r) {
      return !this.match(14) && super.isNonstaticConstructor(r);
    }
    pushClassMethod(r, n, i, a, o, l) {
      if (n.variance && this.unexpected(n.variance.loc.start), delete n.variance, this.match(47) && (n.typeParameters = this.flowParseTypeParameterDeclaration()),
      super.pushClassMethod(r, n, i, a, o, l), n.params && o) {
        let u = n.params;
        u.length > 0 && this.isThisParam(u[0]) && this.raise(Pe.ThisParamBannedInConstructor, n);
      } else if (n.type === "MethodDefinition" && o && n.value.params) {
        let u = n.value.params;
        u.length > 0 && this.isThisParam(u[0]) && this.raise(Pe.ThisParamBannedInConstructor, n);
      }
    }
    pushClassPrivateMethod(r, n, i, a) {
      n.variance && this.unexpected(n.variance.loc.start), delete n.variance, this.match(47) && (n.typeParameters = this.flowParseTypeParameterDeclaration()),
      super.pushClassPrivateMethod(r, n, i, a);
    }
    parseClassSuper(r) {
      if (super.parseClassSuper(r), r.superClass && this.match(47) && (r.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.
      isContextual(113)) {
        this.next();
        let n = r.implements = [];
        do {
          let i = this.startNode();
          i.id = this.flowParseRestrictedIdentifier(!0), this.match(47) ? i.typeParameters = this.flowParseTypeParameterInstantiation() : i.
          typeParameters = null, n.push(this.finishNode(i, "ClassImplements"));
        } while (this.eat(12));
      }
    }
    checkGetterSetterParams(r) {
      super.checkGetterSetterParams(r);
      let n = this.getObjectOrClassMethodParams(r);
      if (n.length > 0) {
        let i = n[0];
        this.isThisParam(i) && r.kind === "get" ? this.raise(Pe.GetterMayNotHaveThisParam, i) : this.isThisParam(i) && this.raise(Pe.SetterMayNotHaveThisParam,
        i);
      }
    }
    parsePropertyNamePrefixOperator(r) {
      r.variance = this.flowParseVariance();
    }
    parseObjPropValue(r, n, i, a, o, l, u) {
      r.variance && this.unexpected(r.variance.loc.start), delete r.variance;
      let c;
      this.match(47) && !l && (c = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
      let f = super.parseObjPropValue(r, n, i, a, o, l, u);
      return c && ((f.value || f).typeParameters = c), f;
    }
    parseAssignableListItemTypes(r) {
      return this.eat(17) && (r.type !== "Identifier" && this.raise(Pe.PatternIsOptional, r), this.isThisParam(r) && this.raise(Pe.ThisParamMayNotBeOptional,
      r), r.optional = !0), this.match(14) ? r.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(r) && this.raise(Pe.ThisParamAnnotationRequired,
      r), this.match(29) && this.isThisParam(r) && this.raise(Pe.ThisParamNoDefault, r), this.resetEndLocation(r), r;
    }
    parseMaybeDefault(r, n) {
      let i = super.parseMaybeDefault(r, n);
      return i.type === "AssignmentPattern" && i.typeAnnotation && i.right.start < i.typeAnnotation.start && this.raise(Pe.TypeBeforeInitializer,
      i.typeAnnotation), i;
    }
    checkImportReflection(r) {
      super.checkImportReflection(r), r.module && r.importKind !== "value" && this.raise(Pe.ImportReflectionHasImportType, r.specifiers[0].loc.
      start);
    }
    parseImportSpecifierLocal(r, n, i) {
      n.local = Xv(r) ? this.flowParseRestrictedIdentifier(!0, !0) : this.parseIdentifier(), r.specifiers.push(this.finishImportSpecifier(n,
      i));
    }
    isPotentialImportPhase(r) {
      if (super.isPotentialImportPhase(r)) return !0;
      if (this.isContextual(130)) {
        if (!r) return !0;
        let n = this.lookaheadCharCode();
        return n === 123 || n === 42;
      }
      return !r && this.isContextual(87);
    }
    applyImportPhase(r, n, i, a) {
      if (super.applyImportPhase(r, n, i, a), n) {
        if (!i && this.match(65))
          return;
        r.exportKind = i === "type" ? i : "value";
      } else
        i === "type" && this.match(55) && this.unexpected(), r.importKind = i === "type" || i === "typeof" ? i : "value";
    }
    parseImportSpecifier(r, n, i, a, o) {
      let l = r.imported, u = null;
      l.type === "Identifier" && (l.name === "type" ? u = "type" : l.name === "typeof" && (u = "typeof"));
      let c = !1;
      if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
        let p = this.parseIdentifier(!0);
        u !== null && !$r(this.state.type) ? (r.imported = p, r.importKind = u, r.local = In(p)) : (r.imported = l, r.importKind = null, r.local =
        this.parseIdentifier());
      } else {
        if (u !== null && $r(this.state.type))
          r.imported = this.parseIdentifier(!0), r.importKind = u;
        else {
          if (n)
            throw this.raise(_.ImportBindingIsString, r, {
              importName: l.value
            });
          r.imported = l, r.importKind = null;
        }
        this.eatContextual(93) ? r.local = this.parseIdentifier() : (c = !0, r.local = In(r.imported));
      }
      let f = Xv(r);
      return i && f && this.raise(Pe.ImportTypeShorthandOnlyInPureImport, r), (i || f) && this.checkReservedType(r.local.name, r.local.loc.start,
      !0), c && !i && !f && this.checkReservedWord(r.local.name, r.loc.start, !0, !0), this.finishImportSpecifier(r, "ImportSpecifier");
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 78:
          return this.parseIdentifier(!0);
        default:
          return super.parseBindingAtom();
      }
    }
    parseFunctionParams(r, n) {
      let i = r.kind;
      i !== "get" && i !== "set" && this.match(47) && (r.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(
      r, n);
    }
    parseVarId(r, n) {
      super.parseVarId(r, n), this.match(14) && (r.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(r.id));
    }
    parseAsyncArrowFromCallExpression(r, n) {
      if (this.match(14)) {
        let i = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = !0, r.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = i;
      }
      return super.parseAsyncArrowFromCallExpression(r, n);
    }
    shouldParseAsyncArrow() {
      return this.match(14) || super.shouldParseAsyncArrow();
    }
    parseMaybeAssign(r, n) {
      var i;
      let a = null, o;
      if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
        if (a = this.state.clone(), o = this.tryParse(() => super.parseMaybeAssign(r, n), a), !o.error) return o.node;
        let {
          context: c
        } = this.state, f = c[c.length - 1];
        (f === it.j_oTag || f === it.j_expr) && c.pop();
      }
      if ((i = o) != null && i.error || this.match(47)) {
        var l, u;
        a = a || this.state.clone();
        let c, f = this.tryParse((h) => {
          var y;
          c = this.flowParseTypeParameterDeclaration();
          let v = this.forwardNoArrowParamsConversionAt(c, () => {
            let b = super.parseMaybeAssign(r, n);
            return this.resetStartLocationFromNode(b, c), b;
          });
          (y = v.extra) != null && y.parenthesized && h();
          let d = this.maybeUnwrapTypeCastExpression(v);
          return d.type !== "ArrowFunctionExpression" && h(), d.typeParameters = c, this.resetStartLocationFromNode(d, c), v;
        }, a), p = null;
        if (f.node && this.maybeUnwrapTypeCastExpression(f.node).type === "ArrowFunctionExpression") {
          if (!f.error && !f.aborted)
            return f.node.async && this.raise(Pe.UnexpectedTypeParameterBeforeAsyncArrowFunction, c), f.node;
          p = f.node;
        }
        if ((l = o) != null && l.node)
          return this.state = o.failState, o.node;
        if (p)
          return this.state = f.failState, p;
        throw (u = o) != null && u.thrown ? o.error : f.thrown ? f.error : this.raise(Pe.UnexpectedTokenAfterTypeParameter, c);
      }
      return super.parseMaybeAssign(r, n);
    }
    parseArrow(r) {
      if (this.match(14)) {
        let n = this.tryParse(() => {
          let i = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = !0;
          let a = this.startNode();
          return [a.typeAnnotation, r.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = i, this.canInsertSemicolon() &&
          this.unexpected(), this.match(19) || this.unexpected(), a;
        });
        if (n.thrown) return null;
        n.error && (this.state = n.failState), r.returnType = n.node.typeAnnotation ? this.finishNode(n.node, "TypeAnnotation") : null;
      }
      return super.parseArrow(r);
    }
    shouldParseArrow(r) {
      return this.match(14) || super.shouldParseArrow(r);
    }
    setArrowFunctionParameters(r, n) {
      this.state.noArrowParamsConversionAt.includes(r.start) ? r.params = n : super.setArrowFunctionParameters(r, n);
    }
    checkParams(r, n, i, a = !0) {
      if (!(i && this.state.noArrowParamsConversionAt.includes(r.start))) {
        for (let o = 0; o < r.params.length; o++)
          this.isThisParam(r.params[o]) && o > 0 && this.raise(Pe.ThisParamMustBeFirst, r.params[o]);
        super.checkParams(r, n, i, a);
      }
    }
    parseParenAndDistinguishExpression(r) {
      return super.parseParenAndDistinguishExpression(r && !this.state.noArrowAt.includes(this.state.start));
    }
    parseSubscripts(r, n, i) {
      if (r.type === "Identifier" && r.name === "async" && this.state.noArrowAt.includes(n.index)) {
        this.next();
        let a = this.startNodeAt(n);
        a.callee = r, a.arguments = super.parseCallExpressionArguments(11, !1), r = this.finishNode(a, "CallExpression");
      } else if (r.type === "Identifier" && r.name === "async" && this.match(47)) {
        let a = this.state.clone(), o = this.tryParse((u) => this.parseAsyncArrowWithTypeParameters(n) || u(), a);
        if (!o.error && !o.aborted) return o.node;
        let l = this.tryParse(() => super.parseSubscripts(r, n, i), a);
        if (l.node && !l.error) return l.node;
        if (o.node)
          return this.state = o.failState, o.node;
        if (l.node)
          return this.state = l.failState, l.node;
        throw o.error || l.error;
      }
      return super.parseSubscripts(r, n, i);
    }
    parseSubscript(r, n, i, a) {
      if (this.match(18) && this.isLookaheadToken_lt()) {
        if (a.optionalChainMember = !0, i)
          return a.stop = !0, r;
        this.next();
        let o = this.startNodeAt(n);
        return o.callee = r, o.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), o.arguments = this.parseCallExpressionArguments(
        11, !1), o.optional = !0, this.finishCallExpression(o, !0);
      } else if (!i && this.shouldParseTypes() && this.match(47)) {
        let o = this.startNodeAt(n);
        o.callee = r;
        let l = this.tryParse(() => (o.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), o.arguments = super.
        parseCallExpressionArguments(11, !1), a.optionalChainMember && (o.optional = !1), this.finishCallExpression(o, a.optionalChainMember)));
        if (l.node)
          return l.error && (this.state = l.failState), l.node;
      }
      return super.parseSubscript(r, n, i, a);
    }
    parseNewCallee(r) {
      super.parseNewCallee(r);
      let n = null;
      this.shouldParseTypes() && this.match(47) && (n = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), r.typeArguments =
      n;
    }
    parseAsyncArrowWithTypeParameters(r) {
      let n = this.startNodeAt(r);
      if (this.parseFunctionParams(n, !1), !!this.parseArrow(n))
        return super.parseArrowExpression(n, void 0, !0);
    }
    readToken_mult_modulo(r) {
      let n = this.input.charCodeAt(this.state.pos + 1);
      if (r === 42 && n === 47 && this.state.hasFlowComment) {
        this.state.hasFlowComment = !1, this.state.pos += 2, this.nextToken();
        return;
      }
      super.readToken_mult_modulo(r);
    }
    readToken_pipe_amp(r) {
      let n = this.input.charCodeAt(this.state.pos + 1);
      if (r === 124 && n === 125) {
        this.finishOp(9, 2);
        return;
      }
      super.readToken_pipe_amp(r);
    }
    parseTopLevel(r, n) {
      let i = super.parseTopLevel(r, n);
      return this.state.hasFlowComment && this.raise(Pe.UnterminatedFlowComment, this.state.curPosition()), i;
    }
    skipBlockComment() {
      if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
        if (this.state.hasFlowComment)
          throw this.raise(Pe.NestedFlowComment, this.state.startLoc);
        this.hasFlowCommentCompletion();
        let r = this.skipFlowComment();
        r && (this.state.pos += r, this.state.hasFlowComment = !0);
        return;
      }
      return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
    }
    skipFlowComment() {
      let {
        pos: r
      } = this.state, n = 2;
      for (; [32, 9].includes(this.input.charCodeAt(r + n)); )
        n++;
      let i = this.input.charCodeAt(n + r), a = this.input.charCodeAt(n + r + 1);
      return i === 58 && a === 58 ? n + 2 : this.input.slice(n + r, n + r + 12) === "flow-include" ? n + 12 : i === 58 && a !== 58 ? n : !1;
    }
    hasFlowCommentCompletion() {
      if (this.input.indexOf("*/", this.state.pos) === -1)
        throw this.raise(_.UnterminatedComment, this.state.curPosition());
    }
    flowEnumErrorBooleanMemberNotInitialized(r, {
      enumName: n,
      memberName: i
    }) {
      this.raise(Pe.EnumBooleanMemberNotInitialized, r, {
        memberName: i,
        enumName: n
      });
    }
    flowEnumErrorInvalidMemberInitializer(r, n) {
      return this.raise(n.explicitType ? n.explicitType === "symbol" ? Pe.EnumInvalidMemberInitializerSymbolType : Pe.EnumInvalidMemberInitializerPrimaryType :
      Pe.EnumInvalidMemberInitializerUnknownType, r, n);
    }
    flowEnumErrorNumberMemberNotInitialized(r, n) {
      this.raise(Pe.EnumNumberMemberNotInitialized, r, n);
    }
    flowEnumErrorStringMemberInconsistentlyInitialized(r, n) {
      this.raise(Pe.EnumStringMemberInconsistentlyInitialized, r, n);
    }
    flowEnumMemberInit() {
      let r = this.state.startLoc, n = /* @__PURE__ */ s(() => this.match(12) || this.match(8), "endOfInit");
      switch (this.state.type) {
        case 134: {
          let i = this.parseNumericLiteral(this.state.value);
          return n() ? {
            type: "number",
            loc: i.loc.start,
            value: i
          } : {
            type: "invalid",
            loc: r
          };
        }
        case 133: {
          let i = this.parseStringLiteral(this.state.value);
          return n() ? {
            type: "string",
            loc: i.loc.start,
            value: i
          } : {
            type: "invalid",
            loc: r
          };
        }
        case 85:
        case 86: {
          let i = this.parseBooleanLiteral(this.match(85));
          return n() ? {
            type: "boolean",
            loc: i.loc.start,
            value: i
          } : {
            type: "invalid",
            loc: r
          };
        }
        default:
          return {
            type: "invalid",
            loc: r
          };
      }
    }
    flowEnumMemberRaw() {
      let r = this.state.startLoc, n = this.parseIdentifier(!0), i = this.eat(29) ? this.flowEnumMemberInit() : {
        type: "none",
        loc: r
      };
      return {
        id: n,
        init: i
      };
    }
    flowEnumCheckExplicitTypeMismatch(r, n, i) {
      let {
        explicitType: a
      } = n;
      a !== null && a !== i && this.flowEnumErrorInvalidMemberInitializer(r, n);
    }
    flowEnumMembers({
      enumName: r,
      explicitType: n
    }) {
      let i = /* @__PURE__ */ new Set(), a = {
        booleanMembers: [],
        numberMembers: [],
        stringMembers: [],
        defaultedMembers: []
      }, o = !1;
      for (; !this.match(8); ) {
        if (this.eat(21)) {
          o = !0;
          break;
        }
        let l = this.startNode(), {
          id: u,
          init: c
        } = this.flowEnumMemberRaw(), f = u.name;
        if (f === "")
          continue;
        /^[a-z]/.test(f) && this.raise(Pe.EnumInvalidMemberName, u, {
          memberName: f,
          suggestion: f[0].toUpperCase() + f.slice(1),
          enumName: r
        }), i.has(f) && this.raise(Pe.EnumDuplicateMemberName, u, {
          memberName: f,
          enumName: r
        }), i.add(f);
        let p = {
          enumName: r,
          explicitType: n,
          memberName: f
        };
        switch (l.id = u, c.type) {
          case "boolean": {
            this.flowEnumCheckExplicitTypeMismatch(c.loc, p, "boolean"), l.init = c.value, a.booleanMembers.push(this.finishNode(l, "EnumBoo\
leanMember"));
            break;
          }
          case "number": {
            this.flowEnumCheckExplicitTypeMismatch(c.loc, p, "number"), l.init = c.value, a.numberMembers.push(this.finishNode(l, "EnumNumbe\
rMember"));
            break;
          }
          case "string": {
            this.flowEnumCheckExplicitTypeMismatch(c.loc, p, "string"), l.init = c.value, a.stringMembers.push(this.finishNode(l, "EnumStrin\
gMember"));
            break;
          }
          case "invalid":
            throw this.flowEnumErrorInvalidMemberInitializer(c.loc, p);
          case "none":
            switch (n) {
              case "boolean":
                this.flowEnumErrorBooleanMemberNotInitialized(c.loc, p);
                break;
              case "number":
                this.flowEnumErrorNumberMemberNotInitialized(c.loc, p);
                break;
              default:
                a.defaultedMembers.push(this.finishNode(l, "EnumDefaultedMember"));
            }
        }
        this.match(8) || this.expect(12);
      }
      return {
        members: a,
        hasUnknownMembers: o
      };
    }
    flowEnumStringMembers(r, n, {
      enumName: i
    }) {
      if (r.length === 0)
        return n;
      if (n.length === 0)
        return r;
      if (n.length > r.length) {
        for (let a of r)
          this.flowEnumErrorStringMemberInconsistentlyInitialized(a, {
            enumName: i
          });
        return n;
      } else {
        for (let a of n)
          this.flowEnumErrorStringMemberInconsistentlyInitialized(a, {
            enumName: i
          });
        return r;
      }
    }
    flowEnumParseExplicitType({
      enumName: r
    }) {
      if (!this.eatContextual(102)) return null;
      if (!et(this.state.type))
        throw this.raise(Pe.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, {
          enumName: r
        });
      let {
        value: n
      } = this.state;
      return this.next(), n !== "boolean" && n !== "number" && n !== "string" && n !== "symbol" && this.raise(Pe.EnumInvalidExplicitType, this.
      state.startLoc, {
        enumName: r,
        invalidEnumType: n
      }), n;
    }
    flowEnumBody(r, n) {
      let i = n.name, a = n.loc.start, o = this.flowEnumParseExplicitType({
        enumName: i
      });
      this.expect(5);
      let {
        members: l,
        hasUnknownMembers: u
      } = this.flowEnumMembers({
        enumName: i,
        explicitType: o
      });
      switch (r.hasUnknownMembers = u, o) {
        case "boolean":
          return r.explicitType = !0, r.members = l.booleanMembers, this.expect(8), this.finishNode(r, "EnumBooleanBody");
        case "number":
          return r.explicitType = !0, r.members = l.numberMembers, this.expect(8), this.finishNode(r, "EnumNumberBody");
        case "string":
          return r.explicitType = !0, r.members = this.flowEnumStringMembers(l.stringMembers, l.defaultedMembers, {
            enumName: i
          }), this.expect(8), this.finishNode(r, "EnumStringBody");
        case "symbol":
          return r.members = l.defaultedMembers, this.expect(8), this.finishNode(r, "EnumSymbolBody");
        default: {
          let c = /* @__PURE__ */ s(() => (r.members = [], this.expect(8), this.finishNode(r, "EnumStringBody")), "empty");
          r.explicitType = !1;
          let f = l.booleanMembers.length, p = l.numberMembers.length, h = l.stringMembers.length, y = l.defaultedMembers.length;
          if (!f && !p && !h && !y)
            return c();
          if (!f && !p)
            return r.members = this.flowEnumStringMembers(l.stringMembers, l.defaultedMembers, {
              enumName: i
            }), this.expect(8), this.finishNode(r, "EnumStringBody");
          if (!p && !h && f >= y) {
            for (let v of l.defaultedMembers)
              this.flowEnumErrorBooleanMemberNotInitialized(v.loc.start, {
                enumName: i,
                memberName: v.id.name
              });
            return r.members = l.booleanMembers, this.expect(8), this.finishNode(r, "EnumBooleanBody");
          } else if (!f && !h && p >= y) {
            for (let v of l.defaultedMembers)
              this.flowEnumErrorNumberMemberNotInitialized(v.loc.start, {
                enumName: i,
                memberName: v.id.name
              });
            return r.members = l.numberMembers, this.expect(8), this.finishNode(r, "EnumNumberBody");
          } else
            return this.raise(Pe.EnumInconsistentMemberValues, a, {
              enumName: i
            }), c();
        }
      }
    }
    flowParseEnumDeclaration(r) {
      let n = this.parseIdentifier();
      return r.id = n, r.body = this.flowEnumBody(this.startNode(), n), this.finishNode(r, "EnumDeclaration");
    }
    isLookaheadToken_lt() {
      let r = this.nextTokenStart();
      if (this.input.charCodeAt(r) === 60) {
        let n = this.input.charCodeAt(r + 1);
        return n !== 60 && n !== 61;
      }
      return !1;
    }
    maybeUnwrapTypeCastExpression(r) {
      return r.type === "TypeCastExpression" ? r.expression : r;
    }
  }, "flow"), wG = {
    __proto__: null,
    quot: '"',
    amp: "&",
    apos: "'",
    lt: "<",
    gt: ">",
    nbsp: "\xA0",
    iexcl: "\xA1",
    cent: "\xA2",
    pound: "\xA3",
    curren: "\xA4",
    yen: "\xA5",
    brvbar: "\xA6",
    sect: "\xA7",
    uml: "\xA8",
    copy: "\xA9",
    ordf: "\xAA",
    laquo: "\xAB",
    not: "\xAC",
    shy: "\xAD",
    reg: "\xAE",
    macr: "\xAF",
    deg: "\xB0",
    plusmn: "\xB1",
    sup2: "\xB2",
    sup3: "\xB3",
    acute: "\xB4",
    micro: "\xB5",
    para: "\xB6",
    middot: "\xB7",
    cedil: "\xB8",
    sup1: "\xB9",
    ordm: "\xBA",
    raquo: "\xBB",
    frac14: "\xBC",
    frac12: "\xBD",
    frac34: "\xBE",
    iquest: "\xBF",
    Agrave: "\xC0",
    Aacute: "\xC1",
    Acirc: "\xC2",
    Atilde: "\xC3",
    Auml: "\xC4",
    Aring: "\xC5",
    AElig: "\xC6",
    Ccedil: "\xC7",
    Egrave: "\xC8",
    Eacute: "\xC9",
    Ecirc: "\xCA",
    Euml: "\xCB",
    Igrave: "\xCC",
    Iacute: "\xCD",
    Icirc: "\xCE",
    Iuml: "\xCF",
    ETH: "\xD0",
    Ntilde: "\xD1",
    Ograve: "\xD2",
    Oacute: "\xD3",
    Ocirc: "\xD4",
    Otilde: "\xD5",
    Ouml: "\xD6",
    times: "\xD7",
    Oslash: "\xD8",
    Ugrave: "\xD9",
    Uacute: "\xDA",
    Ucirc: "\xDB",
    Uuml: "\xDC",
    Yacute: "\xDD",
    THORN: "\xDE",
    szlig: "\xDF",
    agrave: "\xE0",
    aacute: "\xE1",
    acirc: "\xE2",
    atilde: "\xE3",
    auml: "\xE4",
    aring: "\xE5",
    aelig: "\xE6",
    ccedil: "\xE7",
    egrave: "\xE8",
    eacute: "\xE9",
    ecirc: "\xEA",
    euml: "\xEB",
    igrave: "\xEC",
    iacute: "\xED",
    icirc: "\xEE",
    iuml: "\xEF",
    eth: "\xF0",
    ntilde: "\xF1",
    ograve: "\xF2",
    oacute: "\xF3",
    ocirc: "\xF4",
    otilde: "\xF5",
    ouml: "\xF6",
    divide: "\xF7",
    oslash: "\xF8",
    ugrave: "\xF9",
    uacute: "\xFA",
    ucirc: "\xFB",
    uuml: "\xFC",
    yacute: "\xFD",
    thorn: "\xFE",
    yuml: "\xFF",
    OElig: "\u0152",
    oelig: "\u0153",
    Scaron: "\u0160",
    scaron: "\u0161",
    Yuml: "\u0178",
    fnof: "\u0192",
    circ: "\u02C6",
    tilde: "\u02DC",
    Alpha: "\u0391",
    Beta: "\u0392",
    Gamma: "\u0393",
    Delta: "\u0394",
    Epsilon: "\u0395",
    Zeta: "\u0396",
    Eta: "\u0397",
    Theta: "\u0398",
    Iota: "\u0399",
    Kappa: "\u039A",
    Lambda: "\u039B",
    Mu: "\u039C",
    Nu: "\u039D",
    Xi: "\u039E",
    Omicron: "\u039F",
    Pi: "\u03A0",
    Rho: "\u03A1",
    Sigma: "\u03A3",
    Tau: "\u03A4",
    Upsilon: "\u03A5",
    Phi: "\u03A6",
    Chi: "\u03A7",
    Psi: "\u03A8",
    Omega: "\u03A9",
    alpha: "\u03B1",
    beta: "\u03B2",
    gamma: "\u03B3",
    delta: "\u03B4",
    epsilon: "\u03B5",
    zeta: "\u03B6",
    eta: "\u03B7",
    theta: "\u03B8",
    iota: "\u03B9",
    kappa: "\u03BA",
    lambda: "\u03BB",
    mu: "\u03BC",
    nu: "\u03BD",
    xi: "\u03BE",
    omicron: "\u03BF",
    pi: "\u03C0",
    rho: "\u03C1",
    sigmaf: "\u03C2",
    sigma: "\u03C3",
    tau: "\u03C4",
    upsilon: "\u03C5",
    phi: "\u03C6",
    chi: "\u03C7",
    psi: "\u03C8",
    omega: "\u03C9",
    thetasym: "\u03D1",
    upsih: "\u03D2",
    piv: "\u03D6",
    ensp: "\u2002",
    emsp: "\u2003",
    thinsp: "\u2009",
    zwnj: "\u200C",
    zwj: "\u200D",
    lrm: "\u200E",
    rlm: "\u200F",
    ndash: "\u2013",
    mdash: "\u2014",
    lsquo: "\u2018",
    rsquo: "\u2019",
    sbquo: "\u201A",
    ldquo: "\u201C",
    rdquo: "\u201D",
    bdquo: "\u201E",
    dagger: "\u2020",
    Dagger: "\u2021",
    bull: "\u2022",
    hellip: "\u2026",
    permil: "\u2030",
    prime: "\u2032",
    Prime: "\u2033",
    lsaquo: "\u2039",
    rsaquo: "\u203A",
    oline: "\u203E",
    frasl: "\u2044",
    euro: "\u20AC",
    image: "\u2111",
    weierp: "\u2118",
    real: "\u211C",
    trade: "\u2122",
    alefsym: "\u2135",
    larr: "\u2190",
    uarr: "\u2191",
    rarr: "\u2192",
    darr: "\u2193",
    harr: "\u2194",
    crarr: "\u21B5",
    lArr: "\u21D0",
    uArr: "\u21D1",
    rArr: "\u21D2",
    dArr: "\u21D3",
    hArr: "\u21D4",
    forall: "\u2200",
    part: "\u2202",
    exist: "\u2203",
    empty: "\u2205",
    nabla: "\u2207",
    isin: "\u2208",
    notin: "\u2209",
    ni: "\u220B",
    prod: "\u220F",
    sum: "\u2211",
    minus: "\u2212",
    lowast: "\u2217",
    radic: "\u221A",
    prop: "\u221D",
    infin: "\u221E",
    ang: "\u2220",
    and: "\u2227",
    or: "\u2228",
    cap: "\u2229",
    cup: "\u222A",
    int: "\u222B",
    there4: "\u2234",
    sim: "\u223C",
    cong: "\u2245",
    asymp: "\u2248",
    ne: "\u2260",
    equiv: "\u2261",
    le: "\u2264",
    ge: "\u2265",
    sub: "\u2282",
    sup: "\u2283",
    nsub: "\u2284",
    sube: "\u2286",
    supe: "\u2287",
    oplus: "\u2295",
    otimes: "\u2297",
    perp: "\u22A5",
    sdot: "\u22C5",
    lceil: "\u2308",
    rceil: "\u2309",
    lfloor: "\u230A",
    rfloor: "\u230B",
    lang: "\u2329",
    rang: "\u232A",
    loz: "\u25CA",
    spades: "\u2660",
    clubs: "\u2663",
    hearts: "\u2665",
    diams: "\u2666"
  }, ks = Dn`jsx`({
    AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
    MissingClosingTagElement: /* @__PURE__ */ s(({
      openingTagName: e
    }) => `Expected corresponding JSX closing tag for <${e}>.`, "MissingClosingTagElement"),
    MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
    UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
    UnexpectedToken: /* @__PURE__ */ s(({
      unexpected: e,
      HTMLEntity: t
    }) => `Unexpected token \`${e}\`. Did you mean \`${t}\` or \`{'${e}'}\`?`, "UnexpectedToken"),
    UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
    UnterminatedJsxContent: "Unterminated JSX contents.",
    UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
  });
  function ts(e) {
    return e ? e.type === "JSXOpeningFragment" || e.type === "JSXClosingFragment" : !1;
  }
  s(ts, "isFragment");
  function vi(e) {
    if (e.type === "JSXIdentifier")
      return e.name;
    if (e.type === "JSXNamespacedName")
      return e.namespace.name + ":" + e.name.name;
    if (e.type === "JSXMemberExpression")
      return vi(e.object) + "." + vi(e.property);
    throw new Error("Node had unexpected type: " + e.type);
  }
  s(vi, "getQualifiedJSXName");
  var DG = /* @__PURE__ */ s((e) => class extends e {
    static {
      s(this, "JSXParserMixin");
    }
    jsxReadToken() {
      let r = "", n = this.state.pos;
      for (; ; ) {
        if (this.state.pos >= this.length)
          throw this.raise(ks.UnterminatedJsxContent, this.state.startLoc);
        let i = this.input.charCodeAt(this.state.pos);
        switch (i) {
          case 60:
          case 123:
            if (this.state.pos === this.state.start) {
              i === 60 && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(142)) : super.getTokenFromCode(i);
              return;
            }
            r += this.input.slice(n, this.state.pos), this.finishToken(141, r);
            return;
          case 38:
            r += this.input.slice(n, this.state.pos), r += this.jsxReadEntity(), n = this.state.pos;
            break;
          case 62:
          case 125:
          default:
            xi(i) ? (r += this.input.slice(n, this.state.pos), r += this.jsxReadNewLine(!0), n = this.state.pos) : ++this.state.pos;
        }
      }
    }
    jsxReadNewLine(r) {
      let n = this.input.charCodeAt(this.state.pos), i;
      return ++this.state.pos, n === 13 && this.input.charCodeAt(this.state.pos) === 10 ? (++this.state.pos, i = r ? `
` : `\r
`) : i = String.fromCharCode(n), ++this.state.curLine, this.state.lineStart = this.state.pos, i;
    }
    jsxReadString(r) {
      let n = "", i = ++this.state.pos;
      for (; ; ) {
        if (this.state.pos >= this.length)
          throw this.raise(_.UnterminatedString, this.state.startLoc);
        let a = this.input.charCodeAt(this.state.pos);
        if (a === r) break;
        a === 38 ? (n += this.input.slice(i, this.state.pos), n += this.jsxReadEntity(), i = this.state.pos) : xi(a) ? (n += this.input.slice(
        i, this.state.pos), n += this.jsxReadNewLine(!1), i = this.state.pos) : ++this.state.pos;
      }
      n += this.input.slice(i, this.state.pos++), this.finishToken(133, n);
    }
    jsxReadEntity() {
      let r = ++this.state.pos;
      if (this.codePointAtPos(this.state.pos) === 35) {
        ++this.state.pos;
        let n = 10;
        this.codePointAtPos(this.state.pos) === 120 && (n = 16, ++this.state.pos);
        let i = this.readInt(n, void 0, !1, "bail");
        if (i !== null && this.codePointAtPos(this.state.pos) === 59)
          return ++this.state.pos, String.fromCodePoint(i);
      } else {
        let n = 0, i = !1;
        for (; n++ < 10 && this.state.pos < this.length && !(i = this.codePointAtPos(this.state.pos) === 59); )
          ++this.state.pos;
        if (i) {
          let a = this.input.slice(r, this.state.pos), o = wG[a];
          if (++this.state.pos, o)
            return o;
        }
      }
      return this.state.pos = r, "&";
    }
    jsxReadWord() {
      let r, n = this.state.pos;
      do
        r = this.input.charCodeAt(++this.state.pos);
      while (Ti(r) || r === 45);
      this.finishToken(140, this.input.slice(n, this.state.pos));
    }
    jsxParseIdentifier() {
      let r = this.startNode();
      return this.match(140) ? r.name = this.state.value : kh(this.state.type) ? r.name = rs(this.state.type) : this.unexpected(), this.next(),
      this.finishNode(r, "JSXIdentifier");
    }
    jsxParseNamespacedName() {
      let r = this.state.startLoc, n = this.jsxParseIdentifier();
      if (!this.eat(14)) return n;
      let i = this.startNodeAt(r);
      return i.namespace = n, i.name = this.jsxParseIdentifier(), this.finishNode(i, "JSXNamespacedName");
    }
    jsxParseElementName() {
      let r = this.state.startLoc, n = this.jsxParseNamespacedName();
      if (n.type === "JSXNamespacedName")
        return n;
      for (; this.eat(16); ) {
        let i = this.startNodeAt(r);
        i.object = n, i.property = this.jsxParseIdentifier(), n = this.finishNode(i, "JSXMemberExpression");
      }
      return n;
    }
    jsxParseAttributeValue() {
      let r;
      switch (this.state.type) {
        case 5:
          return r = this.startNode(), this.setContext(it.brace), this.next(), r = this.jsxParseExpressionContainer(r, it.j_oTag), r.expression.
          type === "JSXEmptyExpression" && this.raise(ks.AttributeIsEmpty, r), r;
        case 142:
        case 133:
          return this.parseExprAtom();
        default:
          throw this.raise(ks.UnsupportedJsxValue, this.state.startLoc);
      }
    }
    jsxParseEmptyExpression() {
      let r = this.startNodeAt(this.state.lastTokEndLoc);
      return this.finishNodeAt(r, "JSXEmptyExpression", this.state.startLoc);
    }
    jsxParseSpreadChild(r) {
      return this.next(), r.expression = this.parseExpression(), this.setContext(it.j_expr), this.state.canStartJSXElement = !0, this.expect(
      8), this.finishNode(r, "JSXSpreadChild");
    }
    jsxParseExpressionContainer(r, n) {
      if (this.match(8))
        r.expression = this.jsxParseEmptyExpression();
      else {
        let i = this.parseExpression();
        r.expression = i;
      }
      return this.setContext(n), this.state.canStartJSXElement = !0, this.expect(8), this.finishNode(r, "JSXExpressionContainer");
    }
    jsxParseAttribute() {
      let r = this.startNode();
      return this.match(5) ? (this.setContext(it.brace), this.next(), this.expect(21), r.argument = this.parseMaybeAssignAllowIn(), this.setContext(
      it.j_oTag), this.state.canStartJSXElement = !0, this.expect(8), this.finishNode(r, "JSXSpreadAttribute")) : (r.name = this.jsxParseNamespacedName(),
      r.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(r, "JSXAttribute"));
    }
    jsxParseOpeningElementAt(r) {
      let n = this.startNodeAt(r);
      return this.eat(143) ? this.finishNode(n, "JSXOpeningFragment") : (n.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(
      n));
    }
    jsxParseOpeningElementAfterName(r) {
      let n = [];
      for (; !this.match(56) && !this.match(143); )
        n.push(this.jsxParseAttribute());
      return r.attributes = n, r.selfClosing = this.eat(56), this.expect(143), this.finishNode(r, "JSXOpeningElement");
    }
    jsxParseClosingElementAt(r) {
      let n = this.startNodeAt(r);
      return this.eat(143) ? this.finishNode(n, "JSXClosingFragment") : (n.name = this.jsxParseElementName(), this.expect(143), this.finishNode(
      n, "JSXClosingElement"));
    }
    jsxParseElementAt(r) {
      let n = this.startNodeAt(r), i = [], a = this.jsxParseOpeningElementAt(r), o = null;
      if (!a.selfClosing) {
        e: for (; ; )
          switch (this.state.type) {
            case 142:
              if (r = this.state.startLoc, this.next(), this.eat(56)) {
                o = this.jsxParseClosingElementAt(r);
                break e;
              }
              i.push(this.jsxParseElementAt(r));
              break;
            case 141:
              i.push(this.parseLiteral(this.state.value, "JSXText"));
              break;
            case 5: {
              let l = this.startNode();
              this.setContext(it.brace), this.next(), this.match(21) ? i.push(this.jsxParseSpreadChild(l)) : i.push(this.jsxParseExpressionContainer(
              l, it.j_expr));
              break;
            }
            default:
              this.unexpected();
          }
        ts(a) && !ts(o) && o !== null ? this.raise(ks.MissingClosingTagFragment, o) : !ts(a) && ts(o) ? this.raise(ks.MissingClosingTagElement,
        o, {
          openingTagName: vi(a.name)
        }) : !ts(a) && !ts(o) && vi(o.name) !== vi(a.name) && this.raise(ks.MissingClosingTagElement, o, {
          openingTagName: vi(a.name)
        });
      }
      if (ts(a) ? (n.openingFragment = a, n.closingFragment = o) : (n.openingElement = a, n.closingElement = o), n.children = i, this.match(
      47))
        throw this.raise(ks.UnwrappedAdjacentJSXElements, this.state.startLoc);
      return ts(a) ? this.finishNode(n, "JSXFragment") : this.finishNode(n, "JSXElement");
    }
    jsxParseElement() {
      let r = this.state.startLoc;
      return this.next(), this.jsxParseElementAt(r);
    }
    setContext(r) {
      let {
        context: n
      } = this.state;
      n[n.length - 1] = r;
    }
    parseExprAtom(r) {
      return this.match(142) ? this.jsxParseElement() : this.match(47) && this.input.charCodeAt(this.state.pos) !== 33 ? (this.replaceToken(
      142), this.jsxParseElement()) : super.parseExprAtom(r);
    }
    skipSpace() {
      this.curContext().preserveSpace || super.skipSpace();
    }
    getTokenFromCode(r) {
      let n = this.curContext();
      if (n === it.j_expr) {
        this.jsxReadToken();
        return;
      }
      if (n === it.j_oTag || n === it.j_cTag) {
        if (wn(r)) {
          this.jsxReadWord();
          return;
        }
        if (r === 62) {
          ++this.state.pos, this.finishToken(143);
          return;
        }
        if ((r === 34 || r === 39) && n === it.j_oTag) {
          this.jsxReadString(r);
          return;
        }
      }
      if (r === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
        ++this.state.pos, this.finishToken(142);
        return;
      }
      super.getTokenFromCode(r);
    }
    updateContext(r) {
      let {
        context: n,
        type: i
      } = this.state;
      if (i === 56 && r === 142)
        n.splice(-2, 2, it.j_cTag), this.state.canStartJSXElement = !1;
      else if (i === 142)
        n.push(it.j_oTag);
      else if (i === 143) {
        let a = n[n.length - 1];
        a === it.j_oTag && r === 56 || a === it.j_cTag ? (n.pop(), this.state.canStartJSXElement = n[n.length - 1] === it.j_expr) : (this.setContext(
        it.j_expr), this.state.canStartJSXElement = !0);
      } else
        this.state.canStartJSXElement = WK(i);
    }
  }, "jsx"), Sh = class extends Ya {
    static {
      s(this, "TypeScriptScope");
    }
    constructor(...t) {
      super(...t), this.tsNames = /* @__PURE__ */ new Map();
    }
  }, Ph = class extends za {
    static {
      s(this, "TypeScriptScopeHandler");
    }
    constructor(...t) {
      super(...t), this.importsStack = [];
    }
    createScope(t) {
      return this.importsStack.push(/* @__PURE__ */ new Set()), new Sh(t);
    }
    enter(t) {
      t === 256 && this.importsStack.push(/* @__PURE__ */ new Set()), super.enter(t);
    }
    exit() {
      let t = super.exit();
      return t === 256 && this.importsStack.pop(), t;
    }
    hasImport(t, r) {
      let n = this.importsStack.length;
      if (this.importsStack[n - 1].has(t))
        return !0;
      if (!r && n > 1) {
        for (let i = 0; i < n - 1; i++)
          if (this.importsStack[i].has(t)) return !0;
      }
      return !1;
    }
    declareName(t, r, n) {
      if (r & 4096) {
        this.hasImport(t, !0) && this.parser.raise(_.VarRedeclaration, n, {
          identifierName: t
        }), this.importsStack[this.importsStack.length - 1].add(t);
        return;
      }
      let i = this.currentScope(), a = i.tsNames.get(t) || 0;
      if (r & 1024) {
        this.maybeExportDefined(i, t), i.tsNames.set(t, a | 16);
        return;
      }
      super.declareName(t, r, n), r & 2 && (r & 1 || (this.checkRedeclarationInScope(i, t, r, n), this.maybeExportDefined(i, t)), a = a | 1),
      r & 256 && (a = a | 2), r & 512 && (a = a | 4), r & 128 && (a = a | 8), a && i.tsNames.set(t, a);
    }
    isRedeclaredInScope(t, r, n) {
      let i = t.tsNames.get(r);
      if ((i & 2) > 0) {
        if (n & 256) {
          let a = !!(n & 512), o = (i & 4) > 0;
          return a !== o;
        }
        return !0;
      }
      return n & 128 && (i & 8) > 0 ? t.names.get(r) & 2 ? !!(n & 1) : !1 : n & 2 && (i & 1) > 0 ? !0 : super.isRedeclaredInScope(t, r, n);
    }
    checkLocalExport(t) {
      let {
        name: r
      } = t;
      if (this.hasImport(r)) return;
      let n = this.scopeStack.length;
      for (let i = n - 1; i >= 0; i--) {
        let o = this.scopeStack[i].tsNames.get(r);
        if ((o & 1) > 0 || (o & 16) > 0)
          return;
      }
      super.checkLocalExport(t);
    }
  }, mT = /* @__PURE__ */ s((e) => e.type === "ParenthesizedExpression" ? mT(e.expression) : e, "unwrapParenthesizedExpression"), Ah = class extends xh {
    static {
      s(this, "LValParser");
    }
    toAssignable(t, r = !1) {
      var n, i;
      let a;
      switch ((t.type === "ParenthesizedExpression" || (n = t.extra) != null && n.parenthesized) && (a = mT(t), r ? a.type === "Identifier" ?
      this.expressionScope.recordArrowParameterBindingError(_.InvalidParenthesizedAssignment, t) : a.type !== "MemberExpression" && !this.isOptionalMemberExpression(
      a) && this.raise(_.InvalidParenthesizedAssignment, t) : this.raise(_.InvalidParenthesizedAssignment, t)), t.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          break;
        case "ObjectExpression":
          t.type = "ObjectPattern";
          for (let l = 0, u = t.properties.length, c = u - 1; l < u; l++) {
            var o;
            let f = t.properties[l], p = l === c;
            this.toAssignableObjectExpressionProp(f, p, r), p && f.type === "RestElement" && (o = t.extra) != null && o.trailingCommaLoc && this.
            raise(_.RestTrailingComma, t.extra.trailingCommaLoc);
          }
          break;
        case "ObjectProperty": {
          let {
            key: l,
            value: u
          } = t;
          this.isPrivateName(l) && this.classScope.usePrivateName(this.getPrivateNameSV(l), l.loc.start), this.toAssignable(u, r);
          break;
        }
        case "SpreadElement":
          throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignabl\
e's caller.");
        case "ArrayExpression":
          t.type = "ArrayPattern", this.toAssignableList(t.elements, (i = t.extra) == null ? void 0 : i.trailingCommaLoc, r);
          break;
        case "AssignmentExpression":
          t.operator !== "=" && this.raise(_.MissingEqInAssignment, t.left.loc.end), t.type = "AssignmentPattern", delete t.operator, this.toAssignable(
          t.left, r);
          break;
        case "ParenthesizedExpression":
          this.toAssignable(a, r);
          break;
      }
    }
    toAssignableObjectExpressionProp(t, r, n) {
      if (t.type === "ObjectMethod")
        this.raise(t.kind === "get" || t.kind === "set" ? _.PatternHasAccessor : _.PatternHasMethod, t.key);
      else if (t.type === "SpreadElement") {
        t.type = "RestElement";
        let i = t.argument;
        this.checkToRestConversion(i, !1), this.toAssignable(i, n), r || this.raise(_.RestTrailingComma, t);
      } else
        this.toAssignable(t, n);
    }
    toAssignableList(t, r, n) {
      let i = t.length - 1;
      for (let a = 0; a <= i; a++) {
        let o = t[a];
        if (o) {
          if (o.type === "SpreadElement") {
            o.type = "RestElement";
            let l = o.argument;
            this.checkToRestConversion(l, !0), this.toAssignable(l, n);
          } else
            this.toAssignable(o, n);
          o.type === "RestElement" && (a < i ? this.raise(_.RestTrailingComma, o) : r && this.raise(_.RestTrailingComma, r));
        }
      }
    }
    isAssignable(t, r) {
      switch (t.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          return !0;
        case "ObjectExpression": {
          let n = t.properties.length - 1;
          return t.properties.every((i, a) => i.type !== "ObjectMethod" && (a === n || i.type !== "SpreadElement") && this.isAssignable(i));
        }
        case "ObjectProperty":
          return this.isAssignable(t.value);
        case "SpreadElement":
          return this.isAssignable(t.argument);
        case "ArrayExpression":
          return t.elements.every((n) => n === null || this.isAssignable(n));
        case "AssignmentExpression":
          return t.operator === "=";
        case "ParenthesizedExpression":
          return this.isAssignable(t.expression);
        case "MemberExpression":
        case "OptionalMemberExpression":
          return !r;
        default:
          return !1;
      }
    }
    toReferencedList(t, r) {
      return t;
    }
    toReferencedListDeep(t, r) {
      this.toReferencedList(t, r);
      for (let n of t)
        n?.type === "ArrayExpression" && this.toReferencedListDeep(n.elements);
    }
    parseSpread(t) {
      let r = this.startNode();
      return this.next(), r.argument = this.parseMaybeAssignAllowIn(t, void 0), this.finishNode(r, "SpreadElement");
    }
    parseRestBinding() {
      let t = this.startNode();
      return this.next(), t.argument = this.parseBindingAtom(), this.finishNode(t, "RestElement");
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 0: {
          let t = this.startNode();
          return this.next(), t.elements = this.parseBindingList(3, 93, 1), this.finishNode(t, "ArrayPattern");
        }
        case 5:
          return this.parseObjectLike(8, !0);
      }
      return this.parseIdentifier();
    }
    parseBindingList(t, r, n) {
      let i = n & 1, a = [], o = !0;
      for (; !this.eat(t); )
        if (o ? o = !1 : this.expect(12), i && this.match(12))
          a.push(null);
        else {
          if (this.eat(t))
            break;
          if (this.match(21)) {
            if (a.push(this.parseAssignableListItemTypes(this.parseRestBinding(), n)), !this.checkCommaAfterRest(r)) {
              this.expect(t);
              break;
            }
          } else {
            let l = [];
            for (this.match(26) && this.hasPlugin("decorators") && this.raise(_.UnsupportedParameterDecorator, this.state.startLoc); this.match(
            26); )
              l.push(this.parseDecorator());
            a.push(this.parseAssignableListItem(n, l));
          }
        }
      return a;
    }
    parseBindingRestProperty(t) {
      return this.next(), t.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(t, "RestElement");
    }
    parseBindingProperty() {
      let {
        type: t,
        startLoc: r
      } = this.state;
      if (t === 21)
        return this.parseBindingRestProperty(this.startNode());
      let n = this.startNode();
      return t === 138 ? (this.expectPlugin("destructuringPrivate", r), this.classScope.usePrivateName(this.state.value, r), n.key = this.parsePrivateName()) :
      this.parsePropertyName(n), n.method = !1, this.parseObjPropValue(n, r, !1, !1, !0, !1);
    }
    parseAssignableListItem(t, r) {
      let n = this.parseMaybeDefault();
      this.parseAssignableListItemTypes(n, t);
      let i = this.parseMaybeDefault(n.loc.start, n);
      return r.length && (n.decorators = r), i;
    }
    parseAssignableListItemTypes(t, r) {
      return t;
    }
    parseMaybeDefault(t, r) {
      var n, i;
      if ((n = t) != null || (t = this.state.startLoc), r = (i = r) != null ? i : this.parseBindingAtom(), !this.eat(29)) return r;
      let a = this.startNodeAt(t);
      return a.left = r, a.right = this.parseMaybeAssignAllowIn(), this.finishNode(a, "AssignmentPattern");
    }
    isValidLVal(t, r, n) {
      switch (t) {
        case "AssignmentPattern":
          return "left";
        case "RestElement":
          return "argument";
        case "ObjectProperty":
          return "value";
        case "ParenthesizedExpression":
          return "expression";
        case "ArrayPattern":
          return "elements";
        case "ObjectPattern":
          return "properties";
      }
      return !1;
    }
    isOptionalMemberExpression(t) {
      return t.type === "OptionalMemberExpression";
    }
    checkLVal(t, r, n = 64, i = !1, a = !1, o = !1) {
      var l;
      let u = t.type;
      if (this.isObjectMethod(t)) return;
      let c = this.isOptionalMemberExpression(t);
      if (c || u === "MemberExpression") {
        c && (this.expectPlugin("optionalChainingAssign", t.loc.start), r.type !== "AssignmentExpression" && this.raise(_.InvalidLhsOptionalChaining,
        t, {
          ancestor: r
        })), n !== 64 && this.raise(_.InvalidPropertyBindingPattern, t);
        return;
      }
      if (u === "Identifier") {
        this.checkIdentifier(t, n, a);
        let {
          name: d
        } = t;
        i && (i.has(d) ? this.raise(_.ParamDupe, t) : i.add(d));
        return;
      }
      let f = this.isValidLVal(u, !(o || (l = t.extra) != null && l.parenthesized) && r.type === "AssignmentExpression", n);
      if (f === !0) return;
      if (f === !1) {
        let d = n === 64 ? _.InvalidLhs : _.InvalidLhsBinding;
        this.raise(d, t, {
          ancestor: r
        });
        return;
      }
      let p, h;
      typeof f == "string" ? (p = f, h = u === "ParenthesizedExpression") : [p, h] = f;
      let y = u === "ArrayPattern" || u === "ObjectPattern" ? {
        type: u
      } : r, v = t[p];
      if (Array.isArray(v))
        for (let d of v)
          d && this.checkLVal(d, y, n, i, a, h);
      else v && this.checkLVal(v, y, n, i, a, h);
    }
    checkIdentifier(t, r, n = !1) {
      this.state.strict && (n ? cT(t.name, this.inModule) : uT(t.name)) && (r === 64 ? this.raise(_.StrictEvalArguments, t, {
        referenceName: t.name
      }) : this.raise(_.StrictEvalArgumentsBinding, t, {
        bindingName: t.name
      })), r & 8192 && t.name === "let" && this.raise(_.LetInLexicalBinding, t), r & 64 || this.declareNameFromIdentifier(t, r);
    }
    declareNameFromIdentifier(t, r) {
      this.scope.declareName(t.name, r, t.loc.start);
    }
    checkToRestConversion(t, r) {
      switch (t.type) {
        case "ParenthesizedExpression":
          this.checkToRestConversion(t.expression, r);
          break;
        case "Identifier":
        case "MemberExpression":
          break;
        case "ArrayExpression":
        case "ObjectExpression":
          if (r) break;
        default:
          this.raise(_.InvalidRestAssignmentPattern, t);
      }
    }
    checkCommaAfterRest(t) {
      return this.match(12) ? (this.raise(this.lookaheadCharCode() === t ? _.RestTrailingComma : _.ElementAfterRest, this.state.startLoc), !0) :
      !1;
    }
  };
  function IG(e) {
    if (e == null)
      throw new Error(`Unexpected ${e} value.`);
    return e;
  }
  s(IG, "nonNull");
  function Qv(e) {
    if (!e)
      throw new Error("Assert fail");
  }
  s(Qv, "assert");
  var he = Dn`typescript`({
    AbstractMethodHasImplementation: /* @__PURE__ */ s(({
      methodName: e
    }) => `Method '${e}' cannot have an implementation because it is marked abstract.`, "AbstractMethodHasImplementation"),
    AbstractPropertyHasInitializer: /* @__PURE__ */ s(({
      propertyName: e
    }) => `Property '${e}' cannot have an initializer because it is marked abstract.`, "AbstractPropertyHasInitializer"),
    AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
    AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
    AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
    ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
    ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
    ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or nu\
meric literal or literal enum reference.",
    ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
    DeclareAccessor: /* @__PURE__ */ s(({
      kind: e
    }) => `'declare' is not allowed in ${e}ters.`, "DeclareAccessor"),
    DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
    DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
    DuplicateAccessibilityModifier: /* @__PURE__ */ s(({
      modifier: e
    }) => "Accessibility modifier already seen.", "DuplicateAccessibilityModifier"),
    DuplicateModifier: /* @__PURE__ */ s(({
      modifier: e
    }) => `Duplicate modifier: '${e}'.`, "DuplicateModifier"),
    EmptyHeritageClauseType: /* @__PURE__ */ s(({
      token: e
    }) => `'${e}' list cannot be empty.`, "EmptyHeritageClauseType"),
    EmptyTypeArguments: "Type argument list cannot be empty.",
    EmptyTypeParameters: "Type parameter list cannot be empty.",
    ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
    ImportAliasHasImportType: "An import alias can not use 'import type'.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
    IncompatibleModifiers: /* @__PURE__ */ s(({
      modifiers: e
    }) => `'${e[0]}' modifier cannot be used with '${e[1]}' modifier.`, "IncompatibleModifiers"),
    IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
    IndexSignatureHasAccessibility: /* @__PURE__ */ s(({
      modifier: e
    }) => `Index signatures cannot have an accessibility modifier ('${e}').`, "IndexSignatureHasAccessibility"),
    IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
    IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
    IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
    InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
    InvalidModifierOnTypeMember: /* @__PURE__ */ s(({
      modifier: e
    }) => `'${e}' modifier cannot appear on a type member.`, "InvalidModifierOnTypeMember"),
    InvalidModifierOnTypeParameter: /* @__PURE__ */ s(({
      modifier: e
    }) => `'${e}' modifier cannot appear on a type parameter.`, "InvalidModifierOnTypeParameter"),
    InvalidModifierOnTypeParameterPositions: /* @__PURE__ */ s(({
      modifier: e
    }) => `'${e}' modifier can only appear on a type parameter of a class, interface or type alias.`, "InvalidModifierOnTypeParameterPositio\
ns"),
    InvalidModifiersOrder: /* @__PURE__ */ s(({
      orderedModifiers: e
    }) => `'${e[0]}' modifier must precede '${e[1]}' modifier.`, "InvalidModifiersOrder"),
    InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the i\
nstantiation expression in parentheses, or delete the type arguments.",
    InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
    MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
    NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
    NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
    OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
    OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
    PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
    PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
    PrivateElementHasAccessibility: /* @__PURE__ */ s(({
      modifier: e
    }) => `Private elements cannot have an accessibility modifier ('${e}').`, "PrivateElementHasAccessibility"),
    ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
    ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
    ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
    SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
    SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
    SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
    SingleTypeParameterWithoutTrailingComma: /* @__PURE__ */ s(({
      typeParameterName: e
    }) => `Single type parameter ${e} should have a trailing comma. Example usage: <${e},>.`, "SingleTypeParameterWithoutTrailingComma"),
    StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
    TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`n\
ame?: type`), rather than after the type (`name: type?`).",
    TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number =\
 25`.",
    TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
    TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statemen\
t.",
    TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statemen\
t.",
    UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
    UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
    UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
    UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
    UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
    UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
    UnsupportedSignatureParameterKind: /* @__PURE__ */ s(({
      type: e
    }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${e}.`, "UnsupportedSignatureParameterKind")
  });
  function _G(e) {
    switch (e) {
      case "any":
        return "TSAnyKeyword";
      case "boolean":
        return "TSBooleanKeyword";
      case "bigint":
        return "TSBigIntKeyword";
      case "never":
        return "TSNeverKeyword";
      case "number":
        return "TSNumberKeyword";
      case "object":
        return "TSObjectKeyword";
      case "string":
        return "TSStringKeyword";
      case "symbol":
        return "TSSymbolKeyword";
      case "undefined":
        return "TSUndefinedKeyword";
      case "unknown":
        return "TSUnknownKeyword";
      default:
        return;
    }
  }
  s(_G, "keywordTypeFromName");
  function Zv(e) {
    return e === "private" || e === "public" || e === "protected";
  }
  s(Zv, "tsIsAccessModifier");
  function OG(e) {
    return e === "in" || e === "out";
  }
  s(OG, "tsIsVarianceAnnotations");
  var NG = /* @__PURE__ */ s((e) => class extends e {
    static {
      s(this, "TypeScriptParserMixin");
    }
    constructor(...r) {
      super(...r), this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["in", "out"],
        disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
        errorTemplate: he.InvalidModifierOnTypeParameter
      }), this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["const"],
        disallowedModifiers: ["in", "out"],
        errorTemplate: he.InvalidModifierOnTypeParameterPositions
      }), this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["in", "out", "const"],
        disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
        errorTemplate: he.InvalidModifierOnTypeParameter
      });
    }
    getScopeHandler() {
      return Ph;
    }
    tsIsIdentifier() {
      return et(this.state.type);
    }
    tsTokenCanFollowModifier() {
      return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(138) || this.isLiteralPropertyName()) && !this.
      hasPrecedingLineBreak();
    }
    tsNextTokenCanFollowModifier() {
      return this.next(), this.tsTokenCanFollowModifier();
    }
    tsParseModifier(r, n) {
      if (!et(this.state.type) && this.state.type !== 58 && this.state.type !== 75)
        return;
      let i = this.state.value;
      if (r.includes(i)) {
        if (n && this.tsIsStartOfStaticBlocks())
          return;
        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)))
          return i;
      }
    }
    tsParseModifiers({
      allowedModifiers: r,
      disallowedModifiers: n,
      stopOnStartOfClassStaticBlock: i,
      errorTemplate: a = he.InvalidModifierOnTypeMember
    }, o) {
      let l = /* @__PURE__ */ s((c, f, p, h) => {
        f === p && o[h] && this.raise(he.InvalidModifiersOrder, c, {
          orderedModifiers: [p, h]
        });
      }, "enforceOrder"), u = /* @__PURE__ */ s((c, f, p, h) => {
        (o[p] && f === h || o[h] && f === p) && this.raise(he.IncompatibleModifiers, c, {
          modifiers: [p, h]
        });
      }, "incompatible");
      for (; ; ) {
        let {
          startLoc: c
        } = this.state, f = this.tsParseModifier(r.concat(n ?? []), i);
        if (!f) break;
        Zv(f) ? o.accessibility ? this.raise(he.DuplicateAccessibilityModifier, c, {
          modifier: f
        }) : (l(c, f, f, "override"), l(c, f, f, "static"), l(c, f, f, "readonly"), o.accessibility = f) : OG(f) ? (o[f] && this.raise(he.DuplicateModifier,
        c, {
          modifier: f
        }), o[f] = !0, l(c, f, "in", "out")) : (hasOwnProperty.call(o, f) ? this.raise(he.DuplicateModifier, c, {
          modifier: f
        }) : (l(c, f, "static", "readonly"), l(c, f, "static", "override"), l(c, f, "override", "readonly"), l(c, f, "abstract", "override"),
        u(c, f, "declare", "override"), u(c, f, "static", "abstract")), o[f] = !0), n != null && n.includes(f) && this.raise(a, c, {
          modifier: f
        });
      }
    }
    tsIsListTerminator(r) {
      switch (r) {
        case "EnumMembers":
        case "TypeMembers":
          return this.match(8);
        case "HeritageClauseElement":
          return this.match(5);
        case "TupleElementTypes":
          return this.match(3);
        case "TypeParametersOrArguments":
          return this.match(48);
      }
    }
    tsParseList(r, n) {
      let i = [];
      for (; !this.tsIsListTerminator(r); )
        i.push(n());
      return i;
    }
    tsParseDelimitedList(r, n, i) {
      return IG(this.tsParseDelimitedListWorker(r, n, !0, i));
    }
    tsParseDelimitedListWorker(r, n, i, a) {
      let o = [], l = -1;
      for (; !this.tsIsListTerminator(r); ) {
        l = -1;
        let u = n();
        if (u == null)
          return;
        if (o.push(u), this.eat(12)) {
          l = this.state.lastTokStartLoc.index;
          continue;
        }
        if (this.tsIsListTerminator(r))
          break;
        i && this.expect(12);
        return;
      }
      return a && (a.value = l), o;
    }
    tsParseBracketedList(r, n, i, a, o) {
      a || (i ? this.expect(0) : this.expect(47));
      let l = this.tsParseDelimitedList(r, n, o);
      return i ? this.expect(3) : this.expect(48), l;
    }
    tsParseImportType() {
      let r = this.startNode();
      return this.expect(83), this.expect(10), this.match(133) || this.raise(he.UnsupportedImportTypeArgument, this.state.startLoc), r.argument =
      super.parseExprAtom(), (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) && (r.options = null), this.eat(12) &&
      (this.expectImportAttributesPlugin(), this.match(11) || (r.options = super.parseMaybeAssignAllowIn(), this.eat(12))), this.expect(11),
      this.eat(16) && (r.qualifier = this.tsParseEntityName()), this.match(47) && (r.typeParameters = this.tsParseTypeArguments()), this.finishNode(
      r, "TSImportType");
    }
    tsParseEntityName(r = !0) {
      let n = this.parseIdentifier(r);
      for (; this.eat(16); ) {
        let i = this.startNodeAtNode(n);
        i.left = n, i.right = this.parseIdentifier(r), n = this.finishNode(i, "TSQualifiedName");
      }
      return n;
    }
    tsParseTypeReference() {
      let r = this.startNode();
      return r.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (r.typeParameters = this.tsParseTypeArguments()),
      this.finishNode(r, "TSTypeReference");
    }
    tsParseThisTypePredicate(r) {
      this.next();
      let n = this.startNodeAtNode(r);
      return n.parameterName = r, n.typeAnnotation = this.tsParseTypeAnnotation(!1), n.asserts = !1, this.finishNode(n, "TSTypePredicate");
    }
    tsParseThisTypeNode() {
      let r = this.startNode();
      return this.next(), this.finishNode(r, "TSThisType");
    }
    tsParseTypeQuery() {
      let r = this.startNode();
      return this.expect(87), this.match(83) ? r.exprName = this.tsParseImportType() : r.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() &&
      this.match(47) && (r.typeParameters = this.tsParseTypeArguments()), this.finishNode(r, "TSTypeQuery");
    }
    tsParseTypeParameter(r) {
      let n = this.startNode();
      return r(n), n.name = this.tsParseTypeParameterName(), n.constraint = this.tsEatThenParseType(81), n.default = this.tsEatThenParseType(
      29), this.finishNode(n, "TSTypeParameter");
    }
    tsTryParseTypeParameters(r) {
      if (this.match(47))
        return this.tsParseTypeParameters(r);
    }
    tsParseTypeParameters(r) {
      let n = this.startNode();
      this.match(47) || this.match(142) ? this.next() : this.unexpected();
      let i = {
        value: -1
      };
      return n.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, r), !1, !0, i), n.params.
      length === 0 && this.raise(he.EmptyTypeParameters, n), i.value !== -1 && this.addExtra(n, "trailingComma", i.value), this.finishNode(n,
      "TSTypeParameterDeclaration");
    }
    tsFillSignature(r, n) {
      let i = r === 19, a = "parameters", o = "typeAnnotation";
      n.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier), this.expect(10), n[a] = this.tsParseBindingListForSignature(),
      i ? n[o] = this.tsParseTypeOrTypePredicateAnnotation(r) : this.match(r) && (n[o] = this.tsParseTypeOrTypePredicateAnnotation(r));
    }
    tsParseBindingListForSignature() {
      let r = super.parseBindingList(11, 41, 2);
      for (let n of r) {
        let {
          type: i
        } = n;
        (i === "AssignmentPattern" || i === "TSParameterProperty") && this.raise(he.UnsupportedSignatureParameterKind, n, {
          type: i
        });
      }
      return r;
    }
    tsParseTypeMemberSemicolon() {
      !this.eat(12) && !this.isLineTerminator() && this.expect(13);
    }
    tsParseSignatureMember(r, n) {
      return this.tsFillSignature(14, n), this.tsParseTypeMemberSemicolon(), this.finishNode(n, r);
    }
    tsIsUnambiguouslyIndexSignature() {
      return this.next(), et(this.state.type) ? (this.next(), this.match(14)) : !1;
    }
    tsTryParseIndexSignature(r) {
      if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))))
        return;
      this.expect(0);
      let n = this.parseIdentifier();
      n.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(n), this.expect(3), r.parameters = [n];
      let i = this.tsTryParseTypeAnnotation();
      return i && (r.typeAnnotation = i), this.tsParseTypeMemberSemicolon(), this.finishNode(r, "TSIndexSignature");
    }
    tsParsePropertyOrMethodSignature(r, n) {
      this.eat(17) && (r.optional = !0);
      let i = r;
      if (this.match(10) || this.match(47)) {
        n && this.raise(he.ReadonlyForMethodSignature, r);
        let a = i;
        a.kind && this.match(47) && this.raise(he.AccesorCannotHaveTypeParameters, this.state.curPosition()), this.tsFillSignature(14, a), this.
        tsParseTypeMemberSemicolon();
        let o = "parameters", l = "typeAnnotation";
        if (a.kind === "get")
          a[o].length > 0 && (this.raise(_.BadGetterArity, this.state.curPosition()), this.isThisParam(a[o][0]) && this.raise(he.AccesorCannotDeclareThisParameter,
          this.state.curPosition()));
        else if (a.kind === "set") {
          if (a[o].length !== 1)
            this.raise(_.BadSetterArity, this.state.curPosition());
          else {
            let u = a[o][0];
            this.isThisParam(u) && this.raise(he.AccesorCannotDeclareThisParameter, this.state.curPosition()), u.type === "Identifier" && u.
            optional && this.raise(he.SetAccesorCannotHaveOptionalParameter, this.state.curPosition()), u.type === "RestElement" && this.raise(
            he.SetAccesorCannotHaveRestParameter, this.state.curPosition());
          }
          a[l] && this.raise(he.SetAccesorCannotHaveReturnType, a[l]);
        } else
          a.kind = "method";
        return this.finishNode(a, "TSMethodSignature");
      } else {
        let a = i;
        n && (a.readonly = !0);
        let o = this.tsTryParseTypeAnnotation();
        return o && (a.typeAnnotation = o), this.tsParseTypeMemberSemicolon(), this.finishNode(a, "TSPropertySignature");
      }
    }
    tsParseTypeMember() {
      let r = this.startNode();
      if (this.match(10) || this.match(47))
        return this.tsParseSignatureMember("TSCallSignatureDeclaration", r);
      if (this.match(77)) {
        let i = this.startNode();
        return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", r) : (r.key = this.
        createIdentifier(i, "new"), this.tsParsePropertyOrMethodSignature(r, !1));
      }
      this.tsParseModifiers({
        allowedModifiers: ["readonly"],
        disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
      }, r);
      let n = this.tsTryParseIndexSignature(r);
      return n || (super.parsePropertyName(r), !r.computed && r.key.type === "Identifier" && (r.key.name === "get" || r.key.name === "set") &&
      this.tsTokenCanFollowModifier() && (r.kind = r.key.name, super.parsePropertyName(r)), this.tsParsePropertyOrMethodSignature(r, !!r.readonly));
    }
    tsParseTypeLiteral() {
      let r = this.startNode();
      return r.members = this.tsParseObjectTypeMembers(), this.finishNode(r, "TSTypeLiteral");
    }
    tsParseObjectTypeMembers() {
      this.expect(5);
      let r = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
      return this.expect(8), r;
    }
    tsIsStartOfMappedType() {
      return this.next(), this.eat(53) ? this.isContextual(122) : (this.isContextual(122) && this.next(), !this.match(0) || (this.next(), !this.
      tsIsIdentifier()) ? !1 : (this.next(), this.match(58)));
    }
    tsParseMappedTypeParameter() {
      let r = this.startNode();
      return r.name = this.tsParseTypeParameterName(), r.constraint = this.tsExpectThenParseType(58), this.finishNode(r, "TSTypeParameter");
    }
    tsParseMappedType() {
      let r = this.startNode();
      return this.expect(5), this.match(53) ? (r.readonly = this.state.value, this.next(), this.expectContextual(122)) : this.eatContextual(
      122) && (r.readonly = !0), this.expect(0), r.typeParameter = this.tsParseMappedTypeParameter(), r.nameType = this.eatContextual(93) ? this.
      tsParseType() : null, this.expect(3), this.match(53) ? (r.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) &&
      (r.optional = !0), r.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(r, "TSMappedType");
    }
    tsParseTupleType() {
      let r = this.startNode();
      r.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), !0, !1);
      let n = !1;
      return r.elementTypes.forEach((i) => {
        let {
          type: a
        } = i;
        n && a !== "TSRestType" && a !== "TSOptionalType" && !(a === "TSNamedTupleMember" && i.optional) && this.raise(he.OptionalTypeBeforeRequired,
        i), n || (n = a === "TSNamedTupleMember" && i.optional || a === "TSOptionalType");
      }), this.finishNode(r, "TSTupleType");
    }
    tsParseTupleElementType() {
      let {
        startLoc: r
      } = this.state, n = this.eat(21), i, a, o, l, c = $r(this.state.type) ? this.lookaheadCharCode() : null;
      if (c === 58)
        i = !0, o = !1, a = this.parseIdentifier(!0), this.expect(14), l = this.tsParseType();
      else if (c === 63) {
        o = !0;
        let f = this.state.startLoc, p = this.state.value, h = this.tsParseNonArrayType();
        this.lookaheadCharCode() === 58 ? (i = !0, a = this.createIdentifier(this.startNodeAt(f), p), this.expect(17), this.expect(14), l = this.
        tsParseType()) : (i = !1, l = h, this.expect(17));
      } else
        l = this.tsParseType(), o = this.eat(17), i = this.eat(14);
      if (i) {
        let f;
        a ? (f = this.startNodeAtNode(a), f.optional = o, f.label = a, f.elementType = l, this.eat(17) && (f.optional = !0, this.raise(he.TupleOptionalAfterType,
        this.state.lastTokStartLoc))) : (f = this.startNodeAtNode(l), f.optional = o, this.raise(he.InvalidTupleMemberLabel, l), f.label = l,
        f.elementType = this.tsParseType()), l = this.finishNode(f, "TSNamedTupleMember");
      } else if (o) {
        let f = this.startNodeAtNode(l);
        f.typeAnnotation = l, l = this.finishNode(f, "TSOptionalType");
      }
      if (n) {
        let f = this.startNodeAt(r);
        f.typeAnnotation = l, l = this.finishNode(f, "TSRestType");
      }
      return l;
    }
    tsParseParenthesizedType() {
      let r = this.startNode();
      return this.expect(10), r.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(r, "TSParenthesizedType");
    }
    tsParseFunctionOrConstructorType(r, n) {
      let i = this.startNode();
      return r === "TSConstructorType" && (i.abstract = !!n, n && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.
      tsFillSignature(19, i)), this.finishNode(i, r);
    }
    tsParseLiteralTypeNode() {
      let r = this.startNode();
      switch (this.state.type) {
        case 134:
        case 135:
        case 133:
        case 85:
        case 86:
          r.literal = super.parseExprAtom();
          break;
        default:
          this.unexpected();
      }
      return this.finishNode(r, "TSLiteralType");
    }
    tsParseTemplateLiteralType() {
      let r = this.startNode();
      return r.literal = super.parseTemplate(!1), this.finishNode(r, "TSLiteralType");
    }
    parseTemplateSubstitution() {
      return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
    }
    tsParseThisTypeOrThisTypePredicate() {
      let r = this.tsParseThisTypeNode();
      return this.isContextual(116) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(r) : r;
    }
    tsParseNonArrayType() {
      switch (this.state.type) {
        case 133:
        case 134:
        case 135:
        case 85:
        case 86:
          return this.tsParseLiteralTypeNode();
        case 53:
          if (this.state.value === "-") {
            let r = this.startNode(), n = this.lookahead();
            return n.type !== 134 && n.type !== 135 && this.unexpected(), r.literal = this.parseMaybeUnary(), this.finishNode(r, "TSLiteralT\
ype");
          }
          break;
        case 78:
          return this.tsParseThisTypeOrThisTypePredicate();
        case 87:
          return this.tsParseTypeQuery();
        case 83:
          return this.tsParseImportType();
        case 5:
          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
        case 0:
          return this.tsParseTupleType();
        case 10:
          return this.tsParseParenthesizedType();
        case 25:
        case 24:
          return this.tsParseTemplateLiteralType();
        default: {
          let {
            type: r
          } = this.state;
          if (et(r) || r === 88 || r === 84) {
            let n = r === 88 ? "TSVoidKeyword" : r === 84 ? "TSNullKeyword" : _G(this.state.value);
            if (n !== void 0 && this.lookaheadCharCode() !== 46) {
              let i = this.startNode();
              return this.next(), this.finishNode(i, n);
            }
            return this.tsParseTypeReference();
          }
        }
      }
      this.unexpected();
    }
    tsParseArrayTypeOrHigher() {
      let r = this.tsParseNonArrayType();
      for (; !this.hasPrecedingLineBreak() && this.eat(0); )
        if (this.match(3)) {
          let n = this.startNodeAtNode(r);
          n.elementType = r, this.expect(3), r = this.finishNode(n, "TSArrayType");
        } else {
          let n = this.startNodeAtNode(r);
          n.objectType = r, n.indexType = this.tsParseType(), this.expect(3), r = this.finishNode(n, "TSIndexedAccessType");
        }
      return r;
    }
    tsParseTypeOperator() {
      let r = this.startNode(), n = this.state.value;
      return this.next(), r.operator = n, r.typeAnnotation = this.tsParseTypeOperatorOrHigher(), n === "readonly" && this.tsCheckTypeAnnotationForReadOnly(
      r), this.finishNode(r, "TSTypeOperator");
    }
    tsCheckTypeAnnotationForReadOnly(r) {
      switch (r.typeAnnotation.type) {
        case "TSTupleType":
        case "TSArrayType":
          return;
        default:
          this.raise(he.UnexpectedReadonly, r);
      }
    }
    tsParseInferType() {
      let r = this.startNode();
      this.expectContextual(115);
      let n = this.startNode();
      return n.name = this.tsParseTypeParameterName(), n.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), r.typeParameter =
      this.finishNode(n, "TSTypeParameter"), this.finishNode(r, "TSInferType");
    }
    tsParseConstraintForInferType() {
      if (this.eat(81)) {
        let r = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
        if (this.state.inDisallowConditionalTypesContext || !this.match(17))
          return r;
      }
    }
    tsParseTypeOperatorOrHigher() {
      return JK(this.state.type) && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() :
      this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
    }
    tsParseUnionOrIntersectionType(r, n, i) {
      let a = this.startNode(), o = this.eat(i), l = [];
      do
        l.push(n());
      while (this.eat(i));
      return l.length === 1 && !o ? l[0] : (a.types = l, this.finishNode(a, r));
    }
    tsParseIntersectionTypeOrHigher() {
      return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
    }
    tsParseUnionTypeOrHigher() {
      return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
    }
    tsIsStartOfFunctionType() {
      return this.match(47) ? !0 : this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
    }
    tsSkipParameterStart() {
      if (et(this.state.type) || this.match(78))
        return this.next(), !0;
      if (this.match(5)) {
        let {
          errors: r
        } = this.state, n = r.length;
        try {
          return this.parseObjectLike(8, !0), r.length === n;
        } catch {
          return !1;
        }
      }
      if (this.match(0)) {
        this.next();
        let {
          errors: r
        } = this.state, n = r.length;
        try {
          return super.parseBindingList(3, 93, 1), r.length === n;
        } catch {
          return !1;
        }
      }
      return !1;
    }
    tsIsUnambiguouslyStartOfFunctionType() {
      return this.next(), !!(this.match(11) || this.match(21) || this.tsSkipParameterStart() && (this.match(14) || this.match(12) || this.match(
      17) || this.match(29) || this.match(11) && (this.next(), this.match(19))));
    }
    tsParseTypeOrTypePredicateAnnotation(r) {
      return this.tsInType(() => {
        let n = this.startNode();
        this.expect(r);
        let i = this.startNode(), a = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
        if (a && this.match(78)) {
          let u = this.tsParseThisTypeOrThisTypePredicate();
          return u.type === "TSThisType" ? (i.parameterName = u, i.asserts = !0, i.typeAnnotation = null, u = this.finishNode(i, "TSTypePred\
icate")) : (this.resetStartLocationFromNode(u, i), u.asserts = !0), n.typeAnnotation = u, this.finishNode(n, "TSTypeAnnotation");
        }
        let o = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
        if (!o)
          return a ? (i.parameterName = this.parseIdentifier(), i.asserts = a, i.typeAnnotation = null, n.typeAnnotation = this.finishNode(i,
          "TSTypePredicate"), this.finishNode(n, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(!1, n);
        let l = this.tsParseTypeAnnotation(!1);
        return i.parameterName = o, i.typeAnnotation = l, i.asserts = a, n.typeAnnotation = this.finishNode(i, "TSTypePredicate"), this.finishNode(
        n, "TSTypeAnnotation");
      });
    }
    tsTryParseTypeOrTypePredicateAnnotation() {
      if (this.match(14))
        return this.tsParseTypeOrTypePredicateAnnotation(14);
    }
    tsTryParseTypeAnnotation() {
      if (this.match(14))
        return this.tsParseTypeAnnotation();
    }
    tsTryParseType() {
      return this.tsEatThenParseType(14);
    }
    tsParseTypePredicatePrefix() {
      let r = this.parseIdentifier();
      if (this.isContextual(116) && !this.hasPrecedingLineBreak())
        return this.next(), r;
    }
    tsParseTypePredicateAsserts() {
      if (this.state.type !== 109)
        return !1;
      let r = this.state.containsEsc;
      return this.next(), !et(this.state.type) && !this.match(78) ? !1 : (r && this.raise(_.InvalidEscapedReservedWord, this.state.lastTokStartLoc,
      {
        reservedWord: "asserts"
      }), !0);
    }
    tsParseTypeAnnotation(r = !0, n = this.startNode()) {
      return this.tsInType(() => {
        r && this.expect(14), n.typeAnnotation = this.tsParseType();
      }), this.finishNode(n, "TSTypeAnnotation");
    }
    tsParseType() {
      Qv(this.state.inType);
      let r = this.tsParseNonConditionalType();
      if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81))
        return r;
      let n = this.startNodeAtNode(r);
      return n.checkType = r, n.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(
      17), n.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), n.falseType = this.tsInAllowConditionalTypesContext(
      () => this.tsParseType()), this.finishNode(n, "TSConditionalType");
    }
    isAbstractConstructorSignature() {
      return this.isContextual(124) && this.lookahead().type === 77;
    }
    tsParseNonConditionalType() {
      return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType(
      "TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", !0) : this.tsParseUnionTypeOrHigher();
    }
    tsParseTypeAssertion() {
      this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(he.ReservedTypeAssertion, this.state.startLoc);
      let r = this.startNode();
      return r.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? this.tsParseTypeReference() : this.tsParseType())), this.
      expect(48), r.expression = this.parseMaybeUnary(), this.finishNode(r, "TSTypeAssertion");
    }
    tsParseHeritageClause(r) {
      let n = this.state.startLoc, i = this.tsParseDelimitedList("HeritageClauseElement", () => {
        let a = this.startNode();
        return a.expression = this.tsParseEntityName(), this.match(47) && (a.typeParameters = this.tsParseTypeArguments()), this.finishNode(
        a, "TSExpressionWithTypeArguments");
      });
      return i.length || this.raise(he.EmptyHeritageClauseType, n, {
        token: r
      }), i;
    }
    tsParseInterfaceDeclaration(r, n = {}) {
      if (this.hasFollowingLineBreak()) return null;
      this.expectContextual(129), n.declare && (r.declare = !0), et(this.state.type) ? (r.id = this.parseIdentifier(), this.checkIdentifier(
      r.id, 130)) : (r.id = null, this.raise(he.MissingInterfaceName, this.state.startLoc)), r.typeParameters = this.tsTryParseTypeParameters(
      this.tsParseInOutConstModifiers), this.eat(81) && (r.extends = this.tsParseHeritageClause("extends"));
      let i = this.startNode();
      return i.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), r.body = this.finishNode(i, "TSInterfaceBody"), this.finishNode(
      r, "TSInterfaceDeclaration");
    }
    tsParseTypeAliasDeclaration(r) {
      return r.id = this.parseIdentifier(), this.checkIdentifier(r.id, 2), r.typeAnnotation = this.tsInType(() => {
        if (r.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers), this.expect(29), this.isContextual(114) && this.lookahead().
        type !== 16) {
          let n = this.startNode();
          return this.next(), this.finishNode(n, "TSIntrinsicKeyword");
        }
        return this.tsParseType();
      }), this.semicolon(), this.finishNode(r, "TSTypeAliasDeclaration");
    }
    tsInNoContext(r) {
      let n = this.state.context;
      this.state.context = [n[0]];
      try {
        return r();
      } finally {
        this.state.context = n;
      }
    }
    tsInType(r) {
      let n = this.state.inType;
      this.state.inType = !0;
      try {
        return r();
      } finally {
        this.state.inType = n;
      }
    }
    tsInDisallowConditionalTypesContext(r) {
      let n = this.state.inDisallowConditionalTypesContext;
      this.state.inDisallowConditionalTypesContext = !0;
      try {
        return r();
      } finally {
        this.state.inDisallowConditionalTypesContext = n;
      }
    }
    tsInAllowConditionalTypesContext(r) {
      let n = this.state.inDisallowConditionalTypesContext;
      this.state.inDisallowConditionalTypesContext = !1;
      try {
        return r();
      } finally {
        this.state.inDisallowConditionalTypesContext = n;
      }
    }
    tsEatThenParseType(r) {
      if (this.match(r))
        return this.tsNextThenParseType();
    }
    tsExpectThenParseType(r) {
      return this.tsInType(() => (this.expect(r), this.tsParseType()));
    }
    tsNextThenParseType() {
      return this.tsInType(() => (this.next(), this.tsParseType()));
    }
    tsParseEnumMember() {
      let r = this.startNode();
      return r.id = this.match(133) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(!0), this.eat(29) && (r.initializer =
      super.parseMaybeAssignAllowIn()), this.finishNode(r, "TSEnumMember");
    }
    tsParseEnumDeclaration(r, n = {}) {
      return n.const && (r.const = !0), n.declare && (r.declare = !0), this.expectContextual(126), r.id = this.parseIdentifier(), this.checkIdentifier(
      r.id, r.const ? 8971 : 8459), this.expect(5), r.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)),
      this.expect(8), this.finishNode(r, "TSEnumDeclaration");
    }
    tsParseModuleBlock() {
      let r = this.startNode();
      return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(r.body = [], void 0, !0, 8), this.scope.exit(), this.finishNode(
      r, "TSModuleBlock");
    }
    tsParseModuleOrNamespaceDeclaration(r, n = !1) {
      if (r.id = this.parseIdentifier(), n || this.checkIdentifier(r.id, 1024), this.eat(16)) {
        let i = this.startNode();
        this.tsParseModuleOrNamespaceDeclaration(i, !0), r.body = i;
      } else
        this.scope.enter(256), this.prodParam.enter(0), r.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
      return this.finishNode(r, "TSModuleDeclaration");
    }
    tsParseAmbientExternalModuleDeclaration(r) {
      return this.isContextual(112) ? (r.global = !0, r.id = this.parseIdentifier()) : this.match(133) ? r.id = super.parseStringLiteral(this.
      state.value) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0), r.body = this.tsParseModuleBlock(),
      this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(r, "TSModuleDeclaration");
    }
    tsParseImportEqualsDeclaration(r, n, i) {
      r.isExport = i || !1, r.id = n || this.parseIdentifier(), this.checkIdentifier(r.id, 4096), this.expect(29);
      let a = this.tsParseModuleReference();
      return r.importKind === "type" && a.type !== "TSExternalModuleReference" && this.raise(he.ImportAliasHasImportType, a), r.moduleReference =
      a, this.semicolon(), this.finishNode(r, "TSImportEqualsDeclaration");
    }
    tsIsExternalModuleReference() {
      return this.isContextual(119) && this.lookaheadCharCode() === 40;
    }
    tsParseModuleReference() {
      return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(!1);
    }
    tsParseExternalModuleReference() {
      let r = this.startNode();
      return this.expectContextual(119), this.expect(10), this.match(133) || this.unexpected(), r.expression = super.parseExprAtom(), this.expect(
      11), this.sawUnambiguousESM = !0, this.finishNode(r, "TSExternalModuleReference");
    }
    tsLookAhead(r) {
      let n = this.state.clone(), i = r();
      return this.state = n, i;
    }
    tsTryParseAndCatch(r) {
      let n = this.tryParse((i) => r() || i());
      if (!(n.aborted || !n.node))
        return n.error && (this.state = n.failState), n.node;
    }
    tsTryParse(r) {
      let n = this.state.clone(), i = r();
      if (i !== void 0 && i !== !1)
        return i;
      this.state = n;
    }
    tsTryParseDeclare(r) {
      if (this.isLineTerminator())
        return;
      let n = this.state.type, i;
      return this.isContextual(100) && (n = 74, i = "let"), this.tsInAmbientContext(() => {
        switch (n) {
          case 68:
            return r.declare = !0, super.parseFunctionStatement(r, !1, !1);
          case 80:
            return r.declare = !0, this.parseClass(r, !0, !1);
          case 126:
            return this.tsParseEnumDeclaration(r, {
              declare: !0
            });
          case 112:
            return this.tsParseAmbientExternalModuleDeclaration(r);
          case 75:
          case 74:
            return !this.match(75) || !this.isLookaheadContextual("enum") ? (r.declare = !0, this.parseVarStatement(r, i || this.state.value,
            !0)) : (this.expect(75), this.tsParseEnumDeclaration(r, {
              const: !0,
              declare: !0
            }));
          case 129: {
            let a = this.tsParseInterfaceDeclaration(r, {
              declare: !0
            });
            if (a) return a;
          }
          default:
            if (et(n))
              return this.tsParseDeclaration(r, this.state.value, !0, null);
        }
      });
    }
    tsTryParseExportDeclaration() {
      return this.tsParseDeclaration(this.startNode(), this.state.value, !0, null);
    }
    tsParseExpressionStatement(r, n, i) {
      switch (n.name) {
        case "declare": {
          let a = this.tsTryParseDeclare(r);
          return a && (a.declare = !0), a;
        }
        case "global":
          if (this.match(5)) {
            this.scope.enter(256), this.prodParam.enter(0);
            let a = r;
            return a.global = !0, a.id = n, a.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(a,
            "TSModuleDeclaration");
          }
          break;
        default:
          return this.tsParseDeclaration(r, n.name, !1, i);
      }
    }
    tsParseDeclaration(r, n, i, a) {
      switch (n) {
        case "abstract":
          if (this.tsCheckLineTerminator(i) && (this.match(80) || et(this.state.type)))
            return this.tsParseAbstractDeclaration(r, a);
          break;
        case "module":
          if (this.tsCheckLineTerminator(i)) {
            if (this.match(133))
              return this.tsParseAmbientExternalModuleDeclaration(r);
            if (et(this.state.type))
              return this.tsParseModuleOrNamespaceDeclaration(r);
          }
          break;
        case "namespace":
          if (this.tsCheckLineTerminator(i) && et(this.state.type))
            return this.tsParseModuleOrNamespaceDeclaration(r);
          break;
        case "type":
          if (this.tsCheckLineTerminator(i) && et(this.state.type))
            return this.tsParseTypeAliasDeclaration(r);
          break;
      }
    }
    tsCheckLineTerminator(r) {
      return r ? this.hasFollowingLineBreak() ? !1 : (this.next(), !0) : !this.isLineTerminator();
    }
    tsTryParseGenericAsyncArrowFunction(r) {
      if (!this.match(47)) return;
      let n = this.state.maybeInArrowParameters;
      this.state.maybeInArrowParameters = !0;
      let i = this.tsTryParseAndCatch(() => {
        let a = this.startNodeAt(r);
        return a.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier), super.parseFunctionParams(a), a.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(),
        this.expect(19), a;
      });
      if (this.state.maybeInArrowParameters = n, !!i)
        return super.parseArrowExpression(i, null, !0);
    }
    tsParseTypeArgumentsInExpression() {
      if (this.reScan_lt() === 47)
        return this.tsParseTypeArguments();
    }
    tsParseTypeArguments() {
      let r = this.startNode();
      return r.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments",
      this.tsParseType.bind(this))))), r.params.length === 0 ? this.raise(he.EmptyTypeArguments, r) : !this.state.inType && this.curContext() ===
      it.brace && this.reScan_lt_gt(), this.expect(48), this.finishNode(r, "TSTypeParameterInstantiation");
    }
    tsIsDeclarationStart() {
      return XK(this.state.type);
    }
    isExportDefaultSpecifier() {
      return this.tsIsDeclarationStart() ? !1 : super.isExportDefaultSpecifier();
    }
    parseAssignableListItem(r, n) {
      let i = this.state.startLoc, a = {};
      this.tsParseModifiers({
        allowedModifiers: ["public", "private", "protected", "override", "readonly"]
      }, a);
      let o = a.accessibility, l = a.override, u = a.readonly;
      !(r & 4) && (o || u || l) && this.raise(he.UnexpectedParameterModifier, i);
      let c = this.parseMaybeDefault();
      this.parseAssignableListItemTypes(c, r);
      let f = this.parseMaybeDefault(c.loc.start, c);
      if (o || u || l) {
        let p = this.startNodeAt(i);
        return n.length && (p.decorators = n), o && (p.accessibility = o), u && (p.readonly = u), l && (p.override = l), f.type !== "Identif\
ier" && f.type !== "AssignmentPattern" && this.raise(he.UnsupportedParameterPropertyKind, p), p.parameter = f, this.finishNode(p, "TSParamet\
erProperty");
      }
      return n.length && (c.decorators = n), f;
    }
    isSimpleParameter(r) {
      return r.type === "TSParameterProperty" && super.isSimpleParameter(r.parameter) || super.isSimpleParameter(r);
    }
    tsDisallowOptionalPattern(r) {
      for (let n of r.params)
        n.type !== "Identifier" && n.optional && !this.state.isAmbientContext && this.raise(he.PatternIsOptional, n);
    }
    setArrowFunctionParameters(r, n, i) {
      super.setArrowFunctionParameters(r, n, i), this.tsDisallowOptionalPattern(r);
    }
    parseFunctionBodyAndFinish(r, n, i = !1) {
      this.match(14) && (r.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
      let a = n === "FunctionDeclaration" ? "TSDeclareFunction" : n === "ClassMethod" || n === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
      return a && !this.match(5) && this.isLineTerminator() ? this.finishNode(r, a) : a === "TSDeclareFunction" && this.state.isAmbientContext &&
      (this.raise(he.DeclareFunctionHasImplementation, r), r.declare) ? super.parseFunctionBodyAndFinish(r, a, i) : (this.tsDisallowOptionalPattern(
      r), super.parseFunctionBodyAndFinish(r, n, i));
    }
    registerFunctionStatementId(r) {
      !r.body && r.id ? this.checkIdentifier(r.id, 1024) : super.registerFunctionStatementId(r);
    }
    tsCheckForInvalidTypeCasts(r) {
      r.forEach((n) => {
        n?.type === "TSTypeCastExpression" && this.raise(he.UnexpectedTypeAnnotation, n.typeAnnotation);
      });
    }
    toReferencedList(r, n) {
      return this.tsCheckForInvalidTypeCasts(r), r;
    }
    parseArrayLike(r, n, i, a) {
      let o = super.parseArrayLike(r, n, i, a);
      return o.type === "ArrayExpression" && this.tsCheckForInvalidTypeCasts(o.elements), o;
    }
    parseSubscript(r, n, i, a) {
      if (!this.hasPrecedingLineBreak() && this.match(35)) {
        this.state.canStartJSXElement = !1, this.next();
        let l = this.startNodeAt(n);
        return l.expression = r, this.finishNode(l, "TSNonNullExpression");
      }
      let o = !1;
      if (this.match(18) && this.lookaheadCharCode() === 60) {
        if (i)
          return a.stop = !0, r;
        a.optionalChainMember = o = !0, this.next();
      }
      if (this.match(47) || this.match(51)) {
        let l, u = this.tsTryParseAndCatch(() => {
          if (!i && this.atPossibleAsyncArrow(r)) {
            let h = this.tsTryParseGenericAsyncArrowFunction(n);
            if (h)
              return h;
          }
          let c = this.tsParseTypeArgumentsInExpression();
          if (!c) return;
          if (o && !this.match(10)) {
            l = this.state.curPosition();
            return;
          }
          if (Vl(this.state.type)) {
            let h = super.parseTaggedTemplateExpression(r, n, a);
            return h.typeParameters = c, h;
          }
          if (!i && this.eat(10)) {
            let h = this.startNodeAt(n);
            return h.callee = r, h.arguments = this.parseCallExpressionArguments(11, !1), this.tsCheckForInvalidTypeCasts(h.arguments), h.typeParameters =
            c, a.optionalChainMember && (h.optional = o), this.finishCallExpression(h, a.optionalChainMember);
          }
          let f = this.state.type;
          if (f === 48 || f === 52 || f !== 10 && lh(f) && !this.hasPrecedingLineBreak())
            return;
          let p = this.startNodeAt(n);
          return p.expression = r, p.typeParameters = c, this.finishNode(p, "TSInstantiationExpression");
        });
        if (l && this.unexpected(l, 10), u)
          return u.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40) && this.raise(
          he.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc), u;
      }
      return super.parseSubscript(r, n, i, a);
    }
    parseNewCallee(r) {
      var n;
      super.parseNewCallee(r);
      let {
        callee: i
      } = r;
      i.type === "TSInstantiationExpression" && !((n = i.extra) != null && n.parenthesized) && (r.typeParameters = i.typeParameters, r.callee =
      i.expression);
    }
    parseExprOp(r, n, i) {
      let a;
      if (Rl(58) > i && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (a = this.isContextual(120)))) {
        let o = this.startNodeAt(n);
        return o.expression = r, o.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? (a && this.raise(_.UnexpectedKeyword,
        this.state.startLoc, {
          keyword: "const"
        }), this.tsParseTypeReference()) : this.tsParseType())), this.finishNode(o, a ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(),
        this.parseExprOp(o, n, i);
      }
      return super.parseExprOp(r, n, i);
    }
    checkReservedWord(r, n, i, a) {
      this.state.isAmbientContext || super.checkReservedWord(r, n, i, a);
    }
    checkImportReflection(r) {
      super.checkImportReflection(r), r.module && r.importKind !== "value" && this.raise(he.ImportReflectionHasImportType, r.specifiers[0].loc.
      start);
    }
    checkDuplicateExports() {
    }
    isPotentialImportPhase(r) {
      if (super.isPotentialImportPhase(r)) return !0;
      if (this.isContextual(130)) {
        let n = this.lookaheadCharCode();
        return r ? n === 123 || n === 42 : n !== 61;
      }
      return !r && this.isContextual(87);
    }
    applyImportPhase(r, n, i, a) {
      super.applyImportPhase(r, n, i, a), n ? r.exportKind = i === "type" ? "type" : "value" : r.importKind = i === "type" || i === "typeof" ?
      i : "value";
    }
    parseImport(r) {
      if (this.match(133))
        return r.importKind = "value", super.parseImport(r);
      let n;
      if (et(this.state.type) && this.lookaheadCharCode() === 61)
        return r.importKind = "value", this.tsParseImportEqualsDeclaration(r);
      if (this.isContextual(130)) {
        let i = this.parseMaybeImportPhase(r, !1);
        if (this.lookaheadCharCode() === 61)
          return this.tsParseImportEqualsDeclaration(r, i);
        n = super.parseImportSpecifiersAndAfter(r, i);
      } else
        n = super.parseImport(r);
      return n.importKind === "type" && n.specifiers.length > 1 && n.specifiers[0].type === "ImportDefaultSpecifier" && this.raise(he.TypeImportCannotSpecifyDefaultAndNamed,
      n), n;
    }
    parseExport(r, n) {
      if (this.match(83)) {
        this.next();
        let i = r, a = null;
        return this.isContextual(130) && this.isPotentialImportPhase(!1) ? a = this.parseMaybeImportPhase(i, !1) : i.importKind = "value", this.
        tsParseImportEqualsDeclaration(i, a, !0);
      } else if (this.eat(29)) {
        let i = r;
        return i.expression = super.parseExpression(), this.semicolon(), this.sawUnambiguousESM = !0, this.finishNode(i, "TSExportAssignment");
      } else if (this.eatContextual(93)) {
        let i = r;
        return this.expectContextual(128), i.id = this.parseIdentifier(), this.semicolon(), this.finishNode(i, "TSNamespaceExportDeclaration");
      } else
        return super.parseExport(r, n);
    }
    isAbstractClass() {
      return this.isContextual(124) && this.lookahead().type === 80;
    }
    parseExportDefaultExpression() {
      if (this.isAbstractClass()) {
        let r = this.startNode();
        return this.next(), r.abstract = !0, this.parseClass(r, !0, !0);
      }
      if (this.match(129)) {
        let r = this.tsParseInterfaceDeclaration(this.startNode());
        if (r) return r;
      }
      return super.parseExportDefaultExpression();
    }
    parseVarStatement(r, n, i = !1) {
      let {
        isAmbientContext: a
      } = this.state, o = super.parseVarStatement(r, n, i || a);
      if (!a) return o;
      for (let {
        id: l,
        init: u
      } of o.declarations)
        u && (n !== "const" || l.typeAnnotation ? this.raise(he.InitializerNotAllowedInAmbientContext, u) : kG(u, this.hasPlugin("estree")) ||
        this.raise(he.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, u));
      return o;
    }
    parseStatementContent(r, n) {
      if (this.match(75) && this.isLookaheadContextual("enum")) {
        let i = this.startNode();
        return this.expect(75), this.tsParseEnumDeclaration(i, {
          const: !0
        });
      }
      if (this.isContextual(126))
        return this.tsParseEnumDeclaration(this.startNode());
      if (this.isContextual(129)) {
        let i = this.tsParseInterfaceDeclaration(this.startNode());
        if (i) return i;
      }
      return super.parseStatementContent(r, n);
    }
    parseAccessModifier() {
      return this.tsParseModifier(["public", "protected", "private"]);
    }
    tsHasSomeModifiers(r, n) {
      return n.some((i) => Zv(i) ? r.accessibility === i : !!r[i]);
    }
    tsIsStartOfStaticBlocks() {
      return this.isContextual(106) && this.lookaheadCharCode() === 123;
    }
    parseClassMember(r, n, i) {
      let a = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
      this.tsParseModifiers({
        allowedModifiers: a,
        disallowedModifiers: ["in", "out"],
        stopOnStartOfClassStaticBlock: !0,
        errorTemplate: he.InvalidModifierOnTypeParameterPositions
      }, n);
      let o = /* @__PURE__ */ s(() => {
        this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(n, a) && this.raise(he.StaticBlockCannotHaveModifier,
        this.state.curPosition()), super.parseClassStaticBlock(r, n)) : this.parseClassMemberWithIsStatic(r, n, i, !!n.static);
      }, "callParseClassMemberWithIsStatic");
      n.declare ? this.tsInAmbientContext(o) : o();
    }
    parseClassMemberWithIsStatic(r, n, i, a) {
      let o = this.tsTryParseIndexSignature(n);
      if (o) {
        r.body.push(o), n.abstract && this.raise(he.IndexSignatureHasAbstract, n), n.accessibility && this.raise(he.IndexSignatureHasAccessibility,
        n, {
          modifier: n.accessibility
        }), n.declare && this.raise(he.IndexSignatureHasDeclare, n), n.override && this.raise(he.IndexSignatureHasOverride, n);
        return;
      }
      !this.state.inAbstractClass && n.abstract && this.raise(he.NonAbstractClassHasAbstractMethod, n), n.override && (i.hadSuperClass || this.
      raise(he.OverrideNotInSubClass, n)), super.parseClassMemberWithIsStatic(r, n, i, a);
    }
    parsePostMemberNameModifiers(r) {
      this.eat(17) && (r.optional = !0), r.readonly && this.match(10) && this.raise(he.ClassMethodHasReadonly, r), r.declare && this.match(10) &&
      this.raise(he.ClassMethodHasDeclare, r);
    }
    parseExpressionStatement(r, n, i) {
      return (n.type === "Identifier" ? this.tsParseExpressionStatement(r, n, i) : void 0) || super.parseExpressionStatement(r, n, i);
    }
    shouldParseExportDeclaration() {
      return this.tsIsDeclarationStart() ? !0 : super.shouldParseExportDeclaration();
    }
    parseConditional(r, n, i) {
      if (!this.state.maybeInArrowParameters || !this.match(17))
        return super.parseConditional(r, n, i);
      let a = this.tryParse(() => super.parseConditional(r, n));
      return a.node ? (a.error && (this.state = a.failState), a.node) : (a.error && super.setOptionalParametersError(i, a.error), r);
    }
    parseParenItem(r, n) {
      let i = super.parseParenItem(r, n);
      if (this.eat(17) && (i.optional = !0, this.resetEndLocation(r)), this.match(14)) {
        let a = this.startNodeAt(n);
        return a.expression = r, a.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(a, "TSTypeCastExpression");
      }
      return r;
    }
    parseExportDeclaration(r) {
      if (!this.state.isAmbientContext && this.isContextual(125))
        return this.tsInAmbientContext(() => this.parseExportDeclaration(r));
      let n = this.state.startLoc, i = this.eatContextual(125);
      if (i && (this.isContextual(125) || !this.shouldParseExportDeclaration()))
        throw this.raise(he.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
      let o = et(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(r);
      return o ? ((o.type === "TSInterfaceDeclaration" || o.type === "TSTypeAliasDeclaration" || i) && (r.exportKind = "type"), i && (this.resetStartLocation(
      o, n), o.declare = !0), o) : null;
    }
    parseClassId(r, n, i, a) {
      if ((!n || i) && this.isContextual(113))
        return;
      super.parseClassId(r, n, i, r.declare ? 1024 : 8331);
      let o = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
      o && (r.typeParameters = o);
    }
    parseClassPropertyAnnotation(r) {
      r.optional || (this.eat(35) ? r.definite = !0 : this.eat(17) && (r.optional = !0));
      let n = this.tsTryParseTypeAnnotation();
      n && (r.typeAnnotation = n);
    }
    parseClassProperty(r) {
      if (this.parseClassPropertyAnnotation(r), this.state.isAmbientContext && !(r.readonly && !r.typeAnnotation) && this.match(29) && this.
      raise(he.DeclareClassFieldHasInitializer, this.state.startLoc), r.abstract && this.match(29)) {
        let {
          key: n
        } = r;
        this.raise(he.AbstractPropertyHasInitializer, this.state.startLoc, {
          propertyName: n.type === "Identifier" && !r.computed ? n.name : `[${this.input.slice(n.start, n.end)}]`
        });
      }
      return super.parseClassProperty(r);
    }
    parseClassPrivateProperty(r) {
      return r.abstract && this.raise(he.PrivateElementHasAbstract, r), r.accessibility && this.raise(he.PrivateElementHasAccessibility, r, {
        modifier: r.accessibility
      }), this.parseClassPropertyAnnotation(r), super.parseClassPrivateProperty(r);
    }
    parseClassAccessorProperty(r) {
      return this.parseClassPropertyAnnotation(r), r.optional && this.raise(he.AccessorCannotBeOptional, r), super.parseClassAccessorProperty(
      r);
    }
    pushClassMethod(r, n, i, a, o, l) {
      let u = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      u && o && this.raise(he.ConstructorHasTypeParameters, u);
      let {
        declare: c = !1,
        kind: f
      } = n;
      c && (f === "get" || f === "set") && this.raise(he.DeclareAccessor, n, {
        kind: f
      }), u && (n.typeParameters = u), super.pushClassMethod(r, n, i, a, o, l);
    }
    pushClassPrivateMethod(r, n, i, a) {
      let o = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      o && (n.typeParameters = o), super.pushClassPrivateMethod(r, n, i, a);
    }
    declareClassPrivateMethodInScope(r, n) {
      r.type !== "TSDeclareMethod" && (r.type === "MethodDefinition" && !hasOwnProperty.call(r.value, "body") || super.declareClassPrivateMethodInScope(
      r, n));
    }
    parseClassSuper(r) {
      super.parseClassSuper(r), r.superClass && (this.match(47) || this.match(51)) && (r.superTypeParameters = this.tsParseTypeArgumentsInExpression()),
      this.eatContextual(113) && (r.implements = this.tsParseHeritageClause("implements"));
    }
    parseObjPropValue(r, n, i, a, o, l, u) {
      let c = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      return c && (r.typeParameters = c), super.parseObjPropValue(r, n, i, a, o, l, u);
    }
    parseFunctionParams(r, n) {
      let i = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      i && (r.typeParameters = i), super.parseFunctionParams(r, n);
    }
    parseVarId(r, n) {
      super.parseVarId(r, n), r.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35) && (r.definite = !0);
      let i = this.tsTryParseTypeAnnotation();
      i && (r.id.typeAnnotation = i, this.resetEndLocation(r.id));
    }
    parseAsyncArrowFromCallExpression(r, n) {
      return this.match(14) && (r.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(r, n);
    }
    parseMaybeAssign(r, n) {
      var i, a, o, l, u;
      let c, f, p;
      if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
        if (c = this.state.clone(), f = this.tryParse(() => super.parseMaybeAssign(r, n), c), !f.error) return f.node;
        let {
          context: v
        } = this.state, d = v[v.length - 1];
        (d === it.j_oTag || d === it.j_expr) && v.pop();
      }
      if (!((i = f) != null && i.error) && !this.match(47))
        return super.parseMaybeAssign(r, n);
      (!c || c === this.state) && (c = this.state.clone());
      let h, y = this.tryParse((v) => {
        var d, b;
        h = this.tsParseTypeParameters(this.tsParseConstModifier);
        let E = super.parseMaybeAssign(r, n);
        return (E.type !== "ArrowFunctionExpression" || (d = E.extra) != null && d.parenthesized) && v(), ((b = h) == null ? void 0 : b.params.
        length) !== 0 && this.resetStartLocationFromNode(E, h), E.typeParameters = h, E;
      }, c);
      if (!y.error && !y.aborted)
        return h && this.reportReservedArrowTypeParam(h), y.node;
      if (!f && (Qv(!this.hasPlugin("jsx")), p = this.tryParse(() => super.parseMaybeAssign(r, n), c), !p.error))
        return p.node;
      if ((a = f) != null && a.node)
        return this.state = f.failState, f.node;
      if (y.node)
        return this.state = y.failState, h && this.reportReservedArrowTypeParam(h), y.node;
      if ((o = p) != null && o.node)
        return this.state = p.failState, p.node;
      throw ((l = f) == null ? void 0 : l.error) || y.error || ((u = p) == null ? void 0 : u.error);
    }
    reportReservedArrowTypeParam(r) {
      var n;
      r.params.length === 1 && !r.params[0].constraint && !((n = r.extra) != null && n.trailingComma) && this.getPluginOption("typescript", "\
disallowAmbiguousJSXLike") && this.raise(he.ReservedArrowTypeParam, r);
    }
    parseMaybeUnary(r, n) {
      return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(r, n);
    }
    parseArrow(r) {
      if (this.match(14)) {
        let n = this.tryParse((i) => {
          let a = this.tsParseTypeOrTypePredicateAnnotation(14);
          return (this.canInsertSemicolon() || !this.match(19)) && i(), a;
        });
        if (n.aborted) return;
        n.thrown || (n.error && (this.state = n.failState), r.returnType = n.node);
      }
      return super.parseArrow(r);
    }
    parseAssignableListItemTypes(r, n) {
      if (!(n & 2)) return r;
      this.eat(17) && (r.optional = !0);
      let i = this.tsTryParseTypeAnnotation();
      return i && (r.typeAnnotation = i), this.resetEndLocation(r), r;
    }
    isAssignable(r, n) {
      switch (r.type) {
        case "TSTypeCastExpression":
          return this.isAssignable(r.expression, n);
        case "TSParameterProperty":
          return !0;
        default:
          return super.isAssignable(r, n);
      }
    }
    toAssignable(r, n = !1) {
      switch (r.type) {
        case "ParenthesizedExpression":
          this.toAssignableParenthesizedExpression(r, n);
          break;
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSNonNullExpression":
        case "TSTypeAssertion":
          n ? this.expressionScope.recordArrowParameterBindingError(he.UnexpectedTypeCastInParameter, r) : this.raise(he.UnexpectedTypeCastInParameter,
          r), this.toAssignable(r.expression, n);
          break;
        case "AssignmentExpression":
          !n && r.left.type === "TSTypeCastExpression" && (r.left = this.typeCastToParameter(r.left));
        default:
          super.toAssignable(r, n);
      }
    }
    toAssignableParenthesizedExpression(r, n) {
      switch (r.expression.type) {
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSNonNullExpression":
        case "TSTypeAssertion":
        case "ParenthesizedExpression":
          this.toAssignable(r.expression, n);
          break;
        default:
          super.toAssignable(r, n);
      }
    }
    checkToRestConversion(r, n) {
      switch (r.type) {
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
        case "TSNonNullExpression":
          this.checkToRestConversion(r.expression, !1);
          break;
        default:
          super.checkToRestConversion(r, n);
      }
    }
    isValidLVal(r, n, i) {
      switch (r) {
        case "TSTypeCastExpression":
          return !0;
        case "TSParameterProperty":
          return "parameter";
        case "TSNonNullExpression":
        case "TSInstantiationExpression":
          return "expression";
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
          return (i !== 64 || !n) && ["expression", !0];
        default:
          return super.isValidLVal(r, n, i);
      }
    }
    parseBindingAtom() {
      return this.state.type === 78 ? this.parseIdentifier(!0) : super.parseBindingAtom();
    }
    parseMaybeDecoratorArguments(r) {
      if (this.match(47) || this.match(51)) {
        let n = this.tsParseTypeArgumentsInExpression();
        if (this.match(10)) {
          let i = super.parseMaybeDecoratorArguments(r);
          return i.typeParameters = n, i;
        }
        this.unexpected(null, 10);
      }
      return super.parseMaybeDecoratorArguments(r);
    }
    checkCommaAfterRest(r) {
      return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === r ? (this.next(), !1) : super.checkCommaAfterRest(
      r);
    }
    isClassMethod() {
      return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
      return this.match(35) || this.match(14) || super.isClassProperty();
    }
    parseMaybeDefault(r, n) {
      let i = super.parseMaybeDefault(r, n);
      return i.type === "AssignmentPattern" && i.typeAnnotation && i.right.start < i.typeAnnotation.start && this.raise(he.TypeAnnotationAfterAssign,
      i.typeAnnotation), i;
    }
    getTokenFromCode(r) {
      if (this.state.inType) {
        if (r === 62) {
          this.finishOp(48, 1);
          return;
        }
        if (r === 60) {
          this.finishOp(47, 1);
          return;
        }
      }
      super.getTokenFromCode(r);
    }
    reScan_lt_gt() {
      let {
        type: r
      } = this.state;
      r === 47 ? (this.state.pos -= 1, this.readToken_lt()) : r === 48 && (this.state.pos -= 1, this.readToken_gt());
    }
    reScan_lt() {
      let {
        type: r
      } = this.state;
      return r === 51 ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : r;
    }
    toAssignableList(r, n, i) {
      for (let a = 0; a < r.length; a++) {
        let o = r[a];
        o?.type === "TSTypeCastExpression" && (r[a] = this.typeCastToParameter(o));
      }
      super.toAssignableList(r, n, i);
    }
    typeCastToParameter(r) {
      return r.expression.typeAnnotation = r.typeAnnotation, this.resetEndLocation(r.expression, r.typeAnnotation.loc.end), r.expression;
    }
    shouldParseArrow(r) {
      return this.match(14) ? r.every((n) => this.isAssignable(n, !0)) : super.shouldParseArrow(r);
    }
    shouldParseAsyncArrow() {
      return this.match(14) || super.shouldParseAsyncArrow();
    }
    canHaveLeadingDecorator() {
      return super.canHaveLeadingDecorator() || this.isAbstractClass();
    }
    jsxParseOpeningElementAfterName(r) {
      if (this.match(47) || this.match(51)) {
        let n = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
        n && (r.typeParameters = n);
      }
      return super.jsxParseOpeningElementAfterName(r);
    }
    getGetterSetterExpectedParamCount(r) {
      let n = super.getGetterSetterExpectedParamCount(r), a = this.getObjectOrClassMethodParams(r)[0];
      return a && this.isThisParam(a) ? n + 1 : n;
    }
    parseCatchClauseParam() {
      let r = super.parseCatchClauseParam(), n = this.tsTryParseTypeAnnotation();
      return n && (r.typeAnnotation = n, this.resetEndLocation(r)), r;
    }
    tsInAmbientContext(r) {
      let {
        isAmbientContext: n,
        strict: i
      } = this.state;
      this.state.isAmbientContext = !0, this.state.strict = !1;
      try {
        return r();
      } finally {
        this.state.isAmbientContext = n, this.state.strict = i;
      }
    }
    parseClass(r, n, i) {
      let a = this.state.inAbstractClass;
      this.state.inAbstractClass = !!r.abstract;
      try {
        return super.parseClass(r, n, i);
      } finally {
        this.state.inAbstractClass = a;
      }
    }
    tsParseAbstractDeclaration(r, n) {
      if (this.match(80))
        return r.abstract = !0, this.maybeTakeDecorators(n, this.parseClass(r, !0, !1));
      if (this.isContextual(129)) {
        if (!this.hasFollowingLineBreak())
          return r.abstract = !0, this.raise(he.NonClassMethodPropertyHasAbstractModifer, r), this.tsParseInterfaceDeclaration(r);
      } else
        this.unexpected(null, 80);
    }
    parseMethod(r, n, i, a, o, l, u) {
      let c = super.parseMethod(r, n, i, a, o, l, u);
      if (c.abstract && (this.hasPlugin("estree") ? !!c.value.body : !!c.body)) {
        let {
          key: p
        } = c;
        this.raise(he.AbstractMethodHasImplementation, c, {
          methodName: p.type === "Identifier" && !c.computed ? p.name : `[${this.input.slice(p.start, p.end)}]`
        });
      }
      return c;
    }
    tsParseTypeParameterName() {
      return this.parseIdentifier().name;
    }
    shouldParseAsAmbientContext() {
      return !!this.getPluginOption("typescript", "dts");
    }
    parse() {
      return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = !0), super.parse();
    }
    getExpression() {
      return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = !0), super.getExpression();
    }
    parseExportSpecifier(r, n, i, a) {
      return !n && a ? (this.parseTypeOnlyImportExportSpecifier(r, !1, i), this.finishNode(r, "ExportSpecifier")) : (r.exportKind = "value",
      super.parseExportSpecifier(r, n, i, a));
    }
    parseImportSpecifier(r, n, i, a, o) {
      return !n && a ? (this.parseTypeOnlyImportExportSpecifier(r, !0, i), this.finishNode(r, "ImportSpecifier")) : (r.importKind = "value",
      super.parseImportSpecifier(r, n, i, a, i ? 4098 : 4096));
    }
    parseTypeOnlyImportExportSpecifier(r, n, i) {
      let a = n ? "imported" : "local", o = n ? "local" : "exported", l = r[a], u, c = !1, f = !0, p = l.loc.start;
      if (this.isContextual(93)) {
        let y = this.parseIdentifier();
        if (this.isContextual(93)) {
          let v = this.parseIdentifier();
          $r(this.state.type) ? (c = !0, l = y, u = n ? this.parseIdentifier() : this.parseModuleExportName(), f = !1) : (u = v, f = !1);
        } else $r(this.state.type) ? (f = !1, u = n ? this.parseIdentifier() : this.parseModuleExportName()) : (c = !0, l = y);
      } else $r(this.state.type) && (c = !0, n ? (l = this.parseIdentifier(!0), this.isContextual(93) || this.checkReservedWord(l.name, l.loc.
      start, !0, !0)) : l = this.parseModuleExportName());
      c && i && this.raise(n ? he.TypeModifierIsUsedInTypeImports : he.TypeModifierIsUsedInTypeExports, p), r[a] = l, r[o] = u;
      let h = n ? "importKind" : "exportKind";
      r[h] = c ? "type" : "value", f && this.eatContextual(93) && (r[o] = n ? this.parseIdentifier() : this.parseModuleExportName()), r[o] ||
      (r[o] = In(r[a])), n && this.checkIdentifier(r[o], c ? 4098 : 4096);
    }
  }, "typescript");
  function BG(e) {
    if (e.type !== "MemberExpression") return !1;
    let {
      computed: t,
      property: r
    } = e;
    return t && r.type !== "StringLiteral" && (r.type !== "TemplateLiteral" || r.expressions.length > 0) ? !1 : gT(e.object);
  }
  s(BG, "isPossiblyLiteralEnum");
  function kG(e, t) {
    var r;
    let {
      type: n
    } = e;
    if ((r = e.extra) != null && r.parenthesized)
      return !1;
    if (t) {
      if (n === "Literal") {
        let {
          value: i
        } = e;
        if (typeof i == "string" || typeof i == "boolean")
          return !0;
      }
    } else if (n === "StringLiteral" || n === "BooleanLiteral")
      return !0;
    return !!(yT(e, t) || FG(e, t) || n === "TemplateLiteral" && e.expressions.length === 0 || BG(e));
  }
  s(kG, "isValidAmbientConstInitializer");
  function yT(e, t) {
    return t ? e.type === "Literal" && (typeof e.value == "number" || "bigint" in e) : e.type === "NumericLiteral" || e.type === "BigIntLite\
ral";
  }
  s(yT, "isNumber");
  function FG(e, t) {
    if (e.type === "UnaryExpression") {
      let {
        operator: r,
        argument: n
      } = e;
      if (r === "-" && yT(n, t))
        return !0;
    }
    return !1;
  }
  s(FG, "isNegativeNumber");
  function gT(e) {
    return e.type === "Identifier" ? !0 : e.type !== "MemberExpression" || e.computed ? !1 : gT(e.object);
  }
  s(gT, "isUncomputedMemberExpressionChain");
  var eT = Dn`placeholders`({
    ClassNameIsRequired: "A class name is required.",
    UnexpectedSpace: "Unexpected space in placeholder."
  }), jG = /* @__PURE__ */ s((e) => class extends e {
    static {
      s(this, "PlaceholdersParserMixin");
    }
    parsePlaceholder(r) {
      if (this.match(144)) {
        let n = this.startNode();
        return this.next(), this.assertNoSpace(), n.name = super.parseIdentifier(!0), this.assertNoSpace(), this.expect(144), this.finishPlaceholder(
        n, r);
      }
    }
    finishPlaceholder(r, n) {
      let i = r;
      return (!i.expectedNode || !i.type) && (i = this.finishNode(i, "Placeholder")), i.expectedNode = n, i;
    }
    getTokenFromCode(r) {
      r === 37 && this.input.charCodeAt(this.state.pos + 1) === 37 ? this.finishOp(144, 2) : super.getTokenFromCode(r);
    }
    parseExprAtom(r) {
      return this.parsePlaceholder("Expression") || super.parseExprAtom(r);
    }
    parseIdentifier(r) {
      return this.parsePlaceholder("Identifier") || super.parseIdentifier(r);
    }
    checkReservedWord(r, n, i, a) {
      r !== void 0 && super.checkReservedWord(r, n, i, a);
    }
    parseBindingAtom() {
      return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
    }
    isValidLVal(r, n, i) {
      return r === "Placeholder" || super.isValidLVal(r, n, i);
    }
    toAssignable(r, n) {
      r && r.type === "Placeholder" && r.expectedNode === "Expression" ? r.expectedNode = "Pattern" : super.toAssignable(r, n);
    }
    chStartsBindingIdentifier(r, n) {
      return !!(super.chStartsBindingIdentifier(r, n) || this.lookahead().type === 144);
    }
    verifyBreakContinue(r, n) {
      r.label && r.label.type === "Placeholder" || super.verifyBreakContinue(r, n);
    }
    parseExpressionStatement(r, n) {
      var i;
      if (n.type !== "Placeholder" || (i = n.extra) != null && i.parenthesized)
        return super.parseExpressionStatement(r, n);
      if (this.match(14)) {
        let o = r;
        return o.label = this.finishPlaceholder(n, "Identifier"), this.next(), o.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration(),
        this.finishNode(o, "LabeledStatement");
      }
      this.semicolon();
      let a = r;
      return a.name = n.name, this.finishPlaceholder(a, "Statement");
    }
    parseBlock(r, n, i) {
      return this.parsePlaceholder("BlockStatement") || super.parseBlock(r, n, i);
    }
    parseFunctionId(r) {
      return this.parsePlaceholder("Identifier") || super.parseFunctionId(r);
    }
    parseClass(r, n, i) {
      let a = n ? "ClassDeclaration" : "ClassExpression";
      this.next();
      let o = this.state.strict, l = this.parsePlaceholder("Identifier");
      if (l)
        if (this.match(81) || this.match(144) || this.match(5))
          r.id = l;
        else {
          if (i || !n)
            return r.id = null, r.body = this.finishPlaceholder(l, "ClassBody"), this.finishNode(r, a);
          throw this.raise(eT.ClassNameIsRequired, this.state.startLoc);
        }
      else
        this.parseClassId(r, n, i);
      return super.parseClassSuper(r), r.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!r.superClass, o), this.finishNode(
      r, a);
    }
    parseExport(r, n) {
      let i = this.parsePlaceholder("Identifier");
      if (!i) return super.parseExport(r, n);
      let a = r;
      if (!this.isContextual(98) && !this.match(12))
        return a.specifiers = [], a.source = null, a.declaration = this.finishPlaceholder(i, "Declaration"), this.finishNode(a, "ExportNamed\
Declaration");
      this.expectPlugin("exportDefaultFrom");
      let o = this.startNode();
      return o.exported = i, a.specifiers = [this.finishNode(o, "ExportDefaultSpecifier")], super.parseExport(a, n);
    }
    isExportDefaultSpecifier() {
      if (this.match(65)) {
        let r = this.nextTokenStart();
        if (this.isUnparsedContextual(r, "from") && this.input.startsWith(rs(144), this.nextTokenStartSince(r + 4)))
          return !0;
      }
      return super.isExportDefaultSpecifier();
    }
    maybeParseExportDefaultSpecifier(r, n) {
      var i;
      return (i = r.specifiers) != null && i.length ? !0 : super.maybeParseExportDefaultSpecifier(r, n);
    }
    checkExport(r) {
      let {
        specifiers: n
      } = r;
      n != null && n.length && (r.specifiers = n.filter((i) => i.exported.type === "Placeholder")), super.checkExport(r), r.specifiers = n;
    }
    parseImport(r) {
      let n = this.parsePlaceholder("Identifier");
      if (!n) return super.parseImport(r);
      if (r.specifiers = [], !this.isContextual(98) && !this.match(12))
        return r.source = this.finishPlaceholder(n, "StringLiteral"), this.semicolon(), this.finishNode(r, "ImportDeclaration");
      let i = this.startNodeAtNode(n);
      return i.local = n, r.specifiers.push(this.finishNode(i, "ImportDefaultSpecifier")), this.eat(12) && (this.maybeParseStarImportSpecifier(
      r) || this.parseNamedImportSpecifiers(r)), this.expectContextual(98), r.source = this.parseImportSource(), this.semicolon(), this.finishNode(
      r, "ImportDeclaration");
    }
    parseImportSource() {
      return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
    }
    assertNoSpace() {
      this.state.start > this.state.lastTokEndLoc.index && this.raise(eT.UnexpectedSpace, this.state.lastTokEndLoc);
    }
  }, "placeholders"), LG = /* @__PURE__ */ s((e) => class extends e {
    static {
      s(this, "V8IntrinsicMixin");
    }
    parseV8Intrinsic() {
      if (this.match(54)) {
        let r = this.state.startLoc, n = this.startNode();
        if (this.next(), et(this.state.type)) {
          let i = this.parseIdentifierName(), a = this.createIdentifier(n, i);
          if (a.type = "V8IntrinsicIdentifier", this.match(10))
            return a;
        }
        this.unexpected(r);
      }
    }
    parseExprAtom(r) {
      return this.parseV8Intrinsic() || super.parseExprAtom(r);
    }
  }, "v8intrinsic"), tT = ["minimal", "fsharp", "hack", "smart"], rT = ["^^", "@@", "^", "%", "#"];
  function MG(e) {
    if (e.has("decorators")) {
      if (e.has("decorators-legacy"))
        throw new Error("Cannot use the decorators and decorators-legacy plugin together");
      let r = e.get("decorators").decoratorsBeforeExport;
      if (r != null && typeof r != "boolean")
        throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
      let n = e.get("decorators").allowCallParenthesized;
      if (n != null && typeof n != "boolean")
        throw new Error("'allowCallParenthesized' must be a boolean.");
    }
    if (e.has("flow") && e.has("typescript"))
      throw new Error("Cannot combine flow and typescript plugins.");
    if (e.has("placeholders") && e.has("v8intrinsic"))
      throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
    if (e.has("pipelineOperator")) {
      var t;
      let r = e.get("pipelineOperator").proposal;
      if (!tT.includes(r)) {
        let i = tT.map((a) => `"${a}"`).join(", ");
        throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${i}.`);
      }
      let n = ((t = e.get("recordAndTuple")) == null ? void 0 : t.syntaxType) === "hash";
      if (r === "hack") {
        if (e.has("placeholders"))
          throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
        if (e.has("v8intrinsic"))
          throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
        let i = e.get("pipelineOperator").topicToken;
        if (!rT.includes(i)) {
          let a = rT.map((o) => `"${o}"`).join(", ");
          throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${a}\
.`);
        }
        if (i === "#" && n)
          throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["\
recordAndTuple", e.get("recordAndTuple")])}\`.`);
      } else if (r === "smart" && n)
        throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple", e.
        get("recordAndTuple")])}\`.`);
    }
    if (e.has("moduleAttributes")) {
      if (e.has("importAttributes") || e.has("importAssertions"))
        throw new Error("Cannot combine importAssertions, importAttributes and moduleAttributes plugins.");
      if (e.get("moduleAttributes").version !== "may-2020")
        throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the on\
ly supported value is 'may-2020'.");
    }
    if (e.has("importAttributes") && e.has("importAssertions"))
      throw new Error("Cannot combine importAssertions and importAttributes plugins.");
    if (e.has("recordAndTuple")) {
      let r = e.get("recordAndTuple").syntaxType;
      if (r != null) {
        let n = ["hash", "bar"];
        if (!n.includes(r))
          throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + n.map((i) => `'${i}'`).join(", "));
      }
    }
    if (e.has("asyncDoExpressions") && !e.has("doExpressions")) {
      let r = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
      throw r.missingPlugins = "doExpressions", r;
    }
    if (e.has("optionalChainingAssign") && e.get("optionalChainingAssign").version !== "2023-07")
      throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, th\
e only supported value is '2023-07'.");
  }
  s(MG, "validatePlugins");
  var bT = {
    estree: qK,
    jsx: DG,
    flow: CG,
    typescript: NG,
    v8intrinsic: LG,
    placeholders: jG
  }, RG = Object.keys(bT), ih = {
    sourceType: "script",
    sourceFilename: void 0,
    startColumn: 0,
    startLine: 1,
    allowAwaitOutsideFunction: !1,
    allowReturnOutsideFunction: !1,
    allowNewTargetOutsideFunction: !1,
    allowImportExportEverywhere: !1,
    allowSuperOutsideMethod: !1,
    allowUndeclaredExports: !1,
    plugins: [],
    strictMode: null,
    ranges: !1,
    tokens: !1,
    createImportExpressions: !1,
    createParenthesizedExpressions: !1,
    errorRecovery: !1,
    attachComment: !0,
    annexB: !0
  };
  function qG(e) {
    if (e == null)
      return Object.assign({}, ih);
    if (e.annexB != null && e.annexB !== !1)
      throw new Error("The `annexB` option can only be set to `false`.");
    let t = {};
    for (let n of Object.keys(ih)) {
      var r;
      t[n] = (r = e[n]) != null ? r : ih[n];
    }
    return t;
  }
  s(qG, "getOptions");
  var Ch = class extends Ah {
    static {
      s(this, "ExpressionParser");
    }
    checkProto(t, r, n, i) {
      if (t.type === "SpreadElement" || this.isObjectMethod(t) || t.computed || t.shorthand)
        return;
      let a = t.key;
      if ((a.type === "Identifier" ? a.name : a.value) === "__proto__") {
        if (r) {
          this.raise(_.RecordNoProto, a);
          return;
        }
        n.used && (i ? i.doubleProtoLoc === null && (i.doubleProtoLoc = a.loc.start) : this.raise(_.DuplicateProto, a)), n.used = !0;
      }
    }
    shouldExitDescending(t, r) {
      return t.type === "ArrowFunctionExpression" && t.start === r;
    }
    getExpression() {
      this.enterInitialScopes(), this.nextToken();
      let t = this.parseExpression();
      return this.match(139) || this.unexpected(), this.finalizeRemainingComments(), t.comments = this.comments, t.errors = this.state.errors,
      this.options.tokens && (t.tokens = this.tokens), t;
    }
    parseExpression(t, r) {
      return t ? this.disallowInAnd(() => this.parseExpressionBase(r)) : this.allowInAnd(() => this.parseExpressionBase(r));
    }
    parseExpressionBase(t) {
      let r = this.state.startLoc, n = this.parseMaybeAssign(t);
      if (this.match(12)) {
        let i = this.startNodeAt(r);
        for (i.expressions = [n]; this.eat(12); )
          i.expressions.push(this.parseMaybeAssign(t));
        return this.toReferencedList(i.expressions), this.finishNode(i, "SequenceExpression");
      }
      return n;
    }
    parseMaybeAssignDisallowIn(t, r) {
      return this.disallowInAnd(() => this.parseMaybeAssign(t, r));
    }
    parseMaybeAssignAllowIn(t, r) {
      return this.allowInAnd(() => this.parseMaybeAssign(t, r));
    }
    setOptionalParametersError(t, r) {
      var n;
      t.optionalParametersLoc = (n = r?.loc) != null ? n : this.state.startLoc;
    }
    parseMaybeAssign(t, r) {
      let n = this.state.startLoc;
      if (this.isContextual(108) && this.prodParam.hasYield) {
        let l = this.parseYield();
        return r && (l = r.call(this, l, n)), l;
      }
      let i;
      t ? i = !1 : (t = new Si(), i = !0);
      let {
        type: a
      } = this.state;
      (a === 10 || et(a)) && (this.state.potentialArrowAt = this.state.start);
      let o = this.parseMaybeConditional(t);
      if (r && (o = r.call(this, o, n)), KK(this.state.type)) {
        let l = this.startNodeAt(n), u = this.state.value;
        if (l.operator = u, this.match(29)) {
          this.toAssignable(o, !0), l.left = o;
          let c = n.index;
          t.doubleProtoLoc != null && t.doubleProtoLoc.index >= c && (t.doubleProtoLoc = null), t.shorthandAssignLoc != null && t.shorthandAssignLoc.
          index >= c && (t.shorthandAssignLoc = null), t.privateKeyLoc != null && t.privateKeyLoc.index >= c && (this.checkDestructuringPrivate(
          t), t.privateKeyLoc = null);
        } else
          l.left = o;
        return this.next(), l.right = this.parseMaybeAssign(), this.checkLVal(o, this.finishNode(l, "AssignmentExpression")), l;
      } else i && this.checkExpressionErrors(t, !0);
      return o;
    }
    parseMaybeConditional(t) {
      let r = this.state.startLoc, n = this.state.potentialArrowAt, i = this.parseExprOps(t);
      return this.shouldExitDescending(i, n) ? i : this.parseConditional(i, r, t);
    }
    parseConditional(t, r, n) {
      if (this.eat(17)) {
        let i = this.startNodeAt(r);
        return i.test = t, i.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), i.alternate = this.parseMaybeAssign(), this.finishNode(
        i, "ConditionalExpression");
      }
      return t;
    }
    parseMaybeUnaryOrPrivate(t) {
      return this.match(138) ? this.parsePrivateName() : this.parseMaybeUnary(t);
    }
    parseExprOps(t) {
      let r = this.state.startLoc, n = this.state.potentialArrowAt, i = this.parseMaybeUnaryOrPrivate(t);
      return this.shouldExitDescending(i, n) ? i : this.parseExprOp(i, r, -1);
    }
    parseExprOp(t, r, n) {
      if (this.isPrivateName(t)) {
        let a = this.getPrivateNameSV(t);
        (n >= Rl(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(_.PrivateInExpectedIn, t, {
          identifierName: a
        }), this.classScope.usePrivateName(a, t.loc.start);
      }
      let i = this.state.type;
      if (HK(i) && (this.prodParam.hasIn || !this.match(58))) {
        let a = Rl(i);
        if (a > n) {
          if (i === 39) {
            if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody)
              return t;
            this.checkPipelineAtInfixOperator(t, r);
          }
          let o = this.startNodeAt(r);
          o.left = t, o.operator = this.state.value;
          let l = i === 41 || i === 42, u = i === 40;
          if (u && (a = Rl(42)), this.next(), i === 39 && this.hasPlugin(["pipelineOperator", {
            proposal: "minimal"
          }]) && this.state.type === 96 && this.prodParam.hasAwait)
            throw this.raise(_.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
          o.right = this.parseExprOpRightExpr(i, a);
          let c = this.finishNode(o, l || u ? "LogicalExpression" : "BinaryExpression"), f = this.state.type;
          if (u && (f === 41 || f === 42) || l && f === 40)
            throw this.raise(_.MixingCoalesceWithLogical, this.state.startLoc);
          return this.parseExprOp(c, r, n);
        }
      }
      return t;
    }
    parseExprOpRightExpr(t, r) {
      let n = this.state.startLoc;
      switch (t) {
        case 39:
          switch (this.getPluginOption("pipelineOperator", "proposal")) {
            case "hack":
              return this.withTopicBindingContext(() => this.parseHackPipeBody());
            case "smart":
              return this.withTopicBindingContext(() => {
                if (this.prodParam.hasYield && this.isContextual(108))
                  throw this.raise(_.PipeBodyIsTighter, this.state.startLoc);
                return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(t, r), n);
              });
            case "fsharp":
              return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(r));
          }
        default:
          return this.parseExprOpBaseRightExpr(t, r);
      }
    }
    parseExprOpBaseRightExpr(t, r) {
      let n = this.state.startLoc;
      return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), n, QK(t) ? r - 1 : r);
    }
    parseHackPipeBody() {
      var t;
      let {
        startLoc: r
      } = this.state, n = this.parseMaybeAssign();
      return FK.has(n.type) && !((t = n.extra) != null && t.parenthesized) && this.raise(_.PipeUnparenthesizedBody, r, {
        type: n.type
      }), this.topicReferenceWasUsedInCurrentContext() || this.raise(_.PipeTopicUnused, r), n;
    }
    checkExponentialAfterUnary(t) {
      this.match(57) && this.raise(_.UnexpectedTokenUnaryExponentiation, t.argument);
    }
    parseMaybeUnary(t, r) {
      let n = this.state.startLoc, i = this.isContextual(96);
      if (i && this.recordAwaitIfAllowed()) {
        this.next();
        let u = this.parseAwait(n);
        return r || this.checkExponentialAfterUnary(u), u;
      }
      let a = this.match(34), o = this.startNode();
      if (zK(this.state.type)) {
        o.operator = this.state.value, o.prefix = !0, this.match(72) && this.expectPlugin("throwExpressions");
        let u = this.match(89);
        if (this.next(), o.argument = this.parseMaybeUnary(null, !0), this.checkExpressionErrors(t, !0), this.state.strict && u) {
          let c = o.argument;
          c.type === "Identifier" ? this.raise(_.StrictDelete, o) : this.hasPropertyAsPrivateName(c) && this.raise(_.DeletePrivateField, o);
        }
        if (!a)
          return r || this.checkExponentialAfterUnary(o), this.finishNode(o, "UnaryExpression");
      }
      let l = this.parseUpdate(o, a, t);
      if (i) {
        let {
          type: u
        } = this.state;
        if ((this.hasPlugin("v8intrinsic") ? lh(u) : lh(u) && !this.match(54)) && !this.isAmbiguousAwait())
          return this.raiseOverwrite(_.AwaitNotInAsyncContext, n), this.parseAwait(n);
      }
      return l;
    }
    parseUpdate(t, r, n) {
      if (r) {
        let o = t;
        return this.checkLVal(o.argument, this.finishNode(o, "UpdateExpression")), t;
      }
      let i = this.state.startLoc, a = this.parseExprSubscripts(n);
      if (this.checkExpressionErrors(n, !1)) return a;
      for (; YK(this.state.type) && !this.canInsertSemicolon(); ) {
        let o = this.startNodeAt(i);
        o.operator = this.state.value, o.prefix = !1, o.argument = a, this.next(), this.checkLVal(a, a = this.finishNode(o, "UpdateExpressio\
n"));
      }
      return a;
    }
    parseExprSubscripts(t) {
      let r = this.state.startLoc, n = this.state.potentialArrowAt, i = this.parseExprAtom(t);
      return this.shouldExitDescending(i, n) ? i : this.parseSubscripts(i, r);
    }
    parseSubscripts(t, r, n) {
      let i = {
        optionalChainMember: !1,
        maybeAsyncArrow: this.atPossibleAsyncArrow(t),
        stop: !1
      };
      do
        t = this.parseSubscript(t, r, n, i), i.maybeAsyncArrow = !1;
      while (!i.stop);
      return t;
    }
    parseSubscript(t, r, n, i) {
      let {
        type: a
      } = this.state;
      if (!n && a === 15)
        return this.parseBind(t, r, n, i);
      if (Vl(a))
        return this.parseTaggedTemplateExpression(t, r, i);
      let o = !1;
      if (a === 18) {
        if (n && (this.raise(_.OptionalChainingNoNew, this.state.startLoc), this.lookaheadCharCode() === 40))
          return i.stop = !0, t;
        i.optionalChainMember = o = !0, this.next();
      }
      if (!n && this.match(10))
        return this.parseCoverCallAndAsyncArrowHead(t, r, i, o);
      {
        let l = this.eat(0);
        return l || o || this.eat(16) ? this.parseMember(t, r, i, l, o) : (i.stop = !0, t);
      }
    }
    parseMember(t, r, n, i, a) {
      let o = this.startNodeAt(r);
      return o.object = t, o.computed = i, i ? (o.property = this.parseExpression(), this.expect(3)) : this.match(138) ? (t.type === "Super" &&
      this.raise(_.SuperPrivateField, r), this.classScope.usePrivateName(this.state.value, this.state.startLoc), o.property = this.parsePrivateName()) :
      o.property = this.parseIdentifier(!0), n.optionalChainMember ? (o.optional = a, this.finishNode(o, "OptionalMemberExpression")) : this.
      finishNode(o, "MemberExpression");
    }
    parseBind(t, r, n, i) {
      let a = this.startNodeAt(r);
      return a.object = t, this.next(), a.callee = this.parseNoCallExpr(), i.stop = !0, this.parseSubscripts(this.finishNode(a, "BindExpress\
ion"), r, n);
    }
    parseCoverCallAndAsyncArrowHead(t, r, n, i) {
      let a = this.state.maybeInArrowParameters, o = null;
      this.state.maybeInArrowParameters = !0, this.next();
      let l = this.startNodeAt(r);
      l.callee = t;
      let {
        maybeAsyncArrow: u,
        optionalChainMember: c
      } = n;
      u && (this.expressionScope.enter(bG()), o = new Si()), c && (l.optional = i), i ? l.arguments = this.parseCallExpressionArguments(11) :
      l.arguments = this.parseCallExpressionArguments(11, t.type === "Import", t.type !== "Super", l, o);
      let f = this.finishCallExpression(l, c);
      return u && this.shouldParseAsyncArrow() && !i ? (n.stop = !0, this.checkDestructuringPrivate(o), this.expressionScope.validateAsPattern(),
      this.expressionScope.exit(), f = this.parseAsyncArrowFromCallExpression(this.startNodeAt(r), f)) : (u && (this.checkExpressionErrors(o,
      !0), this.expressionScope.exit()), this.toReferencedArguments(f)), this.state.maybeInArrowParameters = a, f;
    }
    toReferencedArguments(t, r) {
      this.toReferencedListDeep(t.arguments, r);
    }
    parseTaggedTemplateExpression(t, r, n) {
      let i = this.startNodeAt(r);
      return i.tag = t, i.quasi = this.parseTemplate(!0), n.optionalChainMember && this.raise(_.OptionalChainingNoTemplate, r), this.finishNode(
      i, "TaggedTemplateExpression");
    }
    atPossibleAsyncArrow(t) {
      return t.type === "Identifier" && t.name === "async" && this.state.lastTokEndLoc.index === t.end && !this.canInsertSemicolon() && t.end -
      t.start === 5 && t.start === this.state.potentialArrowAt;
    }
    expectImportAttributesPlugin() {
      this.hasPlugin("importAssertions") || this.expectPlugin("importAttributes");
    }
    finishCallExpression(t, r) {
      if (t.callee.type === "Import")
        if (t.arguments.length === 2 && (this.hasPlugin("moduleAttributes") || this.expectImportAttributesPlugin()), t.arguments.length === 0 ||
        t.arguments.length > 2)
          this.raise(_.ImportCallArity, t, {
            maxArgumentCount: this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ?
            2 : 1
          });
        else
          for (let n of t.arguments)
            n.type === "SpreadElement" && this.raise(_.ImportCallSpreadArgument, n);
      return this.finishNode(t, r ? "OptionalCallExpression" : "CallExpression");
    }
    parseCallExpressionArguments(t, r, n, i, a) {
      let o = [], l = !0, u = this.state.inFSharpPipelineDirectBody;
      for (this.state.inFSharpPipelineDirectBody = !1; !this.eat(t); ) {
        if (l)
          l = !1;
        else if (this.expect(12), this.match(t)) {
          r && !this.hasPlugin("importAttributes") && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes") && this.raise(
          _.ImportCallArgumentTrailingComma, this.state.lastTokStartLoc), i && this.addTrailingCommaExtraToNode(i), this.next();
          break;
        }
        o.push(this.parseExprListItem(!1, a, n));
      }
      return this.state.inFSharpPipelineDirectBody = u, o;
    }
    shouldParseAsyncArrow() {
      return this.match(19) && !this.canInsertSemicolon();
    }
    parseAsyncArrowFromCallExpression(t, r) {
      var n;
      return this.resetPreviousNodeTrailingComments(r), this.expect(19), this.parseArrowExpression(t, r.arguments, !0, (n = r.extra) == null ?
      void 0 : n.trailingCommaLoc), r.innerComments && Ja(t, r.innerComments), r.callee.trailingComments && Ja(t, r.callee.trailingComments),
      t;
    }
    parseNoCallExpr() {
      let t = this.state.startLoc;
      return this.parseSubscripts(this.parseExprAtom(), t, !0);
    }
    parseExprAtom(t) {
      let r, n = null, {
        type: i
      } = this.state;
      switch (i) {
        case 79:
          return this.parseSuper();
        case 83:
          return r = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(r) : this.match(10) ? this.options.createImportExpressions ?
          this.parseImportCall(r) : this.finishNode(r, "Import") : (this.raise(_.UnsupportedImport, this.state.lastTokStartLoc), this.finishNode(
          r, "Import"));
        case 78:
          return r = this.startNode(), this.next(), this.finishNode(r, "ThisExpression");
        case 90:
          return this.parseDo(this.startNode(), !1);
        case 56:
        case 31:
          return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
        case 134:
          return this.parseNumericLiteral(this.state.value);
        case 135:
          return this.parseBigIntLiteral(this.state.value);
        case 136:
          return this.parseDecimalLiteral(this.state.value);
        case 133:
          return this.parseStringLiteral(this.state.value);
        case 84:
          return this.parseNullLiteral();
        case 85:
          return this.parseBooleanLiteral(!0);
        case 86:
          return this.parseBooleanLiteral(!1);
        case 10: {
          let a = this.state.potentialArrowAt === this.state.start;
          return this.parseParenAndDistinguishExpression(a);
        }
        case 2:
        case 1:
          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, !1, !0);
        case 0:
          return this.parseArrayLike(3, !0, !1, t);
        case 6:
        case 7:
          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, !1, !0);
        case 5:
          return this.parseObjectLike(8, !1, !1, t);
        case 68:
          return this.parseFunctionOrFunctionSent();
        case 26:
          n = this.parseDecorators();
        case 80:
          return this.parseClass(this.maybeTakeDecorators(n, this.startNode()), !1);
        case 77:
          return this.parseNewOrNewTarget();
        case 25:
        case 24:
          return this.parseTemplate(!1);
        case 15: {
          r = this.startNode(), this.next(), r.object = null;
          let a = r.callee = this.parseNoCallExpr();
          if (a.type === "MemberExpression")
            return this.finishNode(r, "BindExpression");
          throw this.raise(_.UnsupportedBind, a);
        }
        case 138:
          return this.raise(_.PrivateInExpectedIn, this.state.startLoc, {
            identifierName: this.state.value
          }), this.parsePrivateName();
        case 33:
          return this.parseTopicReferenceThenEqualsSign(54, "%");
        case 32:
          return this.parseTopicReferenceThenEqualsSign(44, "^");
        case 37:
        case 38:
          return this.parseTopicReference("hack");
        case 44:
        case 54:
        case 27: {
          let a = this.getPluginOption("pipelineOperator", "proposal");
          if (a)
            return this.parseTopicReference(a);
          this.unexpected();
          break;
        }
        case 47: {
          let a = this.input.codePointAt(this.nextTokenStart());
          wn(a) || a === 62 ? this.expectOnePlugin(["jsx", "flow", "typescript"]) : this.unexpected();
          break;
        }
        default:
          if (et(i)) {
            if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123)
              return this.parseModuleExpression();
            let a = this.state.potentialArrowAt === this.state.start, o = this.state.containsEsc, l = this.parseIdentifier();
            if (!o && l.name === "async" && !this.canInsertSemicolon()) {
              let {
                type: u
              } = this.state;
              if (u === 68)
                return this.resetPreviousNodeTrailingComments(l), this.next(), this.parseAsyncFunctionExpression(this.startNodeAtNode(l));
              if (et(u))
                return this.lookaheadCharCode() === 61 ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(l)) : l;
              if (u === 90)
                return this.resetPreviousNodeTrailingComments(l), this.parseDo(this.startNodeAtNode(l), !0);
            }
            return a && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(l), [l],
            !1)) : l;
          } else
            this.unexpected();
      }
    }
    parseTopicReferenceThenEqualsSign(t, r) {
      let n = this.getPluginOption("pipelineOperator", "proposal");
      if (n)
        return this.state.type = t, this.state.value = r, this.state.pos--, this.state.end--, this.state.endLoc = ir(this.state.endLoc, -1),
        this.parseTopicReference(n);
      this.unexpected();
    }
    parseTopicReference(t) {
      let r = this.startNode(), n = this.state.startLoc, i = this.state.type;
      return this.next(), this.finishTopicReference(r, n, t, i);
    }
    finishTopicReference(t, r, n, i) {
      if (this.testTopicReferenceConfiguration(n, r, i)) {
        let a = n === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
        return this.topicReferenceIsAllowedInCurrentContext() || this.raise(n === "smart" ? _.PrimaryTopicNotAllowed : _.PipeTopicUnbound, r),
        this.registerTopicReference(), this.finishNode(t, a);
      } else
        throw this.raise(_.PipeTopicUnconfiguredToken, r, {
          token: rs(i)
        });
    }
    testTopicReferenceConfiguration(t, r, n) {
      switch (t) {
        case "hack":
          return this.hasPlugin(["pipelineOperator", {
            topicToken: rs(n)
          }]);
        case "smart":
          return n === 27;
        default:
          throw this.raise(_.PipeTopicRequiresHackPipes, r);
      }
    }
    parseAsyncArrowUnaryFunction(t) {
      this.prodParam.enter(ql(!0, this.prodParam.hasYield));
      let r = [this.parseIdentifier()];
      return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(_.LineTerminatorBeforeArrow, this.state.curPosition()), this.
      expect(19), this.parseArrowExpression(t, r, !0);
    }
    parseDo(t, r) {
      this.expectPlugin("doExpressions"), r && this.expectPlugin("asyncDoExpressions"), t.async = r, this.next();
      let n = this.state.labels;
      return this.state.labels = [], r ? (this.prodParam.enter(2), t.body = this.parseBlock(), this.prodParam.exit()) : t.body = this.parseBlock(),
      this.state.labels = n, this.finishNode(t, "DoExpression");
    }
    parseSuper() {
      let t = this.startNode();
      return this.next(), this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod ? this.raise(_.SuperNotAllowed,
      t) : !this.scope.allowSuper && !this.options.allowSuperOutsideMethod && this.raise(_.UnexpectedSuper, t), !this.match(10) && !this.match(
      0) && !this.match(16) && this.raise(_.UnsupportedSuper, t), this.finishNode(t, "Super");
    }
    parsePrivateName() {
      let t = this.startNode(), r = this.startNodeAt(ir(this.state.startLoc, 1)), n = this.state.value;
      return this.next(), t.id = this.createIdentifier(r, n), this.finishNode(t, "PrivateName");
    }
    parseFunctionOrFunctionSent() {
      let t = this.startNode();
      if (this.next(), this.prodParam.hasYield && this.match(16)) {
        let r = this.createIdentifier(this.startNodeAtNode(t), "function");
        return this.next(), this.match(103) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.
        parseMetaProperty(t, r, "sent");
      }
      return this.parseFunction(t);
    }
    parseMetaProperty(t, r, n) {
      t.meta = r;
      let i = this.state.containsEsc;
      return t.property = this.parseIdentifier(!0), (t.property.name !== n || i) && this.raise(_.UnsupportedMetaProperty, t.property, {
        target: r.name,
        onlyValidPropertyName: n
      }), this.finishNode(t, "MetaProperty");
    }
    parseImportMetaProperty(t) {
      let r = this.createIdentifier(this.startNodeAtNode(t), "import");
      if (this.next(), this.isContextual(101))
        this.inModule || this.raise(_.ImportMetaOutsideModule, r), this.sawUnambiguousESM = !0;
      else if (this.isContextual(105) || this.isContextual(97)) {
        let n = this.isContextual(105);
        if (n || this.unexpected(), this.expectPlugin(n ? "sourcePhaseImports" : "deferredImportEvaluation"), !this.options.createImportExpressions)
          throw this.raise(_.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, {
            phase: this.state.value
          });
        return this.next(), t.phase = n ? "source" : "defer", this.parseImportCall(t);
      }
      return this.parseMetaProperty(t, r, "meta");
    }
    parseLiteralAtNode(t, r, n) {
      return this.addExtra(n, "rawValue", t), this.addExtra(n, "raw", this.input.slice(n.start, this.state.end)), n.value = t, this.next(), this.
      finishNode(n, r);
    }
    parseLiteral(t, r) {
      let n = this.startNode();
      return this.parseLiteralAtNode(t, r, n);
    }
    parseStringLiteral(t) {
      return this.parseLiteral(t, "StringLiteral");
    }
    parseNumericLiteral(t) {
      return this.parseLiteral(t, "NumericLiteral");
    }
    parseBigIntLiteral(t) {
      return this.parseLiteral(t, "BigIntLiteral");
    }
    parseDecimalLiteral(t) {
      return this.parseLiteral(t, "DecimalLiteral");
    }
    parseRegExpLiteral(t) {
      let r = this.startNode();
      return this.addExtra(r, "raw", this.input.slice(r.start, this.state.end)), r.pattern = t.pattern, r.flags = t.flags, this.next(), this.
      finishNode(r, "RegExpLiteral");
    }
    parseBooleanLiteral(t) {
      let r = this.startNode();
      return r.value = t, this.next(), this.finishNode(r, "BooleanLiteral");
    }
    parseNullLiteral() {
      let t = this.startNode();
      return this.next(), this.finishNode(t, "NullLiteral");
    }
    parseParenAndDistinguishExpression(t) {
      let r = this.state.startLoc, n;
      this.next(), this.expressionScope.enter(gG());
      let i = this.state.maybeInArrowParameters, a = this.state.inFSharpPipelineDirectBody;
      this.state.maybeInArrowParameters = !0, this.state.inFSharpPipelineDirectBody = !1;
      let o = this.state.startLoc, l = [], u = new Si(), c = !0, f, p;
      for (; !this.match(11); ) {
        if (c)
          c = !1;
        else if (this.expect(12, u.optionalParametersLoc === null ? null : u.optionalParametersLoc), this.match(11)) {
          p = this.state.startLoc;
          break;
        }
        if (this.match(21)) {
          let v = this.state.startLoc;
          if (f = this.state.startLoc, l.push(this.parseParenItem(this.parseRestBinding(), v)), !this.checkCommaAfterRest(41))
            break;
        } else
          l.push(this.parseMaybeAssignAllowIn(u, this.parseParenItem));
      }
      let h = this.state.lastTokEndLoc;
      this.expect(11), this.state.maybeInArrowParameters = i, this.state.inFSharpPipelineDirectBody = a;
      let y = this.startNodeAt(r);
      return t && this.shouldParseArrow(l) && (y = this.parseArrow(y)) ? (this.checkDestructuringPrivate(u), this.expressionScope.validateAsPattern(),
      this.expressionScope.exit(), this.parseArrowExpression(y, l, !1), y) : (this.expressionScope.exit(), l.length || this.unexpected(this.
      state.lastTokStartLoc), p && this.unexpected(p), f && this.unexpected(f), this.checkExpressionErrors(u, !0), this.toReferencedListDeep(
      l, !0), l.length > 1 ? (n = this.startNodeAt(o), n.expressions = l, this.finishNode(n, "SequenceExpression"), this.resetEndLocation(n,
      h)) : n = l[0], this.wrapParenthesis(r, n));
    }
    wrapParenthesis(t, r) {
      if (!this.options.createParenthesizedExpressions)
        return this.addExtra(r, "parenthesized", !0), this.addExtra(r, "parenStart", t.index), this.takeSurroundingComments(r, t.index, this.
        state.lastTokEndLoc.index), r;
      let n = this.startNodeAt(t);
      return n.expression = r, this.finishNode(n, "ParenthesizedExpression");
    }
    shouldParseArrow(t) {
      return !this.canInsertSemicolon();
    }
    parseArrow(t) {
      if (this.eat(19))
        return t;
    }
    parseParenItem(t, r) {
      return t;
    }
    parseNewOrNewTarget() {
      let t = this.startNode();
      if (this.next(), this.match(16)) {
        let r = this.createIdentifier(this.startNodeAtNode(t), "new");
        this.next();
        let n = this.parseMetaProperty(t, r, "target");
        return !this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction && this.raise(_.UnexpectedNewTarget,
        n), n;
      }
      return this.parseNew(t);
    }
    parseNew(t) {
      if (this.parseNewCallee(t), this.eat(10)) {
        let r = this.parseExprList(11);
        this.toReferencedList(r), t.arguments = r;
      } else
        t.arguments = [];
      return this.finishNode(t, "NewExpression");
    }
    parseNewCallee(t) {
      let r = this.match(83), n = this.parseNoCallExpr();
      t.callee = n, r && (n.type === "Import" || n.type === "ImportExpression") && this.raise(_.ImportCallNotNewExpression, n);
    }
    parseTemplateElement(t) {
      let {
        start: r,
        startLoc: n,
        end: i,
        value: a
      } = this.state, o = r + 1, l = this.startNodeAt(ir(n, 1));
      a === null && (t || this.raise(_.InvalidEscapeSequenceTemplate, ir(this.state.firstInvalidTemplateEscapePos, 1)));
      let u = this.match(24), c = u ? -1 : -2, f = i + c;
      l.value = {
        raw: this.input.slice(o, f).replace(/\r\n?/g, `
`),
        cooked: a === null ? null : a.slice(1, c)
      }, l.tail = u, this.next();
      let p = this.finishNode(l, "TemplateElement");
      return this.resetEndLocation(p, ir(this.state.lastTokEndLoc, c)), p;
    }
    parseTemplate(t) {
      let r = this.startNode(), n = this.parseTemplateElement(t), i = [n], a = [];
      for (; !n.tail; )
        a.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), i.push(n = this.parseTemplateElement(t));
      return r.expressions = a, r.quasis = i, this.finishNode(r, "TemplateLiteral");
    }
    parseTemplateSubstitution() {
      return this.parseExpression();
    }
    parseObjectLike(t, r, n, i) {
      n && this.expectPlugin("recordAndTuple");
      let a = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = !1;
      let o = /* @__PURE__ */ Object.create(null), l = !0, u = this.startNode();
      for (u.properties = [], this.next(); !this.match(t); ) {
        if (l)
          l = !1;
        else if (this.expect(12), this.match(t)) {
          this.addTrailingCommaExtraToNode(u);
          break;
        }
        let f;
        r ? f = this.parseBindingProperty() : (f = this.parsePropertyDefinition(i), this.checkProto(f, n, o, i)), n && !this.isObjectProperty(
        f) && f.type !== "SpreadElement" && this.raise(_.InvalidRecordProperty, f), f.shorthand && this.addExtra(f, "shorthand", !0), u.properties.
        push(f);
      }
      this.next(), this.state.inFSharpPipelineDirectBody = a;
      let c = "ObjectExpression";
      return r ? c = "ObjectPattern" : n && (c = "RecordExpression"), this.finishNode(u, c);
    }
    addTrailingCommaExtraToNode(t) {
      this.addExtra(t, "trailingComma", this.state.lastTokStartLoc.index), this.addExtra(t, "trailingCommaLoc", this.state.lastTokStartLoc, !1);
    }
    maybeAsyncOrAccessorProp(t) {
      return !t.computed && t.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
    }
    parsePropertyDefinition(t) {
      let r = [];
      if (this.match(26))
        for (this.hasPlugin("decorators") && this.raise(_.UnsupportedPropertyDecorator, this.state.startLoc); this.match(26); )
          r.push(this.parseDecorator());
      let n = this.startNode(), i = !1, a = !1, o;
      if (this.match(21))
        return r.length && this.unexpected(), this.parseSpread();
      r.length && (n.decorators = r, r = []), n.method = !1, t && (o = this.state.startLoc);
      let l = this.eat(55);
      this.parsePropertyNamePrefixOperator(n);
      let u = this.state.containsEsc;
      if (this.parsePropertyName(n, t), !l && !u && this.maybeAsyncOrAccessorProp(n)) {
        let {
          key: c
        } = n, f = c.name;
        f === "async" && !this.hasPrecedingLineBreak() && (i = !0, this.resetPreviousNodeTrailingComments(c), l = this.eat(55), this.parsePropertyName(
        n)), (f === "get" || f === "set") && (a = !0, this.resetPreviousNodeTrailingComments(c), n.kind = f, this.match(55) && (l = !0, this.
        raise(_.AccessorIsGenerator, this.state.curPosition(), {
          kind: f
        }), this.next()), this.parsePropertyName(n));
      }
      return this.parseObjPropValue(n, o, l, i, !1, a, t);
    }
    getGetterSetterExpectedParamCount(t) {
      return t.kind === "get" ? 0 : 1;
    }
    getObjectOrClassMethodParams(t) {
      return t.params;
    }
    checkGetterSetterParams(t) {
      var r;
      let n = this.getGetterSetterExpectedParamCount(t), i = this.getObjectOrClassMethodParams(t);
      i.length !== n && this.raise(t.kind === "get" ? _.BadGetterArity : _.BadSetterArity, t), t.kind === "set" && ((r = i[i.length - 1]) ==
      null ? void 0 : r.type) === "RestElement" && this.raise(_.BadSetterRestParameter, t);
    }
    parseObjectMethod(t, r, n, i, a) {
      if (a) {
        let o = this.parseMethod(t, r, !1, !1, !1, "ObjectMethod");
        return this.checkGetterSetterParams(o), o;
      }
      if (n || r || this.match(10))
        return i && this.unexpected(), t.kind = "method", t.method = !0, this.parseMethod(t, r, n, !1, !1, "ObjectMethod");
    }
    parseObjectProperty(t, r, n, i) {
      if (t.shorthand = !1, this.eat(14))
        return t.value = n ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(i), this.finishNode(t, "ObjectProper\
ty");
      if (!t.computed && t.key.type === "Identifier") {
        if (this.checkReservedWord(t.key.name, t.key.loc.start, !0, !1), n)
          t.value = this.parseMaybeDefault(r, In(t.key));
        else if (this.match(29)) {
          let a = this.state.startLoc;
          i != null ? i.shorthandAssignLoc === null && (i.shorthandAssignLoc = a) : this.raise(_.InvalidCoverInitializedName, a), t.value = this.
          parseMaybeDefault(r, In(t.key));
        } else
          t.value = In(t.key);
        return t.shorthand = !0, this.finishNode(t, "ObjectProperty");
      }
    }
    parseObjPropValue(t, r, n, i, a, o, l) {
      let u = this.parseObjectMethod(t, n, i, a, o) || this.parseObjectProperty(t, r, a, l);
      return u || this.unexpected(), u;
    }
    parsePropertyName(t, r) {
      if (this.eat(0))
        t.computed = !0, t.key = this.parseMaybeAssignAllowIn(), this.expect(3);
      else {
        let {
          type: n,
          value: i
        } = this.state, a;
        if ($r(n))
          a = this.parseIdentifier(!0);
        else
          switch (n) {
            case 134:
              a = this.parseNumericLiteral(i);
              break;
            case 133:
              a = this.parseStringLiteral(i);
              break;
            case 135:
              a = this.parseBigIntLiteral(i);
              break;
            case 136:
              a = this.parseDecimalLiteral(i);
              break;
            case 138: {
              let o = this.state.startLoc;
              r != null ? r.privateKeyLoc === null && (r.privateKeyLoc = o) : this.raise(_.UnexpectedPrivateField, o), a = this.parsePrivateName();
              break;
            }
            default:
              this.unexpected();
          }
        t.key = a, n !== 138 && (t.computed = !1);
      }
    }
    initFunction(t, r) {
      t.id = null, t.generator = !1, t.async = r;
    }
    parseMethod(t, r, n, i, a, o, l = !1) {
      this.initFunction(t, n), t.generator = r, this.scope.enter(18 | (l ? 64 : 0) | (a ? 32 : 0)), this.prodParam.enter(ql(n, t.generator)),
      this.parseFunctionParams(t, i);
      let u = this.parseFunctionBodyAndFinish(t, o, !0);
      return this.prodParam.exit(), this.scope.exit(), u;
    }
    parseArrayLike(t, r, n, i) {
      n && this.expectPlugin("recordAndTuple");
      let a = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = !1;
      let o = this.startNode();
      return this.next(), o.elements = this.parseExprList(t, !n, i, o), this.state.inFSharpPipelineDirectBody = a, this.finishNode(o, n ? "T\
upleExpression" : "ArrayExpression");
    }
    parseArrowExpression(t, r, n, i) {
      this.scope.enter(6);
      let a = ql(n, !1);
      !this.match(5) && this.prodParam.hasIn && (a |= 8), this.prodParam.enter(a), this.initFunction(t, n);
      let o = this.state.maybeInArrowParameters;
      return r && (this.state.maybeInArrowParameters = !0, this.setArrowFunctionParameters(t, r, i)), this.state.maybeInArrowParameters = !1,
      this.parseFunctionBody(t, !0), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = o, this.finishNode(t, "Ar\
rowFunctionExpression");
    }
    setArrowFunctionParameters(t, r, n) {
      this.toAssignableList(r, n, !1), t.params = r;
    }
    parseFunctionBodyAndFinish(t, r, n = !1) {
      return this.parseFunctionBody(t, !1, n), this.finishNode(t, r);
    }
    parseFunctionBody(t, r, n = !1) {
      let i = r && !this.match(5);
      if (this.expressionScope.enter(hT()), i)
        t.body = this.parseMaybeAssign(), this.checkParams(t, !1, r, !1);
      else {
        let a = this.state.strict, o = this.state.labels;
        this.state.labels = [], this.prodParam.enter(this.prodParam.currentFlags() | 4), t.body = this.parseBlock(!0, !1, (l) => {
          let u = !this.isSimpleParamList(t.params);
          l && u && this.raise(_.IllegalLanguageModeDirective, (t.kind === "method" || t.kind === "constructor") && t.key ? t.key.loc.end : t);
          let c = !a && this.state.strict;
          this.checkParams(t, !this.state.strict && !r && !n && !u, r, c), this.state.strict && t.id && this.checkIdentifier(t.id, 65, c);
        }), this.prodParam.exit(), this.state.labels = o;
      }
      this.expressionScope.exit();
    }
    isSimpleParameter(t) {
      return t.type === "Identifier";
    }
    isSimpleParamList(t) {
      for (let r = 0, n = t.length; r < n; r++)
        if (!this.isSimpleParameter(t[r])) return !1;
      return !0;
    }
    checkParams(t, r, n, i = !0) {
      let a = !r && /* @__PURE__ */ new Set(), o = {
        type: "FormalParameters"
      };
      for (let l of t.params)
        this.checkLVal(l, o, 5, a, i);
    }
    parseExprList(t, r, n, i) {
      let a = [], o = !0;
      for (; !this.eat(t); ) {
        if (o)
          o = !1;
        else if (this.expect(12), this.match(t)) {
          i && this.addTrailingCommaExtraToNode(i), this.next();
          break;
        }
        a.push(this.parseExprListItem(r, n));
      }
      return a;
    }
    parseExprListItem(t, r, n) {
      let i;
      if (this.match(12))
        t || this.raise(_.UnexpectedToken, this.state.curPosition(), {
          unexpected: ","
        }), i = null;
      else if (this.match(21)) {
        let a = this.state.startLoc;
        i = this.parseParenItem(this.parseSpread(r), a);
      } else if (this.match(17)) {
        this.expectPlugin("partialApplication"), n || this.raise(_.UnexpectedArgumentPlaceholder, this.state.startLoc);
        let a = this.startNode();
        this.next(), i = this.finishNode(a, "ArgumentPlaceholder");
      } else
        i = this.parseMaybeAssignAllowIn(r, this.parseParenItem);
      return i;
    }
    parseIdentifier(t) {
      let r = this.startNode(), n = this.parseIdentifierName(t);
      return this.createIdentifier(r, n);
    }
    createIdentifier(t, r) {
      return t.name = r, t.loc.identifierName = r, this.finishNode(t, "Identifier");
    }
    parseIdentifierName(t) {
      let r, {
        startLoc: n,
        type: i
      } = this.state;
      $r(i) ? r = this.state.value : this.unexpected();
      let a = $K(i);
      return t ? a && this.replaceToken(132) : this.checkReservedWord(r, n, a, !1), this.next(), r;
    }
    checkReservedWord(t, r, n, i) {
      if (t.length > 10 || !lG(t))
        return;
      if (n && iG(t)) {
        this.raise(_.UnexpectedKeyword, r, {
          keyword: t
        });
        return;
      }
      if ((this.state.strict ? i ? cT : lT : oT)(t, this.inModule)) {
        this.raise(_.UnexpectedReservedWord, r, {
          reservedWord: t
        });
        return;
      } else if (t === "yield") {
        if (this.prodParam.hasYield) {
          this.raise(_.YieldBindingIdentifier, r);
          return;
        }
      } else if (t === "await") {
        if (this.prodParam.hasAwait) {
          this.raise(_.AwaitBindingIdentifier, r);
          return;
        }
        if (this.scope.inStaticBlock) {
          this.raise(_.AwaitBindingIdentifierInStaticBlock, r);
          return;
        }
        this.expressionScope.recordAsyncArrowParametersError(r);
      } else if (t === "arguments" && this.scope.inClassAndNotInNonArrowFunction) {
        this.raise(_.ArgumentsInClass, r);
        return;
      }
    }
    recordAwaitIfAllowed() {
      let t = this.prodParam.hasAwait || this.options.allowAwaitOutsideFunction && !this.scope.inFunction;
      return t && !this.scope.inFunction && (this.state.hasTopLevelAwait = !0), t;
    }
    parseAwait(t) {
      let r = this.startNodeAt(t);
      return this.expressionScope.recordParameterInitializerError(_.AwaitExpressionFormalParameter, r), this.eat(55) && this.raise(_.ObsoleteAwaitStar,
      r), !this.scope.inFunction && !this.options.allowAwaitOutsideFunction && (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst =
      !0 : this.sawUnambiguousESM = !0), this.state.soloAwait || (r.argument = this.parseMaybeUnary(null, !0)), this.finishNode(r, "AwaitExp\
ression");
    }
    isAmbiguousAwait() {
      if (this.hasPrecedingLineBreak()) return !0;
      let {
        type: t
      } = this.state;
      return t === 53 || t === 10 || t === 0 || Vl(t) || t === 102 && !this.state.containsEsc || t === 137 || t === 56 || this.hasPlugin("v8\
intrinsic") && t === 54;
    }
    parseYield() {
      let t = this.startNode();
      this.expressionScope.recordParameterInitializerError(_.YieldInParameter, t), this.next();
      let r = !1, n = null;
      if (!this.hasPrecedingLineBreak())
        switch (r = this.eat(55), this.state.type) {
          case 13:
          case 139:
          case 8:
          case 11:
          case 3:
          case 9:
          case 14:
          case 12:
            if (!r) break;
          default:
            n = this.parseMaybeAssign();
        }
      return t.delegate = r, t.argument = n, this.finishNode(t, "YieldExpression");
    }
    parseImportCall(t) {
      return this.next(), t.source = this.parseMaybeAssignAllowIn(), (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) &&
      (t.options = null), this.eat(12) && (this.expectImportAttributesPlugin(), this.match(11) || (t.options = this.parseMaybeAssignAllowIn(),
      this.eat(12))), this.expect(11), this.finishNode(t, "ImportExpression");
    }
    checkPipelineAtInfixOperator(t, r) {
      this.hasPlugin(["pipelineOperator", {
        proposal: "smart"
      }]) && t.type === "SequenceExpression" && this.raise(_.PipelineHeadSequenceExpression, r);
    }
    parseSmartPipelineBodyInStyle(t, r) {
      if (this.isSimpleReference(t)) {
        let n = this.startNodeAt(r);
        return n.callee = t, this.finishNode(n, "PipelineBareFunction");
      } else {
        let n = this.startNodeAt(r);
        return this.checkSmartPipeTopicBodyEarlyErrors(r), n.expression = t, this.finishNode(n, "PipelineTopicExpression");
      }
    }
    isSimpleReference(t) {
      switch (t.type) {
        case "MemberExpression":
          return !t.computed && this.isSimpleReference(t.object);
        case "Identifier":
          return !0;
        default:
          return !1;
      }
    }
    checkSmartPipeTopicBodyEarlyErrors(t) {
      if (this.match(19))
        throw this.raise(_.PipelineBodyNoArrow, this.state.startLoc);
      this.topicReferenceWasUsedInCurrentContext() || this.raise(_.PipelineTopicUnused, t);
    }
    withTopicBindingContext(t) {
      let r = this.state.topicContext;
      this.state.topicContext = {
        maxNumOfResolvableTopics: 1,
        maxTopicIndex: null
      };
      try {
        return t();
      } finally {
        this.state.topicContext = r;
      }
    }
    withSmartMixTopicForbiddingContext(t) {
      if (this.hasPlugin(["pipelineOperator", {
        proposal: "smart"
      }])) {
        let r = this.state.topicContext;
        this.state.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null
        };
        try {
          return t();
        } finally {
          this.state.topicContext = r;
        }
      } else
        return t();
    }
    withSoloAwaitPermittingContext(t) {
      let r = this.state.soloAwait;
      this.state.soloAwait = !0;
      try {
        return t();
      } finally {
        this.state.soloAwait = r;
      }
    }
    allowInAnd(t) {
      let r = this.prodParam.currentFlags();
      if (8 & ~r) {
        this.prodParam.enter(r | 8);
        try {
          return t();
        } finally {
          this.prodParam.exit();
        }
      }
      return t();
    }
    disallowInAnd(t) {
      let r = this.prodParam.currentFlags();
      if (8 & r) {
        this.prodParam.enter(r & -9);
        try {
          return t();
        } finally {
          this.prodParam.exit();
        }
      }
      return t();
    }
    registerTopicReference() {
      this.state.topicContext.maxTopicIndex = 0;
    }
    topicReferenceIsAllowedInCurrentContext() {
      return this.state.topicContext.maxNumOfResolvableTopics >= 1;
    }
    topicReferenceWasUsedInCurrentContext() {
      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
    }
    parseFSharpPipelineBody(t) {
      let r = this.state.startLoc;
      this.state.potentialArrowAt = this.state.start;
      let n = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = !0;
      let i = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), r, t);
      return this.state.inFSharpPipelineDirectBody = n, i;
    }
    parseModuleExpression() {
      this.expectPlugin("moduleBlocks");
      let t = this.startNode();
      this.next(), this.match(5) || this.unexpected(null, 5);
      let r = this.startNodeAt(this.state.endLoc);
      this.next();
      let n = this.initializeScopes(!0);
      this.enterInitialScopes();
      try {
        t.body = this.parseProgram(r, 8, "module");
      } finally {
        n();
      }
      return this.finishNode(t, "ModuleExpression");
    }
    parsePropertyNamePrefixOperator(t) {
    }
  }, ah = {
    kind: 1
  }, UG = {
    kind: 2
  }, VG = /[\uD800-\uDFFF]/u, oh = /in(?:stanceof)?/y;
  function $G(e, t) {
    for (let r = 0; r < e.length; r++) {
      let n = e[r], {
        type: i
      } = n;
      if (typeof i == "number") {
        {
          if (i === 138) {
            let {
              loc: a,
              start: o,
              value: l,
              end: u
            } = n, c = o + 1, f = ir(a.start, 1);
            e.splice(r, 1, new un({
              type: An(27),
              value: "#",
              start: o,
              end: c,
              startLoc: a.start,
              endLoc: f
            }), new un({
              type: An(132),
              value: l,
              start: c,
              end: u,
              startLoc: f,
              endLoc: a.end
            })), r++;
            continue;
          }
          if (Vl(i)) {
            let {
              loc: a,
              start: o,
              value: l,
              end: u
            } = n, c = o + 1, f = ir(a.start, 1), p;
            t.charCodeAt(o) === 96 ? p = new un({
              type: An(22),
              value: "`",
              start: o,
              end: c,
              startLoc: a.start,
              endLoc: f
            }) : p = new un({
              type: An(8),
              value: "}",
              start: o,
              end: c,
              startLoc: a.start,
              endLoc: f
            });
            let h, y, v, d;
            i === 24 ? (y = u - 1, v = ir(a.end, -1), h = l === null ? null : l.slice(1, -1), d = new un({
              type: An(22),
              value: "`",
              start: y,
              end: u,
              startLoc: v,
              endLoc: a.end
            })) : (y = u - 2, v = ir(a.end, -2), h = l === null ? null : l.slice(1, -2), d = new un({
              type: An(23),
              value: "${",
              start: y,
              end: u,
              startLoc: v,
              endLoc: a.end
            })), e.splice(r, 1, p, new un({
              type: An(20),
              value: h,
              start: c,
              end: y,
              startLoc: f,
              endLoc: v
            }), d), r += 2;
            continue;
          }
        }
        n.type = An(i);
      }
    }
    return e;
  }
  s($G, "babel7CompatTokens");
  var wh = class extends Ch {
    static {
      s(this, "StatementParser");
    }
    parseTopLevel(t, r) {
      return t.program = this.parseProgram(r), t.comments = this.comments, this.options.tokens && (t.tokens = $G(this.tokens, this.input)), this.
      finishNode(t, "File");
    }
    parseProgram(t, r = 139, n = this.options.sourceType) {
      if (t.sourceType = n, t.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(t, !0, !0, r), this.inModule) {
        if (!this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0)
          for (let [a, o] of Array.from(this.scope.undefinedExports))
            this.raise(_.ModuleExportUndefined, o, {
              localName: a
            });
        this.addExtra(t, "topLevelAwait", this.state.hasTopLevelAwait);
      }
      let i;
      return r === 139 ? i = this.finishNode(t, "Program") : i = this.finishNodeAt(t, "Program", ir(this.state.startLoc, -1)), i;
    }
    stmtToDirective(t) {
      let r = t;
      r.type = "Directive", r.value = r.expression, delete r.expression;
      let n = r.value, i = n.value, a = this.input.slice(n.start, n.end), o = n.value = a.slice(1, -1);
      return this.addExtra(n, "raw", a), this.addExtra(n, "rawValue", o), this.addExtra(n, "expressionValue", i), n.type = "DirectiveLiteral",
      r;
    }
    parseInterpreterDirective() {
      if (!this.match(28))
        return null;
      let t = this.startNode();
      return t.value = this.state.value, this.next(), this.finishNode(t, "InterpreterDirective");
    }
    isLet() {
      return this.isContextual(100) ? this.hasFollowingBindingAtom() : !1;
    }
    chStartsBindingIdentifier(t, r) {
      if (wn(t)) {
        if (oh.lastIndex = r, oh.test(this.input)) {
          let n = this.codePointAtPos(oh.lastIndex);
          if (!Ti(n) && n !== 92)
            return !1;
        }
        return !0;
      } else return t === 92;
    }
    chStartsBindingPattern(t) {
      return t === 91 || t === 123;
    }
    hasFollowingBindingAtom() {
      let t = this.nextTokenStart(), r = this.codePointAtPos(t);
      return this.chStartsBindingPattern(r) || this.chStartsBindingIdentifier(r, t);
    }
    hasInLineFollowingBindingIdentifierOrBrace() {
      let t = this.nextTokenInLineStart(), r = this.codePointAtPos(t);
      return r === 123 || this.chStartsBindingIdentifier(r, t);
    }
    startsUsingForOf() {
      let {
        type: t,
        containsEsc: r
      } = this.lookahead();
      if (t === 102 && !r)
        return !1;
      if (et(t) && !this.hasFollowingLineBreak())
        return this.expectPlugin("explicitResourceManagement"), !0;
    }
    startsAwaitUsing() {
      let t = this.nextTokenInLineStart();
      if (this.isUnparsedContextual(t, "using")) {
        t = this.nextTokenInLineStartSince(t + 5);
        let r = this.codePointAtPos(t);
        if (this.chStartsBindingIdentifier(r, t))
          return this.expectPlugin("explicitResourceManagement"), !0;
      }
      return !1;
    }
    parseModuleItem() {
      return this.parseStatementLike(15);
    }
    parseStatementListItem() {
      return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
    }
    parseStatementOrSloppyAnnexBFunctionDeclaration(t = !1) {
      let r = 0;
      return this.options.annexB && !this.state.strict && (r |= 4, t && (r |= 8)), this.parseStatementLike(r);
    }
    parseStatement() {
      return this.parseStatementLike(0);
    }
    parseStatementLike(t) {
      let r = null;
      return this.match(26) && (r = this.parseDecorators(!0)), this.parseStatementContent(t, r);
    }
    parseStatementContent(t, r) {
      let n = this.state.type, i = this.startNode(), a = !!(t & 2), o = !!(t & 4), l = t & 1;
      switch (n) {
        case 60:
          return this.parseBreakContinueStatement(i, !0);
        case 63:
          return this.parseBreakContinueStatement(i, !1);
        case 64:
          return this.parseDebuggerStatement(i);
        case 90:
          return this.parseDoWhileStatement(i);
        case 91:
          return this.parseForStatement(i);
        case 68:
          if (this.lookaheadCharCode() === 46) break;
          return o || this.raise(this.state.strict ? _.StrictFunction : this.options.annexB ? _.SloppyFunctionAnnexB : _.SloppyFunction, this.
          state.startLoc), this.parseFunctionStatement(i, !1, !a && o);
        case 80:
          return a || this.unexpected(), this.parseClass(this.maybeTakeDecorators(r, i), !0);
        case 69:
          return this.parseIfStatement(i);
        case 70:
          return this.parseReturnStatement(i);
        case 71:
          return this.parseSwitchStatement(i);
        case 72:
          return this.parseThrowStatement(i);
        case 73:
          return this.parseTryStatement(i);
        case 96:
          if (!this.state.containsEsc && this.startsAwaitUsing())
            return this.recordAwaitIfAllowed() ? a || this.raise(_.UnexpectedLexicalDeclaration, i) : this.raise(_.AwaitUsingNotInAsyncContext,
            i), this.next(), this.parseVarStatement(i, "await using");
          break;
        case 107:
          if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace())
            break;
          return this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel ? this.raise(_.UnexpectedUsingDeclaration,
          this.state.startLoc) : a || this.raise(_.UnexpectedLexicalDeclaration, this.state.startLoc), this.parseVarStatement(i, "using");
        case 100: {
          if (this.state.containsEsc)
            break;
          let f = this.nextTokenStart(), p = this.codePointAtPos(f);
          if (p !== 91 && (!a && this.hasFollowingLineBreak() || !this.chStartsBindingIdentifier(p, f) && p !== 123))
            break;
        }
        case 75:
          a || this.raise(_.UnexpectedLexicalDeclaration, this.state.startLoc);
        case 74: {
          let f = this.state.value;
          return this.parseVarStatement(i, f);
        }
        case 92:
          return this.parseWhileStatement(i);
        case 76:
          return this.parseWithStatement(i);
        case 5:
          return this.parseBlock();
        case 13:
          return this.parseEmptyStatement(i);
        case 83: {
          let f = this.lookaheadCharCode();
          if (f === 40 || f === 46)
            break;
        }
        case 82: {
          !this.options.allowImportExportEverywhere && !l && this.raise(_.UnexpectedImportExport, this.state.startLoc), this.next();
          let f;
          return n === 83 ? (f = this.parseImport(i), f.type === "ImportDeclaration" && (!f.importKind || f.importKind === "value") && (this.
          sawUnambiguousESM = !0)) : (f = this.parseExport(i, r), (f.type === "ExportNamedDeclaration" && (!f.exportKind || f.exportKind ===
          "value") || f.type === "ExportAllDeclaration" && (!f.exportKind || f.exportKind === "value") || f.type === "ExportDefaultDeclarati\
on") && (this.sawUnambiguousESM = !0)), this.assertModuleNodeAllowed(f), f;
        }
        default:
          if (this.isAsyncFunction())
            return a || this.raise(_.AsyncFunctionInSingleStatementContext, this.state.startLoc), this.next(), this.parseFunctionStatement(i,
            !0, !a && o);
      }
      let u = this.state.value, c = this.parseExpression();
      return et(n) && c.type === "Identifier" && this.eat(14) ? this.parseLabeledStatement(i, u, c, t) : this.parseExpressionStatement(i, c,
      r);
    }
    assertModuleNodeAllowed(t) {
      !this.options.allowImportExportEverywhere && !this.inModule && this.raise(_.ImportOutsideModule, t);
    }
    decoratorsEnabledBeforeExport() {
      return this.hasPlugin("decorators-legacy") ? !0 : this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBefore\
Export") !== !1;
    }
    maybeTakeDecorators(t, r, n) {
      return t && (r.decorators && r.decorators.length > 0 ? (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") != "boolea\
n" && this.raise(_.DecoratorsBeforeAfterExport, r.decorators[0]), r.decorators.unshift(...t)) : r.decorators = t, this.resetStartLocationFromNode(
      r, t[0]), n && this.resetStartLocationFromNode(n, r)), r;
    }
    canHaveLeadingDecorator() {
      return this.match(80);
    }
    parseDecorators(t) {
      let r = [];
      do
        r.push(this.parseDecorator());
      while (this.match(26));
      if (this.match(82))
        t || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(_.DecoratorExportClass, this.state.startLoc);
      else if (!this.canHaveLeadingDecorator())
        throw this.raise(_.UnexpectedLeadingDecorator, this.state.startLoc);
      return r;
    }
    parseDecorator() {
      this.expectOnePlugin(["decorators", "decorators-legacy"]);
      let t = this.startNode();
      if (this.next(), this.hasPlugin("decorators")) {
        let r = this.state.startLoc, n;
        if (this.match(10)) {
          let i = this.state.startLoc;
          this.next(), n = this.parseExpression(), this.expect(11), n = this.wrapParenthesis(i, n);
          let a = this.state.startLoc;
          t.expression = this.parseMaybeDecoratorArguments(n), this.getPluginOption("decorators", "allowCallParenthesized") === !1 && t.expression !==
          n && this.raise(_.DecoratorArgumentsOutsideParentheses, a);
        } else {
          for (n = this.parseIdentifier(!1); this.eat(16); ) {
            let i = this.startNodeAt(r);
            i.object = n, this.match(138) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), i.property = this.parsePrivateName()) :
            i.property = this.parseIdentifier(!0), i.computed = !1, n = this.finishNode(i, "MemberExpression");
          }
          t.expression = this.parseMaybeDecoratorArguments(n);
        }
      } else
        t.expression = this.parseExprSubscripts();
      return this.finishNode(t, "Decorator");
    }
    parseMaybeDecoratorArguments(t) {
      if (this.eat(10)) {
        let r = this.startNodeAtNode(t);
        return r.callee = t, r.arguments = this.parseCallExpressionArguments(11, !1), this.toReferencedList(r.arguments), this.finishNode(r,
        "CallExpression");
      }
      return t;
    }
    parseBreakContinueStatement(t, r) {
      return this.next(), this.isLineTerminator() ? t.label = null : (t.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(
      t, r), this.finishNode(t, r ? "BreakStatement" : "ContinueStatement");
    }
    verifyBreakContinue(t, r) {
      let n;
      for (n = 0; n < this.state.labels.length; ++n) {
        let i = this.state.labels[n];
        if ((t.label == null || i.name === t.label.name) && (i.kind != null && (r || i.kind === 1) || t.label && r))
          break;
      }
      if (n === this.state.labels.length) {
        let i = r ? "BreakStatement" : "ContinueStatement";
        this.raise(_.IllegalBreakContinue, t, {
          type: i
        });
      }
    }
    parseDebuggerStatement(t) {
      return this.next(), this.semicolon(), this.finishNode(t, "DebuggerStatement");
    }
    parseHeaderExpression() {
      this.expect(10);
      let t = this.parseExpression();
      return this.expect(11), t;
    }
    parseDoWhileStatement(t) {
      return this.next(), this.state.labels.push(ah), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.
      labels.pop(), this.expect(92), t.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(t, "DoWhileStatement");
    }
    parseForStatement(t) {
      this.next(), this.state.labels.push(ah);
      let r = null;
      if (this.isContextual(96) && this.recordAwaitIfAllowed() && (r = this.state.startLoc, this.next()), this.scope.enter(0), this.expect(10),
      this.match(13))
        return r !== null && this.unexpected(r), this.parseFor(t, null);
      let n = this.isContextual(100);
      {
        let u = this.isContextual(96) && this.startsAwaitUsing(), c = u || this.isContextual(107) && this.startsUsingForOf(), f = n && this.
        hasFollowingBindingAtom() || c;
        if (this.match(74) || this.match(75) || f) {
          let p = this.startNode(), h;
          u ? (h = "await using", this.recordAwaitIfAllowed() || this.raise(_.AwaitUsingNotInAsyncContext, this.state.startLoc), this.next()) :
          h = this.state.value, this.next(), this.parseVar(p, !0, h);
          let y = this.finishNode(p, "VariableDeclaration"), v = this.match(58);
          return v && c && this.raise(_.ForInUsing, y), (v || this.isContextual(102)) && y.declarations.length === 1 ? this.parseForIn(t, y,
          r) : (r !== null && this.unexpected(r), this.parseFor(t, y));
        }
      }
      let i = this.isContextual(95), a = new Si(), o = this.parseExpression(!0, a), l = this.isContextual(102);
      if (l && (n && this.raise(_.ForOfLet, o), r === null && i && o.type === "Identifier" && this.raise(_.ForOfAsync, o)), l || this.match(
      58)) {
        this.checkDestructuringPrivate(a), this.toAssignable(o, !0);
        let u = l ? "ForOfStatement" : "ForInStatement";
        return this.checkLVal(o, {
          type: u
        }), this.parseForIn(t, o, r);
      } else
        this.checkExpressionErrors(a, !0);
      return r !== null && this.unexpected(r), this.parseFor(t, o);
    }
    parseFunctionStatement(t, r, n) {
      return this.next(), this.parseFunction(t, 1 | (n ? 2 : 0) | (r ? 8 : 0));
    }
    parseIfStatement(t) {
      return this.next(), t.test = this.parseHeaderExpression(), t.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration(), t.alternate =
      this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null, this.finishNode(t, "IfStatement");
    }
    parseReturnStatement(t) {
      return !this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction && this.raise(_.IllegalReturn, this.state.startLoc), this.
      next(), this.isLineTerminator() ? t.argument = null : (t.argument = this.parseExpression(), this.semicolon()), this.finishNode(t, "Ret\
urnStatement");
    }
    parseSwitchStatement(t) {
      this.next(), t.discriminant = this.parseHeaderExpression();
      let r = t.cases = [];
      this.expect(5), this.state.labels.push(UG), this.scope.enter(0);
      let n;
      for (let i; !this.match(8); )
        if (this.match(61) || this.match(65)) {
          let a = this.match(61);
          n && this.finishNode(n, "SwitchCase"), r.push(n = this.startNode()), n.consequent = [], this.next(), a ? n.test = this.parseExpression() :
          (i && this.raise(_.MultipleDefaultsInSwitch, this.state.lastTokStartLoc), i = !0, n.test = null), this.expect(14);
        } else
          n ? n.consequent.push(this.parseStatementListItem()) : this.unexpected();
      return this.scope.exit(), n && this.finishNode(n, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(t, "SwitchState\
ment");
    }
    parseThrowStatement(t) {
      return this.next(), this.hasPrecedingLineBreak() && this.raise(_.NewlineAfterThrow, this.state.lastTokEndLoc), t.argument = this.parseExpression(),
      this.semicolon(), this.finishNode(t, "ThrowStatement");
    }
    parseCatchClauseParam() {
      let t = this.parseBindingAtom();
      return this.scope.enter(this.options.annexB && t.type === "Identifier" ? 8 : 0), this.checkLVal(t, {
        type: "CatchClause"
      }, 9), t;
    }
    parseTryStatement(t) {
      if (this.next(), t.block = this.parseBlock(), t.handler = null, this.match(62)) {
        let r = this.startNode();
        this.next(), this.match(10) ? (this.expect(10), r.param = this.parseCatchClauseParam(), this.expect(11)) : (r.param = null, this.scope.
        enter(0)), r.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(!1, !1)), this.scope.exit(), t.handler = this.finishNode(
        r, "CatchClause");
      }
      return t.finalizer = this.eat(67) ? this.parseBlock() : null, !t.handler && !t.finalizer && this.raise(_.NoCatchOrFinally, t), this.finishNode(
      t, "TryStatement");
    }
    parseVarStatement(t, r, n = !1) {
      return this.next(), this.parseVar(t, !1, r, n), this.semicolon(), this.finishNode(t, "VariableDeclaration");
    }
    parseWhileStatement(t) {
      return this.next(), t.test = this.parseHeaderExpression(), this.state.labels.push(ah), t.body = this.withSmartMixTopicForbiddingContext(
      () => this.parseStatement()), this.state.labels.pop(), this.finishNode(t, "WhileStatement");
    }
    parseWithStatement(t) {
      return this.state.strict && this.raise(_.StrictWith, this.state.startLoc), this.next(), t.object = this.parseHeaderExpression(), t.body =
      this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.finishNode(t, "WithStatement");
    }
    parseEmptyStatement(t) {
      return this.next(), this.finishNode(t, "EmptyStatement");
    }
    parseLabeledStatement(t, r, n, i) {
      for (let o of this.state.labels)
        o.name === r && this.raise(_.LabelRedeclaration, n, {
          labelName: r
        });
      let a = GK(this.state.type) ? 1 : this.match(71) ? 2 : null;
      for (let o = this.state.labels.length - 1; o >= 0; o--) {
        let l = this.state.labels[o];
        if (l.statementStart === t.start)
          l.statementStart = this.state.start, l.kind = a;
        else
          break;
      }
      return this.state.labels.push({
        name: r,
        kind: a,
        statementStart: this.state.start
      }), t.body = i & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(!0) : this.parseStatement(), this.state.labels.pop(), t.label =
      n, this.finishNode(t, "LabeledStatement");
    }
    parseExpressionStatement(t, r, n) {
      return t.expression = r, this.semicolon(), this.finishNode(t, "ExpressionStatement");
    }
    parseBlock(t = !1, r = !0, n) {
      let i = this.startNode();
      return t && this.state.strictErrors.clear(), this.expect(5), r && this.scope.enter(0), this.parseBlockBody(i, t, !1, 8, n), r && this.
      scope.exit(), this.finishNode(i, "BlockStatement");
    }
    isValidDirective(t) {
      return t.type === "ExpressionStatement" && t.expression.type === "StringLiteral" && !t.expression.extra.parenthesized;
    }
    parseBlockBody(t, r, n, i, a) {
      let o = t.body = [], l = t.directives = [];
      this.parseBlockOrModuleBlockBody(o, r ? l : void 0, n, i, a);
    }
    parseBlockOrModuleBlockBody(t, r, n, i, a) {
      let o = this.state.strict, l = !1, u = !1;
      for (; !this.match(i); ) {
        let c = n ? this.parseModuleItem() : this.parseStatementListItem();
        if (r && !u) {
          if (this.isValidDirective(c)) {
            let f = this.stmtToDirective(c);
            r.push(f), !l && f.value.value === "use strict" && (l = !0, this.setStrict(!0));
            continue;
          }
          u = !0, this.state.strictErrors.clear();
        }
        t.push(c);
      }
      a?.call(this, l), o || this.setStrict(!1), this.next();
    }
    parseFor(t, r) {
      return t.init = r, this.semicolon(!1), t.test = this.match(13) ? null : this.parseExpression(), this.semicolon(!1), t.update = this.match(
      11) ? null : this.parseExpression(), this.expect(11), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.
      scope.exit(), this.state.labels.pop(), this.finishNode(t, "ForStatement");
    }
    parseForIn(t, r, n) {
      let i = this.match(58);
      return this.next(), i ? n !== null && this.unexpected(n) : t.await = n !== null, r.type === "VariableDeclaration" && r.declarations[0].
      init != null && (!i || !this.options.annexB || this.state.strict || r.kind !== "var" || r.declarations[0].id.type !== "Identifier") &&
      this.raise(_.ForInOfLoopInitializer, r, {
        type: i ? "ForInStatement" : "ForOfStatement"
      }), r.type === "AssignmentPattern" && this.raise(_.InvalidLhs, r, {
        ancestor: {
          type: "ForStatement"
        }
      }), t.left = r, t.right = i ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), t.body = this.withSmartMixTopicForbiddingContext(
      () => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(t, i ? "ForInStatement" : "ForOfStatement");
    }
    parseVar(t, r, n, i = !1) {
      let a = t.declarations = [];
      for (t.kind = n; ; ) {
        let o = this.startNode();
        if (this.parseVarId(o, n), o.init = this.eat(29) ? r ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, o.
        init === null && !i && (o.id.type !== "Identifier" && !(r && (this.match(58) || this.isContextual(102))) ? this.raise(_.DeclarationMissingInitializer,
        this.state.lastTokEndLoc, {
          kind: "destructuring"
        }) : (n === "const" || n === "using" || n === "await using") && !(this.match(58) || this.isContextual(102)) && this.raise(_.DeclarationMissingInitializer,
        this.state.lastTokEndLoc, {
          kind: n
        })), a.push(this.finishNode(o, "VariableDeclarator")), !this.eat(12)) break;
      }
      return t;
    }
    parseVarId(t, r) {
      let n = this.parseBindingAtom();
      (r === "using" || r === "await using") && (n.type === "ArrayPattern" || n.type === "ObjectPattern") && this.raise(_.UsingDeclarationHasBindingPattern,
      n.loc.start), this.checkLVal(n, {
        type: "VariableDeclarator"
      }, r === "var" ? 5 : 8201), t.id = n;
    }
    parseAsyncFunctionExpression(t) {
      return this.parseFunction(t, 8);
    }
    parseFunction(t, r = 0) {
      let n = r & 2, i = !!(r & 1), a = i && !(r & 4), o = !!(r & 8);
      this.initFunction(t, o), this.match(55) && (n && this.raise(_.GeneratorInSingleStatementContext, this.state.startLoc), this.next(), t.
      generator = !0), i && (t.id = this.parseFunctionId(a));
      let l = this.state.maybeInArrowParameters;
      return this.state.maybeInArrowParameters = !1, this.scope.enter(2), this.prodParam.enter(ql(o, t.generator)), i || (t.id = this.parseFunctionId()),
      this.parseFunctionParams(t, !1), this.withSmartMixTopicForbiddingContext(() => {
        this.parseFunctionBodyAndFinish(t, i ? "FunctionDeclaration" : "FunctionExpression");
      }), this.prodParam.exit(), this.scope.exit(), i && !n && this.registerFunctionStatementId(t), this.state.maybeInArrowParameters = l, t;
    }
    parseFunctionId(t) {
      return t || et(this.state.type) ? this.parseIdentifier() : null;
    }
    parseFunctionParams(t, r) {
      this.expect(10), this.expressionScope.enter(yG()), t.params = this.parseBindingList(11, 41, 2 | (r ? 4 : 0)), this.expressionScope.exit();
    }
    registerFunctionStatementId(t) {
      t.id && this.scope.declareName(t.id.name, !this.options.annexB || this.state.strict || t.generator || t.async ? this.scope.treatFunctionsAsVar ?
      5 : 8201 : 17, t.id.loc.start);
    }
    parseClass(t, r, n) {
      this.next();
      let i = this.state.strict;
      return this.state.strict = !0, this.parseClassId(t, r, n), this.parseClassSuper(t), t.body = this.parseClassBody(!!t.superClass, i), this.
      finishNode(t, r ? "ClassDeclaration" : "ClassExpression");
    }
    isClassProperty() {
      return this.match(29) || this.match(13) || this.match(8);
    }
    isClassMethod() {
      return this.match(10);
    }
    nameIsConstructor(t) {
      return t.type === "Identifier" && t.name === "constructor" || t.type === "StringLiteral" && t.value === "constructor";
    }
    isNonstaticConstructor(t) {
      return !t.computed && !t.static && this.nameIsConstructor(t.key);
    }
    parseClassBody(t, r) {
      this.classScope.enter();
      let n = {
        hadConstructor: !1,
        hadSuperClass: t
      }, i = [], a = this.startNode();
      if (a.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
        for (; !this.match(8); ) {
          if (this.eat(13)) {
            if (i.length > 0)
              throw this.raise(_.DecoratorSemicolon, this.state.lastTokEndLoc);
            continue;
          }
          if (this.match(26)) {
            i.push(this.parseDecorator());
            continue;
          }
          let o = this.startNode();
          i.length && (o.decorators = i, this.resetStartLocationFromNode(o, i[0]), i = []), this.parseClassMember(a, o, n), o.kind === "cons\
tructor" && o.decorators && o.decorators.length > 0 && this.raise(_.DecoratorConstructor, o);
        }
      }), this.state.strict = r, this.next(), i.length)
        throw this.raise(_.TrailingDecorator, this.state.startLoc);
      return this.classScope.exit(), this.finishNode(a, "ClassBody");
    }
    parseClassMemberFromModifier(t, r) {
      let n = this.parseIdentifier(!0);
      if (this.isClassMethod()) {
        let i = r;
        return i.kind = "method", i.computed = !1, i.key = n, i.static = !1, this.pushClassMethod(t, i, !1, !1, !1, !1), !0;
      } else if (this.isClassProperty()) {
        let i = r;
        return i.computed = !1, i.key = n, i.static = !1, t.body.push(this.parseClassProperty(i)), !0;
      }
      return this.resetPreviousNodeTrailingComments(n), !1;
    }
    parseClassMember(t, r, n) {
      let i = this.isContextual(106);
      if (i) {
        if (this.parseClassMemberFromModifier(t, r))
          return;
        if (this.eat(5)) {
          this.parseClassStaticBlock(t, r);
          return;
        }
      }
      this.parseClassMemberWithIsStatic(t, r, n, i);
    }
    parseClassMemberWithIsStatic(t, r, n, i) {
      let a = r, o = r, l = r, u = r, c = r, f = a, p = a;
      if (r.static = i, this.parsePropertyNamePrefixOperator(r), this.eat(55)) {
        f.kind = "method";
        let E = this.match(138);
        if (this.parseClassElementName(f), E) {
          this.pushClassPrivateMethod(t, o, !0, !1);
          return;
        }
        this.isNonstaticConstructor(a) && this.raise(_.ConstructorIsGenerator, a.key), this.pushClassMethod(t, a, !0, !1, !1, !1);
        return;
      }
      let h = !this.state.containsEsc && et(this.state.type), y = this.parseClassElementName(r), v = h ? y.name : null, d = this.isPrivateName(
      y), b = this.state.startLoc;
      if (this.parsePostMemberNameModifiers(p), this.isClassMethod()) {
        if (f.kind = "method", d) {
          this.pushClassPrivateMethod(t, o, !1, !1);
          return;
        }
        let E = this.isNonstaticConstructor(a), I = !1;
        E && (a.kind = "constructor", n.hadConstructor && !this.hasPlugin("typescript") && this.raise(_.DuplicateConstructor, y), E && this.
        hasPlugin("typescript") && r.override && this.raise(_.OverrideOnConstructor, y), n.hadConstructor = !0, I = n.hadSuperClass), this.pushClassMethod(
        t, a, !1, !1, E, I);
      } else if (this.isClassProperty())
        d ? this.pushClassPrivateProperty(t, u) : this.pushClassProperty(t, l);
      else if (v === "async" && !this.isLineTerminator()) {
        this.resetPreviousNodeTrailingComments(y);
        let E = this.eat(55);
        p.optional && this.unexpected(b), f.kind = "method";
        let I = this.match(138);
        this.parseClassElementName(f), this.parsePostMemberNameModifiers(p), I ? this.pushClassPrivateMethod(t, o, E, !0) : (this.isNonstaticConstructor(
        a) && this.raise(_.ConstructorIsAsync, a.key), this.pushClassMethod(t, a, E, !0, !1, !1));
      } else if ((v === "get" || v === "set") && !(this.match(55) && this.isLineTerminator())) {
        this.resetPreviousNodeTrailingComments(y), f.kind = v;
        let E = this.match(138);
        this.parseClassElementName(a), E ? this.pushClassPrivateMethod(t, o, !1, !1) : (this.isNonstaticConstructor(a) && this.raise(_.ConstructorIsAccessor,
        a.key), this.pushClassMethod(t, a, !1, !1, !1, !1)), this.checkGetterSetterParams(a);
      } else if (v === "accessor" && !this.isLineTerminator()) {
        this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(y);
        let E = this.match(138);
        this.parseClassElementName(l), this.pushClassAccessorProperty(t, c, E);
      } else this.isLineTerminator() ? d ? this.pushClassPrivateProperty(t, u) : this.pushClassProperty(t, l) : this.unexpected();
    }
    parseClassElementName(t) {
      let {
        type: r,
        value: n
      } = this.state;
      if ((r === 132 || r === 133) && t.static && n === "prototype" && this.raise(_.StaticPrototype, this.state.startLoc), r === 138) {
        n === "constructor" && this.raise(_.ConstructorClassPrivateField, this.state.startLoc);
        let i = this.parsePrivateName();
        return t.key = i, i;
      }
      return this.parsePropertyName(t), t.key;
    }
    parseClassStaticBlock(t, r) {
      var n;
      this.scope.enter(208);
      let i = this.state.labels;
      this.state.labels = [], this.prodParam.enter(0);
      let a = r.body = [];
      this.parseBlockOrModuleBlockBody(a, void 0, !1, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = i, t.body.push(this.
      finishNode(r, "StaticBlock")), (n = r.decorators) != null && n.length && this.raise(_.DecoratorStaticBlock, r);
    }
    pushClassProperty(t, r) {
      !r.computed && this.nameIsConstructor(r.key) && this.raise(_.ConstructorClassField, r.key), t.body.push(this.parseClassProperty(r));
    }
    pushClassPrivateProperty(t, r) {
      let n = this.parseClassPrivateProperty(r);
      t.body.push(n), this.classScope.declarePrivateName(this.getPrivateNameSV(n.key), 0, n.key.loc.start);
    }
    pushClassAccessorProperty(t, r, n) {
      !n && !r.computed && this.nameIsConstructor(r.key) && this.raise(_.ConstructorClassField, r.key);
      let i = this.parseClassAccessorProperty(r);
      t.body.push(i), n && this.classScope.declarePrivateName(this.getPrivateNameSV(i.key), 0, i.key.loc.start);
    }
    pushClassMethod(t, r, n, i, a, o) {
      t.body.push(this.parseMethod(r, n, i, a, o, "ClassMethod", !0));
    }
    pushClassPrivateMethod(t, r, n, i) {
      let a = this.parseMethod(r, n, i, !1, !1, "ClassPrivateMethod", !0);
      t.body.push(a);
      let o = a.kind === "get" ? a.static ? 6 : 2 : a.kind === "set" ? a.static ? 5 : 1 : 0;
      this.declareClassPrivateMethodInScope(a, o);
    }
    declareClassPrivateMethodInScope(t, r) {
      this.classScope.declarePrivateName(this.getPrivateNameSV(t.key), r, t.key.loc.start);
    }
    parsePostMemberNameModifiers(t) {
    }
    parseClassPrivateProperty(t) {
      return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassPrivateProperty");
    }
    parseClassProperty(t) {
      return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassProperty");
    }
    parseClassAccessorProperty(t) {
      return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassAccessorProperty");
    }
    parseInitializer(t) {
      this.scope.enter(80), this.expressionScope.enter(hT()), this.prodParam.enter(0), t.value = this.eat(29) ? this.parseMaybeAssignAllowIn() :
      null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
    }
    parseClassId(t, r, n, i = 8331) {
      if (et(this.state.type))
        t.id = this.parseIdentifier(), r && this.declareNameFromIdentifier(t.id, i);
      else if (n || !r)
        t.id = null;
      else
        throw this.raise(_.MissingClassName, this.state.startLoc);
    }
    parseClassSuper(t) {
      t.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
    }
    parseExport(t, r) {
      let n = this.parseMaybeImportPhase(t, !0), i = this.maybeParseExportDefaultSpecifier(t, n), a = !i || this.eat(12), o = a && this.eatExportStar(
      t), l = o && this.maybeParseExportNamespaceSpecifier(t), u = a && (!l || this.eat(12)), c = i || o;
      if (o && !l) {
        if (i && this.unexpected(), r)
          throw this.raise(_.UnsupportedDecoratorExport, t);
        return this.parseExportFrom(t, !0), this.finishNode(t, "ExportAllDeclaration");
      }
      let f = this.maybeParseExportNamedSpecifiers(t);
      i && a && !o && !f && this.unexpected(null, 5), l && u && this.unexpected(null, 98);
      let p;
      if (c || f) {
        if (p = !1, r)
          throw this.raise(_.UnsupportedDecoratorExport, t);
        this.parseExportFrom(t, c);
      } else
        p = this.maybeParseExportDeclaration(t);
      if (c || f || p) {
        var h;
        let y = t;
        if (this.checkExport(y, !0, !1, !!y.source), ((h = y.declaration) == null ? void 0 : h.type) === "ClassDeclaration")
          this.maybeTakeDecorators(r, y.declaration, y);
        else if (r)
          throw this.raise(_.UnsupportedDecoratorExport, t);
        return this.finishNode(y, "ExportNamedDeclaration");
      }
      if (this.eat(65)) {
        let y = t, v = this.parseExportDefaultExpression();
        if (y.declaration = v, v.type === "ClassDeclaration")
          this.maybeTakeDecorators(r, v, y);
        else if (r)
          throw this.raise(_.UnsupportedDecoratorExport, t);
        return this.checkExport(y, !0, !0), this.finishNode(y, "ExportDefaultDeclaration");
      }
      this.unexpected(null, 5);
    }
    eatExportStar(t) {
      return this.eat(55);
    }
    maybeParseExportDefaultSpecifier(t, r) {
      if (r || this.isExportDefaultSpecifier()) {
        this.expectPlugin("exportDefaultFrom", r?.loc.start);
        let n = r || this.parseIdentifier(!0), i = this.startNodeAtNode(n);
        return i.exported = n, t.specifiers = [this.finishNode(i, "ExportDefaultSpecifier")], !0;
      }
      return !1;
    }
    maybeParseExportNamespaceSpecifier(t) {
      if (this.isContextual(93)) {
        var r, n;
        (n = (r = t).specifiers) != null || (r.specifiers = []);
        let i = this.startNodeAt(this.state.lastTokStartLoc);
        return this.next(), i.exported = this.parseModuleExportName(), t.specifiers.push(this.finishNode(i, "ExportNamespaceSpecifier")), !0;
      }
      return !1;
    }
    maybeParseExportNamedSpecifiers(t) {
      if (this.match(5)) {
        let r = t;
        r.specifiers || (r.specifiers = []);
        let n = r.exportKind === "type";
        return r.specifiers.push(...this.parseExportSpecifiers(n)), r.source = null, r.declaration = null, this.hasPlugin("importAssertions") &&
        (r.assertions = []), !0;
      }
      return !1;
    }
    maybeParseExportDeclaration(t) {
      return this.shouldParseExportDeclaration() ? (t.specifiers = [], t.source = null, this.hasPlugin("importAssertions") && (t.assertions =
      []), t.declaration = this.parseExportDeclaration(t), !0) : !1;
    }
    isAsyncFunction() {
      if (!this.isContextual(95)) return !1;
      let t = this.nextTokenInLineStart();
      return this.isUnparsedContextual(t, "function");
    }
    parseExportDefaultExpression() {
      let t = this.startNode();
      if (this.match(68))
        return this.next(), this.parseFunction(t, 5);
      if (this.isAsyncFunction())
        return this.next(), this.next(), this.parseFunction(t, 13);
      if (this.match(80))
        return this.parseClass(t, !0, !0);
      if (this.match(26))
        return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === !0 && this.raise(_.DecoratorBeforeExport,
        this.state.startLoc), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(!1), this.startNode()), !0, !0);
      if (this.match(75) || this.match(74) || this.isLet())
        throw this.raise(_.UnsupportedDefaultExport, this.state.startLoc);
      let r = this.parseMaybeAssignAllowIn();
      return this.semicolon(), r;
    }
    parseExportDeclaration(t) {
      return this.match(80) ? this.parseClass(this.startNode(), !0, !1) : this.parseStatementListItem();
    }
    isExportDefaultSpecifier() {
      let {
        type: t
      } = this.state;
      if (et(t)) {
        if (t === 95 && !this.state.containsEsc || t === 100)
          return !1;
        if ((t === 130 || t === 129) && !this.state.containsEsc) {
          let {
            type: i
          } = this.lookahead();
          if (et(i) && i !== 98 || i === 5)
            return this.expectOnePlugin(["flow", "typescript"]), !1;
        }
      } else if (!this.match(65))
        return !1;
      let r = this.nextTokenStart(), n = this.isUnparsedContextual(r, "from");
      if (this.input.charCodeAt(r) === 44 || et(this.state.type) && n)
        return !0;
      if (this.match(65) && n) {
        let i = this.input.charCodeAt(this.nextTokenStartSince(r + 4));
        return i === 34 || i === 39;
      }
      return !1;
    }
    parseExportFrom(t, r) {
      this.eatContextual(98) ? (t.source = this.parseImportSource(), this.checkExport(t), this.maybeParseImportAttributes(t), this.checkJSONModuleImport(
      t)) : r && this.unexpected(), this.semicolon();
    }
    shouldParseExportDeclaration() {
      let {
        type: t
      } = this.state;
      return t === 26 && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators")) ? (this.getPluginOption("\
decorators", "decoratorsBeforeExport") === !0 && this.raise(_.DecoratorBeforeExport, this.state.startLoc), !0) : this.isContextual(107) ? (this.
      raise(_.UsingDeclarationExport, this.state.startLoc), !0) : this.isContextual(96) && this.startsAwaitUsing() ? (this.raise(_.UsingDeclarationExport,
      this.state.startLoc), !0) : t === 74 || t === 75 || t === 68 || t === 80 || this.isLet() || this.isAsyncFunction();
    }
    checkExport(t, r, n, i) {
      if (r) {
        var a;
        if (n) {
          if (this.checkDuplicateExports(t, "default"), this.hasPlugin("exportDefaultFrom")) {
            var o;
            let l = t.declaration;
            l.type === "Identifier" && l.name === "from" && l.end - l.start === 4 && !((o = l.extra) != null && o.parenthesized) && this.raise(
            _.ExportDefaultFromAsIdentifier, l);
          }
        } else if ((a = t.specifiers) != null && a.length)
          for (let l of t.specifiers) {
            let {
              exported: u
            } = l, c = u.type === "Identifier" ? u.name : u.value;
            if (this.checkDuplicateExports(l, c), !i && l.local) {
              let {
                local: f
              } = l;
              f.type !== "Identifier" ? this.raise(_.ExportBindingIsString, l, {
                localName: f.value,
                exportName: c
              }) : (this.checkReservedWord(f.name, f.loc.start, !0, !1), this.scope.checkLocalExport(f));
            }
          }
        else if (t.declaration) {
          let l = t.declaration;
          if (l.type === "FunctionDeclaration" || l.type === "ClassDeclaration") {
            let {
              id: u
            } = l;
            if (!u) throw new Error("Assertion failure");
            this.checkDuplicateExports(t, u.name);
          } else if (l.type === "VariableDeclaration")
            for (let u of l.declarations)
              this.checkDeclaration(u.id);
        }
      }
    }
    checkDeclaration(t) {
      if (t.type === "Identifier")
        this.checkDuplicateExports(t, t.name);
      else if (t.type === "ObjectPattern")
        for (let r of t.properties)
          this.checkDeclaration(r);
      else if (t.type === "ArrayPattern")
        for (let r of t.elements)
          r && this.checkDeclaration(r);
      else t.type === "ObjectProperty" ? this.checkDeclaration(t.value) : t.type === "RestElement" ? this.checkDeclaration(t.argument) : t.type ===
      "AssignmentPattern" && this.checkDeclaration(t.left);
    }
    checkDuplicateExports(t, r) {
      this.exportedIdentifiers.has(r) && (r === "default" ? this.raise(_.DuplicateDefaultExport, t) : this.raise(_.DuplicateExport, t, {
        exportName: r
      })), this.exportedIdentifiers.add(r);
    }
    parseExportSpecifiers(t) {
      let r = [], n = !0;
      for (this.expect(5); !this.eat(8); ) {
        if (n)
          n = !1;
        else if (this.expect(12), this.eat(8)) break;
        let i = this.isContextual(130), a = this.match(133), o = this.startNode();
        o.local = this.parseModuleExportName(), r.push(this.parseExportSpecifier(o, a, t, i));
      }
      return r;
    }
    parseExportSpecifier(t, r, n, i) {
      return this.eatContextual(93) ? t.exported = this.parseModuleExportName() : r ? t.exported = vG(t.local) : t.exported || (t.exported =
      In(t.local)), this.finishNode(t, "ExportSpecifier");
    }
    parseModuleExportName() {
      if (this.match(133)) {
        let t = this.parseStringLiteral(this.state.value), r = VG.exec(t.value);
        return r && this.raise(_.ModuleExportNameHasLoneSurrogate, t, {
          surrogateCharCode: r[0].charCodeAt(0)
        }), t;
      }
      return this.parseIdentifier(!0);
    }
    isJSONModuleImport(t) {
      return t.assertions != null ? t.assertions.some(({
        key: r,
        value: n
      }) => n.value === "json" && (r.type === "Identifier" ? r.name === "type" : r.value === "type")) : !1;
    }
    checkImportReflection(t) {
      let {
        specifiers: r
      } = t, n = r.length === 1 ? r[0].type : null;
      if (t.phase === "source")
        n !== "ImportDefaultSpecifier" && this.raise(_.SourcePhaseImportRequiresDefault, r[0].loc.start);
      else if (t.phase === "defer")
        n !== "ImportNamespaceSpecifier" && this.raise(_.DeferImportRequiresNamespace, r[0].loc.start);
      else if (t.module) {
        var i;
        n !== "ImportDefaultSpecifier" && this.raise(_.ImportReflectionNotBinding, r[0].loc.start), ((i = t.assertions) == null ? void 0 : i.
        length) > 0 && this.raise(_.ImportReflectionHasAssertion, r[0].loc.start);
      }
    }
    checkJSONModuleImport(t) {
      if (this.isJSONModuleImport(t) && t.type !== "ExportAllDeclaration") {
        let {
          specifiers: r
        } = t;
        if (r != null) {
          let n = r.find((i) => {
            let a;
            if (i.type === "ExportSpecifier" ? a = i.local : i.type === "ImportSpecifier" && (a = i.imported), a !== void 0)
              return a.type === "Identifier" ? a.name !== "default" : a.value !== "default";
          });
          n !== void 0 && this.raise(_.ImportJSONBindingNotDefault, n.loc.start);
        }
      }
    }
    isPotentialImportPhase(t) {
      return t ? !1 : this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
    }
    applyImportPhase(t, r, n, i) {
      r || (n === "module" ? (this.expectPlugin("importReflection", i), t.module = !0) : this.hasPlugin("importReflection") && (t.module = !1),
      n === "source" ? (this.expectPlugin("sourcePhaseImports", i), t.phase = "source") : n === "defer" ? (this.expectPlugin("deferredImport\
Evaluation", i), t.phase = "defer") : this.hasPlugin("sourcePhaseImports") && (t.phase = null));
    }
    parseMaybeImportPhase(t, r) {
      if (!this.isPotentialImportPhase(r))
        return this.applyImportPhase(t, r, null), null;
      let n = this.parseIdentifier(!0), {
        type: i
      } = this.state;
      return ($r(i) ? i !== 98 || this.lookaheadCharCode() === 102 : i !== 12) ? (this.resetPreviousIdentifierLeadingComments(n), this.applyImportPhase(
      t, r, n.name, n.loc.start), null) : (this.applyImportPhase(t, r, null), n);
    }
    isPrecedingIdImportPhase(t) {
      let {
        type: r
      } = this.state;
      return et(r) ? r !== 98 || this.lookaheadCharCode() === 102 : r !== 12;
    }
    parseImport(t) {
      return this.match(133) ? this.parseImportSourceAndAttributes(t) : this.parseImportSpecifiersAndAfter(t, this.parseMaybeImportPhase(t, !1));
    }
    parseImportSpecifiersAndAfter(t, r) {
      t.specifiers = [];
      let i = !this.maybeParseDefaultImportSpecifier(t, r) || this.eat(12), a = i && this.maybeParseStarImportSpecifier(t);
      return i && !a && this.parseNamedImportSpecifiers(t), this.expectContextual(98), this.parseImportSourceAndAttributes(t);
    }
    parseImportSourceAndAttributes(t) {
      var r;
      return (r = t.specifiers) != null || (t.specifiers = []), t.source = this.parseImportSource(), this.maybeParseImportAttributes(t), this.
      checkImportReflection(t), this.checkJSONModuleImport(t), this.semicolon(), this.finishNode(t, "ImportDeclaration");
    }
    parseImportSource() {
      return this.match(133) || this.unexpected(), this.parseExprAtom();
    }
    parseImportSpecifierLocal(t, r, n) {
      r.local = this.parseIdentifier(), t.specifiers.push(this.finishImportSpecifier(r, n));
    }
    finishImportSpecifier(t, r, n = 8201) {
      return this.checkLVal(t.local, {
        type: r
      }, n), this.finishNode(t, r);
    }
    parseImportAttributes() {
      this.expect(5);
      let t = [], r = /* @__PURE__ */ new Set();
      do {
        if (this.match(8))
          break;
        let n = this.startNode(), i = this.state.value;
        if (r.has(i) && this.raise(_.ModuleAttributesWithDuplicateKeys, this.state.startLoc, {
          key: i
        }), r.add(i), this.match(133) ? n.key = this.parseStringLiteral(i) : n.key = this.parseIdentifier(!0), this.expect(14), !this.match(
        133))
          throw this.raise(_.ModuleAttributeInvalidValue, this.state.startLoc);
        n.value = this.parseStringLiteral(this.state.value), t.push(this.finishNode(n, "ImportAttribute"));
      } while (this.eat(12));
      return this.expect(8), t;
    }
    parseModuleAttributes() {
      let t = [], r = /* @__PURE__ */ new Set();
      do {
        let n = this.startNode();
        if (n.key = this.parseIdentifier(!0), n.key.name !== "type" && this.raise(_.ModuleAttributeDifferentFromType, n.key), r.has(n.key.name) &&
        this.raise(_.ModuleAttributesWithDuplicateKeys, n.key, {
          key: n.key.name
        }), r.add(n.key.name), this.expect(14), !this.match(133))
          throw this.raise(_.ModuleAttributeInvalidValue, this.state.startLoc);
        n.value = this.parseStringLiteral(this.state.value), t.push(this.finishNode(n, "ImportAttribute"));
      } while (this.eat(12));
      return t;
    }
    maybeParseImportAttributes(t) {
      let r, n = !1;
      if (this.match(76)) {
        if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40)
          return;
        this.next(), this.hasPlugin("moduleAttributes") ? r = this.parseModuleAttributes() : (this.expectImportAttributesPlugin(), r = this.
        parseImportAttributes()), n = !0;
      } else if (this.isContextual(94) && !this.hasPrecedingLineBreak())
        this.hasPlugin("importAttributes") ? (this.getPluginOption("importAttributes", "deprecatedAssertSyntax") !== !0 && this.raise(_.ImportAttributesUseAssert,
        this.state.startLoc), this.addExtra(t, "deprecatedAssertSyntax", !0)) : this.expectOnePlugin(["importAttributes", "importAssertions"]),
        this.next(), r = this.parseImportAttributes();
      else if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions"))
        r = [];
      else if (this.hasPlugin("moduleAttributes"))
        r = [];
      else return;
      !n && this.hasPlugin("importAssertions") ? t.assertions = r : t.attributes = r;
    }
    maybeParseDefaultImportSpecifier(t, r) {
      if (r) {
        let n = this.startNodeAtNode(r);
        return n.local = r, t.specifiers.push(this.finishImportSpecifier(n, "ImportDefaultSpecifier")), !0;
      } else if ($r(this.state.type))
        return this.parseImportSpecifierLocal(t, this.startNode(), "ImportDefaultSpecifier"), !0;
      return !1;
    }
    maybeParseStarImportSpecifier(t) {
      if (this.match(55)) {
        let r = this.startNode();
        return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(t, r, "ImportNamespaceSpecifier"), !0;
      }
      return !1;
    }
    parseNamedImportSpecifiers(t) {
      let r = !0;
      for (this.expect(5); !this.eat(8); ) {
        if (r)
          r = !1;
        else {
          if (this.eat(14))
            throw this.raise(_.DestructureNamedImport, this.state.startLoc);
          if (this.expect(12), this.eat(8)) break;
        }
        let n = this.startNode(), i = this.match(133), a = this.isContextual(130);
        n.imported = this.parseModuleExportName();
        let o = this.parseImportSpecifier(n, i, t.importKind === "type" || t.importKind === "typeof", a, void 0);
        t.specifiers.push(o);
      }
    }
    parseImportSpecifier(t, r, n, i, a) {
      if (this.eatContextual(93))
        t.local = this.parseIdentifier();
      else {
        let {
          imported: o
        } = t;
        if (r)
          throw this.raise(_.ImportBindingIsString, t, {
            importName: o.value
          });
        this.checkReservedWord(o.name, t.loc.start, !0, !0), t.local || (t.local = In(o));
      }
      return this.finishImportSpecifier(t, "ImportSpecifier", a);
    }
    isThisParam(t) {
      return t.type === "Identifier" && t.name === "this";
    }
  }, Wl = class extends wh {
    static {
      s(this, "Parser");
    }
    constructor(t, r, n) {
      t = qG(t), super(t, r), this.options = t, this.initializeScopes(), this.plugins = n, this.filename = t.sourceFilename;
    }
    getScopeHandler() {
      return za;
    }
    parse() {
      this.enterInitialScopes();
      let t = this.startNode(), r = this.startNode();
      return this.nextToken(), t.errors = null, this.parseTopLevel(t, r), t.errors = this.state.errors, t.comments.length = this.state.commentsLen,
      t;
    }
  };
  function WG(e, t) {
    var r;
    if (((r = t) == null ? void 0 : r.sourceType) === "unambiguous") {
      t = Object.assign({}, t);
      try {
        t.sourceType = "module";
        let n = Ga(t, e), i = n.parse();
        if (n.sawUnambiguousESM)
          return i;
        if (n.ambiguousScriptDifferentAst)
          try {
            return t.sourceType = "script", Ga(t, e).parse();
          } catch {
          }
        else
          i.program.sourceType = "script";
        return i;
      } catch (n) {
        try {
          return t.sourceType = "script", Ga(t, e).parse();
        } catch {
        }
        throw n;
      }
    } else
      return Ga(t, e).parse();
  }
  s(WG, "parse");
  function KG(e, t) {
    let r = Ga(t, e);
    return r.options.strictMode && (r.state.strict = !0), r.getExpression();
  }
  s(KG, "parseExpression");
  function GG(e) {
    let t = {};
    for (let r of Object.keys(e))
      t[r] = An(e[r]);
    return t;
  }
  s(GG, "generateExportedTokenTypes");
  var HG = GG(VK);
  function Ga(e, t) {
    let r = Wl, n = /* @__PURE__ */ new Map();
    if (e != null && e.plugins) {
      for (let i of e.plugins) {
        let a, o;
        typeof i == "string" ? a = i : [a, o] = i, n.has(a) || n.set(a, o || {});
      }
      MG(n), r = YG(n);
    }
    return new r(e, t, n);
  }
  s(Ga, "getParser");
  var nT = /* @__PURE__ */ new Map();
  function YG(e) {
    let t = [];
    for (let i of RG)
      e.has(i) && t.push(i);
    let r = t.join("|"), n = nT.get(r);
    if (!n) {
      n = Wl;
      for (let i of t)
        n = bT[i](n);
      nT.set(r, n);
    }
    return n;
  }
  s(YG, "getParserClass");
  Xa.parse = WG;
  Xa.parseExpression = KG;
  Xa.tokTypes = HG;
});

// ../node_modules/js-tokens/index.js
var ET = T((Kl) => {
  Object.defineProperty(Kl, "__esModule", {
    value: !0
  });
  Kl.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
  Kl.matchToToken = function(e) {
    var t = { type: "invalid", value: e[0], closed: void 0 };
    return e[1] ? (t.type = "string", t.closed = !!(e[3] || e[4])) : e[5] ? t.type = "comment" : e[6] ? (t.type = "comment", t.closed = !!e[7]) :
    e[8] ? t.type = "regex" : e[9] ? t.type = "number" : e[10] ? t.type = "name" : e[11] ? t.type = "punctuator" : e[12] && (t.type = "white\
space"), t;
  };
});

// ../node_modules/picocolors/picocolors.js
var Rh = T((YSe, Mh) => {
  var vT = process.argv || [], Gl = process.env, zG = !("NO_COLOR" in Gl || vT.includes("--no-color")) && ("FORCE_COLOR" in Gl || vT.includes(
  "--color") || process.platform === "win32" || require != null && require("tty").isatty(1) && Gl.TERM !== "dumb" || "CI" in Gl), JG = /* @__PURE__ */ s(
  (e, t, r = e) => (n) => {
    let i = "" + n, a = i.indexOf(t, e.length);
    return ~a ? e + XG(i, t, r, a) + t : e + i + t;
  }, "formatter"), XG = /* @__PURE__ */ s((e, t, r, n) => {
    let i = "", a = 0;
    do
      i += e.substring(a, n) + r, a = n + t.length, n = e.indexOf(t, a);
    while (~n);
    return i + e.substring(a);
  }, "replaceClose"), TT = /* @__PURE__ */ s((e = zG) => {
    let t = e ? JG : () => String;
    return {
      isColorSupported: e,
      reset: t("\x1B[0m", "\x1B[0m"),
      bold: t("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"),
      dim: t("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"),
      italic: t("\x1B[3m", "\x1B[23m"),
      underline: t("\x1B[4m", "\x1B[24m"),
      inverse: t("\x1B[7m", "\x1B[27m"),
      hidden: t("\x1B[8m", "\x1B[28m"),
      strikethrough: t("\x1B[9m", "\x1B[29m"),
      black: t("\x1B[30m", "\x1B[39m"),
      red: t("\x1B[31m", "\x1B[39m"),
      green: t("\x1B[32m", "\x1B[39m"),
      yellow: t("\x1B[33m", "\x1B[39m"),
      blue: t("\x1B[34m", "\x1B[39m"),
      magenta: t("\x1B[35m", "\x1B[39m"),
      cyan: t("\x1B[36m", "\x1B[39m"),
      white: t("\x1B[37m", "\x1B[39m"),
      gray: t("\x1B[90m", "\x1B[39m"),
      bgBlack: t("\x1B[40m", "\x1B[49m"),
      bgRed: t("\x1B[41m", "\x1B[49m"),
      bgGreen: t("\x1B[42m", "\x1B[49m"),
      bgYellow: t("\x1B[43m", "\x1B[49m"),
      bgBlue: t("\x1B[44m", "\x1B[49m"),
      bgMagenta: t("\x1B[45m", "\x1B[49m"),
      bgCyan: t("\x1B[46m", "\x1B[49m"),
      bgWhite: t("\x1B[47m", "\x1B[49m"),
      blackBright: t("\x1B[90m", "\x1B[39m"),
      redBright: t("\x1B[91m", "\x1B[39m"),
      greenBright: t("\x1B[92m", "\x1B[39m"),
      yellowBright: t("\x1B[93m", "\x1B[39m"),
      blueBright: t("\x1B[94m", "\x1B[39m"),
      magentaBright: t("\x1B[95m", "\x1B[39m"),
      cyanBright: t("\x1B[96m", "\x1B[39m"),
      whiteBright: t("\x1B[97m", "\x1B[39m"),
      bgBlackBright: t("\x1B[100m", "\x1B[49m"),
      bgRedBright: t("\x1B[101m", "\x1B[49m"),
      bgGreenBright: t("\x1B[102m", "\x1B[49m"),
      bgYellowBright: t("\x1B[103m", "\x1B[49m"),
      bgBlueBright: t("\x1B[104m", "\x1B[49m"),
      bgMagentaBright: t("\x1B[105m", "\x1B[49m"),
      bgCyanBright: t("\x1B[106m", "\x1B[49m"),
      bgWhiteBright: t("\x1B[107m", "\x1B[49m")
    };
  }, "createColors");
  Mh.exports = TT();
  Mh.exports.createColors = TT;
});

// ../node_modules/escape-string-regexp/index.js
var ST = T((JSe, xT) => {
  "use strict";
  var QG = /[|\\{}()[\]^$+*?.]/g;
  xT.exports = function(e) {
    if (typeof e != "string")
      throw new TypeError("Expected a string");
    return e.replace(QG, "\\$&");
  };
});

// ../node_modules/@babel/highlight/node_modules/color-name/index.js
var AT = T((XSe, PT) => {
  "use strict";
  PT.exports = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 134, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 250, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 221],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [112, 128, 144],
    slategrey: [112, 128, 144],
    snow: [255, 250, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 50]
  };
});

// ../node_modules/@babel/highlight/node_modules/color-convert/conversions.js
var qh = T((QSe, IT) => {
  var Ls = AT(), DT = {};
  for (Hl in Ls)
    Ls.hasOwnProperty(Hl) && (DT[Ls[Hl]] = Hl);
  var Hl, be = IT.exports = {
    rgb: { channels: 3, labels: "rgb" },
    hsl: { channels: 3, labels: "hsl" },
    hsv: { channels: 3, labels: "hsv" },
    hwb: { channels: 3, labels: "hwb" },
    cmyk: { channels: 4, labels: "cmyk" },
    xyz: { channels: 3, labels: "xyz" },
    lab: { channels: 3, labels: "lab" },
    lch: { channels: 3, labels: "lch" },
    hex: { channels: 1, labels: ["hex"] },
    keyword: { channels: 1, labels: ["keyword"] },
    ansi16: { channels: 1, labels: ["ansi16"] },
    ansi256: { channels: 1, labels: ["ansi256"] },
    hcg: { channels: 3, labels: ["h", "c", "g"] },
    apple: { channels: 3, labels: ["r16", "g16", "b16"] },
    gray: { channels: 1, labels: ["gray"] }
  };
  for (ar in be)
    if (be.hasOwnProperty(ar)) {
      if (!("channels" in be[ar]))
        throw new Error("missing channels property: " + ar);
      if (!("labels" in be[ar]))
        throw new Error("missing channel labels property: " + ar);
      if (be[ar].labels.length !== be[ar].channels)
        throw new Error("channel and label counts mismatch: " + ar);
      CT = be[ar].channels, wT = be[ar].labels, delete be[ar].channels, delete be[ar].labels, Object.defineProperty(be[ar], "channels", { value: CT }),
      Object.defineProperty(be[ar], "labels", { value: wT });
    }
  var CT, wT, ar;
  be.rgb.hsl = function(e) {
    var t = e[0] / 255, r = e[1] / 255, n = e[2] / 255, i = Math.min(t, r, n), a = Math.max(t, r, n), o = a - i, l, u, c;
    return a === i ? l = 0 : t === a ? l = (r - n) / o : r === a ? l = 2 + (n - t) / o : n === a && (l = 4 + (t - r) / o), l = Math.min(l * 60,
    360), l < 0 && (l += 360), c = (i + a) / 2, a === i ? u = 0 : c <= 0.5 ? u = o / (a + i) : u = o / (2 - a - i), [l, u * 100, c * 100];
  };
  be.rgb.hsv = function(e) {
    var t, r, n, i, a, o = e[0] / 255, l = e[1] / 255, u = e[2] / 255, c = Math.max(o, l, u), f = c - Math.min(o, l, u), p = /* @__PURE__ */ s(
    function(h) {
      return (c - h) / 6 / f + 1 / 2;
    }, "diffc");
    return f === 0 ? i = a = 0 : (a = f / c, t = p(o), r = p(l), n = p(u), o === c ? i = n - r : l === c ? i = 1 / 3 + t - n : u === c && (i =
    2 / 3 + r - t), i < 0 ? i += 1 : i > 1 && (i -= 1)), [
      i * 360,
      a * 100,
      c * 100
    ];
  };
  be.rgb.hwb = function(e) {
    var t = e[0], r = e[1], n = e[2], i = be.rgb.hsl(e)[0], a = 1 / 255 * Math.min(t, Math.min(r, n));
    return n = 1 - 1 / 255 * Math.max(t, Math.max(r, n)), [i, a * 100, n * 100];
  };
  be.rgb.cmyk = function(e) {
    var t = e[0] / 255, r = e[1] / 255, n = e[2] / 255, i, a, o, l;
    return l = Math.min(1 - t, 1 - r, 1 - n), i = (1 - t - l) / (1 - l) || 0, a = (1 - r - l) / (1 - l) || 0, o = (1 - n - l) / (1 - l) || 0,
    [i * 100, a * 100, o * 100, l * 100];
  };
  function ZG(e, t) {
    return Math.pow(e[0] - t[0], 2) + Math.pow(e[1] - t[1], 2) + Math.pow(e[2] - t[2], 2);
  }
  s(ZG, "comparativeDistance");
  be.rgb.keyword = function(e) {
    var t = DT[e];
    if (t)
      return t;
    var r = 1 / 0, n;
    for (var i in Ls)
      if (Ls.hasOwnProperty(i)) {
        var a = Ls[i], o = ZG(e, a);
        o < r && (r = o, n = i);
      }
    return n;
  };
  be.keyword.rgb = function(e) {
    return Ls[e];
  };
  be.rgb.xyz = function(e) {
    var t = e[0] / 255, r = e[1] / 255, n = e[2] / 255;
    t = t > 0.04045 ? Math.pow((t + 0.055) / 1.055, 2.4) : t / 12.92, r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92, n = n >
    0.04045 ? Math.pow((n + 0.055) / 1.055, 2.4) : n / 12.92;
    var i = t * 0.4124 + r * 0.3576 + n * 0.1805, a = t * 0.2126 + r * 0.7152 + n * 0.0722, o = t * 0.0193 + r * 0.1192 + n * 0.9505;
    return [i * 100, a * 100, o * 100];
  };
  be.rgb.lab = function(e) {
    var t = be.rgb.xyz(e), r = t[0], n = t[1], i = t[2], a, o, l;
    return r /= 95.047, n /= 100, i /= 108.883, r = r > 8856e-6 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116, n = n > 8856e-6 ? Math.pow(n, 1 /
    3) : 7.787 * n + 16 / 116, i = i > 8856e-6 ? Math.pow(i, 1 / 3) : 7.787 * i + 16 / 116, a = 116 * n - 16, o = 500 * (r - n), l = 200 * (n -
    i), [a, o, l];
  };
  be.hsl.rgb = function(e) {
    var t = e[0] / 360, r = e[1] / 100, n = e[2] / 100, i, a, o, l, u;
    if (r === 0)
      return u = n * 255, [u, u, u];
    n < 0.5 ? a = n * (1 + r) : a = n + r - n * r, i = 2 * n - a, l = [0, 0, 0];
    for (var c = 0; c < 3; c++)
      o = t + 1 / 3 * -(c - 1), o < 0 && o++, o > 1 && o--, 6 * o < 1 ? u = i + (a - i) * 6 * o : 2 * o < 1 ? u = a : 3 * o < 2 ? u = i + (a -
      i) * (2 / 3 - o) * 6 : u = i, l[c] = u * 255;
    return l;
  };
  be.hsl.hsv = function(e) {
    var t = e[0], r = e[1] / 100, n = e[2] / 100, i = r, a = Math.max(n, 0.01), o, l;
    return n *= 2, r *= n <= 1 ? n : 2 - n, i *= a <= 1 ? a : 2 - a, l = (n + r) / 2, o = n === 0 ? 2 * i / (a + i) : 2 * r / (n + r), [t, o *
    100, l * 100];
  };
  be.hsv.rgb = function(e) {
    var t = e[0] / 60, r = e[1] / 100, n = e[2] / 100, i = Math.floor(t) % 6, a = t - Math.floor(t), o = 255 * n * (1 - r), l = 255 * n * (1 -
    r * a), u = 255 * n * (1 - r * (1 - a));
    switch (n *= 255, i) {
      case 0:
        return [n, u, o];
      case 1:
        return [l, n, o];
      case 2:
        return [o, n, u];
      case 3:
        return [o, l, n];
      case 4:
        return [u, o, n];
      case 5:
        return [n, o, l];
    }
  };
  be.hsv.hsl = function(e) {
    var t = e[0], r = e[1] / 100, n = e[2] / 100, i = Math.max(n, 0.01), a, o, l;
    return l = (2 - r) * n, a = (2 - r) * i, o = r * i, o /= a <= 1 ? a : 2 - a, o = o || 0, l /= 2, [t, o * 100, l * 100];
  };
  be.hwb.rgb = function(e) {
    var t = e[0] / 360, r = e[1] / 100, n = e[2] / 100, i = r + n, a, o, l, u;
    i > 1 && (r /= i, n /= i), a = Math.floor(6 * t), o = 1 - n, l = 6 * t - a, a & 1 && (l = 1 - l), u = r + l * (o - r);
    var c, f, p;
    switch (a) {
      default:
      case 6:
      case 0:
        c = o, f = u, p = r;
        break;
      case 1:
        c = u, f = o, p = r;
        break;
      case 2:
        c = r, f = o, p = u;
        break;
      case 3:
        c = r, f = u, p = o;
        break;
      case 4:
        c = u, f = r, p = o;
        break;
      case 5:
        c = o, f = r, p = u;
        break;
    }
    return [c * 255, f * 255, p * 255];
  };
  be.cmyk.rgb = function(e) {
    var t = e[0] / 100, r = e[1] / 100, n = e[2] / 100, i = e[3] / 100, a, o, l;
    return a = 1 - Math.min(1, t * (1 - i) + i), o = 1 - Math.min(1, r * (1 - i) + i), l = 1 - Math.min(1, n * (1 - i) + i), [a * 255, o * 255,
    l * 255];
  };
  be.xyz.rgb = function(e) {
    var t = e[0] / 100, r = e[1] / 100, n = e[2] / 100, i, a, o;
    return i = t * 3.2406 + r * -1.5372 + n * -0.4986, a = t * -0.9689 + r * 1.8758 + n * 0.0415, o = t * 0.0557 + r * -0.204 + n * 1.057, i =
    i > 31308e-7 ? 1.055 * Math.pow(i, 1 / 2.4) - 0.055 : i * 12.92, a = a > 31308e-7 ? 1.055 * Math.pow(a, 1 / 2.4) - 0.055 : a * 12.92, o =
    o > 31308e-7 ? 1.055 * Math.pow(o, 1 / 2.4) - 0.055 : o * 12.92, i = Math.min(Math.max(0, i), 1), a = Math.min(Math.max(0, a), 1), o = Math.
    min(Math.max(0, o), 1), [i * 255, a * 255, o * 255];
  };
  be.xyz.lab = function(e) {
    var t = e[0], r = e[1], n = e[2], i, a, o;
    return t /= 95.047, r /= 100, n /= 108.883, t = t > 8856e-6 ? Math.pow(t, 1 / 3) : 7.787 * t + 16 / 116, r = r > 8856e-6 ? Math.pow(r, 1 /
    3) : 7.787 * r + 16 / 116, n = n > 8856e-6 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116, i = 116 * r - 16, a = 500 * (t - r), o = 200 * (r -
    n), [i, a, o];
  };
  be.lab.xyz = function(e) {
    var t = e[0], r = e[1], n = e[2], i, a, o;
    a = (t + 16) / 116, i = r / 500 + a, o = a - n / 200;
    var l = Math.pow(a, 3), u = Math.pow(i, 3), c = Math.pow(o, 3);
    return a = l > 8856e-6 ? l : (a - 16 / 116) / 7.787, i = u > 8856e-6 ? u : (i - 16 / 116) / 7.787, o = c > 8856e-6 ? c : (o - 16 / 116) /
    7.787, i *= 95.047, a *= 100, o *= 108.883, [i, a, o];
  };
  be.lab.lch = function(e) {
    var t = e[0], r = e[1], n = e[2], i, a, o;
    return i = Math.atan2(n, r), a = i * 360 / 2 / Math.PI, a < 0 && (a += 360), o = Math.sqrt(r * r + n * n), [t, o, a];
  };
  be.lch.lab = function(e) {
    var t = e[0], r = e[1], n = e[2], i, a, o;
    return o = n / 360 * 2 * Math.PI, i = r * Math.cos(o), a = r * Math.sin(o), [t, i, a];
  };
  be.rgb.ansi16 = function(e) {
    var t = e[0], r = e[1], n = e[2], i = 1 in arguments ? arguments[1] : be.rgb.hsv(e)[2];
    if (i = Math.round(i / 50), i === 0)
      return 30;
    var a = 30 + (Math.round(n / 255) << 2 | Math.round(r / 255) << 1 | Math.round(t / 255));
    return i === 2 && (a += 60), a;
  };
  be.hsv.ansi16 = function(e) {
    return be.rgb.ansi16(be.hsv.rgb(e), e[2]);
  };
  be.rgb.ansi256 = function(e) {
    var t = e[0], r = e[1], n = e[2];
    if (t === r && r === n)
      return t < 8 ? 16 : t > 248 ? 231 : Math.round((t - 8) / 247 * 24) + 232;
    var i = 16 + 36 * Math.round(t / 255 * 5) + 6 * Math.round(r / 255 * 5) + Math.round(n / 255 * 5);
    return i;
  };
  be.ansi16.rgb = function(e) {
    var t = e % 10;
    if (t === 0 || t === 7)
      return e > 50 && (t += 3.5), t = t / 10.5 * 255, [t, t, t];
    var r = (~~(e > 50) + 1) * 0.5, n = (t & 1) * r * 255, i = (t >> 1 & 1) * r * 255, a = (t >> 2 & 1) * r * 255;
    return [n, i, a];
  };
  be.ansi256.rgb = function(e) {
    if (e >= 232) {
      var t = (e - 232) * 10 + 8;
      return [t, t, t];
    }
    e -= 16;
    var r, n = Math.floor(e / 36) / 5 * 255, i = Math.floor((r = e % 36) / 6) / 5 * 255, a = r % 6 / 5 * 255;
    return [n, i, a];
  };
  be.rgb.hex = function(e) {
    var t = ((Math.round(e[0]) & 255) << 16) + ((Math.round(e[1]) & 255) << 8) + (Math.round(e[2]) & 255), r = t.toString(16).toUpperCase();
    return "000000".substring(r.length) + r;
  };
  be.hex.rgb = function(e) {
    var t = e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!t)
      return [0, 0, 0];
    var r = t[0];
    t[0].length === 3 && (r = r.split("").map(function(l) {
      return l + l;
    }).join(""));
    var n = parseInt(r, 16), i = n >> 16 & 255, a = n >> 8 & 255, o = n & 255;
    return [i, a, o];
  };
  be.rgb.hcg = function(e) {
    var t = e[0] / 255, r = e[1] / 255, n = e[2] / 255, i = Math.max(Math.max(t, r), n), a = Math.min(Math.min(t, r), n), o = i - a, l, u;
    return o < 1 ? l = a / (1 - o) : l = 0, o <= 0 ? u = 0 : i === t ? u = (r - n) / o % 6 : i === r ? u = 2 + (n - t) / o : u = 4 + (t - r) /
    o + 4, u /= 6, u %= 1, [u * 360, o * 100, l * 100];
  };
  be.hsl.hcg = function(e) {
    var t = e[1] / 100, r = e[2] / 100, n = 1, i = 0;
    return r < 0.5 ? n = 2 * t * r : n = 2 * t * (1 - r), n < 1 && (i = (r - 0.5 * n) / (1 - n)), [e[0], n * 100, i * 100];
  };
  be.hsv.hcg = function(e) {
    var t = e[1] / 100, r = e[2] / 100, n = t * r, i = 0;
    return n < 1 && (i = (r - n) / (1 - n)), [e[0], n * 100, i * 100];
  };
  be.hcg.rgb = function(e) {
    var t = e[0] / 360, r = e[1] / 100, n = e[2] / 100;
    if (r === 0)
      return [n * 255, n * 255, n * 255];
    var i = [0, 0, 0], a = t % 1 * 6, o = a % 1, l = 1 - o, u = 0;
    switch (Math.floor(a)) {
      case 0:
        i[0] = 1, i[1] = o, i[2] = 0;
        break;
      case 1:
        i[0] = l, i[1] = 1, i[2] = 0;
        break;
      case 2:
        i[0] = 0, i[1] = 1, i[2] = o;
        break;
      case 3:
        i[0] = 0, i[1] = l, i[2] = 1;
        break;
      case 4:
        i[0] = o, i[1] = 0, i[2] = 1;
        break;
      default:
        i[0] = 1, i[1] = 0, i[2] = l;
    }
    return u = (1 - r) * n, [
      (r * i[0] + u) * 255,
      (r * i[1] + u) * 255,
      (r * i[2] + u) * 255
    ];
  };
  be.hcg.hsv = function(e) {
    var t = e[1] / 100, r = e[2] / 100, n = t + r * (1 - t), i = 0;
    return n > 0 && (i = t / n), [e[0], i * 100, n * 100];
  };
  be.hcg.hsl = function(e) {
    var t = e[1] / 100, r = e[2] / 100, n = r * (1 - t) + 0.5 * t, i = 0;
    return n > 0 && n < 0.5 ? i = t / (2 * n) : n >= 0.5 && n < 1 && (i = t / (2 * (1 - n))), [e[0], i * 100, n * 100];
  };
  be.hcg.hwb = function(e) {
    var t = e[1] / 100, r = e[2] / 100, n = t + r * (1 - t);
    return [e[0], (n - t) * 100, (1 - n) * 100];
  };
  be.hwb.hcg = function(e) {
    var t = e[1] / 100, r = e[2] / 100, n = 1 - r, i = n - t, a = 0;
    return i < 1 && (a = (n - i) / (1 - i)), [e[0], i * 100, a * 100];
  };
  be.apple.rgb = function(e) {
    return [e[0] / 65535 * 255, e[1] / 65535 * 255, e[2] / 65535 * 255];
  };
  be.rgb.apple = function(e) {
    return [e[0] / 255 * 65535, e[1] / 255 * 65535, e[2] / 255 * 65535];
  };
  be.gray.rgb = function(e) {
    return [e[0] / 100 * 255, e[0] / 100 * 255, e[0] / 100 * 255];
  };
  be.gray.hsl = be.gray.hsv = function(e) {
    return [0, 0, e[0]];
  };
  be.gray.hwb = function(e) {
    return [0, 100, e[0]];
  };
  be.gray.cmyk = function(e) {
    return [0, 0, 0, e[0]];
  };
  be.gray.lab = function(e) {
    return [e[0], 0, 0];
  };
  be.gray.hex = function(e) {
    var t = Math.round(e[0] / 100 * 255) & 255, r = (t << 16) + (t << 8) + t, n = r.toString(16).toUpperCase();
    return "000000".substring(n.length) + n;
  };
  be.rgb.gray = function(e) {
    var t = (e[0] + e[1] + e[2]) / 3;
    return [t / 255 * 100];
  };
});

// ../node_modules/@babel/highlight/node_modules/color-convert/route.js
var OT = T((ePe, _T) => {
  var Yl = qh();
  function eH() {
    for (var e = {}, t = Object.keys(Yl), r = t.length, n = 0; n < r; n++)
      e[t[n]] = {
        // http://jsperf.com/1-vs-infinity
        // micro-opt, but this is simple.
        distance: -1,
        parent: null
      };
    return e;
  }
  s(eH, "buildGraph");
  function tH(e) {
    var t = eH(), r = [e];
    for (t[e].distance = 0; r.length; )
      for (var n = r.pop(), i = Object.keys(Yl[n]), a = i.length, o = 0; o < a; o++) {
        var l = i[o], u = t[l];
        u.distance === -1 && (u.distance = t[n].distance + 1, u.parent = n, r.unshift(l));
      }
    return t;
  }
  s(tH, "deriveBFS");
  function rH(e, t) {
    return function(r) {
      return t(e(r));
    };
  }
  s(rH, "link");
  function nH(e, t) {
    for (var r = [t[e].parent, e], n = Yl[t[e].parent][e], i = t[e].parent; t[i].parent; )
      r.unshift(t[i].parent), n = rH(Yl[t[i].parent][i], n), i = t[i].parent;
    return n.conversion = r, n;
  }
  s(nH, "wrapConversion");
  _T.exports = function(e) {
    for (var t = tH(e), r = {}, n = Object.keys(t), i = n.length, a = 0; a < i; a++) {
      var o = n[a], l = t[o];
      l.parent !== null && (r[o] = nH(o, t));
    }
    return r;
  };
});

// ../node_modules/@babel/highlight/node_modules/color-convert/index.js
var BT = T((rPe, NT) => {
  var Uh = qh(), sH = OT(), wi = {}, iH = Object.keys(Uh);
  function aH(e) {
    var t = /* @__PURE__ */ s(function(r) {
      return r == null ? r : (arguments.length > 1 && (r = Array.prototype.slice.call(arguments)), e(r));
    }, "wrappedFn");
    return "conversion" in e && (t.conversion = e.conversion), t;
  }
  s(aH, "wrapRaw");
  function oH(e) {
    var t = /* @__PURE__ */ s(function(r) {
      if (r == null)
        return r;
      arguments.length > 1 && (r = Array.prototype.slice.call(arguments));
      var n = e(r);
      if (typeof n == "object")
        for (var i = n.length, a = 0; a < i; a++)
          n[a] = Math.round(n[a]);
      return n;
    }, "wrappedFn");
    return "conversion" in e && (t.conversion = e.conversion), t;
  }
  s(oH, "wrapRounded");
  iH.forEach(function(e) {
    wi[e] = {}, Object.defineProperty(wi[e], "channels", { value: Uh[e].channels }), Object.defineProperty(wi[e], "labels", { value: Uh[e].labels });
    var t = sH(e), r = Object.keys(t);
    r.forEach(function(n) {
      var i = t[n];
      wi[e][n] = oH(i), wi[e][n].raw = aH(i);
    });
  });
  NT.exports = wi;
});

// ../node_modules/@babel/highlight/node_modules/ansi-styles/index.js
var FT = T((sPe, kT) => {
  "use strict";
  var Di = BT(), zl = /* @__PURE__ */ s((e, t) => function() {
    return `\x1B[${e.apply(Di, arguments) + t}m`;
  }, "wrapAnsi16"), Jl = /* @__PURE__ */ s((e, t) => function() {
    let r = e.apply(Di, arguments);
    return `\x1B[${38 + t};5;${r}m`;
  }, "wrapAnsi256"), Xl = /* @__PURE__ */ s((e, t) => function() {
    let r = e.apply(Di, arguments);
    return `\x1B[${38 + t};2;${r[0]};${r[1]};${r[2]}m`;
  }, "wrapAnsi16m");
  function lH() {
    let e = /* @__PURE__ */ new Map(), t = {
      modifier: {
        reset: [0, 0],
        // 21 isn't widely supported and 22 does the same thing
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        gray: [90, 39],
        // Bright color
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        // Bright color
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    t.color.grey = t.color.gray;
    for (let i of Object.keys(t)) {
      let a = t[i];
      for (let o of Object.keys(a)) {
        let l = a[o];
        t[o] = {
          open: `\x1B[${l[0]}m`,
          close: `\x1B[${l[1]}m`
        }, a[o] = t[o], e.set(l[0], l[1]);
      }
      Object.defineProperty(t, i, {
        value: a,
        enumerable: !1
      }), Object.defineProperty(t, "codes", {
        value: e,
        enumerable: !1
      });
    }
    let r = /* @__PURE__ */ s((i) => i, "ansi2ansi"), n = /* @__PURE__ */ s((i, a, o) => [i, a, o], "rgb2rgb");
    t.color.close = "\x1B[39m", t.bgColor.close = "\x1B[49m", t.color.ansi = {
      ansi: zl(r, 0)
    }, t.color.ansi256 = {
      ansi256: Jl(r, 0)
    }, t.color.ansi16m = {
      rgb: Xl(n, 0)
    }, t.bgColor.ansi = {
      ansi: zl(r, 10)
    }, t.bgColor.ansi256 = {
      ansi256: Jl(r, 10)
    }, t.bgColor.ansi16m = {
      rgb: Xl(n, 10)
    };
    for (let i of Object.keys(Di)) {
      if (typeof Di[i] != "object")
        continue;
      let a = Di[i];
      i === "ansi16" && (i = "ansi"), "ansi16" in a && (t.color.ansi[i] = zl(a.ansi16, 0), t.bgColor.ansi[i] = zl(a.ansi16, 10)), "ansi256" in
      a && (t.color.ansi256[i] = Jl(a.ansi256, 0), t.bgColor.ansi256[i] = Jl(a.ansi256, 10)), "rgb" in a && (t.color.ansi16m[i] = Xl(a.rgb, 0),
      t.bgColor.ansi16m[i] = Xl(a.rgb, 10));
    }
    return t;
  }
  s(lH, "assembleStyles");
  Object.defineProperty(kT, "exports", {
    enumerable: !0,
    get: lH
  });
});

// ../node_modules/@babel/highlight/node_modules/has-flag/index.js
var LT = T((aPe, jT) => {
  "use strict";
  jT.exports = (e, t) => {
    t = t || process.argv;
    let r = e.startsWith("-") ? "" : e.length === 1 ? "-" : "--", n = t.indexOf(r + e), i = t.indexOf("--");
    return n !== -1 && (i === -1 ? !0 : n < i);
  };
});

// ../node_modules/@babel/highlight/node_modules/supports-color/index.js
var RT = T((oPe, MT) => {
  "use strict";
  var uH = require("os"), Wr = LT(), Ht = process.env, Ii;
  Wr("no-color") || Wr("no-colors") || Wr("color=false") ? Ii = !1 : (Wr("color") || Wr("colors") || Wr("color=true") || Wr("color=always")) &&
  (Ii = !0);
  "FORCE_COLOR" in Ht && (Ii = Ht.FORCE_COLOR.length === 0 || parseInt(Ht.FORCE_COLOR, 10) !== 0);
  function cH(e) {
    return e === 0 ? !1 : {
      level: e,
      hasBasic: !0,
      has256: e >= 2,
      has16m: e >= 3
    };
  }
  s(cH, "translateLevel");
  function fH(e) {
    if (Ii === !1)
      return 0;
    if (Wr("color=16m") || Wr("color=full") || Wr("color=truecolor"))
      return 3;
    if (Wr("color=256"))
      return 2;
    if (e && !e.isTTY && Ii !== !0)
      return 0;
    let t = Ii ? 1 : 0;
    if (process.platform === "win32") {
      let r = uH.release().split(".");
      return Number(process.versions.node.split(".")[0]) >= 8 && Number(r[0]) >= 10 && Number(r[2]) >= 10586 ? Number(r[2]) >= 14931 ? 3 : 2 :
      1;
    }
    if ("CI" in Ht)
      return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((r) => r in Ht) || Ht.CI_NAME === "codeship" ? 1 : t;
    if ("TEAMCITY_VERSION" in Ht)
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Ht.TEAMCITY_VERSION) ? 1 : 0;
    if (Ht.COLORTERM === "truecolor")
      return 3;
    if ("TERM_PROGRAM" in Ht) {
      let r = parseInt((Ht.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (Ht.TERM_PROGRAM) {
        case "iTerm.app":
          return r >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    return /-256(color)?$/i.test(Ht.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Ht.TERM) || "COLORTERM" in
    Ht ? 1 : (Ht.TERM === "dumb", t);
  }
  s(fH, "supportsColor");
  function Vh(e) {
    let t = fH(e);
    return cH(t);
  }
  s(Vh, "getSupportLevel");
  MT.exports = {
    supportsColor: Vh,
    stdout: Vh(process.stdout),
    stderr: Vh(process.stderr)
  };
});

// ../node_modules/@babel/highlight/node_modules/chalk/templates.js
var WT = T((uPe, $T) => {
  "use strict";
  var pH = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,
  qT = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g, dH = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/, hH = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi, mH = /* @__PURE__ */ new Map(
  [
    ["n", `
`],
    ["r", "\r"],
    ["t", "	"],
    ["b", "\b"],
    ["f", "\f"],
    ["v", "\v"],
    ["0", "\0"],
    ["\\", "\\"],
    ["e", "\x1B"],
    ["a", "\x07"]
  ]);
  function VT(e) {
    return e[0] === "u" && e.length === 5 || e[0] === "x" && e.length === 3 ? String.fromCharCode(parseInt(e.slice(1), 16)) : mH.get(e) || e;
  }
  s(VT, "unescape");
  function yH(e, t) {
    let r = [], n = t.trim().split(/\s*,\s*/g), i;
    for (let a of n)
      if (!isNaN(a))
        r.push(Number(a));
      else if (i = a.match(dH))
        r.push(i[2].replace(hH, (o, l, u) => l ? VT(l) : u));
      else
        throw new Error(`Invalid Chalk template style argument: ${a} (in style '${e}')`);
    return r;
  }
  s(yH, "parseArguments");
  function gH(e) {
    qT.lastIndex = 0;
    let t = [], r;
    for (; (r = qT.exec(e)) !== null; ) {
      let n = r[1];
      if (r[2]) {
        let i = yH(n, r[2]);
        t.push([n].concat(i));
      } else
        t.push([n]);
    }
    return t;
  }
  s(gH, "parseStyle");
  function UT(e, t) {
    let r = {};
    for (let i of t)
      for (let a of i.styles)
        r[a[0]] = i.inverse ? null : a.slice(1);
    let n = e;
    for (let i of Object.keys(r))
      if (Array.isArray(r[i])) {
        if (!(i in n))
          throw new Error(`Unknown Chalk style: ${i}`);
        r[i].length > 0 ? n = n[i].apply(n, r[i]) : n = n[i];
      }
    return n;
  }
  s(UT, "buildStyle");
  $T.exports = (e, t) => {
    let r = [], n = [], i = [];
    if (t.replace(pH, (a, o, l, u, c, f) => {
      if (o)
        i.push(VT(o));
      else if (u) {
        let p = i.join("");
        i = [], n.push(r.length === 0 ? p : UT(e, r)(p)), r.push({ inverse: l, styles: gH(u) });
      } else if (c) {
        if (r.length === 0)
          throw new Error("Found extraneous } in Chalk template literal");
        n.push(UT(e, r)(i.join(""))), i = [], r.pop();
      } else
        i.push(f);
    }), n.push(i.join("")), r.length > 0) {
      let a = `Chalk template literal is missing ${r.length} closing bracket${r.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(a);
    }
    return n.join("");
  };
});

// ../node_modules/@babel/highlight/node_modules/chalk/index.js
var zT = T((fPe, Za) => {
  "use strict";
  var Wh = ST(), Dt = FT(), $h = RT().stdout, bH = WT(), GT = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith(
  "xterm"), HT = ["ansi", "ansi", "ansi256", "ansi16m"], YT = /* @__PURE__ */ new Set(["gray"]), _i = /* @__PURE__ */ Object.create(null);
  function KT(e, t) {
    t = t || {};
    let r = $h ? $h.level : 0;
    e.level = t.level === void 0 ? r : t.level, e.enabled = "enabled" in t ? t.enabled : e.level > 0;
  }
  s(KT, "applyOptions");
  function Qa(e) {
    if (!this || !(this instanceof Qa) || this.template) {
      let t = {};
      return KT(t, e), t.template = function() {
        let r = [].slice.call(arguments);
        return TH.apply(null, [t.template].concat(r));
      }, Object.setPrototypeOf(t, Qa.prototype), Object.setPrototypeOf(t.template, t), t.template.constructor = Qa, t.template;
    }
    KT(this, e);
  }
  s(Qa, "Chalk");
  GT && (Dt.blue.open = "\x1B[94m");
  for (let e of Object.keys(Dt))
    Dt[e].closeRe = new RegExp(Wh(Dt[e].close), "g"), _i[e] = {
      get() {
        let t = Dt[e];
        return Ql.call(this, this._styles ? this._styles.concat(t) : [t], this._empty, e);
      }
    };
  _i.visible = {
    get() {
      return Ql.call(this, this._styles || [], !0, "visible");
    }
  };
  Dt.color.closeRe = new RegExp(Wh(Dt.color.close), "g");
  for (let e of Object.keys(Dt.color.ansi))
    YT.has(e) || (_i[e] = {
      get() {
        let t = this.level;
        return function() {
          let n = {
            open: Dt.color[HT[t]][e].apply(null, arguments),
            close: Dt.color.close,
            closeRe: Dt.color.closeRe
          };
          return Ql.call(this, this._styles ? this._styles.concat(n) : [n], this._empty, e);
        };
      }
    });
  Dt.bgColor.closeRe = new RegExp(Wh(Dt.bgColor.close), "g");
  for (let e of Object.keys(Dt.bgColor.ansi)) {
    if (YT.has(e))
      continue;
    let t = "bg" + e[0].toUpperCase() + e.slice(1);
    _i[t] = {
      get() {
        let r = this.level;
        return function() {
          let i = {
            open: Dt.bgColor[HT[r]][e].apply(null, arguments),
            close: Dt.bgColor.close,
            closeRe: Dt.bgColor.closeRe
          };
          return Ql.call(this, this._styles ? this._styles.concat(i) : [i], this._empty, e);
        };
      }
    };
  }
  var EH = Object.defineProperties(() => {
  }, _i);
  function Ql(e, t, r) {
    let n = /* @__PURE__ */ s(function() {
      return vH.apply(n, arguments);
    }, "builder");
    n._styles = e, n._empty = t;
    let i = this;
    return Object.defineProperty(n, "level", {
      enumerable: !0,
      get() {
        return i.level;
      },
      set(a) {
        i.level = a;
      }
    }), Object.defineProperty(n, "enabled", {
      enumerable: !0,
      get() {
        return i.enabled;
      },
      set(a) {
        i.enabled = a;
      }
    }), n.hasGrey = this.hasGrey || r === "gray" || r === "grey", n.__proto__ = EH, n;
  }
  s(Ql, "build");
  function vH() {
    let e = arguments, t = e.length, r = String(arguments[0]);
    if (t === 0)
      return "";
    if (t > 1)
      for (let i = 1; i < t; i++)
        r += " " + e[i];
    if (!this.enabled || this.level <= 0 || !r)
      return this._empty ? "" : r;
    let n = Dt.dim.open;
    GT && this.hasGrey && (Dt.dim.open = "");
    for (let i of this._styles.slice().reverse())
      r = i.open + r.replace(i.closeRe, i.open) + i.close, r = r.replace(/\r?\n/g, `${i.close}$&${i.open}`);
    return Dt.dim.open = n, r;
  }
  s(vH, "applyStyle");
  function TH(e, t) {
    if (!Array.isArray(t))
      return [].slice.call(arguments, 1).join(" ");
    let r = [].slice.call(arguments, 2), n = [t.raw[0]];
    for (let i = 1; i < t.length; i++)
      n.push(String(r[i - 1]).replace(/[{}\\]/g, "\\$&")), n.push(String(t.raw[i]));
    return bH(e, n.join(""));
  }
  s(TH, "chalkTag");
  Object.defineProperties(Qa.prototype, _i);
  Za.exports = Qa();
  Za.exports.supportsColor = $h;
  Za.exports.default = Za.exports;
});

// ../node_modules/@babel/highlight/lib/index.js
var nx = T((eo) => {
  "use strict";
  Object.defineProperty(eo, "__esModule", {
    value: !0
  });
  eo.default = IH;
  eo.shouldHighlight = rx;
  var JT = ET(), XT = yi(), Gh = xH(Rh(), !0);
  function ZT(e) {
    if (typeof WeakMap != "function") return null;
    var t = /* @__PURE__ */ new WeakMap(), r = /* @__PURE__ */ new WeakMap();
    return (ZT = /* @__PURE__ */ s(function(n) {
      return n ? r : t;
    }, "_getRequireWildcardCache"))(e);
  }
  s(ZT, "_getRequireWildcardCache");
  function xH(e, t) {
    if (!t && e && e.__esModule) return e;
    if (e === null || typeof e != "object" && typeof e != "function") return { default: e };
    var r = ZT(t);
    if (r && r.has(e)) return r.get(e);
    var n = { __proto__: null }, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var a in e) if (a !== "default" && {}.hasOwnProperty.call(e, a)) {
      var o = i ? Object.getOwnPropertyDescriptor(e, a) : null;
      o && (o.get || o.set) ? Object.defineProperty(n, a, o) : n[a] = e[a];
    }
    return n.default = e, r && r.set(e, n), n;
  }
  s(xH, "_interopRequireWildcard");
  var ex = typeof process == "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, Gh.createColors)(!1) :
  Gh.default, QT = /* @__PURE__ */ s((e, t) => (r) => e(t(r)), "compose"), SH = /* @__PURE__ */ new Set(["as", "async", "from", "get", "of",
  "set"]);
  function PH(e) {
    return {
      keyword: e.cyan,
      capitalized: e.yellow,
      jsxIdentifier: e.yellow,
      punctuator: e.yellow,
      number: e.magenta,
      string: e.green,
      regex: e.magenta,
      comment: e.gray,
      invalid: QT(QT(e.white, e.bgRed), e.bold)
    };
  }
  s(PH, "getDefs");
  var AH = /\r\n|[\n\r\u2028\u2029]/, CH = /^[()[\]{}]$/, tx;
  {
    let e = /^[a-z][\w-]*$/i, t = /* @__PURE__ */ s(function(r, n, i) {
      if (r.type === "name") {
        if ((0, XT.isKeyword)(r.value) || (0, XT.isStrictReservedWord)(r.value, !0) || SH.has(r.value))
          return "keyword";
        if (e.test(r.value) && (i[n - 1] === "<" || i.slice(n - 2, n) === "</"))
          return "jsxIdentifier";
        if (r.value[0] !== r.value[0].toLowerCase())
          return "capitalized";
      }
      return r.type === "punctuator" && CH.test(r.value) ? "bracket" : r.type === "invalid" && (r.value === "@" || r.value === "#") ? "punct\
uator" : r.type;
    }, "getTokenType");
    tx = /* @__PURE__ */ s(function* (r) {
      let n;
      for (; n = JT.default.exec(r); ) {
        let i = JT.matchToToken(n);
        yield {
          type: t(i, n.index, r),
          value: i.value
        };
      }
    }, "tokenize");
  }
  function wH(e, t) {
    let r = "";
    for (let {
      type: n,
      value: i
    } of tx(t)) {
      let a = e[n];
      a ? r += i.split(AH).map((o) => a(o)).join(`
`) : r += i;
    }
    return r;
  }
  s(wH, "highlightTokens");
  function rx(e) {
    return ex.isColorSupported || e.forceColor;
  }
  s(rx, "shouldHighlight");
  var Kh;
  function DH(e) {
    if (e) {
      var t;
      return (t = Kh) != null || (Kh = (0, Gh.createColors)(!0)), Kh;
    }
    return ex;
  }
  s(DH, "getColors");
  function IH(e, t = {}) {
    if (e !== "" && rx(t)) {
      let r = PH(DH(t.forceColor));
      return wH(r, e);
    } else
      return e;
  }
  s(IH, "highlight");
  {
    let e, t;
    eo.getChalk = ({
      forceColor: r
    }) => {
      var n;
      if ((n = e) != null || (e = zT()), r) {
        var i;
        return (i = t) != null || (t = new e.constructor({
          enabled: !0,
          level: 1
        })), t;
      }
      return e;
    };
  }
});

// ../node_modules/@babel/code-frame/lib/index.js
var to = T((Zl) => {
  "use strict";
  Object.defineProperty(Zl, "__esModule", {
    value: !0
  });
  Zl.codeFrameColumns = ux;
  Zl.default = FH;
  var sx = nx(), Yh = _H(Rh(), !0);
  function lx(e) {
    if (typeof WeakMap != "function") return null;
    var t = /* @__PURE__ */ new WeakMap(), r = /* @__PURE__ */ new WeakMap();
    return (lx = /* @__PURE__ */ s(function(n) {
      return n ? r : t;
    }, "_getRequireWildcardCache"))(e);
  }
  s(lx, "_getRequireWildcardCache");
  function _H(e, t) {
    if (!t && e && e.__esModule) return e;
    if (e === null || typeof e != "object" && typeof e != "function") return { default: e };
    var r = lx(t);
    if (r && r.has(e)) return r.get(e);
    var n = { __proto__: null }, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var a in e) if (a !== "default" && {}.hasOwnProperty.call(e, a)) {
      var o = i ? Object.getOwnPropertyDescriptor(e, a) : null;
      o && (o.get || o.set) ? Object.defineProperty(n, a, o) : n[a] = e[a];
    }
    return n.default = e, r && r.set(e, n), n;
  }
  s(_H, "_interopRequireWildcard");
  var OH = typeof process == "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, Yh.createColors)(!1) :
  Yh.default, ix = /* @__PURE__ */ s((e, t) => (r) => e(t(r)), "compose"), Hh;
  function NH(e) {
    if (e) {
      var t;
      return (t = Hh) != null || (Hh = (0, Yh.createColors)(!0)), Hh;
    }
    return OH;
  }
  s(NH, "getColors");
  var ax = !1;
  function BH(e) {
    return {
      gutter: e.gray,
      marker: ix(e.red, e.bold),
      message: ix(e.red, e.bold)
    };
  }
  s(BH, "getDefs");
  var ox = /\r\n|[\n\r\u2028\u2029]/;
  function kH(e, t, r) {
    let n = Object.assign({
      column: 0,
      line: -1
    }, e.start), i = Object.assign({}, n, e.end), {
      linesAbove: a = 2,
      linesBelow: o = 3
    } = r || {}, l = n.line, u = n.column, c = i.line, f = i.column, p = Math.max(l - (a + 1), 0), h = Math.min(t.length, c + o);
    l === -1 && (p = 0), c === -1 && (h = t.length);
    let y = c - l, v = {};
    if (y)
      for (let d = 0; d <= y; d++) {
        let b = d + l;
        if (!u)
          v[b] = !0;
        else if (d === 0) {
          let E = t[b - 1].length;
          v[b] = [u, E - u + 1];
        } else if (d === y)
          v[b] = [0, f];
        else {
          let E = t[b - d].length;
          v[b] = [0, E];
        }
      }
    else
      u === f ? u ? v[l] = [u, 0] : v[l] = !0 : v[l] = [u, f - u];
    return {
      start: p,
      end: h,
      markerLines: v
    };
  }
  s(kH, "getMarkerLines");
  function ux(e, t, r = {}) {
    let n = (r.highlightCode || r.forceColor) && (0, sx.shouldHighlight)(r), i = NH(r.forceColor), a = BH(i), o = /* @__PURE__ */ s((d, b) => n ?
    d(b) : b, "maybeHighlight"), l = e.split(ox), {
      start: u,
      end: c,
      markerLines: f
    } = kH(t, l, r), p = t.start && typeof t.start.column == "number", h = String(c).length, v = (n ? (0, sx.default)(e, r) : e).split(ox, c).
    slice(u, c).map((d, b) => {
      let E = u + 1 + b, O = ` ${` ${E}`.slice(-h)} |`, k = f[E], j = !f[E + 1];
      if (k) {
        let R = "";
        if (Array.isArray(k)) {
          let U = d.slice(0, Math.max(k[0] - 1, 0)).replace(/[^\t]/g, " "), Q = k[1] || 1;
          R = [`
 `, o(a.gutter, O.replace(/\d/g, " ")), " ", U, o(a.marker, "^").repeat(Q)].join(""), j && r.message && (R += " " + o(a.message, r.message));
        }
        return [o(a.marker, ">"), o(a.gutter, O), d.length > 0 ? ` ${d}` : "", R].join("");
      } else
        return ` ${o(a.gutter, O)}${d.length > 0 ? ` ${d}` : ""}`;
    }).join(`
`);
    return r.message && !p && (v = `${" ".repeat(h + 1)}${r.message}
${v}`), n ? i.reset(v) : v;
  }
  s(ux, "codeFrameColumns");
  function FH(e, t, r, n = {}) {
    if (!ax) {
      ax = !0;
      let a = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
      if (process.emitWarning)
        process.emitWarning(a, "DeprecationWarning");
      else {
        let o = new Error(a);
        o.name = "DeprecationWarning", console.warn(new Error(a));
      }
    }
    return r = Math.max(r, 0), ux(e, {
      start: {
        column: r,
        line: t
      }
    }, n);
  }
  s(FH, "_default");
});

// ../node_modules/@babel/template/lib/parse.js
var Jh = T((zh) => {
  "use strict";
  Object.defineProperty(zh, "__esModule", {
    value: !0
  });
  zh.default = zH;
  var jH = Se(), LH = js(), MH = to(), {
    isCallExpression: RH,
    isExpressionStatement: qH,
    isFunction: UH,
    isIdentifier: VH,
    isJSXIdentifier: $H,
    isNewExpression: WH,
    isPlaceholder: eu,
    isStatement: KH,
    isStringLiteral: cx,
    removePropertiesDeep: GH,
    traverse: HH
  } = jH, YH = /^[_$A-Z0-9]+$/;
  function zH(e, t, r) {
    let {
      placeholderWhitelist: n,
      placeholderPattern: i,
      preserveComments: a,
      syntacticPlaceholders: o
    } = r, l = QH(t, r.parser, o);
    GH(l, {
      preserveComments: a
    }), e.validate(l);
    let u = {
      syntactic: {
        placeholders: [],
        placeholderNames: /* @__PURE__ */ new Set()
      },
      legacy: {
        placeholders: [],
        placeholderNames: /* @__PURE__ */ new Set()
      },
      placeholderWhitelist: n,
      placeholderPattern: i,
      syntacticPlaceholders: o
    };
    return HH(l, JH, u), Object.assign({
      ast: l
    }, u.syntactic.placeholders.length ? u.syntactic : u.legacy);
  }
  s(zH, "parseAndBuildMetadata");
  function JH(e, t, r) {
    var n;
    let i, a = r.syntactic.placeholders.length > 0;
    if (eu(e)) {
      if (r.syntacticPlaceholders === !1)
        throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
      i = e.name.name, a = !0;
    } else {
      if (a || r.syntacticPlaceholders)
        return;
      if (VH(e) || $H(e))
        i = e.name;
      else if (cx(e))
        i = e.value;
      else
        return;
    }
    if (a && (r.placeholderPattern != null || r.placeholderWhitelist != null))
      throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
    if (!a && (r.placeholderPattern === !1 || !(r.placeholderPattern || YH).test(i)) && !((n = r.placeholderWhitelist) != null && n.has(i)))
      return;
    t = t.slice();
    let {
      node: o,
      key: l
    } = t[t.length - 1], u;
    cx(e) || eu(e, {
      expectedNode: "StringLiteral"
    }) ? u = "string" : WH(o) && l === "arguments" || RH(o) && l === "arguments" || UH(o) && l === "params" ? u = "param" : qH(o) && !eu(e) ?
    (u = "statement", t = t.slice(0, -1)) : KH(e) && eu(e) ? u = "statement" : u = "other";
    let {
      placeholders: c,
      placeholderNames: f
    } = a ? r.syntactic : r.legacy;
    c.push({
      name: i,
      type: u,
      resolve: /* @__PURE__ */ s((p) => XH(p, t), "resolve"),
      isDuplicate: f.has(i)
    }), f.add(i);
  }
  s(JH, "placeholderVisitorHandler");
  function XH(e, t) {
    let r = e;
    for (let a = 0; a < t.length - 1; a++) {
      let {
        key: o,
        index: l
      } = t[a];
      l === void 0 ? r = r[o] : r = r[o][l];
    }
    let {
      key: n,
      index: i
    } = t[t.length - 1];
    return {
      parent: r,
      key: n,
      index: i
    };
  }
  s(XH, "resolveAncestors");
  function QH(e, t, r) {
    let n = (t.plugins || []).slice();
    r !== !1 && n.push("placeholders"), t = Object.assign({
      allowReturnOutsideFunction: !0,
      allowSuperOutsideMethod: !0,
      sourceType: "module"
    }, t, {
      plugins: n
    });
    try {
      return (0, LH.parse)(e, t);
    } catch (i) {
      let a = i.loc;
      throw a && (i.message += `
` + (0, MH.codeFrameColumns)(e, {
        start: a
      }), i.code = "BABEL_TEMPLATE_PARSE_ERROR"), i;
    }
  }
  s(QH, "parseWithCodeFrame");
});

// ../node_modules/@babel/template/lib/populate.js
var em = T((Zh) => {
  "use strict";
  Object.defineProperty(Zh, "__esModule", {
    value: !0
  });
  Zh.default = sY;
  var ZH = Se(), {
    blockStatement: eY,
    cloneNode: Qh,
    emptyStatement: tY,
    expressionStatement: Xh,
    identifier: tu,
    isStatement: fx,
    isStringLiteral: rY,
    stringLiteral: nY,
    validate: px
  } = ZH;
  function sY(e, t) {
    let r = Qh(e.ast);
    return t && (e.placeholders.forEach((n) => {
      if (!hasOwnProperty.call(t, n.name)) {
        let i = n.name;
        throw new Error(`Error: No substitution given for "${i}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${i}'])}
            - { placeholderPattern: /^${i}$/ }`);
      }
    }), Object.keys(t).forEach((n) => {
      if (!e.placeholderNames.has(n))
        throw new Error(`Unknown substitution "${n}" given`);
    })), e.placeholders.slice().reverse().forEach((n) => {
      try {
        iY(n, r, t && t[n.name] || null);
      } catch (i) {
        throw i.message = `@babel/template placeholder "${n.name}": ${i.message}`, i;
      }
    }), r;
  }
  s(sY, "populatePlaceholders");
  function iY(e, t, r) {
    e.isDuplicate && (Array.isArray(r) ? r = r.map((l) => Qh(l)) : typeof r == "object" && (r = Qh(r)));
    let {
      parent: n,
      key: i,
      index: a
    } = e.resolve(t);
    if (e.type === "string") {
      if (typeof r == "string" && (r = nY(r)), !r || !rY(r))
        throw new Error("Expected string substitution");
    } else if (e.type === "statement")
      a === void 0 ? r ? Array.isArray(r) ? r = eY(r) : typeof r == "string" ? r = Xh(tu(r)) : fx(r) || (r = Xh(r)) : r = tY() : r && !Array.
      isArray(r) && (typeof r == "string" && (r = tu(r)), fx(r) || (r = Xh(r)));
    else if (e.type === "param") {
      if (typeof r == "string" && (r = tu(r)), a === void 0) throw new Error("Assertion failure.");
    } else if (typeof r == "string" && (r = tu(r)), Array.isArray(r))
      throw new Error("Cannot replace single expression with an array.");
    function o(l, u, c) {
      let f = l[u];
      l[u] = c, f.type === "Identifier" && (f.typeAnnotation && (c.typeAnnotation = f.typeAnnotation), f.optional && (c.optional = f.optional),
      f.decorators && (c.decorators = f.decorators));
    }
    if (s(o, "set"), a === void 0)
      px(n, i, r), o(n, i, r);
    else {
      let l = n[i].slice();
      e.type === "statement" || e.type === "param" ? r == null ? l.splice(a, 1) : Array.isArray(r) ? l.splice(a, 1, ...r) : o(l, a, r) : o(l,
      a, r), px(n, i, l), n[i] = l;
    }
  }
  s(iY, "applyReplacement");
});

// ../node_modules/@babel/template/lib/string.js
var dx = T((tm) => {
  "use strict";
  Object.defineProperty(tm, "__esModule", {
    value: !0
  });
  tm.default = uY;
  var aY = Fl(), oY = Jh(), lY = em();
  function uY(e, t, r) {
    t = e.code(t);
    let n;
    return (i) => {
      let a = (0, aY.normalizeReplacements)(i);
      return n || (n = (0, oY.default)(e, t, r)), e.unwrap((0, lY.default)(n, a));
    };
  }
  s(uY, "stringTemplate");
});

// ../node_modules/@babel/template/lib/literal.js
var hx = T((rm) => {
  "use strict";
  Object.defineProperty(rm, "__esModule", {
    value: !0
  });
  rm.default = dY;
  var cY = Fl(), fY = Jh(), pY = em();
  function dY(e, t, r) {
    let {
      metadata: n,
      names: i
    } = hY(e, t, r);
    return (a) => {
      let o = {};
      return a.forEach((l, u) => {
        o[i[u]] = l;
      }), (l) => {
        let u = (0, cY.normalizeReplacements)(l);
        return u && Object.keys(u).forEach((c) => {
          if (hasOwnProperty.call(o, c))
            throw new Error("Unexpected replacement overlap.");
        }), e.unwrap((0, pY.default)(n, u ? Object.assign(u, o) : o));
      };
    };
  }
  s(dY, "literalTemplate");
  function hY(e, t, r) {
    let n = "BABEL_TPL$", i = t.join("");
    do
      n = "$$" + n;
    while (i.includes(n));
    let {
      names: a,
      code: o
    } = mY(t, n);
    return {
      metadata: (0, fY.default)(e, e.code(o), {
        parser: r.parser,
        placeholderWhitelist: new Set(a.concat(r.placeholderWhitelist ? Array.from(r.placeholderWhitelist) : [])),
        placeholderPattern: r.placeholderPattern,
        preserveComments: r.preserveComments,
        syntacticPlaceholders: r.syntacticPlaceholders
      }),
      names: a
    };
  }
  s(hY, "buildLiteralData");
  function mY(e, t) {
    let r = [], n = e[0];
    for (let i = 1; i < e.length; i++) {
      let a = `${t}${i - 1}`;
      r.push(a), n += a + e[i];
    }
    return {
      names: r,
      code: n
    };
  }
  s(mY, "buildTemplateCode");
});

// ../node_modules/@babel/template/lib/builder.js
var vx = T((nm) => {
  "use strict";
  Object.defineProperty(nm, "__esModule", {
    value: !0
  });
  nm.default = Ex;
  var fn = Fl(), mx = dx(), yx = hx(), gx = (0, fn.validate)({
    placeholderPattern: !1
  });
  function Ex(e, t) {
    let r = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap(), i = t || (0, fn.validate)(null);
    return Object.assign((a, ...o) => {
      if (typeof a == "string") {
        if (o.length > 1) throw new Error("Unexpected extra params.");
        return bx((0, mx.default)(e, a, (0, fn.merge)(i, (0, fn.validate)(o[0]))));
      } else if (Array.isArray(a)) {
        let l = r.get(a);
        return l || (l = (0, yx.default)(e, a, i), r.set(a, l)), bx(l(o));
      } else if (typeof a == "object" && a) {
        if (o.length > 0) throw new Error("Unexpected extra params.");
        return Ex(e, (0, fn.merge)(i, (0, fn.validate)(a)));
      }
      throw new Error(`Unexpected template param ${typeof a}`);
    }, {
      ast: /* @__PURE__ */ s((a, ...o) => {
        if (typeof a == "string") {
          if (o.length > 1) throw new Error("Unexpected extra params.");
          return (0, mx.default)(e, a, (0, fn.merge)((0, fn.merge)(i, (0, fn.validate)(o[0])), gx))();
        } else if (Array.isArray(a)) {
          let l = n.get(a);
          return l || (l = (0, yx.default)(e, a, (0, fn.merge)(i, gx)), n.set(a, l)), l(o)();
        }
        throw new Error(`Unexpected template param ${typeof a}`);
      }, "ast")
    });
  }
  s(Ex, "createTemplateBuilder");
  function bx(e) {
    let t = "";
    try {
      throw new Error();
    } catch (r) {
      r.stack && (t = r.stack.split(`
`).slice(3).join(`
`));
    }
    return (r) => {
      try {
        return e(r);
      } catch (n) {
        throw n.stack += `
    =============
${t}`, n;
      }
    };
  }
  s(bx, "extendedTrace");
});

// ../node_modules/@babel/template/lib/index.js
var Oi = T((hr) => {
  "use strict";
  Object.defineProperty(hr, "__esModule", {
    value: !0
  });
  hr.statements = hr.statement = hr.smart = hr.program = hr.expression = hr.default = void 0;
  var ro = Vv(), no = vx(), sm = hr.smart = (0, no.default)(ro.smart), yY = hr.statement = (0, no.default)(ro.statement), gY = hr.statements =
  (0, no.default)(ro.statements), bY = hr.expression = (0, no.default)(ro.expression), EY = hr.program = (0, no.default)(ro.program), wPe = hr.
  default = Object.assign(sm.bind(void 0), {
    smart: sm,
    statement: yY,
    statements: gY,
    expression: bY,
    program: EY,
    ast: sm.ast
  });
});

// ../node_modules/@babel/helpers/lib/helpers-generated.js
var Tx = T((ru) => {
  "use strict";
  Object.defineProperty(ru, "__esModule", {
    value: !0
  });
  ru.default = void 0;
  var vY = Oi();
  function G(e, t, r) {
    return Object.freeze({
      minVersion: e,
      ast: /* @__PURE__ */ s(() => vY.default.program.ast(t, {
        preserveComments: !0
      }), "ast"),
      metadata: r
    });
  }
  s(G, "helper");
  var TY = ru.default = {
    __proto__: null,
    OverloadYield: G("7.18.14", "function _OverloadYield(e,d){this.v=e,this.k=d}", {
      globals: [],
      locals: {
        _OverloadYield: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_OverloadYield",
      dependencies: {}
    }),
    applyDecoratedDescriptor: G("7.0.0-beta.0", 'function _applyDecoratedDescriptor(i,e,r,n,l){var a={};return Object.keys(n).forEach((funct\
ion(i){a[i]=n[i]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().re\
verse().reduce((function(r,n){return n(i,e,r)||r}),a),l&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(l):void 0,a.initi\
alizer=void 0),void 0===a.initializer?(Object.defineProperty(i,e,a),null):a}', {
      globals: ["Object"],
      locals: {
        _applyDecoratedDescriptor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_applyDecoratedDescriptor",
      dependencies: {}
    }),
    applyDecs2311: G("7.24.0", 'function applyDecs2311(e,t,n,r,o,i){var a,c,u,s,f,l,p,d=Symbol.metadata||Symbol.for("Symbol.metadata"),m=Obj\
ect.defineProperty,h=Object.create,y=[h(null),h(null)],v=t.length;function g(t,n,r){return function(o,i){n&&(i=o,o=e);for(var a=0;a<t.length\
;a++)i=t[a].apply(o,r?[i]:[]);return r?i:o}}function b(e,t,n,r){if("function"!=typeof e&&(r||void 0!==e))throw new TypeError(t+" must "+(n||\
"be")+" a function"+(r?"":" or undefined"));return e}function applyDec(e,t,n,r,o,i,u,s,f,l,p){function d(e){if(!p(e))throw new TypeError("At\
tempted to access private element on non-instance")}var h=[].concat(t[0]),v=t[3],w=!u,D=1===o,S=3===o,j=4===o,E=2===o;function I(t,n,r){retu\
rn function(o,i){return n&&(i=o,o=e),r&&r(o),P[t].call(o,i)}}if(!w){var P={},k=[],F=S?"get":j||D?"set":"value";if(f?(l||D?P={get:setFunction\
Name((function(){return v(this)}),r,"get"),set:function(e){t[4](this,e)}}:P[F]=v,l||setFunctionName(P[F],r,E?"":F)):l||(P=Object.getOwnPrope\
rtyDescriptor(e,r)),!l&&!f){if((c=y[+s][r])&&7!=(c^o))throw Error("Decorating two elements with the same name ("+P[F].name+") is not support\
ed yet");y[+s][r]=o<3?1:o}}for(var N=e,O=h.length-1;O>=0;O-=n?2:1){var T=b(h[O],"A decorator","be",!0),z=n?h[O-1]:void 0,A={},H={kind:["fiel\
d","accessor","method","getter","setter","class"][o],name:r,metadata:a,addInitializer:function(e,t){if(e.v)throw new TypeError("attempted to\
 call addInitializer after decoration was finished");b(t,"An initializer","be",!0),i.push(t)}.bind(null,A)};if(w)c=T.call(z,N,H),A.v=1,b(c,"\
class decorators","return")&&(N=c);else if(H.static=s,H.private=f,c=H.access={has:f?p.bind():function(e){return r in e}},j||(c.get=f?E?funct\
ion(e){return d(e),P.value}:I("get",0,d):function(e){return e[r]}),E||S||(c.set=f?I("set",0,d):function(e,t){e[r]=t}),N=T.call(z,D?{get:P.ge\
t,set:P.set}:P[F],H),A.v=1,D){if("object"==typeof N&&N)(c=b(N.get,"accessor.get"))&&(P.get=c),(c=b(N.set,"accessor.set"))&&(P.set=c),(c=b(N.\
init,"accessor.init"))&&k.unshift(c);else if(void 0!==N)throw new TypeError("accessor decorators must return an object with get, set, or ini\
t properties or undefined")}else b(N,(l?"field":"method")+" decorators","return")&&(l?k.unshift(N):P[F]=N)}return o<2&&u.push(g(k,s,1),g(i,s\
,0)),l||w||(f?D?u.splice(-1,0,I("get",s),I("set",s)):u.push(E?P[F]:b.call.bind(P[F])):m(e,r,P)),N}function w(e){return m(e,d,{configurable:!\
0,enumerable:!0,value:a})}return void 0!==i&&(a=i[d]),a=h(null==a?null:a),f=[],l=function(e){e&&f.push(g(e))},p=function(t,r){for(var i=0;i<\
n.length;i++){var a=n[i],c=a[1],l=7&c;if((8&c)==t&&!l==r){var p=a[2],d=!!a[3],m=16&c;applyDec(t?e:e.prototype,a,m,d?"#"+p:toPropertyKey(p),l\
,l<2?[]:t?s=s||[]:u=u||[],f,!!t,d,r,t&&d?function(t){return checkInRHS(t)===e}:o)}}},p(8,0),p(0,0),p(8,1),p(0,1),l(u),l(s),c=f,v||w(e),{e:c,\
get c(){var n=[];return v&&[w(e=applyDec(e,[t],r,e.name,5,n)),g(n,1)]}}}', {
      globals: ["Symbol", "Object", "TypeError", "Error"],
      locals: {
        applyDecs2311: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "applyDecs2311",
      dependencies: {
        checkInRHS: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.10.cons\
equent.body.body.0.argument.left.callee"],
        setFunctionName: ["body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.0.consequent.right.pro\
perties.0.value.callee", "body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.1.right.callee"],
        toPropertyKey: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.3.al\
ternate.callee"]
      }
    }),
    arrayLikeToArray: G("7.9.0", "function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[\
e];return n}", {
      globals: ["Array"],
      locals: {
        _arrayLikeToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayLikeToArray",
      dependencies: {}
    }),
    arrayWithHoles: G("7.0.0-beta.0", "function _arrayWithHoles(r){if(Array.isArray(r))return r}", {
      globals: ["Array"],
      locals: {
        _arrayWithHoles: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayWithHoles",
      dependencies: {}
    }),
    arrayWithoutHoles: G("7.0.0-beta.0", "function _arrayWithoutHoles(r){if(Array.isArray(r))return arrayLikeToArray(r)}", {
      globals: ["Array"],
      locals: {
        _arrayWithoutHoles: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayWithoutHoles",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.argument.callee"]
      }
    }),
    assertClassBrand: G("7.24.0", 'function _assertClassBrand(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;th\
row new TypeError("Private element is not present on this object")}', {
      globals: ["TypeError"],
      locals: {
        _assertClassBrand: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_assertClassBrand",
      dependencies: {}
    }),
    assertThisInitialized: G("7.0.0-beta.0", `function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been in\
itialised - super() hasn't been called");return e}`, {
      globals: ["ReferenceError"],
      locals: {
        _assertThisInitialized: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_assertThisInitialized",
      dependencies: {}
    }),
    asyncGeneratorDelegate: G("7.0.0-beta.0", 'function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promis\
e((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=func\
tion(){return this},e.next=function(t){return n?(n=!1,t):pump("next",t)},"function"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;\
return pump("throw",t)}),"function"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump("return",t)}),e}', {
      globals: ["Promise", "Symbol"],
      locals: {
        _asyncGeneratorDelegate: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncGeneratorDelegate",
      dependencies: {
        OverloadYield: ["body.0.body.body.1.body.body.0.argument.expressions.2.properties.1.value.callee"]
      }
    }),
    asyncIterator: G("7.15.9", 'function _asyncIterator(r){var n,t,o,e=2;for("undefined"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.it\
erator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t="@@asyncIterator",o="\
@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation\
(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var n=r.done;return Promise.resolve(r.value).then((functio\
n(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:nu\
ll,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return v\
oid 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.re\
turn;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}', {
      globals: ["Symbol", "TypeError", "Object", "Promise"],
      locals: {
        _asyncIterator: ["body.0.id"],
        AsyncFromSyncIterator: ["body.1.id", "body.0.body.body.1.body.body.1.consequent.argument.callee", "body.1.body.body.1.argument.expre\
ssions.1.left.object", "body.1.body.body.1.argument.expressions.2.callee", "body.1.body.body.1.argument.expressions.0.left"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncIterator",
      dependencies: {}
    }),
    asyncToGenerator: G("7.0.0-beta.0", 'function asyncGeneratorStep(n,t,e,r,o,a,c){try{var i=n[a](c),u=i.value}catch(n){return void e(n)}i.\
done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(n){return function(){var t=this,e=arguments;return new Promise((function(r\
,o){var a=n.apply(t,e);function _next(n){asyncGeneratorStep(a,r,o,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(a,r,o,_next,_\
throw,"throw",n)}_next(void 0)}))}}', {
      globals: ["Promise"],
      locals: {
        asyncGeneratorStep: ["body.0.id", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.1.body.body.0.expression.c\
allee", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.2.body.body.0.expression.callee"],
        _asyncToGenerator: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncToGenerator",
      dependencies: {}
    }),
    awaitAsyncGenerator: G("7.0.0-beta.0", "function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}", {
      globals: [],
      locals: {
        _awaitAsyncGenerator: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_awaitAsyncGenerator",
      dependencies: {
        OverloadYield: ["body.0.body.body.0.argument.callee"]
      }
    }),
    callSuper: G("7.23.8", "function _callSuper(t,o,e){return o=getPrototypeOf(o),possibleConstructorReturn(t,isNativeReflectConstruct()?Ref\
lect.construct(o,e||[],getPrototypeOf(t).constructor):o.apply(t,e))}", {
      globals: ["Reflect"],
      locals: {
        _callSuper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_callSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.0.argument.expressions.0.right.callee", "body.0.body.body.0.argument.expressions.1.arguments.1.co\
nsequent.arguments.2.object.callee"],
        isNativeReflectConstruct: ["body.0.body.body.0.argument.expressions.1.arguments.1.test.callee"],
        possibleConstructorReturn: ["body.0.body.body.0.argument.expressions.1.callee"]
      }
    }),
    checkInRHS: G("7.20.5", `function _checkInRHS(e){if(Object(e)!==e)throw TypeError("right-hand side of 'in' should be an object, got "+(n\
ull!==e?typeof e:"null"));return e}`, {
      globals: ["Object", "TypeError"],
      locals: {
        _checkInRHS: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_checkInRHS",
      dependencies: {}
    }),
    checkPrivateRedeclaration: G("7.14.1", 'function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError("Cannot initialize the \
same private elements twice on an object")}', {
      globals: ["TypeError"],
      locals: {
        _checkPrivateRedeclaration: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_checkPrivateRedeclaration",
      dependencies: {}
    }),
    classCallCheck: G("7.0.0-beta.0", 'function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError("Cannot call a class as a func\
tion")}', {
      globals: ["TypeError"],
      locals: {
        _classCallCheck: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classCallCheck",
      dependencies: {}
    }),
    classNameTDZError: G("7.0.0-beta.0", `function _classNameTDZError(e){throw new ReferenceError('Class "'+e+'" cannot be referenced in com\
puted property keys.')}`, {
      globals: ["ReferenceError"],
      locals: {
        _classNameTDZError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classNameTDZError",
      dependencies: {}
    }),
    classPrivateFieldGet2: G("7.24.0", "function _classPrivateFieldGet2(s,a){return s.get(assertClassBrand(s,a))}", {
      globals: [],
      locals: {
        _classPrivateFieldGet2: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldGet2",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"]
      }
    }),
    classPrivateFieldInitSpec: G("7.14.1", "function _classPrivateFieldInitSpec(e,t,a){checkPrivateRedeclaration(e,t),t.set(e,a)}", {
      globals: [],
      locals: {
        _classPrivateFieldInitSpec: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldInitSpec",
      dependencies: {
        checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"]
      }
    }),
    classPrivateFieldLooseBase: G("7.0.0-beta.0", 'function _classPrivateFieldBase(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError(\
"attempted to use private field on non-instance");return e}', {
      globals: ["TypeError"],
      locals: {
        _classPrivateFieldBase: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldBase",
      dependencies: {}
    }),
    classPrivateFieldLooseKey: G("7.0.0-beta.0", 'var id=0;function _classPrivateFieldKey(e){return"__private_"+id+++"_"+e}', {
      globals: [],
      locals: {
        id: ["body.0.declarations.0.id", "body.1.body.body.0.argument.left.left.right.argument", "body.1.body.body.0.argument.left.left.righ\
t.argument"],
        _classPrivateFieldKey: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldKey",
      dependencies: {}
    }),
    classPrivateFieldSet2: G("7.24.0", "function _classPrivateFieldSet2(s,a,r){return s.set(assertClassBrand(s,a),r),r}", {
      globals: [],
      locals: {
        _classPrivateFieldSet2: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldSet2",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"]
      }
    }),
    classPrivateGetter: G("7.24.0", "function _classPrivateGetter(s,r,a){return a(assertClassBrand(s,r))}", {
      globals: [],
      locals: {
        _classPrivateGetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateGetter",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"]
      }
    }),
    classPrivateMethodInitSpec: G("7.14.1", "function _classPrivateMethodInitSpec(e,a){checkPrivateRedeclaration(e,a),a.add(e)}", {
      globals: [],
      locals: {
        _classPrivateMethodInitSpec: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateMethodInitSpec",
      dependencies: {
        checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"]
      }
    }),
    classPrivateSetter: G("7.24.0", "function _classPrivateSetter(s,r,a,t){return r(assertClassBrand(s,a),t),t}", {
      globals: [],
      locals: {
        _classPrivateSetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateSetter",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"]
      }
    }),
    classStaticPrivateMethodGet: G("7.3.2", "function _classStaticPrivateMethodGet(s,a,t){return assertClassBrand(a,s),t}", {
      globals: [],
      locals: {
        _classStaticPrivateMethodGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateMethodGet",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"]
      }
    }),
    construct: G("7.0.0-beta.0", "function _construct(t,e,r){if(isNativeReflectConstruct())return Reflect.construct.apply(null,arguments);va\
r o=[null];o.push.apply(o,e);var p=new(t.bind.apply(t,o));return r&&setPrototypeOf(p,r.prototype),p}", {
      globals: ["Reflect"],
      locals: {
        _construct: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_construct",
      dependencies: {
        isNativeReflectConstruct: ["body.0.body.body.0.test.callee"],
        setPrototypeOf: ["body.0.body.body.4.argument.expressions.0.right.callee"]
      }
    }),
    createClass: G("7.0.0-beta.0", 'function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.c\
onfigurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineP\
roperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}', {
      globals: ["Object"],
      locals: {
        _defineProperties: ["body.0.id", "body.1.body.body.0.argument.expressions.0.right.callee", "body.1.body.body.0.argument.expressions.\
1.right.callee"],
        _createClass: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createClass",
      dependencies: {
        toPropertyKey: ["body.0.body.body.0.body.body.1.expression.expressions.3.arguments.1.callee"]
      }
    }),
    createForOfIteratorHelper: G("7.9.0", 'function _createForOfIteratorHelper(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.iterator]||r[\
"@@iterator"];if(!t){if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var n=0,F=function(){\
};return{s:F,n:function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}},e:function(r){throw r},f:F}}throw new TypeError("Invalid atte\
mpt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;\
return{s:function(){t=t.call(r)},n:function(){var r=t.next();return a=r.done,r},e:function(r){u=!0,o=r},f:function(){try{a||null==t.return||\
t.return()}finally{if(u)throw o}}}}', {
      globals: ["Symbol", "Array", "TypeError"],
      locals: {
        _createForOfIteratorHelper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createForOfIteratorHelper",
      dependencies: {
        unsupportedIterableToArray: ["body.0.body.body.1.consequent.body.0.test.left.right.right.callee"]
      }
    }),
    createForOfIteratorHelperLoose: G("7.9.0", 'function _createForOfIteratorHelperLoose(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.ite\
rator]||r["@@iterator"];if(t)return(t=t.call(r)).next.bind(t);if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof\
 r.length){t&&(r=t);var o=0;return function(){return o>=r.length?{done:!0}:{done:!1,value:r[o++]}}}throw new TypeError("Invalid attempt to i\
terate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', {
      globals: ["Symbol", "Array", "TypeError"],
      locals: {
        _createForOfIteratorHelperLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createForOfIteratorHelperLoose",
      dependencies: {
        unsupportedIterableToArray: ["body.0.body.body.2.test.left.right.right.callee"]
      }
    }),
    createSuper: G("7.9.0", "function _createSuper(t){var r=isNativeReflectConstruct();return function(){var e,o=getPrototypeOf(t);if(r){var\
 s=getPrototypeOf(this).constructor;e=Reflect.construct(o,arguments,s)}else e=o.apply(this,arguments);return possibleConstructorReturn(this,\
e)}}", {
      globals: ["Reflect"],
      locals: {
        _createSuper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.1.argument.body.body.0.declarations.1.init.callee", "body.0.body.body.1.argument.body.body.1.cons\
equent.body.0.declarations.0.init.object.callee"],
        isNativeReflectConstruct: ["body.0.body.body.0.declarations.0.init.callee"],
        possibleConstructorReturn: ["body.0.body.body.1.argument.body.body.2.argument.callee"]
      }
    }),
    decorate: G("7.1.5", `function _decorate(e,r,t,i){var o=_getDecoratorsApi();if(i)for(var n=0;n<i.length;n++)o=i[n](o);var s=r((function(\
e){o.initializeInstanceElements(e,a.elements)}),t),a=o.decorateClass(_coalesceClassElements(s.d.map(_createElementDescriptor)),e);return o.i\
nitializeClassElements(s.F,a.elements),o.runClassFinishers(s.F,a.finishers)}function _getDecoratorsApi(){_getDecoratorsApi=function(){return\
 e};var e={elementsDefinitionOrder:[["method"],["field"]],initializeInstanceElements:function(e,r){["method","field"].forEach((function(t){r\
.forEach((function(r){r.kind===t&&"own"===r.placement&&this.defineClassElement(e,r)}),this)}),this)},initializeClassElements:function(e,r){v\
ar t=e.prototype;["method","field"].forEach((function(i){r.forEach((function(r){var o=r.placement;if(r.kind===i&&("static"===o||"prototype"=\
==o)){var n="static"===o?e:t;this.defineClassElement(n,r)}}),this)}),this)},defineClassElement:function(e,r){var t=r.descriptor;if("field"==\
=r.kind){var i=r.initializer;t={enumerable:t.enumerable,writable:t.writable,configurable:t.configurable,value:void 0===i?void 0:i.call(e)}}O\
bject.defineProperty(e,r.key,t)},decorateClass:function(e,r){var t=[],i=[],o={static:[],prototype:[],own:[]};if(e.forEach((function(e){this.\
addElementPlacement(e,o)}),this),e.forEach((function(e){if(!_hasDecorators(e))return t.push(e);var r=this.decorateElement(e,o);t.push(r.elem\
ent),t.push.apply(t,r.extras),i.push.apply(i,r.finishers)}),this),!r)return{elements:t,finishers:i};var n=this.decorateConstructor(t,r);retu\
rn i.push.apply(i,n.finishers),n.finishers=i,n},addElementPlacement:function(e,r,t){var i=r[e.placement];if(!t&&-1!==i.indexOf(e.key))throw \
new TypeError("Duplicated element ("+e.key+")");i.push(e.key)},decorateElement:function(e,r){for(var t=[],i=[],o=e.decorators,n=o.length-1;n\
>=0;n--){var s=r[e.placement];s.splice(s.indexOf(e.key),1);var a=this.fromElementDescriptor(e),l=this.toElementFinisherExtras((0,o[n])(a)||a\
);e=l.element,this.addElementPlacement(e,r),l.finisher&&i.push(l.finisher);var c=l.extras;if(c){for(var p=0;p<c.length;p++)this.addElementPl\
acement(c[p],r);t.push.apply(t,c)}}return{element:e,finishers:i,extras:t}},decorateConstructor:function(e,r){for(var t=[],i=r.length-1;i>=0;\
i--){var o=this.fromClassDescriptor(e),n=this.toClassDescriptor((0,r[i])(o)||o);if(void 0!==n.finisher&&t.push(n.finisher),void 0!==n.elemen\
ts){e=n.elements;for(var s=0;s<e.length-1;s++)for(var a=s+1;a<e.length;a++)if(e[s].key===e[a].key&&e[s].placement===e[a].placement)throw new\
 TypeError("Duplicated element ("+e[s].key+")")}}return{elements:e,finishers:t}},fromElementDescriptor:function(e){var r={kind:e.kind,key:e.\
key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),"\
field"===e.kind&&(r.initializer=e.initializer),r},toElementDescriptors:function(e){if(void 0!==e)return toArray(e).map((function(e){var r=th\
is.toElementDescriptor(e);return this.disallowProperty(e,"finisher","An element descriptor"),this.disallowProperty(e,"extras","An element de\
scriptor"),r}),this)},toElementDescriptor:function(e){var r=e.kind+"";if("method"!==r&&"field"!==r)throw new TypeError('An element descripto\
r\\'s .kind property must be either "method" or "field", but a decorator created an element descriptor with .kind "'+r+'"');var t=toPropertyK\
ey(e.key),i=e.placement+"";if("static"!==i&&"prototype"!==i&&"own"!==i)throw new TypeError('An element descriptor\\'s .placement property mus\
t be one of "static", "prototype" or "own", but a decorator created an element descriptor with .placement "'+i+'"');var o=e.descriptor;this.\
disallowProperty(e,"elements","An element descriptor");var n={kind:r,key:t,placement:i,descriptor:Object.assign({},o)};return"field"!==r?thi\
s.disallowProperty(e,"initializer","A method descriptor"):(this.disallowProperty(o,"get","The property descriptor of a field descriptor"),th\
is.disallowProperty(o,"set","The property descriptor of a field descriptor"),this.disallowProperty(o,"value","The property descriptor of a f\
ield descriptor"),n.initializer=e.initializer),n},toElementFinisherExtras:function(e){return{element:this.toElementDescriptor(e),finisher:_o\
ptionalCallableProperty(e,"finisher"),extras:this.toElementDescriptors(e.extras)}},fromClassDescriptor:function(e){var r={kind:"class",eleme\
nts:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),r},toCla\
ssDescriptor:function(e){var r=e.kind+"";if("class"!==r)throw new TypeError('A class descriptor\\'s .kind property must be "class", but a dec\
orator created a class descriptor with .kind "'+r+'"');this.disallowProperty(e,"key","A class descriptor"),this.disallowProperty(e,"placemen\
t","A class descriptor"),this.disallowProperty(e,"descriptor","A class descriptor"),this.disallowProperty(e,"initializer","A class descripto\
r"),this.disallowProperty(e,"extras","A class descriptor");var t=_optionalCallableProperty(e,"finisher");return{elements:this.toElementDescr\
iptors(e.elements),finisher:t}},runClassFinishers:function(e,r){for(var t=0;t<r.length;t++){var i=(0,r[t])(e);if(void 0!==i){if("function"!=\
typeof i)throw new TypeError("Finishers must return a constructor.");e=i}}return e},disallowProperty:function(e,r,t){if(void 0!==e[r])throw \
new TypeError(t+" can't have a ."+r+" property.")}};return e}function _createElementDescriptor(e){var r,t=toPropertyKey(e.key);"method"===e.\
kind?r={value:e.value,writable:!0,configurable:!0,enumerable:!1}:"get"===e.kind?r={get:e.value,configurable:!0,enumerable:!1}:"set"===e.kind\
?r={set:e.value,configurable:!0,enumerable:!1}:"field"===e.kind&&(r={configurable:!0,writable:!0,enumerable:!0});var i={kind:"field"===e.kin\
d?"field":"method",key:t,placement:e.static?"static":"field"===e.kind?"own":"prototype",descriptor:r};return e.decorators&&(i.decorators=e.d\
ecorators),"field"===e.kind&&(i.initializer=e.value),i}function _coalesceGetterSetter(e,r){void 0!==e.descriptor.get?r.descriptor.get=e.desc\
riptor.get:r.descriptor.set=e.descriptor.set}function _coalesceClassElements(e){for(var r=[],isSameElement=function(e){return"method"===e.ki\
nd&&e.key===o.key&&e.placement===o.placement},t=0;t<e.length;t++){var i,o=e[t];if("method"===o.kind&&(i=r.find(isSameElement)))if(_isDataDes\
criptor(o.descriptor)||_isDataDescriptor(i.descriptor)){if(_hasDecorators(o)||_hasDecorators(i))throw new ReferenceError("Duplicated methods\
 ("+o.key+") can't be decorated.");i.descriptor=o.descriptor}else{if(_hasDecorators(o)){if(_hasDecorators(i))throw new ReferenceError("Decor\
ators can't be placed on different accessors with for the same property ("+o.key+").");i.decorators=o.decorators}_coalesceGetterSetter(o,i)}\
else r.push(o)}return r}function _hasDecorators(e){return e.decorators&&e.decorators.length}function _isDataDescriptor(e){return void 0!==e&\
&!(void 0===e.value&&void 0===e.writable)}function _optionalCallableProperty(e,r){var t=e[r];if(void 0!==t&&"function"!=typeof t)throw new T\
ypeError("Expected '"+r+"' to be a function");return t}`, {
      globals: ["Object", "TypeError", "Symbol", "ReferenceError"],
      locals: {
        _decorate: ["body.0.id"],
        _getDecoratorsApi: ["body.1.id", "body.0.body.body.0.declarations.0.init.callee", "body.1.body.body.0.expression.left"],
        _createElementDescriptor: ["body.2.id", "body.0.body.body.2.declarations.1.init.arguments.0.arguments.0.arguments.0"],
        _coalesceGetterSetter: ["body.3.id", "body.4.body.body.0.body.body.1.consequent.alternate.body.1.expression.callee"],
        _coalesceClassElements: ["body.4.id", "body.0.body.body.2.declarations.1.init.arguments.0.callee"],
        _hasDecorators: ["body.5.id", "body.1.body.body.1.declarations.0.init.properties.4.value.body.body.1.test.expressions.1.arguments.0.\
body.body.0.test.argument.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.left.callee", "body.4.body.body.0.body.\
body.1.consequent.consequent.body.0.test.right.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.test.callee", "body.4.bo\
dy.body.0.body.body.1.consequent.alternate.body.0.consequent.body.0.test.callee"],
        _isDataDescriptor: ["body.6.id", "body.4.body.body.0.body.body.1.consequent.test.left.callee", "body.4.body.body.0.body.body.1.conse\
quent.test.right.callee"],
        _optionalCallableProperty: ["body.7.id", "body.1.body.body.1.declarations.0.init.properties.11.value.body.body.0.argument.properties\
.1.value.callee", "body.1.body.body.1.declarations.0.init.properties.13.value.body.body.3.declarations.0.init.callee"]
      },
      exportBindingAssignments: [],
      exportName: "_decorate",
      dependencies: {
        toArray: ["body.1.body.body.1.declarations.0.init.properties.9.value.body.body.0.consequent.argument.callee.object.callee"],
        toPropertyKey: ["body.1.body.body.1.declarations.0.init.properties.10.value.body.body.2.declarations.0.init.callee", "body.2.body.bo\
dy.0.declarations.1.init.callee"]
      }
    }),
    defaults: G("7.0.0-beta.0", "function _defaults(e,r){for(var t=Object.getOwnPropertyNames(r),o=0;o<t.length;o++){var n=t[o],a=Object.get\
OwnPropertyDescriptor(r,n);a&&a.configurable&&void 0===e[n]&&Object.defineProperty(e,n,a)}return e}", {
      globals: ["Object"],
      locals: {
        _defaults: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defaults",
      dependencies: {}
    }),
    defineAccessor: G("7.20.7", "function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty\
(r,n,c)}", {
      globals: ["Object"],
      locals: {
        _defineAccessor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defineAccessor",
      dependencies: {}
    }),
    defineProperty: G("7.0.0-beta.0", "function _defineProperty(e,r,t){return(r=toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enu\
merable:!0,configurable:!0,writable:!0}):e[r]=t,e}", {
      globals: ["Object"],
      locals: {
        _defineProperty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defineProperty",
      dependencies: {
        toPropertyKey: ["body.0.body.body.0.argument.expressions.0.test.left.right.callee"]
      }
    }),
    extends: G("7.0.0-beta.0", "function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.l\
ength;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}", {
      globals: ["Object"],
      locals: {
        _extends: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_extends",
      dependencies: {}
    }),
    get: G("7.0.0-beta.0", 'function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var p=su\
perPropBase(e,t);if(p){var n=Object.getOwnPropertyDescriptor(p,t);return n.get?n.get.call(arguments.length<3?e:r):n.value}},_get.apply(null,\
arguments)}', {
      globals: ["Reflect", "Object"],
      locals: {
        _get: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_get",
      dependencies: {
        superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.0.init.callee"]
      }
    }),
    getPrototypeOf: G("7.0.0-beta.0", "function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind()\
:function(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}", {
      globals: ["Object"],
      locals: {
        _getPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_getPrototypeOf",
      dependencies: {}
    }),
    identity: G("7.17.0", "function _identity(t){return t}", {
      globals: [],
      locals: {
        _identity: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_identity",
      dependencies: {}
    }),
    importDeferProxy: G("7.23.0", "function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=functi\
on(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValu\
e(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:c\
onstValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:const\
Value(!1)})}", {
      globals: ["Proxy", "Reflect"],
      locals: {
        _importDeferProxy: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_importDeferProxy",
      dependencies: {}
    }),
    inherits: G("7.0.0-beta.0", 'function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either\
 be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty\
(t,"prototype",{writable:!1}),e&&setPrototypeOf(t,e)}', {
      globals: ["TypeError", "Object"],
      locals: {
        _inherits: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_inherits",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.1.expression.expressions.2.right.callee"]
      }
    }),
    inheritsLoose: G("7.0.0-beta.0", "function _inheritsLoose(t,o){t.prototype=Object.create(o.prototype),t.prototype.constructor=t,setProto\
typeOf(t,o)}", {
      globals: ["Object"],
      locals: {
        _inheritsLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_inheritsLoose",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.0.expression.expressions.2.callee"]
      }
    }),
    initializerDefineProperty: G("7.0.0-beta.0", "function _initializerDefineProperty(e,i,r,l){r&&Object.defineProperty(e,i,{enumerable:r.en\
umerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(l):void 0})}", {
      globals: ["Object"],
      locals: {
        _initializerDefineProperty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_initializerDefineProperty",
      dependencies: {}
    }),
    initializerWarningHelper: G("7.0.0-beta.0", 'function _initializerWarningHelper(r,e){throw Error("Decorating class property failed. Plea\
se ensure that transform-class-properties is enabled and runs after the decorators transform.")}', {
      globals: ["Error"],
      locals: {
        _initializerWarningHelper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_initializerWarningHelper",
      dependencies: {}
    }),
    instanceof: G("7.0.0-beta.0", 'function _instanceof(n,e){return null!=e&&"undefined"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.ha\
sInstance](n):n instanceof e}', {
      globals: ["Symbol"],
      locals: {
        _instanceof: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_instanceof",
      dependencies: {}
    }),
    interopRequireDefault: G("7.0.0-beta.0", "function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}", {
      globals: [],
      locals: {
        _interopRequireDefault: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_interopRequireDefault",
      dependencies: {}
    }),
    interopRequireWildcard: G("7.14.0", 'function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=\
new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)retur\
n e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e)\
;var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u\
)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,\
n),n}', {
      globals: ["WeakMap", "Object"],
      locals: {
        _getRequireWildcardCache: ["body.0.id", "body.1.body.body.2.declarations.0.init.callee", "body.0.body.body.2.argument.callee.left"],
        _interopRequireWildcard: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_interopRequireWildcard",
      dependencies: {}
    }),
    isNativeFunction: G("7.0.0-beta.0", 'function _isNativeFunction(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}cat\
ch(n){return"function"==typeof t}}', {
      globals: ["Function"],
      locals: {
        _isNativeFunction: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_isNativeFunction",
      dependencies: {}
    }),
    isNativeReflectConstruct: G("7.9.0", "function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(B\
oolean,[],(function(){})))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}", {
      globals: ["Boolean", "Reflect"],
      locals: {
        _isNativeReflectConstruct: ["body.0.id", "body.0.body.body.1.argument.callee.left"]
      },
      exportBindingAssignments: ["body.0.body.body.1.argument.callee"],
      exportName: "_isNativeReflectConstruct",
      dependencies: {}
    }),
    iterableToArray: G("7.0.0-beta.0", 'function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@ite\
rator"])return Array.from(r)}', {
      globals: ["Symbol", "Array"],
      locals: {
        _iterableToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_iterableToArray",
      dependencies: {}
    }),
    iterableToArrayLimit: G("7.0.0-beta.0", 'function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.ite\
rator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f\
=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u\
))return}finally{if(o)throw n}}return a}}', {
      globals: ["Symbol", "Object"],
      locals: {
        _iterableToArrayLimit: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_iterableToArrayLimit",
      dependencies: {}
    }),
    jsx: G("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="functio\
n"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:vo\
id 0}),1===n)r.children=l;else if(n>1){for(var t=Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&\
&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:""+E,ref:null,props:r,_owner:null}}', {
      globals: ["Symbol", "Array"],
      locals: {
        REACT_ELEMENT_TYPE: ["body.0.declarations.0.id", "body.1.body.body.0.expression.left", "body.1.body.body.4.argument.properties.0.val\
ue", "body.1.body.body.0.expression.right.left"],
        _createRawReactElement: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createRawReactElement",
      dependencies: {}
    }),
    maybeArrayLike: G("7.9.0", 'function _maybeArrayLike(r,a,e){if(a&&!Array.isArray(a)&&"number"==typeof a.length){var y=a.length;return ar\
rayLikeToArray(a,void 0!==e&&e<y?e:y)}return r(a,e)}', {
      globals: ["Array"],
      locals: {
        _maybeArrayLike: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_maybeArrayLike",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.body.1.argument.callee"]
      }
    }),
    newArrowCheck: G("7.0.0-beta.0", 'function _newArrowCheck(n,r){if(n!==r)throw new TypeError("Cannot instantiate an arrow function")}', {
      globals: ["TypeError"],
      locals: {
        _newArrowCheck: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_newArrowCheck",
      dependencies: {}
    }),
    nonIterableRest: G("7.0.0-beta.0", 'function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instanc\
e.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', {
      globals: ["TypeError"],
      locals: {
        _nonIterableRest: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nonIterableRest",
      dependencies: {}
    }),
    nonIterableSpread: G("7.0.0-beta.0", 'function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance\
.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', {
      globals: ["TypeError"],
      locals: {
        _nonIterableSpread: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nonIterableSpread",
      dependencies: {}
    }),
    nullishReceiverError: G("7.22.6", 'function _nullishReceiverError(r){throw new TypeError("Cannot set property of null or undefined.")}',
    {
      globals: ["TypeError"],
      locals: {
        _nullishReceiverError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nullishReceiverError",
      dependencies: {}
    }),
    objectDestructuringEmpty: G("7.0.0-beta.0", 'function _objectDestructuringEmpty(t){if(null==t)throw new TypeError("Cannot destructure "+\
t)}', {
      globals: ["TypeError"],
      locals: {
        _objectDestructuringEmpty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectDestructuringEmpty",
      dependencies: {}
    }),
    objectSpread2: G("7.5.0", "function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbol\
s(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSprea\
d2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProp\
erty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach\
((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}", {
      globals: ["Object"],
      locals: {
        ownKeys: ["body.0.id", "body.1.body.body.0.body.body.1.expression.consequent.callee.object.callee", "body.1.body.body.0.body.body.1.\
expression.alternate.alternate.callee.object.callee"],
        _objectSpread2: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectSpread2",
      dependencies: {
        defineProperty: ["body.1.body.body.0.body.body.1.expression.consequent.arguments.0.body.body.0.expression.callee"]
      }
    }),
    objectWithoutProperties: G("7.0.0-beta.0", "function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=objectWithoutProperties\
Loose(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIs\
Enumerable.call(e,o)&&(i[o]=e[o])}return i}", {
      globals: ["Object"],
      locals: {
        _objectWithoutProperties: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectWithoutProperties",
      dependencies: {
        objectWithoutPropertiesLoose: ["body.0.body.body.1.declarations.2.init.callee"]
      }
    }),
    objectWithoutPropertiesLoose: G("7.0.0-beta.0", "function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r\
)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}", {
      globals: [],
      locals: {
        _objectWithoutPropertiesLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectWithoutPropertiesLoose",
      dependencies: {}
    }),
    possibleConstructorReturn: G("7.0.0-beta.0", 'function _possibleConstructorReturn(t,e){if(e&&("object"==typeof e||"function"==typeof e))\
return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return assertThisInitialized(t)}', {
      globals: ["TypeError"],
      locals: {
        _possibleConstructorReturn: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_possibleConstructorReturn",
      dependencies: {
        assertThisInitialized: ["body.0.body.body.2.argument.callee"]
      }
    }),
    readOnlyError: G("7.0.0-beta.0", `function _readOnlyError(r){throw new TypeError('"'+r+'" is read-only')}`, {
      globals: ["TypeError"],
      locals: {
        _readOnlyError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_readOnlyError",
      dependencies: {}
    }),
    regeneratorRuntime: G("7.18.0", `function _regeneratorRuntime(){"use strict";
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LI\
CENSE */_regeneratorRuntime=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t\
[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStr\
ingTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}\
catch(t){define=function(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(\
i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",\
arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={}\
;function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));v\
ar d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype\
=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invo\
ke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;retur\
n h&&"object"==typeof h&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a\
)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:fun\
ction(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg\
,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Er\
ror("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c\
){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(\
o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p\
.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function ma\
ybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.a\
rg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n\
+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;ret\
urn a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw"\
,r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc\
=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",\
delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function value\
s(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){fo\
r(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new T\
ypeError(typeof e+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFuncti\
onPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displa\
yName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;r\
eturn!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.set\
PrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create\
(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){re\
turn this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);retu\
rn e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator")\
,define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[]\
;for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}r\
eturn next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function(e){if(this.prev=0,this.next=0,this.sent=this\
._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.c\
harAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.\
type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",\
a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("r\
oot"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.cat\
chLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.\
catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abru\
pt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.\
prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.\
type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;retu\
rn"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"n\
ormal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLo\
c===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var \
r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error("illegal ca\
tch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.ar\
g=t),y}},e}`, {
      globals: ["Object", "Symbol", "Error", "TypeError", "isNaN", "Promise"],
      locals: {
        _regeneratorRuntime: ["body.0.id", "body.0.body.body.0.expression.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.expression"],
      exportName: "_regeneratorRuntime",
      dependencies: {}
    }),
    set: G("7.0.0-beta.0", 'function set(e,r,t,o){return set="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,r,t,o){var f,i=\
superPropBase(e,r);if(i){if((f=Object.getOwnPropertyDescriptor(i,r)).set)return f.set.call(o,t),!0;if(!f.writable)return!1}if(f=Object.getOw\
nPropertyDescriptor(o,r)){if(!f.writable)return!1;f.value=t,Object.defineProperty(o,r,f)}else defineProperty(o,r,t);return!0},set(e,r,t,o)}f\
unction _set(e,r,t,o,f){if(!set(e,r,t,o||e)&&f)throw new TypeError("failed to set property");return t}', {
      globals: ["Reflect", "Object", "TypeError"],
      locals: {
        set: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.0.test.left.argument.callee", "body.0.body.\
body.0.argument.expressions.0.left"],
        _set: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_set",
      dependencies: {
        superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.1.init.callee"],
        defineProperty: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.2.alternate.expression.callee"]
      }
    }),
    setFunctionName: G("7.23.6", 'function setFunctionName(e,t,n){"symbol"==typeof t&&(t=(t=t.description)?"["+t+"]":"");try{Object.definePr\
operty(e,"name",{configurable:!0,value:n?n+" "+t:t})}catch(e){}return e}', {
      globals: ["Object"],
      locals: {
        setFunctionName: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "setFunctionName",
      dependencies: {}
    }),
    setPrototypeOf: G("7.0.0-beta.0", "function _setPrototypeOf(t,e){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind\
():function(t,e){return t.__proto__=e,t},_setPrototypeOf(t,e)}", {
      globals: ["Object"],
      locals: {
        _setPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_setPrototypeOf",
      dependencies: {}
    }),
    skipFirstGeneratorNext: G("7.0.0-beta.0", "function _skipFirstGeneratorNext(t){return function(){var r=t.apply(this,arguments);return r.\
next(),r}}", {
      globals: [],
      locals: {
        _skipFirstGeneratorNext: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_skipFirstGeneratorNext",
      dependencies: {}
    }),
    slicedToArray: G("7.0.0-beta.0", "function _slicedToArray(r,e){return arrayWithHoles(r)||iterableToArrayLimit(r,e)||unsupportedIterableT\
oArray(r,e)||nonIterableRest()}", {
      globals: [],
      locals: {
        _slicedToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_slicedToArray",
      dependencies: {
        arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArrayLimit: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableRest: ["body.0.body.body.0.argument.right.callee"]
      }
    }),
    superPropBase: G("7.0.0-beta.0", "function _superPropBase(t,o){for(;!{}.hasOwnProperty.call(t,o)&&null!==(t=getPrototypeOf(t)););return \
t}", {
      globals: [],
      locals: {
        _superPropBase: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropBase",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.0.test.right.right.right.callee"]
      }
    }),
    superPropGet: G("7.25.0", "function _superPropertyGet(t,e,r,o){var p=get(getPrototypeOf(1&o?t.prototype:t),e,r);return 2&o?function(t){r\
eturn p.apply(r,t)}:p}", {
      globals: [],
      locals: {
        _superPropertyGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropertyGet",
      dependencies: {
        get: ["body.0.body.body.0.declarations.0.init.callee"],
        getPrototypeOf: ["body.0.body.body.0.declarations.0.init.arguments.0.callee"]
      }
    }),
    superPropSet: G("7.25.0", "function _superPropertySet(t,e,o,r,p,f){return set(getPrototypeOf(f?t.prototype:t),e,o,r,p)}", {
      globals: [],
      locals: {
        _superPropertySet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropertySet",
      dependencies: {
        set: ["body.0.body.body.0.argument.callee"],
        getPrototypeOf: ["body.0.body.body.0.argument.arguments.0.callee"]
      }
    }),
    taggedTemplateLiteral: G("7.0.0-beta.0", "function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.definePrope\
rties(e,{raw:{value:Object.freeze(t)}}))}", {
      globals: ["Object"],
      locals: {
        _taggedTemplateLiteral: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_taggedTemplateLiteral",
      dependencies: {}
    }),
    taggedTemplateLiteralLoose: G("7.0.0-beta.0", "function _taggedTemplateLiteralLoose(e,t){return t||(t=e.slice(0)),e.raw=t,e}", {
      globals: [],
      locals: {
        _taggedTemplateLiteralLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_taggedTemplateLiteralLoose",
      dependencies: {}
    }),
    tdz: G("7.5.5", 'function _tdzError(e){throw new ReferenceError(e+" is not defined - temporal dead zone")}', {
      globals: ["ReferenceError"],
      locals: {
        _tdzError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_tdzError",
      dependencies: {}
    }),
    temporalRef: G("7.0.0-beta.0", "function _temporalRef(r,e){return r===undef?err(e):r}", {
      globals: [],
      locals: {
        _temporalRef: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_temporalRef",
      dependencies: {
        temporalUndefined: ["body.0.body.body.0.argument.test.right"],
        tdz: ["body.0.body.body.0.argument.consequent.callee"]
      }
    }),
    temporalUndefined: G("7.0.0-beta.0", "function _temporalUndefined(){}", {
      globals: [],
      locals: {
        _temporalUndefined: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_temporalUndefined",
      dependencies: {}
    }),
    toArray: G("7.0.0-beta.0", "function _toArray(r){return arrayWithHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterabl\
eRest()}", {
      globals: [],
      locals: {
        _toArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toArray",
      dependencies: {
        arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableRest: ["body.0.body.body.0.argument.right.callee"]
      }
    }),
    toConsumableArray: G("7.0.0-beta.0", "function _toConsumableArray(r){return arrayWithoutHoles(r)||iterableToArray(r)||unsupportedIterabl\
eToArray(r)||nonIterableSpread()}", {
      globals: [],
      locals: {
        _toConsumableArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toConsumableArray",
      dependencies: {
        arrayWithoutHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableSpread: ["body.0.body.body.0.argument.right.callee"]
      }
    }),
    toPrimitive: G("7.1.5", 'function toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e\
.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r\
?String:Number)(t)}', {
      globals: ["Symbol", "TypeError", "String", "Number"],
      locals: {
        toPrimitive: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "toPrimitive",
      dependencies: {}
    }),
    toPropertyKey: G("7.1.5", 'function toPropertyKey(t){var i=toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}', {
      globals: [],
      locals: {
        toPropertyKey: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "toPropertyKey",
      dependencies: {
        toPrimitive: ["body.0.body.body.0.declarations.0.init.callee"]
      }
    }),
    toSetter: G("7.24.0", 'function _toSetter(t,e,n){e||(e=[]);var r=e.length++;return Object.defineProperty({},"_",{set:function(o){e[r]=o,\
t.apply(n,e)}})}', {
      globals: ["Object"],
      locals: {
        _toSetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toSetter",
      dependencies: {}
    }),
    typeof: G("7.0.0-beta.0", 'function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symb\
ol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symb\
ol":typeof o},_typeof(o)}', {
      globals: ["Symbol"],
      locals: {
        _typeof: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_typeof",
      dependencies: {}
    }),
    unsupportedIterableToArray: G("7.9.0", 'function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return arrayLikeToArray(r,\
a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Argum\
ents"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?arrayLikeToArray(r,a):void 0}}', {
      globals: ["Array"],
      locals: {
        _unsupportedIterableToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_unsupportedIterableToArray",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.body.0.consequent.argument.callee", "body.0.body.body.0.consequent.body.2.argument\
.expressions.1.alternate.consequent.callee"]
      }
    }),
    usingCtx: G("7.23.9", 'function _usingCtx(){var r="function"==typeof SuppressedError?SuppressedError:function(r,e){var n=Error();return \
n.name="SuppressedError",n.error=r,n.suppressed=e,n},e={},n=[];function using(r,e){if(null!=e){if(Object(e)!==e)throw new TypeError("using d\
eclarations can only be used with objects, functions, null, or undefined.");if(r)var o=e[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispos\
e")];if(void 0===o&&(o=e[Symbol.dispose||Symbol.for("Symbol.dispose")],r))var t=o;if("function"!=typeof o)throw new TypeError("Object is not\
 disposable.");t&&(o=function(){try{t.call(e)}catch(r){return Promise.reject(r)}}),n.push({v:e,d:o,a:r})}else r&&n.push({d:e,a:r});return e}\
return{e:e,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o,t=this.e,s=0;function next(){for(;o=n.pop();)try{if(!o.a&&1===s)re\
turn s=0,n.push(o),Promise.resolve().then(next);if(o.d){var r=o.d.call(o.v);if(o.a)return s|=2,Promise.resolve(r).then(next,err)}else s|=1}c\
atch(r){return err(r)}if(1===s)return t!==e?Promise.reject(t):Promise.resolve();if(t!==e)throw t}function err(n){return t=t!==e?new r(n,t):n\
,next()}return next()}}}', {
      globals: ["SuppressedError", "Error", "Object", "TypeError", "Symbol", "Promise"],
      locals: {
        _usingCtx: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_usingCtx",
      dependencies: {}
    }),
    wrapAsyncGenerator: G("7.0.0-beta.0", 'function _wrapAsyncGenerator(e){return function(){return new AsyncGenerator(e.apply(this,argument\
s))}}function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:\
o).then((function(t){if(u){var i="return"===r?"return":"next";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?"return":"nor\
mal",t)}),(function(e){resume("throw",e)}))}catch(e){settle("throw",e)}}function settle(e,n){switch(e){case"return":r.resolve({value:n,done:\
!0});break;case"throw":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,\
n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},"function"!=typeo\
f e.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){ret\
urn this},AsyncGenerator.prototype.next=function(e){return this._invoke("next",e)},AsyncGenerator.prototype.throw=function(e){return this._i\
nvoke("throw",e)},AsyncGenerator.prototype.return=function(e){return this._invoke("return",e)};', {
      globals: ["Promise", "Symbol"],
      locals: {
        _wrapAsyncGenerator: ["body.0.id"],
        AsyncGenerator: ["body.1.id", "body.0.body.body.0.argument.body.body.0.argument.callee", "body.2.expression.expressions.0.left.objec\
t.object", "body.2.expression.expressions.1.left.object.object", "body.2.expression.expressions.2.left.object.object", "body.2.expression.ex\
pressions.3.left.object.object"]
      },
      exportBindingAssignments: [],
      exportName: "_wrapAsyncGenerator",
      dependencies: {
        OverloadYield: ["body.1.body.body.1.body.body.0.block.body.0.declarations.2.init.right"]
      }
    }),
    wrapNativeSuper: G("7.0.0-beta.0", 'function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=fun\
ction(t){if(null===t||!isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a f\
unction");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,Wrapper)}function Wrapper(){return construct(t,arguments,getPrototypeOf(this).c\
onstructor)}return Wrapper.prototype=Object.create(t.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),setP\
rototypeOf(Wrapper,t)},_wrapNativeSuper(t)}', {
      globals: ["Map", "TypeError", "Object"],
      locals: {
        _wrapNativeSuper: ["body.0.id", "body.0.body.body.1.argument.expressions.1.callee", "body.0.body.body.1.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.1.argument.expressions.0"],
      exportName: "_wrapNativeSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.arguments.2.object.callee"],
        setPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.4.argument.expressions.1.callee"],
        isNativeFunction: ["body.0.body.body.1.argument.expressions.0.right.body.body.0.test.right.argument.callee"],
        construct: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.callee"]
      }
    }),
    wrapRegExp: G("7.19.0", 'function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=n\
ew WeakMap;function BabelRegExp(e,t,p){var o=RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildG\
roups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if("number"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e\
[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=functi\
on(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.p\
rototype[Symbol.replace]=function(t,p){if("string"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\$<([^>]+)>/\
g,(function(e,r){var t=o[r];return"$"+(Array.isArray(t)?t.join("$"):t)})))}if("function"==typeof p){var i=this;return e[Symbol.replace].call\
(this,t,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}ret\
urn e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}', {
      globals: ["RegExp", "WeakMap", "Object", "Symbol", "Array"],
      locals: {
        _wrapRegExp: ["body.0.id", "body.0.body.body.4.argument.expressions.3.callee.object", "body.0.body.body.0.expression.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.expression"],
      exportName: "_wrapRegExp",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.2.body.body.1.argument.expressions.1.callee"],
        inherits: ["body.0.body.body.4.argument.expressions.0.callee"]
      }
    }),
    writeOnlyError: G("7.12.13", `function _writeOnlyError(r){throw new TypeError('"'+r+'" is write-only')}`, {
      globals: ["TypeError"],
      locals: {
        _writeOnlyError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_writeOnlyError",
      dependencies: {}
    })
  };
  Object.assign(TY, {
    AwaitValue: G("7.0.0-beta.0", "function _AwaitValue(t){this.wrapped=t}", {
      globals: [],
      locals: {
        _AwaitValue: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_AwaitValue",
      dependencies: {}
    }),
    applyDecs: G("7.17.8", 'function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,"g\
etMetadata"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.pri\
vate;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,"constructor"))return i.constructor},setMetadata:function(o,i){old_a\
ssertNotFinished(r,"setMetadata"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.publ\
ic={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMa\
pToFinal(e,t){var a=e[Symbol.metadata||Symbol.for("Symbol.metadata")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.len\
gth;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.fro\
m(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadat\
a||Symbol.for("Symbol.metadata")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,"addInitializer\
"),old_assertCallable(a,"An initializer"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c="accessor";break;cas\
e 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var d,u,f={kind:c,name:l?"#"+t:toPropertyKey(t),isSta\
tic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,\
v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function\
(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v\
=!0}}function old_assertNotFinished(e,t){if(e.v)throw Error("attempted to call "+t+" after decoration was finished")}function old_assertMeta\
dataKey(e){if("symbol"!=typeof e)throw new TypeError("Metadata keys must be symbols, received: "+e)}function old_assertCallable(e,t){if("fun\
ction"!=typeof e)throw new TypeError(t+" must be a function")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if("object"!\
==a||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&o\
ld_assertCallable(t.get,"accessor.get"),void 0!==t.set&&old_assertCallable(t.set,"accessor.set"),void 0!==t.init&&old_assertCallable(t.init,\
"accessor.init"),void 0!==t.initializer&&old_assertCallable(t.initializer,"accessor.initializer")}else if("function"!==a)throw new TypeError\
((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function old_getInit(e){var t;return null==(t=e.ini\
t)&&(t=e.initializer)&&void 0!==console&&console.warn(".initializer has been renamed to .init as of March 2022"),t}function old_applyMemberD\
ec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,y,h=a[0];if(n?(0===o||1===o?(c={get:a[3],set:a[4]},u="get"):3===o?(c={get:a[3]},u="get"):4===o?(c={set\
:a[3]},u="set"):c={value:a[3]},0!==o&&(1===o&&setFunctionName(a[4],"#"+r,"set"),setFunctionName(a[3],"#"+r,u))):0!==o&&(c=Object.getOwnPrope\
rtyDescriptor(t,r)),1===o?f={get:c.get,set:c.set}:2===o?f=c.value:3===o?f=c.get:4===o&&(f=c.set),"function"==typeof h)void 0!==(p=old_member\
Dec(h,r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?d=p:1===o?(d=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f\
=p);else for(var m=h.length-1;m>=0;m--){var b;void 0!==(p=old_memberDec(h[m],r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?b=p:1\
===o?(b=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p,void 0!==b&&(void 0===d?d=b:"function"==typeof d?d=[d,b]:d.push(b)\
))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if("function"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length\
;r++)a=g[r].call(e,a);return a}}else{var _=d;d=function(e,t){return _.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=f.get,c.set=f.set):2===o?c.v\
alue=f:3===o?c.get=f:4===o&&(c.set=f),n?1===o?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}\
))):2===o?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(va\
r i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],y=d[2],h=d.length>3,m=v>=5;if(m?(u=t,f=r,0!=(\
v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!h){var b=m?s:l,g=b.get(y)||0;if(!0===g||3===g&&4!==v||4===g&&3!==v)throw \
Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not c\
urrently supported by the decorators plugin. Property name was: "+y);!g&&v>2?b.set(y,v):b.set(y,!0)}old_applyMemberDec(e,u,d,y,v,m,h,f,p)}}o\
ld_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a]\
.call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{v\
ar c=Object.assign({kind:"class",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d\
=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))\
}}function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyC\
lassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}', {
      globals: ["Object", "Map", "Symbol", "Array", "Error", "TypeError", "console"],
      locals: {
        old_createMetadataMethodsForProperty: ["body.0.id", "body.3.body.body.4.block.body.0.argument.arguments.1.arguments.1.callee", "body\
.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.1.callee"],
        old_convertMetadataMapToFinal: ["body.1.id", "body.13.body.body.1.argument.expressions.1.callee", "body.13.body.body.1.argument.expr\
essions.3.callee"],
        old_createAddInitializerMethod: ["body.2.id", "body.3.body.body.3.test.expressions.0.right.right.callee", "body.12.body.body.0.conse\
quent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.0.properties.2.value.callee"],
        old_memberDec: ["body.3.id", "body.9.body.body.1.consequent.expression.left.right.right.callee", "body.9.body.body.1.alternate.body.\
body.1.expression.left.right.right.callee"],
        old_assertNotFinished: ["body.4.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.0.callee", "\
body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.0.callee", "body.2.body.body.0.argument.body.body.0.expres\
sion.expressions.0.callee"],
        old_assertMetadataKey: ["body.5.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.1.callee", "\
body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.1.callee"],
        old_assertCallable: ["body.6.id", "body.2.body.body.0.argument.body.body.0.expression.expressions.1.callee", "body.7.body.body.1.con\
sequent.body.1.expression.expressions.0.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.1.right.callee", "body.7\
.body.body.1.consequent.body.1.expression.expressions.2.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.3.right.\
callee"],
        old_assertValidReturnValue: ["body.7.id", "body.9.body.body.1.consequent.expression.right.expressions.0.callee", "body.9.body.body.1\
.alternate.body.body.1.expression.right.expressions.0.callee", "body.12.body.body.0.consequent.body.0.body.body.2.expression.right.expressio\
ns.0.callee"],
        old_getInit: ["body.8.id", "body.9.body.body.1.consequent.expression.right.expressions.1.alternate.consequent.expressions.0.right.ca\
llee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee"],
        old_applyMemberDec: ["body.9.id", "body.10.body.body.0.body.body.1.consequent.body.2.expression.callee"],
        old_applyMemberDecs: ["body.10.id", "body.13.body.body.1.argument.expressions.0.callee"],
        old_pushInitializers: ["body.11.id", "body.10.body.body.1.expression.expressions.0.callee", "body.10.body.body.1.expression.expressi\
ons.1.callee"],
        old_applyClassDecs: ["body.12.id", "body.13.body.body.1.argument.expressions.2.callee"],
        applyDecs: ["body.13.id"]
      },
      exportBindingAssignments: [],
      exportName: "applyDecs",
      dependencies: {
        setFunctionName: ["body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.9.body.bo\
dy.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
        toPropertyKey: ["body.3.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
      }
    }),
    applyDecs2203: G("7.19.0", 'function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){i\
f(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}functi\
on memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";br\
eak;default:c="field"}var l,u,f={kind:c,name:s?"#"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)\
),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=fun\
ction(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{retur\
n e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertVa\
lidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with g\
et, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.\
set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"meth\
od")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{ge\
t:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set\
}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),"function"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),\
0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;void 0!==(f=memberDe\
c(h[v],a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g\
&&(void 0===l?l=g:"function"==typeof l?l=[l,g]:l.push(g)))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if("function"!=type\
of l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.p\
ush(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.ca\
ll(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.definePropert\
y(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){v\
ar a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c\
.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&\
&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public met\
hod/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDe\
c(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-\
1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:"class",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(\
assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;function\
 applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}', {
      globals: ["Error", "TypeError", "Object", "Map", "Array"],
      locals: {
        applyDecs2203Factory: ["body.0.id", "body.2.body.body.0.argument.callee.right.right.callee"],
        applyDecs2203Impl: ["body.1.declarations.0.id", "body.2.body.body.0.argument.callee.right.left", "body.2.body.body.0.argument.callee\
.left"],
        applyDecs2203: ["body.2.id"]
      },
      exportBindingAssignments: [],
      exportName: "applyDecs2203",
      dependencies: {}
    }),
    applyDecs2203R: G("7.20.0", 'function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t)\
{if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}func\
tion memberDec(e,t,r,n,a,i,o,s){var c;switch(a){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";\
break;default:c="field"}var l,u,f={kind:c,name:o?"#"+t:toPropertyKey(t),static:i,private:o},p={v:!1};0!==a&&(f.addInitializer=createAddIniti\
alizerMethod(n,p)),0===a?o?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!=\
=a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:\
{set:u};try{return e(s,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}\
function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return\
 an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable\
(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10=\
==e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,n,a,i,o,s){var c,l,u,f,p,d,h,v=r[0];if(o\
?(0===a||1===a?(c={get:r[3],set:r[4]},u="get"):3===a?(c={get:r[3]},u="get"):4===a?(c={set:r[3]},u="set"):c={value:r[3]},0!==a&&(1===a&&setFu\
nctionName(r[4],"#"+n,"set"),setFunctionName(r[3],"#"+n,u))):0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:c.get,set:c.set}:2\
===a?f=c.value:3===a?f=c.get:4===a&&(f=c.set),"function"==typeof v)void 0!==(p=memberDec(v,n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0==\
=a?l=p:1===a?(l=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p);else for(var g=v.length-1;g>=0;g--){var y;void 0!==(p=memberDec(v\
[g],n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?y=p:1===a?(y=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p,void 0!==y&&(\
void 0===l?l=y:"function"==typeof l?l=[l,y]:l.push(y)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof \
l){var m=l;l=function(e,t){for(var r=t,n=0;n<m.length;n++)r=m[n].call(e,r);return r}}else{var b=l;l=function(e,t){return b.call(e,t)}}e.push\
(l)}0!==a&&(1===a?(c.get=f.get,c.set=f.set):2===a?c.value=f:3===a?c.get=f:4===a&&(c.set=f),o?1===a?(e.push((function(e,t){return f.get.call(\
e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t\
,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,o=new Map,s=0;s<t.length;s++){var c=t[s];if(Array.isArray(c)){var l,u,f=c[1]\
,p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!=(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?o:i,g=v.get(p)||0;if(!0=\
==g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated\
 public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}ap\
plyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){fo\
r(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.len\
gth>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var o={v:!1};try{var s=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializ\
erMethod(r,o)})}finally{o.v=!0}void 0!==s&&(assertValidReturnValue(10,s),n=s)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}\
}(e,r)}}}}function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}', {
      globals: ["Error", "TypeError", "Object", "Map", "Array"],
      locals: {
        applyDecs2203RFactory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"],
        applyDecs2203R: ["body.1.id", "body.1.body.body.0.argument.callee.left"]
      },
      exportBindingAssignments: ["body.1.body.body.0.argument.callee"],
      exportName: "applyDecs2203R",
      dependencies: {
        setFunctionName: ["body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "bo\
dy.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
        toPropertyKey: ["body.0.body.body.1.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
      }
    }),
    applyDecs2301: G("7.21.0", 'function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){i\
f(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}functi\
on assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(e,t,r\
,n,a,i,s,o,c){var u;switch(a){case 1:u="accessor";break;case 2:u="method";break;case 3:u="getter";break;case 4:u="setter";break;default:u="f\
ield"}var l,f,p={kind:u,name:s?"#"+t:toPropertyKey(t),static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,\
d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e)\
{return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivat\
e(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():fu\
nction(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCa\
llable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===\
e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");vo\
id 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.in\
it,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function o\
r void 0")}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,y,g=r[0];if(s?(\
0===a||1===a?(u={get:(d=r[3],function(){return d(this)}),set:curryThis2(r[4])},f="get"):3===a?(u={get:r[3]},f="get"):4===a?(u={set:r[3]},f="\
set"):u={value:r[3]},0!==a&&(1===a&&setFunctionName(u.set,"#"+n,"set"),setFunctionName(u[f||"value"],"#"+n,f))):0!==a&&(u=Object.getOwnPrope\
rtyDescriptor(t,n)),1===a?p={get:u.get,set:u.set}:2===a?p=u.value:3===a?p=u.get:4===a&&(p=u.set),"function"==typeof g)void 0!==(h=memberDec(\
g,n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?l=h:1===a?(l=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h);else for(var\
 m=g.length-1;m>=0;m--){var b;void 0!==(h=memberDec(g[m],n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?b=h:1===a?(b=h.init,v=h.get||\
p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==b&&(void 0===l?l=b:"function"==typeof l?l=[l,b]:l.push(b)))}if(0===a||1===a){if(void 0===\
l)l=function(e,t){return t};else if("function"!=typeof l){var I=l;l=function(e,t){for(var r=t,n=0;n<I.length;n++)r=I[n].call(e,r);return r}}\
else{var w=l;l=function(e,t){return w.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=p.get,u.set=p.set):2===a?u.value=p:3===a?u.get=p:4===a&&(u.s\
et=p),s?1===a?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===a?e.push(p):e.push((func\
tion(e,t){return p.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t\
.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,y=d>=5,g=r;if(y?(f=e,0!=(d-=5)&&(p=a=a||[]),v&&!i&&(i=functi\
on(t){return checkInRHS(t)===e}),g=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=y?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b\
&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor.\
 This is not currently supported by the decorators plugin. Property name was: "+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,y\
,v,p,g)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r\
++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[\
],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,s)})}fi\
nally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function\
 applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}', {
      globals: ["Error", "TypeError", "Object", "Map", "Array"],
      locals: {
        applyDecs2301Factory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"],
        applyDecs2301: ["body.1.id", "body.1.body.body.0.argument.callee.left"]
      },
      exportBindingAssignments: ["body.1.body.body.0.argument.callee"],
      exportName: "applyDecs2301",
      dependencies: {
        checkInRHS: ["body.0.body.body.7.body.body.0.body.body.1.consequent.body.1.test.expressions.0.consequent.expressions.2.right.right.b\
ody.body.0.argument.left.callee"],
        setFunctionName: ["body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "bo\
dy.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
        toPropertyKey: ["body.0.body.body.2.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
      }
    }),
    applyDecs2305: G("7.21.0", 'function applyDecs2305(e,t,r,n,o,a){function i(e,t,r){return function(n,o){return r&&r(n),e[t].call(n,o)}}fu\
nction c(e,t){for(var r=0;r<e.length;r++)e[r].call(t);return t}function s(e,t,r,n){if("function"!=typeof e&&(n||void 0!==e))throw new TypeEr\
ror(t+" must "+(r||"be")+" a function"+(n?"":" or undefined"));return e}function applyDec(e,t,r,n,o,a,c,u,l,f,p,d,h){function m(e){if(!h(e))\
throw new TypeError("Attempted to access private element on non-instance")}var y,v=t[0],g=t[3],b=!u;if(!b){r||Array.isArray(v)||(v=[v]);var \
w={},S=[],A=3===o?"get":4===o||d?"set":"value";f?(p||d?w={get:setFunctionName((function(){return g(this)}),n,"get"),set:function(e){t[4](thi\
s,e)}}:w[A]=g,p||setFunctionName(w[A],n,2===o?"":A)):p||(w=Object.getOwnPropertyDescriptor(e,n))}for(var P=e,j=v.length-1;j>=0;j-=r?2:1){var\
 D=v[j],E=r?v[j-1]:void 0,I={},O={kind:["field","accessor","method","getter","setter","class"][o],name:n,metadata:a,addInitializer:function(\
e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished");s(t,"An initializer","be",!0),c.push(t)}.bind(null\
,I)};try{if(b)(y=s(D.call(E,P,O),"class decorators","return"))&&(P=y);else{var k,F;O.static=l,O.private=f,f?2===o?k=function(e){return m(e),\
w.value}:(o<4&&(k=i(w,"get",m)),3!==o&&(F=i(w,"set",m))):(k=function(e){return e[n]},(o<2||4===o)&&(F=function(e,t){e[n]=t}));var N=O.access\
={has:f?h.bind():function(e){return n in e}};if(k&&(N.get=k),F&&(N.set=F),P=D.call(E,d?{get:w.get,set:w.set}:w[A],O),d){if("object"==typeof \
P&&P)(y=s(P.get,"accessor.get"))&&(w.get=y),(y=s(P.set,"accessor.set"))&&(w.set=y),(y=s(P.init,"accessor.init"))&&S.push(y);else if(void 0!=\
=P)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0")}else s(P,(p?"field":"method"\
)+" decorators","return")&&(p?S.push(P):w[A]=P)}}finally{I.v=!0}}return(p||d)&&u.push((function(e,t){for(var r=S.length-1;r>=0;r--)t=S[r].ca\
ll(e,t);return t})),p||b||(f?d?u.push(i(w,"get"),i(w,"set")):u.push(2===o?w[A]:i.call.bind(w[A])):Object.defineProperty(e,n,w)),P}function u\
(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for("Symbol.metadata"),{configurable:!0,enumerable:!0,value:t})}if(arguments.le\
ngth>=6)var l=a[Symbol.metadata||Symbol.for("Symbol.metadata")];var f=Object.create(null==l?null:l),p=function(e,t,r,n){var o,a,i=[],s=funct\
ion(t){return checkInRHS(t)===e},u=new Map;function l(e){e&&i.push(c.bind(null,e))}for(var f=0;f<t.length;f++){var p=t[f];if(Array.isArray(p\
)){var d=p[1],h=p[2],m=p.length>3,y=16&d,v=!!(8&d),g=0==(d&=7),b=h+"/"+v;if(!g&&!m){var w=u.get(b);if(!0===w||3===w&&4!==d||4===w&&3!==d)thr\
ow Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is no\
t currently supported by the decorators plugin. Property name was: "+h);u.set(b,!(d>2)||d)}applyDec(v?e:e.prototype,p,y,m?"#"+h:toPropertyKe\
y(h),d,n,v?a=a||[]:o=o||[],i,v,m,g,1===d,v&&m?s:r)}}return l(o),l(a),i}(e,t,o,f);return r.length||u(e,f),{e:p,get c(){var t=[];return r.leng\
th&&[u(applyDec(e,[r],n,e.name,5,f,t),f),c.bind(null,t,e)]}}}', {
      globals: ["TypeError", "Array", "Object", "Error", "Symbol", "Map"],
      locals: {
        applyDecs2305: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "applyDecs2305",
      dependencies: {
        checkInRHS: ["body.0.body.body.6.declarations.1.init.callee.body.body.0.declarations.3.init.body.body.0.argument.left.callee"],
        setFunctionName: ["body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.0.consequent.right.properties.\
0.value.callee", "body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.1.right.callee"],
        toPropertyKey: ["body.0.body.body.6.declarations.1.init.callee.body.body.2.body.body.1.consequent.body.2.expression.arguments.3.alte\
rnate.callee"]
      }
    }),
    classApplyDescriptorDestructureSet: G("7.13.10", 'function _classApplyDescriptorDestructureSet(e,t){if(t.set)return"__destrObj"in t||(t.\
__destrObj={set value(r){t.set.call(e,r)}}),t.__destrObj;if(!t.writable)throw new TypeError("attempted to set read only private field");retu\
rn t}', {
      globals: ["TypeError"],
      locals: {
        _classApplyDescriptorDestructureSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classApplyDescriptorDestructureSet",
      dependencies: {}
    }),
    classApplyDescriptorGet: G("7.13.10", "function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}", {
      globals: [],
      locals: {
        _classApplyDescriptorGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classApplyDescriptorGet",
      dependencies: {}
    }),
    classApplyDescriptorSet: G("7.13.10", 'function _classApplyDescriptorSet(e,t,l){if(t.set)t.set.call(e,l);else{if(!t.writable)throw new T\
ypeError("attempted to set read only private field");t.value=l}}', {
      globals: ["TypeError"],
      locals: {
        _classApplyDescriptorSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classApplyDescriptorSet",
      dependencies: {}
    }),
    classCheckPrivateStaticAccess: G("7.13.10", "function _classCheckPrivateStaticAccess(s,a,r){return assertClassBrand(a,s,r)}", {
      globals: [],
      locals: {
        _classCheckPrivateStaticAccess: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classCheckPrivateStaticAccess",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.callee"]
      }
    }),
    classCheckPrivateStaticFieldDescriptor: G("7.13.10", 'function _classCheckPrivateStaticFieldDescriptor(t,e){if(void 0===t)throw new Type\
Error("attempted to "+e+" private static field before its declaration")}', {
      globals: ["TypeError"],
      locals: {
        _classCheckPrivateStaticFieldDescriptor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classCheckPrivateStaticFieldDescriptor",
      dependencies: {}
    }),
    classExtractFieldDescriptor: G("7.13.10", "function _classExtractFieldDescriptor(e,t){return classPrivateFieldGet2(t,e)}", {
      globals: [],
      locals: {
        _classExtractFieldDescriptor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classExtractFieldDescriptor",
      dependencies: {
        classPrivateFieldGet2: ["body.0.body.body.0.argument.callee"]
      }
    }),
    classPrivateFieldDestructureSet: G("7.4.4", "function _classPrivateFieldDestructureSet(e,t){var r=classPrivateFieldGet2(t,e);return clas\
sApplyDescriptorDestructureSet(e,r)}", {
      globals: [],
      locals: {
        _classPrivateFieldDestructureSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldDestructureSet",
      dependencies: {
        classApplyDescriptorDestructureSet: ["body.0.body.body.1.argument.callee"],
        classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
      }
    }),
    classPrivateFieldGet: G("7.0.0-beta.0", "function _classPrivateFieldGet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescripto\
rGet(e,r)}", {
      globals: [],
      locals: {
        _classPrivateFieldGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldGet",
      dependencies: {
        classApplyDescriptorGet: ["body.0.body.body.1.argument.callee"],
        classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
      }
    }),
    classPrivateFieldSet: G("7.0.0-beta.0", "function _classPrivateFieldSet(e,t,r){var s=classPrivateFieldGet2(t,e);return classApplyDescrip\
torSet(e,s,r),r}", {
      globals: [],
      locals: {
        _classPrivateFieldSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldSet",
      dependencies: {
        classApplyDescriptorSet: ["body.0.body.body.1.argument.expressions.0.callee"],
        classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
      }
    }),
    classPrivateMethodGet: G("7.1.6", "function _classPrivateMethodGet(s,a,r){return assertClassBrand(a,s),r}", {
      globals: [],
      locals: {
        _classPrivateMethodGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateMethodGet",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"]
      }
    }),
    classPrivateMethodSet: G("7.1.6", 'function _classPrivateMethodSet(){throw new TypeError("attempted to reassign private method")}', {
      globals: ["TypeError"],
      locals: {
        _classPrivateMethodSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateMethodSet",
      dependencies: {}
    }),
    classStaticPrivateFieldDestructureSet: G("7.13.10", 'function _classStaticPrivateFieldDestructureSet(t,r,s){return assertClassBrand(r,t)\
,classCheckPrivateStaticFieldDescriptor(s,"set"),classApplyDescriptorDestructureSet(t,s)}', {
      globals: [],
      locals: {
        _classStaticPrivateFieldDestructureSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateFieldDestructureSet",
      dependencies: {
        classApplyDescriptorDestructureSet: ["body.0.body.body.0.argument.expressions.2.callee"],
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
        classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
      }
    }),
    classStaticPrivateFieldSpecGet: G("7.0.2", 'function _classStaticPrivateFieldSpecGet(t,s,r){return assertClassBrand(s,t),classCheckPriva\
teStaticFieldDescriptor(r,"get"),classApplyDescriptorGet(t,r)}', {
      globals: [],
      locals: {
        _classStaticPrivateFieldSpecGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateFieldSpecGet",
      dependencies: {
        classApplyDescriptorGet: ["body.0.body.body.0.argument.expressions.2.callee"],
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
        classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
      }
    }),
    classStaticPrivateFieldSpecSet: G("7.0.2", 'function _classStaticPrivateFieldSpecSet(s,t,r,e){return assertClassBrand(t,s),classCheckPri\
vateStaticFieldDescriptor(r,"set"),classApplyDescriptorSet(s,r,e),e}', {
      globals: [],
      locals: {
        _classStaticPrivateFieldSpecSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateFieldSpecSet",
      dependencies: {
        classApplyDescriptorSet: ["body.0.body.body.0.argument.expressions.2.callee"],
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
        classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
      }
    }),
    classStaticPrivateMethodSet: G("7.3.2", 'function _classStaticPrivateMethodSet(){throw new TypeError("attempted to set read only static \
private field")}', {
      globals: ["TypeError"],
      locals: {
        _classStaticPrivateMethodSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateMethodSet",
      dependencies: {}
    }),
    defineEnumerableProperties: G("7.0.0-beta.0", 'function _defineEnumerableProperties(e,r){for(var t in r){var n=r[t];n.configurable=n.enu\
merable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,t,n)}if(Object.getOwnPropertySymbols)for(var a=Object.getOwnPropertySymbols(\
r),b=0;b<a.length;b++){var i=a[b];(n=r[i]).configurable=n.enumerable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i,n)}return e}',
    {
      globals: ["Object"],
      locals: {
        _defineEnumerableProperties: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defineEnumerableProperties",
      dependencies: {}
    }),
    dispose: G("7.22.0", 'function dispose_SuppressedError(r,e){return"undefined"!=typeof SuppressedError?dispose_SuppressedError=Suppressed\
Error:(dispose_SuppressedError=function(r,e){this.suppressed=e,this.error=r,this.stack=Error().stack},dispose_SuppressedError.prototype=Obje\
ct.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}funct\
ion _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch\
(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(e,r):r,s=!0,next()}return next()}', {
      globals: ["SuppressedError", "Error", "Object", "Promise"],
      locals: {
        dispose_SuppressedError: ["body.0.id", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.left.object", "body.0.body\
.body.0.argument.expressions.0.alternate.expressions.1.right.arguments.1.properties.0.value.properties.0.value", "body.0.body.body.0.argumen\
t.expressions.1.callee", "body.1.body.body.1.body.body.0.argument.expressions.0.right.consequent.callee", "body.0.body.body.0.argument.expre\
ssions.0.consequent.left", "body.0.body.body.0.argument.expressions.0.alternate.expressions.0.left"],
        _dispose: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_dispose",
      dependencies: {}
    }),
    objectSpread: G("7.0.0-beta.0", 'function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?Object(arguments\
[r]):{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(t).filter((function(e)\
{return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.forEach((function(r){defineProperty(e,r,t[r])}))}return e}', {
      globals: ["Object"],
      locals: {
        _objectSpread: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectSpread",
      dependencies: {
        defineProperty: ["body.0.body.body.0.body.body.1.expression.expressions.1.arguments.0.body.body.0.expression.callee"]
      }
    }),
    using: G("7.22.0", 'function _using(o,n,e){if(null==n)return n;if(Object(n)!==n)throw new TypeError("using declarations can only be used\
 with objects, functions, null, or undefined.");if(e)var r=n[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==r&&(r=n[Symbol\
.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof r)throw new TypeError("Property [Symbol.dispose] is not a function.");return o.p\
ush({v:n,d:r,a:e}),n}', {
      globals: ["Object", "TypeError", "Symbol"],
      locals: {
        _using: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_using",
      dependencies: {}
    })
  });
});

// ../node_modules/@babel/helpers/lib/index.js
var am = T((pn) => {
  "use strict";
  Object.defineProperty(pn, "__esModule", {
    value: !0
  });
  pn.default = void 0;
  pn.get = Px;
  pn.getDependencies = CY;
  pn.list = void 0;
  pn.minVersion = AY;
  var xY = Se(), Sx = Tx(), {
    cloneNode: SY,
    identifier: xx
  } = xY;
  function nu(e, t, r) {
    try {
      let n = t.split("."), i = n.shift();
      for (; n.length > 0; )
        e = e[i], i = n.shift();
      if (arguments.length > 2)
        e[i] = r;
      else
        return e[i];
    } catch (n) {
      throw n.message += ` (when accessing ${t})`, n;
    }
  }
  s(nu, "deep");
  function PY(e, t, r, n, i, a) {
    let {
      locals: o,
      dependencies: l,
      exportBindingAssignments: u,
      exportName: c
    } = t, f = new Set(n || []);
    r && f.add(r);
    for (let [p, h] of (Object.entries || ((y) => Object.keys(y).map((v) => [v, y[v]])))(o)) {
      let y = p;
      if (r && p === c)
        y = r;
      else
        for (; f.has(y); ) y = "_" + y;
      if (y !== p)
        for (let v of h)
          nu(e, v, xx(y));
    }
    for (let [p, h] of (Object.entries || ((y) => Object.keys(y).map((v) => [v, y[v]])))(l)) {
      let y = typeof i == "function" && i(p) || xx(p);
      for (let v of h)
        nu(e, v, SY(y));
    }
    a?.(e, c, (p) => {
      u.forEach((h) => nu(e, h, p(nu(e, h))));
    });
  }
  s(PY, "permuteHelperAST");
  var im = /* @__PURE__ */ Object.create(null);
  function su(e) {
    if (!im[e]) {
      let t = Sx.default[e];
      if (!t)
        throw Object.assign(new ReferenceError(`Unknown helper ${e}`), {
          code: "BABEL_HELPER_UNKNOWN",
          helper: e
        });
      im[e] = {
        minVersion: t.minVersion,
        build(r, n, i, a) {
          let o = t.ast();
          return PY(o, t.metadata, n, i, r, a), {
            nodes: o.body,
            globals: t.metadata.globals
          };
        },
        getDependencies() {
          return Object.keys(t.metadata.dependencies);
        }
      };
    }
    return im[e];
  }
  s(su, "loadHelper");
  function Px(e, t, r, n, i) {
    if (typeof r == "object") {
      let a = r;
      a?.type === "Identifier" ? r = a.name : r = void 0;
    }
    return su(e).build(t, r, n, i);
  }
  s(Px, "get");
  function AY(e) {
    return su(e).minVersion;
  }
  s(AY, "minVersion");
  function CY(e) {
    return su(e).getDependencies();
  }
  s(CY, "getDependencies");
  pn.ensure = (e) => {
    su(e);
  };
  var OPe = pn.list = Object.keys(Sx.default).map((e) => e.replace(/^_/, "")), NPe = pn.default = Px;
});

// ../node_modules/@babel/traverse/lib/path/lib/virtual-types.js
var om = T(($e) => {
  "use strict";
  Object.defineProperty($e, "__esModule", {
    value: !0
  });
  $e.Var = $e.User = $e.Statement = $e.SpreadProperty = $e.Scope = $e.RestProperty = $e.ReferencedMemberExpression = $e.ReferencedIdentifier =
  $e.Referenced = $e.Pure = $e.NumericLiteralTypeAnnotation = $e.Generated = $e.ForAwaitStatement = $e.Flow = $e.Expression = $e.ExistentialTypeParam =
  $e.BlockScoped = $e.BindingIdentifier = void 0;
  var FPe = $e.ReferencedIdentifier = ["Identifier", "JSXIdentifier"], jPe = $e.ReferencedMemberExpression = ["MemberExpression"], LPe = $e.
  BindingIdentifier = ["Identifier"], MPe = $e.Statement = ["Statement"], RPe = $e.Expression = ["Expression"], qPe = $e.Scope = ["Scopable",
  "Pattern"], UPe = $e.Referenced = null, VPe = $e.BlockScoped = null, $Pe = $e.Var = ["VariableDeclaration"], WPe = $e.User = null, KPe = $e.
  Generated = null, GPe = $e.Pure = null, HPe = $e.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"], YPe = $e.RestProperty =
  ["RestElement"], zPe = $e.SpreadProperty = ["RestElement"], JPe = $e.ExistentialTypeParam = ["ExistsTypeAnnotation"], XPe = $e.NumericLiteralTypeAnnotation =
  ["NumberLiteralTypeAnnotation"], QPe = $e.ForAwaitStatement = ["ForOfStatement"];
});

// ../node_modules/debug/node_modules/ms/index.js
var Cx = T((eAe, Ax) => {
  var Ni = 1e3, Bi = Ni * 60, ki = Bi * 60, Ms = ki * 24, wY = Ms * 7, DY = Ms * 365.25;
  Ax.exports = function(e, t) {
    t = t || {};
    var r = typeof e;
    if (r === "string" && e.length > 0)
      return IY(e);
    if (r === "number" && isFinite(e))
      return t.long ? OY(e) : _Y(e);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(e)
    );
  };
  function IY(e) {
    if (e = String(e), !(e.length > 100)) {
      var t = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.
      exec(
        e
      );
      if (t) {
        var r = parseFloat(t[1]), n = (t[2] || "ms").toLowerCase();
        switch (n) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return r * DY;
          case "weeks":
          case "week":
          case "w":
            return r * wY;
          case "days":
          case "day":
          case "d":
            return r * Ms;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return r * ki;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return r * Bi;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return r * Ni;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return r;
          default:
            return;
        }
      }
    }
  }
  s(IY, "parse");
  function _Y(e) {
    var t = Math.abs(e);
    return t >= Ms ? Math.round(e / Ms) + "d" : t >= ki ? Math.round(e / ki) + "h" : t >= Bi ? Math.round(e / Bi) + "m" : t >= Ni ? Math.round(
    e / Ni) + "s" : e + "ms";
  }
  s(_Y, "fmtShort");
  function OY(e) {
    var t = Math.abs(e);
    return t >= Ms ? iu(e, t, Ms, "day") : t >= ki ? iu(e, t, ki, "hour") : t >= Bi ? iu(e, t, Bi, "minute") : t >= Ni ? iu(e, t, Ni, "secon\
d") : e + " ms";
  }
  s(OY, "fmtLong");
  function iu(e, t, r, n) {
    var i = t >= r * 1.5;
    return Math.round(e / r) + " " + n + (i ? "s" : "");
  }
  s(iu, "plural");
});

// ../node_modules/debug/src/common.js
var lm = T((rAe, wx) => {
  function NY(e) {
    r.debug = r, r.default = r, r.coerce = u, r.disable = a, r.enable = i, r.enabled = o, r.humanize = Cx(), r.destroy = c, Object.keys(e).forEach(
    (f) => {
      r[f] = e[f];
    }), r.names = [], r.skips = [], r.formatters = {};
    function t(f) {
      let p = 0;
      for (let h = 0; h < f.length; h++)
        p = (p << 5) - p + f.charCodeAt(h), p |= 0;
      return r.colors[Math.abs(p) % r.colors.length];
    }
    s(t, "selectColor"), r.selectColor = t;
    function r(f) {
      let p, h = null, y, v;
      function d(...b) {
        if (!d.enabled)
          return;
        let E = d, I = Number(/* @__PURE__ */ new Date()), O = I - (p || I);
        E.diff = O, E.prev = p, E.curr = I, p = I, b[0] = r.coerce(b[0]), typeof b[0] != "string" && b.unshift("%O");
        let k = 0;
        b[0] = b[0].replace(/%([a-zA-Z%])/g, (R, U) => {
          if (R === "%%")
            return "%";
          k++;
          let Q = r.formatters[U];
          if (typeof Q == "function") {
            let W = b[k];
            R = Q.call(E, W), b.splice(k, 1), k--;
          }
          return R;
        }), r.formatArgs.call(E, b), (E.log || r.log).apply(E, b);
      }
      return s(d, "debug"), d.namespace = f, d.useColors = r.useColors(), d.color = r.selectColor(f), d.extend = n, d.destroy = r.destroy, Object.
      defineProperty(d, "enabled", {
        enumerable: !0,
        configurable: !1,
        get: /* @__PURE__ */ s(() => h !== null ? h : (y !== r.namespaces && (y = r.namespaces, v = r.enabled(f)), v), "get"),
        set: /* @__PURE__ */ s((b) => {
          h = b;
        }, "set")
      }), typeof r.init == "function" && r.init(d), d;
    }
    s(r, "createDebug");
    function n(f, p) {
      let h = r(this.namespace + (typeof p > "u" ? ":" : p) + f);
      return h.log = this.log, h;
    }
    s(n, "extend");
    function i(f) {
      r.save(f), r.namespaces = f, r.names = [], r.skips = [];
      let p, h = (typeof f == "string" ? f : "").split(/[\s,]+/), y = h.length;
      for (p = 0; p < y; p++)
        h[p] && (f = h[p].replace(/\*/g, ".*?"), f[0] === "-" ? r.skips.push(new RegExp("^" + f.slice(1) + "$")) : r.names.push(new RegExp("\
^" + f + "$")));
    }
    s(i, "enable");
    function a() {
      let f = [
        ...r.names.map(l),
        ...r.skips.map(l).map((p) => "-" + p)
      ].join(",");
      return r.enable(""), f;
    }
    s(a, "disable");
    function o(f) {
      if (f[f.length - 1] === "*")
        return !0;
      let p, h;
      for (p = 0, h = r.skips.length; p < h; p++)
        if (r.skips[p].test(f))
          return !1;
      for (p = 0, h = r.names.length; p < h; p++)
        if (r.names[p].test(f))
          return !0;
      return !1;
    }
    s(o, "enabled");
    function l(f) {
      return f.toString().substring(2, f.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    s(l, "toNamespace");
    function u(f) {
      return f instanceof Error ? f.stack || f.message : f;
    }
    s(u, "coerce");
    function c() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major versio\
n of `debug`.");
    }
    return s(c, "destroy"), r.enable(r.load()), r;
  }
  s(NY, "setup");
  wx.exports = NY;
});

// ../node_modules/debug/src/browser.js
var Dx = T((yr, au) => {
  yr.formatArgs = kY;
  yr.save = FY;
  yr.load = jY;
  yr.useColors = BY;
  yr.storage = LY();
  yr.destroy = /* @__PURE__ */ (() => {
    let e = !1;
    return () => {
      e || (e = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the nex\
t major version of `debug`."));
    };
  })();
  yr.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function BY() {
    if (typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs))
      return !0;
    if (typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
      return !1;
    let e;
    return typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
    // Is firebug? http://stackoverflow.com/a/398120/376773
    typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator < "u" && navigator.userAgent && (e = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(e[1], 10) >=
    31 || // Double check webkit in userAgent just in case we are in a worker
    typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  s(BY, "useColors");
  function kY(e) {
    if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" +
    au.exports.humanize(this.diff), !this.useColors)
      return;
    let t = "color: " + this.color;
    e.splice(1, 0, t, "color: inherit");
    let r = 0, n = 0;
    e[0].replace(/%[a-zA-Z%]/g, (i) => {
      i !== "%%" && (r++, i === "%c" && (n = r));
    }), e.splice(n, 0, t);
  }
  s(kY, "formatArgs");
  yr.log = console.debug || console.log || (() => {
  });
  function FY(e) {
    try {
      e ? yr.storage.setItem("debug", e) : yr.storage.removeItem("debug");
    } catch {
    }
  }
  s(FY, "save");
  function jY() {
    let e;
    try {
      e = yr.storage.getItem("debug");
    } catch {
    }
    return !e && typeof process < "u" && "env" in process && (e = process.env.DEBUG), e;
  }
  s(jY, "load");
  function LY() {
    try {
      return localStorage;
    } catch {
    }
  }
  s(LY, "localstorage");
  au.exports = lm()(yr);
  var { formatters: MY } = au.exports;
  MY.j = function(e) {
    try {
      return JSON.stringify(e);
    } catch (t) {
      return "[UnexpectedJSONParseError]: " + t.message;
    }
  };
});

// ../node_modules/has-flag/index.js
var _x = T((iAe, Ix) => {
  "use strict";
  Ix.exports = (e, t = process.argv) => {
    let r = e.startsWith("-") ? "" : e.length === 1 ? "-" : "--", n = t.indexOf(r + e), i = t.indexOf("--");
    return n !== -1 && (i === -1 || n < i);
  };
});

// ../node_modules/supports-color/index.js
var Bx = T((aAe, Nx) => {
  "use strict";
  var RY = require("os"), Ox = require("tty"), Dr = _x(), { env: Ft } = process, ns;
  Dr("no-color") || Dr("no-colors") || Dr("color=false") || Dr("color=never") ? ns = 0 : (Dr("color") || Dr("colors") || Dr("color=true") ||
  Dr("color=always")) && (ns = 1);
  "FORCE_COLOR" in Ft && (Ft.FORCE_COLOR === "true" ? ns = 1 : Ft.FORCE_COLOR === "false" ? ns = 0 : ns = Ft.FORCE_COLOR.length === 0 ? 1 : Math.
  min(parseInt(Ft.FORCE_COLOR, 10), 3));
  function um(e) {
    return e === 0 ? !1 : {
      level: e,
      hasBasic: !0,
      has256: e >= 2,
      has16m: e >= 3
    };
  }
  s(um, "translateLevel");
  function cm(e, t) {
    if (ns === 0)
      return 0;
    if (Dr("color=16m") || Dr("color=full") || Dr("color=truecolor"))
      return 3;
    if (Dr("color=256"))
      return 2;
    if (e && !t && ns === void 0)
      return 0;
    let r = ns || 0;
    if (Ft.TERM === "dumb")
      return r;
    if (process.platform === "win32") {
      let n = RY.release().split(".");
      return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;
    }
    if ("CI" in Ft)
      return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((n) => n in Ft) || Ft.CI_NAME === "codeship" ?
      1 : r;
    if ("TEAMCITY_VERSION" in Ft)
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Ft.TEAMCITY_VERSION) ? 1 : 0;
    if (Ft.COLORTERM === "truecolor")
      return 3;
    if ("TERM_PROGRAM" in Ft) {
      let n = parseInt((Ft.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (Ft.TERM_PROGRAM) {
        case "iTerm.app":
          return n >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    return /-256(color)?$/i.test(Ft.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Ft.TERM) || "COLORTERM" in
    Ft ? 1 : r;
  }
  s(cm, "supportsColor");
  function qY(e) {
    let t = cm(e, e && e.isTTY);
    return um(t);
  }
  s(qY, "getSupportLevel");
  Nx.exports = {
    supportsColor: qY,
    stdout: um(cm(!0, Ox.isatty(1))),
    stderr: um(cm(!0, Ox.isatty(2)))
  };
});

// ../node_modules/debug/src/node.js
var Fx = T((jt, lu) => {
  var UY = require("tty"), ou = require("util");
  jt.init = YY;
  jt.log = KY;
  jt.formatArgs = $Y;
  jt.save = GY;
  jt.load = HY;
  jt.useColors = VY;
  jt.destroy = ou.deprecate(
    () => {
    },
    "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
  );
  jt.colors = [6, 2, 3, 4, 5, 1];
  try {
    let e = Bx();
    e && (e.stderr || e).level >= 2 && (jt.colors = [
      20,
      21,
      26,
      27,
      32,
      33,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      56,
      57,
      62,
      63,
      68,
      69,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      92,
      93,
      98,
      99,
      112,
      113,
      128,
      129,
      134,
      135,
      148,
      149,
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      178,
      179,
      184,
      185,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      214,
      215,
      220,
      221
    ]);
  } catch {
  }
  jt.inspectOpts = Object.keys(process.env).filter((e) => /^debug_/i.test(e)).reduce((e, t) => {
    let r = t.substring(6).toLowerCase().replace(/_([a-z])/g, (i, a) => a.toUpperCase()), n = process.env[t];
    return /^(yes|on|true|enabled)$/i.test(n) ? n = !0 : /^(no|off|false|disabled)$/i.test(n) ? n = !1 : n === "null" ? n = null : n = Number(
    n), e[r] = n, e;
  }, {});
  function VY() {
    return "colors" in jt.inspectOpts ? !!jt.inspectOpts.colors : UY.isatty(process.stderr.fd);
  }
  s(VY, "useColors");
  function $Y(e) {
    let { namespace: t, useColors: r } = this;
    if (r) {
      let n = this.color, i = "\x1B[3" + (n < 8 ? n : "8;5;" + n), a = `  ${i};1m${t} \x1B[0m`;
      e[0] = a + e[0].split(`
`).join(`
` + a), e.push(i + "m+" + lu.exports.humanize(this.diff) + "\x1B[0m");
    } else
      e[0] = WY() + t + " " + e[0];
  }
  s($Y, "formatArgs");
  function WY() {
    return jt.inspectOpts.hideDate ? "" : (/* @__PURE__ */ new Date()).toISOString() + " ";
  }
  s(WY, "getDate");
  function KY(...e) {
    return process.stderr.write(ou.formatWithOptions(jt.inspectOpts, ...e) + `
`);
  }
  s(KY, "log");
  function GY(e) {
    e ? process.env.DEBUG = e : delete process.env.DEBUG;
  }
  s(GY, "save");
  function HY() {
    return process.env.DEBUG;
  }
  s(HY, "load");
  function YY(e) {
    e.inspectOpts = {};
    let t = Object.keys(jt.inspectOpts);
    for (let r = 0; r < t.length; r++)
      e.inspectOpts[t[r]] = jt.inspectOpts[t[r]];
  }
  s(YY, "init");
  lu.exports = lm()(jt);
  var { formatters: kx } = lu.exports;
  kx.o = function(e) {
    return this.inspectOpts.colors = this.useColors, ou.inspect(e, this.inspectOpts).split(`
`).map((t) => t.trim()).join(" ");
  };
  kx.O = function(e) {
    return this.inspectOpts.colors = this.useColors, ou.inspect(e, this.inspectOpts);
  };
});

// ../node_modules/debug/src/index.js
var Rs = T((uAe, fm) => {
  typeof process > "u" || process.type === "renderer" || process.browser === !0 || process.__nwjs ? fm.exports = Dx() : fm.exports = Fx();
});

// ../node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js
var dm = T((It) => {
  "use strict";
  Object.defineProperty(It, "__esModule", {
    value: !0
  });
  It.isBindingIdentifier = gz;
  It.isBlockScoped = xz;
  It.isExpression = Ez;
  It.isFlow = wz;
  It.isForAwaitStatement = _z;
  It.isGenerated = Az;
  It.isPure = Cz;
  It.isReferenced = Tz;
  It.isReferencedIdentifier = mz;
  It.isReferencedMemberExpression = yz;
  It.isRestProperty = Dz;
  It.isScope = vz;
  It.isSpreadProperty = Iz;
  It.isStatement = bz;
  It.isUser = Pz;
  It.isVar = Sz;
  var zY = Se(), {
    isBinding: JY,
    isBlockScoped: XY,
    isExportDeclaration: QY,
    isExpression: ZY,
    isFlow: ez,
    isForStatement: tz,
    isForXStatement: rz,
    isIdentifier: jx,
    isImportDeclaration: nz,
    isImportSpecifier: sz,
    isJSXIdentifier: iz,
    isJSXMemberExpression: az,
    isMemberExpression: oz,
    isRestElement: Lx,
    isReferenced: pm,
    isScope: lz,
    isStatement: uz,
    isVar: cz,
    isVariableDeclaration: fz,
    react: pz,
    isForOfStatement: dz
  } = zY, {
    isCompatTag: hz
  } = pz;
  function mz(e) {
    let {
      node: t,
      parent: r
    } = this;
    if (!jx(t, e) && !az(r, e))
      if (iz(t, e)) {
        if (hz(t.name)) return !1;
      } else
        return !1;
    return pm(t, r, this.parentPath.parent);
  }
  s(mz, "isReferencedIdentifier");
  function yz() {
    let {
      node: e,
      parent: t
    } = this;
    return oz(e) && pm(e, t);
  }
  s(yz, "isReferencedMemberExpression");
  function gz() {
    let {
      node: e,
      parent: t
    } = this, r = this.parentPath.parent;
    return jx(e) && JY(e, t, r);
  }
  s(gz, "isBindingIdentifier");
  function bz() {
    let {
      node: e,
      parent: t
    } = this;
    return uz(e) ? !(fz(e) && (rz(t, {
      left: e
    }) || tz(t, {
      init: e
    }))) : !1;
  }
  s(bz, "isStatement");
  function Ez() {
    return this.isIdentifier() ? this.isReferencedIdentifier() : ZY(this.node);
  }
  s(Ez, "isExpression");
  function vz() {
    return lz(this.node, this.parent);
  }
  s(vz, "isScope");
  function Tz() {
    return pm(this.node, this.parent);
  }
  s(Tz, "isReferenced");
  function xz() {
    return XY(this.node);
  }
  s(xz, "isBlockScoped");
  function Sz() {
    return cz(this.node);
  }
  s(Sz, "isVar");
  function Pz() {
    return this.node && !!this.node.loc;
  }
  s(Pz, "isUser");
  function Az() {
    return !this.isUser();
  }
  s(Az, "isGenerated");
  function Cz(e) {
    return this.scope.isPure(this.node, e);
  }
  s(Cz, "isPure");
  function wz() {
    let {
      node: e
    } = this;
    return ez(e) ? !0 : nz(e) ? e.importKind === "type" || e.importKind === "typeof" : QY(e) ? e.exportKind === "type" : sz(e) ? e.importKind ===
    "type" || e.importKind === "typeof" : !1;
  }
  s(wz, "isFlow");
  function Dz() {
    var e;
    return Lx(this.node) && ((e = this.parentPath) == null ? void 0 : e.isObjectPattern());
  }
  s(Dz, "isRestProperty");
  function Iz() {
    var e;
    return Lx(this.node) && ((e = this.parentPath) == null ? void 0 : e.isObjectExpression());
  }
  s(Iz, "isSpreadProperty");
  function _z() {
    return dz(this.node, {
      await: !0
    });
  }
  s(_z, "isForAwaitStatement");
  It.isExistentialTypeParam = /* @__PURE__ */ s(function() {
    throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
  }, "isExistentialTypeParam"), It.isNumericLiteralTypeAnnotation = /* @__PURE__ */ s(function() {
    throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
  }, "isNumericLiteralTypeAnnotation");
});

// ../node_modules/@babel/traverse/lib/visitors.js
var io = T((Us) => {
  "use strict";
  Object.defineProperty(Us, "__esModule", {
    value: !0
  });
  Us.environmentVisitor = Mz;
  Us.explode = Yx;
  Us.isExplodedVisitor = Hx;
  Us.merge = Jx;
  Us.verify = zx;
  var Gx = om(), Oz = dm(), Nz = Se(), Mx = Fi(), {
    DEPRECATED_KEYS: Rx,
    DEPRECATED_ALIASES: qx,
    FLIPPED_ALIAS_KEYS: Ux,
    TYPES: Bz,
    __internal__deprecationWarning: Vx
  } = Nz;
  function kz(e) {
    return e in Gx;
  }
  s(kz, "isVirtualType");
  function Hx(e) {
    return e?._exploded;
  }
  s(Hx, "isExplodedVisitor");
  function Yx(e) {
    if (Hx(e)) return e;
    e._exploded = !0;
    for (let t of Object.keys(e)) {
      if (qs(t)) continue;
      let r = t.split("|");
      if (r.length === 1) continue;
      let n = e[t];
      delete e[t];
      for (let i of r)
        e[i] = n;
    }
    zx(e), delete e.__esModule, Fz(e), Kx(e);
    for (let t of Object.keys(e)) {
      if (qs(t) || !kz(t)) continue;
      let r = e[t];
      for (let i of Object.keys(r))
        r[i] = jz(t, r[i]);
      delete e[t];
      let n = Gx[t];
      if (n !== null)
        for (let i of n)
          e[i] ? so(e[i], r) : e[i] = r;
      else
        so(e, r);
    }
    for (let t of Object.keys(e)) {
      if (qs(t)) continue;
      let r = Ux[t];
      if (t in Rx) {
        let i = Rx[t];
        Vx(t, i, "Visitor "), r = [i];
      } else if (t in qx) {
        let i = qx[t];
        Vx(t, i, "Visitor "), r = Ux[i];
      }
      if (!r) continue;
      let n = e[t];
      delete e[t];
      for (let i of r) {
        let a = e[i];
        a ? so(a, n) : e[i] = Object.assign({}, n);
      }
    }
    for (let t of Object.keys(e))
      qs(t) || Kx(e[t]);
    return e;
  }
  s(Yx, "explode$1");
  function zx(e) {
    if (!e._verified) {
      if (typeof e == "function")
        throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Functi\
on }`?");
      for (let t of Object.keys(e)) {
        if ((t === "enter" || t === "exit") && $x(t, e[t]), qs(t)) continue;
        if (!Bz.includes(t))
          throw new Error(`You gave us a visitor for the node type ${t} but it's not a valid type in @babel/traverse 7.25.3`);
        let r = e[t];
        if (typeof r == "object")
          for (let n of Object.keys(r))
            if (n === "enter" || n === "exit")
              $x(`${t}.${n}`, r[n]);
            else
              throw new Error(`You passed \`traverse()\` a visitor object with the property ${t} that has the invalid property ${n}`);
      }
      e._verified = !0;
    }
  }
  s(zx, "verify$1");
  function $x(e, t) {
    let r = [].concat(t);
    for (let n of r)
      if (typeof n != "function")
        throw new TypeError(`Non-function found defined in ${e} with type ${typeof n}`);
  }
  s($x, "validateVisitorMethods");
  function Jx(e, t = [], r) {
    let n = {
      _verified: !0,
      _exploded: !0
    };
    Object.defineProperty(n, "_exploded", {
      enumerable: !1
    }), Object.defineProperty(n, "_verified", {
      enumerable: !1
    });
    for (let i = 0; i < e.length; i++) {
      let a = Yx(e[i]), o = t[i], l = a;
      (o || r) && (l = Wx(l, o, r)), so(n, l);
      for (let u of Object.keys(a)) {
        if (qs(u)) continue;
        let c = a[u];
        (o || r) && (c = Wx(c, o, r));
        let f = n[u] || (n[u] = {});
        so(f, c);
      }
    }
    return n;
  }
  s(Jx, "merge");
  function Wx(e, t, r) {
    let n = {};
    for (let i of ["enter", "exit"]) {
      let a = e[i];
      Array.isArray(a) && (a = a.map(function(o) {
        let l = o;
        return t && (l = /* @__PURE__ */ s(function(u) {
          o.call(t, u, t);
        }, "newFn")), r && (l = r(t?.key, i, l)), l !== o && (l.toString = () => o.toString()), l;
      }), n[i] = a);
    }
    return n;
  }
  s(Wx, "wrapWithStateOrWrapper");
  function Fz(e) {
    for (let t of Object.keys(e)) {
      if (qs(t)) continue;
      let r = e[t];
      typeof r == "function" && (e[t] = {
        enter: r
      });
    }
  }
  s(Fz, "ensureEntranceObjects");
  function Kx(e) {
    e.enter && !Array.isArray(e.enter) && (e.enter = [e.enter]), e.exit && !Array.isArray(e.exit) && (e.exit = [e.exit]);
  }
  s(Kx, "ensureCallbackArrays");
  function jz(e, t) {
    let r = `is${e}`, n = Oz[r], i = /* @__PURE__ */ s(function(a) {
      if (n.call(a))
        return t.apply(this, arguments);
    }, "newFn");
    return i.toString = () => t.toString(), i;
  }
  s(jz, "wrapCheck");
  function qs(e) {
    return e[0] === "_" || e === "enter" || e === "exit" || e === "shouldSkip" || e === "denylist" || e === "noScope" || e === "skipKeys" ||
    e === "blacklist";
  }
  s(qs, "shouldIgnoreKey");
  function so(e, t) {
    for (let r of ["enter", "exit"])
      t[r] && (e[r] = [].concat(e[r] || [], t[r]));
  }
  s(so, "mergePair");
  var Lz = {
    FunctionParent(e) {
      e.isArrowFunctionExpression() || (e.skip(), e.isMethod() && (e.requeueComputedKeyAndDecorators ? e.requeueComputedKeyAndDecorators() :
      Mx.requeueComputedKeyAndDecorators.call(e)));
    },
    Property(e) {
      e.isObjectProperty() || (e.skip(), e.requeueComputedKeyAndDecorators ? e.requeueComputedKeyAndDecorators() : Mx.requeueComputedKeyAndDecorators.
      call(e));
    }
  };
  function Mz(e) {
    return Jx([Lz, e]);
  }
  s(Mz, "environmentVisitor");
});

// ../node_modules/@babel/traverse/lib/scope/lib/renamer.js
var Xx = T((uu) => {
  "use strict";
  Object.defineProperty(uu, "__esModule", {
    value: !0
  });
  uu.default = void 0;
  var Rz = Se(), qz = cu(), Uz = io(), Vz = Fi(), $z = {
    ReferencedIdentifier({
      node: e
    }, t) {
      e.name === t.oldName && (e.name = t.newName);
    },
    Scope(e, t) {
      e.scope.bindingIdentifierEquals(t.oldName, t.binding.identifier) || (e.skip(), e.isMethod() && (e.requeueComputedKeyAndDecorators ? e.
      requeueComputedKeyAndDecorators() : Vz.requeueComputedKeyAndDecorators.call(e)));
    },
    ObjectProperty({
      node: e,
      scope: t
    }, r) {
      let {
        name: n
      } = e.key;
      if (e.shorthand && (n === r.oldName || n === r.newName) && t.getBindingIdentifier(n) === r.binding.identifier) {
        e.shorthand = !1;
        {
          var i;
          (i = e.extra) != null && i.shorthand && (e.extra.shorthand = !1);
        }
      }
    },
    "AssignmentExpression|Declaration|VariableDeclarator"(e, t) {
      if (e.isVariableDeclaration()) return;
      let r = e.isAssignmentExpression() ? e.getAssignmentIdentifiers() : e.getOuterBindingIdentifiers();
      for (let n in r)
        n === t.oldName && (r[n].name = t.newName);
    }
  }, hm = class {
    static {
      s(this, "Renamer");
    }
    constructor(t, r, n) {
      this.newName = n, this.oldName = r, this.binding = t;
    }
    maybeConvertFromExportDeclaration(t) {
      let r = t.parentPath;
      if (r.isExportDeclaration()) {
        if (r.isExportDefaultDeclaration()) {
          let {
            declaration: n
          } = r.node;
          if (Rz.isDeclaration(n) && !n.id)
            return;
        }
        r.isExportAllDeclaration() || r.splitExportDeclaration();
      }
    }
    maybeConvertFromClassFunctionDeclaration(t) {
      return t;
    }
    maybeConvertFromClassFunctionExpression(t) {
      return t;
    }
    rename() {
      let {
        binding: t,
        oldName: r,
        newName: n
      } = this, {
        scope: i,
        path: a
      } = t, o = a.find((u) => u.isDeclaration() || u.isFunctionExpression() || u.isClassExpression());
      o && o.getOuterBindingIdentifiers()[r] === t.identifier && this.maybeConvertFromExportDeclaration(o);
      let l = arguments[0] || i.block;
      (0, qz.traverseNode)(l, (0, Uz.explode)($z), i, this, i.path, {
        discriminant: !0
      }), arguments[0] || (i.removeOwnBinding(r), i.bindings[n] = t, this.binding.identifier.name = n), o && (this.maybeConvertFromClassFunctionDeclaration(
      a), this.maybeConvertFromClassFunctionExpression(a));
    }
  };
  uu.default = hm;
});

// ../node_modules/@babel/traverse/lib/scope/binding.js
var Qx = T((fu) => {
  "use strict";
  Object.defineProperty(fu, "__esModule", {
    value: !0
  });
  fu.default = void 0;
  var mm = class {
    static {
      s(this, "Binding");
    }
    constructor({
      identifier: t,
      scope: r,
      path: n,
      kind: i
    }) {
      this.identifier = void 0, this.scope = void 0, this.path = void 0, this.kind = void 0, this.constantViolations = [], this.constant = !0,
      this.referencePaths = [], this.referenced = !1, this.references = 0, this.identifier = t, this.scope = r, this.path = n, this.kind = i,
      (i === "var" || i === "hoisted") && Wz(n) && this.reassign(n), this.clearValue();
    }
    deoptValue() {
      this.clearValue(), this.hasDeoptedValue = !0;
    }
    setValue(t) {
      this.hasDeoptedValue || (this.hasValue = !0, this.value = t);
    }
    clearValue() {
      this.hasDeoptedValue = !1, this.hasValue = !1, this.value = null;
    }
    reassign(t) {
      this.constant = !1, !this.constantViolations.includes(t) && this.constantViolations.push(t);
    }
    reference(t) {
      this.referencePaths.includes(t) || (this.referenced = !0, this.references++, this.referencePaths.push(t));
    }
    dereference() {
      this.references--, this.referenced = !!this.references;
    }
  };
  fu.default = mm;
  function Wz(e) {
    for (let {
      parentPath: t,
      key: r
    } = e; t; {
      parentPath: t,
      key: r
    } = t) {
      if (t.isFunctionParent()) return !1;
      if (t.isWhile() || t.isForXStatement() || t.isForStatement() && r === "body")
        return !0;
    }
    return !1;
  }
  s(Wz, "isDeclaredInLoop");
});

// ../node_modules/@babel/traverse/node_modules/globals/globals.json
var Zx = T((bAe, Kz) => {
  Kz.exports = {
    builtin: {
      Array: !1,
      ArrayBuffer: !1,
      Atomics: !1,
      BigInt: !1,
      BigInt64Array: !1,
      BigUint64Array: !1,
      Boolean: !1,
      constructor: !1,
      DataView: !1,
      Date: !1,
      decodeURI: !1,
      decodeURIComponent: !1,
      encodeURI: !1,
      encodeURIComponent: !1,
      Error: !1,
      escape: !1,
      eval: !1,
      EvalError: !1,
      Float32Array: !1,
      Float64Array: !1,
      Function: !1,
      globalThis: !1,
      hasOwnProperty: !1,
      Infinity: !1,
      Int16Array: !1,
      Int32Array: !1,
      Int8Array: !1,
      isFinite: !1,
      isNaN: !1,
      isPrototypeOf: !1,
      JSON: !1,
      Map: !1,
      Math: !1,
      NaN: !1,
      Number: !1,
      Object: !1,
      parseFloat: !1,
      parseInt: !1,
      Promise: !1,
      propertyIsEnumerable: !1,
      Proxy: !1,
      RangeError: !1,
      ReferenceError: !1,
      Reflect: !1,
      RegExp: !1,
      Set: !1,
      SharedArrayBuffer: !1,
      String: !1,
      Symbol: !1,
      SyntaxError: !1,
      toLocaleString: !1,
      toString: !1,
      TypeError: !1,
      Uint16Array: !1,
      Uint32Array: !1,
      Uint8Array: !1,
      Uint8ClampedArray: !1,
      undefined: !1,
      unescape: !1,
      URIError: !1,
      valueOf: !1,
      WeakMap: !1,
      WeakSet: !1
    },
    es5: {
      Array: !1,
      Boolean: !1,
      constructor: !1,
      Date: !1,
      decodeURI: !1,
      decodeURIComponent: !1,
      encodeURI: !1,
      encodeURIComponent: !1,
      Error: !1,
      escape: !1,
      eval: !1,
      EvalError: !1,
      Function: !1,
      hasOwnProperty: !1,
      Infinity: !1,
      isFinite: !1,
      isNaN: !1,
      isPrototypeOf: !1,
      JSON: !1,
      Math: !1,
      NaN: !1,
      Number: !1,
      Object: !1,
      parseFloat: !1,
      parseInt: !1,
      propertyIsEnumerable: !1,
      RangeError: !1,
      ReferenceError: !1,
      RegExp: !1,
      String: !1,
      SyntaxError: !1,
      toLocaleString: !1,
      toString: !1,
      TypeError: !1,
      undefined: !1,
      unescape: !1,
      URIError: !1,
      valueOf: !1
    },
    es2015: {
      Array: !1,
      ArrayBuffer: !1,
      Boolean: !1,
      constructor: !1,
      DataView: !1,
      Date: !1,
      decodeURI: !1,
      decodeURIComponent: !1,
      encodeURI: !1,
      encodeURIComponent: !1,
      Error: !1,
      escape: !1,
      eval: !1,
      EvalError: !1,
      Float32Array: !1,
      Float64Array: !1,
      Function: !1,
      hasOwnProperty: !1,
      Infinity: !1,
      Int16Array: !1,
      Int32Array: !1,
      Int8Array: !1,
      isFinite: !1,
      isNaN: !1,
      isPrototypeOf: !1,
      JSON: !1,
      Map: !1,
      Math: !1,
      NaN: !1,
      Number: !1,
      Object: !1,
      parseFloat: !1,
      parseInt: !1,
      Promise: !1,
      propertyIsEnumerable: !1,
      Proxy: !1,
      RangeError: !1,
      ReferenceError: !1,
      Reflect: !1,
      RegExp: !1,
      Set: !1,
      String: !1,
      Symbol: !1,
      SyntaxError: !1,
      toLocaleString: !1,
      toString: !1,
      TypeError: !1,
      Uint16Array: !1,
      Uint32Array: !1,
      Uint8Array: !1,
      Uint8ClampedArray: !1,
      undefined: !1,
      unescape: !1,
      URIError: !1,
      valueOf: !1,
      WeakMap: !1,
      WeakSet: !1
    },
    es2017: {
      Array: !1,
      ArrayBuffer: !1,
      Atomics: !1,
      Boolean: !1,
      constructor: !1,
      DataView: !1,
      Date: !1,
      decodeURI: !1,
      decodeURIComponent: !1,
      encodeURI: !1,
      encodeURIComponent: !1,
      Error: !1,
      escape: !1,
      eval: !1,
      EvalError: !1,
      Float32Array: !1,
      Float64Array: !1,
      Function: !1,
      hasOwnProperty: !1,
      Infinity: !1,
      Int16Array: !1,
      Int32Array: !1,
      Int8Array: !1,
      isFinite: !1,
      isNaN: !1,
      isPrototypeOf: !1,
      JSON: !1,
      Map: !1,
      Math: !1,
      NaN: !1,
      Number: !1,
      Object: !1,
      parseFloat: !1,
      parseInt: !1,
      Promise: !1,
      propertyIsEnumerable: !1,
      Proxy: !1,
      RangeError: !1,
      ReferenceError: !1,
      Reflect: !1,
      RegExp: !1,
      Set: !1,
      SharedArrayBuffer: !1,
      String: !1,
      Symbol: !1,
      SyntaxError: !1,
      toLocaleString: !1,
      toString: !1,
      TypeError: !1,
      Uint16Array: !1,
      Uint32Array: !1,
      Uint8Array: !1,
      Uint8ClampedArray: !1,
      undefined: !1,
      unescape: !1,
      URIError: !1,
      valueOf: !1,
      WeakMap: !1,
      WeakSet: !1
    },
    browser: {
      AbortController: !1,
      AbortSignal: !1,
      addEventListener: !1,
      alert: !1,
      AnalyserNode: !1,
      Animation: !1,
      AnimationEffectReadOnly: !1,
      AnimationEffectTiming: !1,
      AnimationEffectTimingReadOnly: !1,
      AnimationEvent: !1,
      AnimationPlaybackEvent: !1,
      AnimationTimeline: !1,
      applicationCache: !1,
      ApplicationCache: !1,
      ApplicationCacheErrorEvent: !1,
      atob: !1,
      Attr: !1,
      Audio: !1,
      AudioBuffer: !1,
      AudioBufferSourceNode: !1,
      AudioContext: !1,
      AudioDestinationNode: !1,
      AudioListener: !1,
      AudioNode: !1,
      AudioParam: !1,
      AudioProcessingEvent: !1,
      AudioScheduledSourceNode: !1,
      "AudioWorkletGlobalScope ": !1,
      AudioWorkletNode: !1,
      AudioWorkletProcessor: !1,
      BarProp: !1,
      BaseAudioContext: !1,
      BatteryManager: !1,
      BeforeUnloadEvent: !1,
      BiquadFilterNode: !1,
      Blob: !1,
      BlobEvent: !1,
      blur: !1,
      BroadcastChannel: !1,
      btoa: !1,
      BudgetService: !1,
      ByteLengthQueuingStrategy: !1,
      Cache: !1,
      caches: !1,
      CacheStorage: !1,
      cancelAnimationFrame: !1,
      cancelIdleCallback: !1,
      CanvasCaptureMediaStreamTrack: !1,
      CanvasGradient: !1,
      CanvasPattern: !1,
      CanvasRenderingContext2D: !1,
      ChannelMergerNode: !1,
      ChannelSplitterNode: !1,
      CharacterData: !1,
      clearInterval: !1,
      clearTimeout: !1,
      clientInformation: !1,
      ClipboardEvent: !1,
      close: !1,
      closed: !1,
      CloseEvent: !1,
      Comment: !1,
      CompositionEvent: !1,
      confirm: !1,
      console: !1,
      ConstantSourceNode: !1,
      ConvolverNode: !1,
      CountQueuingStrategy: !1,
      createImageBitmap: !1,
      Credential: !1,
      CredentialsContainer: !1,
      crypto: !1,
      Crypto: !1,
      CryptoKey: !1,
      CSS: !1,
      CSSConditionRule: !1,
      CSSFontFaceRule: !1,
      CSSGroupingRule: !1,
      CSSImportRule: !1,
      CSSKeyframeRule: !1,
      CSSKeyframesRule: !1,
      CSSMediaRule: !1,
      CSSNamespaceRule: !1,
      CSSPageRule: !1,
      CSSRule: !1,
      CSSRuleList: !1,
      CSSStyleDeclaration: !1,
      CSSStyleRule: !1,
      CSSStyleSheet: !1,
      CSSSupportsRule: !1,
      CustomElementRegistry: !1,
      customElements: !1,
      CustomEvent: !1,
      DataTransfer: !1,
      DataTransferItem: !1,
      DataTransferItemList: !1,
      defaultstatus: !1,
      defaultStatus: !1,
      DelayNode: !1,
      DeviceMotionEvent: !1,
      DeviceOrientationEvent: !1,
      devicePixelRatio: !1,
      dispatchEvent: !1,
      document: !1,
      Document: !1,
      DocumentFragment: !1,
      DocumentType: !1,
      DOMError: !1,
      DOMException: !1,
      DOMImplementation: !1,
      DOMMatrix: !1,
      DOMMatrixReadOnly: !1,
      DOMParser: !1,
      DOMPoint: !1,
      DOMPointReadOnly: !1,
      DOMQuad: !1,
      DOMRect: !1,
      DOMRectReadOnly: !1,
      DOMStringList: !1,
      DOMStringMap: !1,
      DOMTokenList: !1,
      DragEvent: !1,
      DynamicsCompressorNode: !1,
      Element: !1,
      ErrorEvent: !1,
      event: !1,
      Event: !1,
      EventSource: !1,
      EventTarget: !1,
      external: !1,
      fetch: !1,
      File: !1,
      FileList: !1,
      FileReader: !1,
      find: !1,
      focus: !1,
      FocusEvent: !1,
      FontFace: !1,
      FontFaceSetLoadEvent: !1,
      FormData: !1,
      frameElement: !1,
      frames: !1,
      GainNode: !1,
      Gamepad: !1,
      GamepadButton: !1,
      GamepadEvent: !1,
      getComputedStyle: !1,
      getSelection: !1,
      HashChangeEvent: !1,
      Headers: !1,
      history: !1,
      History: !1,
      HTMLAllCollection: !1,
      HTMLAnchorElement: !1,
      HTMLAreaElement: !1,
      HTMLAudioElement: !1,
      HTMLBaseElement: !1,
      HTMLBodyElement: !1,
      HTMLBRElement: !1,
      HTMLButtonElement: !1,
      HTMLCanvasElement: !1,
      HTMLCollection: !1,
      HTMLContentElement: !1,
      HTMLDataElement: !1,
      HTMLDataListElement: !1,
      HTMLDetailsElement: !1,
      HTMLDialogElement: !1,
      HTMLDirectoryElement: !1,
      HTMLDivElement: !1,
      HTMLDListElement: !1,
      HTMLDocument: !1,
      HTMLElement: !1,
      HTMLEmbedElement: !1,
      HTMLFieldSetElement: !1,
      HTMLFontElement: !1,
      HTMLFormControlsCollection: !1,
      HTMLFormElement: !1,
      HTMLFrameElement: !1,
      HTMLFrameSetElement: !1,
      HTMLHeadElement: !1,
      HTMLHeadingElement: !1,
      HTMLHRElement: !1,
      HTMLHtmlElement: !1,
      HTMLIFrameElement: !1,
      HTMLImageElement: !1,
      HTMLInputElement: !1,
      HTMLLabelElement: !1,
      HTMLLegendElement: !1,
      HTMLLIElement: !1,
      HTMLLinkElement: !1,
      HTMLMapElement: !1,
      HTMLMarqueeElement: !1,
      HTMLMediaElement: !1,
      HTMLMenuElement: !1,
      HTMLMetaElement: !1,
      HTMLMeterElement: !1,
      HTMLModElement: !1,
      HTMLObjectElement: !1,
      HTMLOListElement: !1,
      HTMLOptGroupElement: !1,
      HTMLOptionElement: !1,
      HTMLOptionsCollection: !1,
      HTMLOutputElement: !1,
      HTMLParagraphElement: !1,
      HTMLParamElement: !1,
      HTMLPictureElement: !1,
      HTMLPreElement: !1,
      HTMLProgressElement: !1,
      HTMLQuoteElement: !1,
      HTMLScriptElement: !1,
      HTMLSelectElement: !1,
      HTMLShadowElement: !1,
      HTMLSlotElement: !1,
      HTMLSourceElement: !1,
      HTMLSpanElement: !1,
      HTMLStyleElement: !1,
      HTMLTableCaptionElement: !1,
      HTMLTableCellElement: !1,
      HTMLTableColElement: !1,
      HTMLTableElement: !1,
      HTMLTableRowElement: !1,
      HTMLTableSectionElement: !1,
      HTMLTemplateElement: !1,
      HTMLTextAreaElement: !1,
      HTMLTimeElement: !1,
      HTMLTitleElement: !1,
      HTMLTrackElement: !1,
      HTMLUListElement: !1,
      HTMLUnknownElement: !1,
      HTMLVideoElement: !1,
      IDBCursor: !1,
      IDBCursorWithValue: !1,
      IDBDatabase: !1,
      IDBFactory: !1,
      IDBIndex: !1,
      IDBKeyRange: !1,
      IDBObjectStore: !1,
      IDBOpenDBRequest: !1,
      IDBRequest: !1,
      IDBTransaction: !1,
      IDBVersionChangeEvent: !1,
      IdleDeadline: !1,
      IIRFilterNode: !1,
      Image: !1,
      ImageBitmap: !1,
      ImageBitmapRenderingContext: !1,
      ImageCapture: !1,
      ImageData: !1,
      indexedDB: !1,
      innerHeight: !1,
      innerWidth: !1,
      InputEvent: !1,
      IntersectionObserver: !1,
      IntersectionObserverEntry: !1,
      Intl: !1,
      isSecureContext: !1,
      KeyboardEvent: !1,
      KeyframeEffect: !1,
      KeyframeEffectReadOnly: !1,
      length: !1,
      localStorage: !1,
      location: !0,
      Location: !1,
      locationbar: !1,
      matchMedia: !1,
      MediaDeviceInfo: !1,
      MediaDevices: !1,
      MediaElementAudioSourceNode: !1,
      MediaEncryptedEvent: !1,
      MediaError: !1,
      MediaKeyMessageEvent: !1,
      MediaKeySession: !1,
      MediaKeyStatusMap: !1,
      MediaKeySystemAccess: !1,
      MediaList: !1,
      MediaQueryList: !1,
      MediaQueryListEvent: !1,
      MediaRecorder: !1,
      MediaSettingsRange: !1,
      MediaSource: !1,
      MediaStream: !1,
      MediaStreamAudioDestinationNode: !1,
      MediaStreamAudioSourceNode: !1,
      MediaStreamEvent: !1,
      MediaStreamTrack: !1,
      MediaStreamTrackEvent: !1,
      menubar: !1,
      MessageChannel: !1,
      MessageEvent: !1,
      MessagePort: !1,
      MIDIAccess: !1,
      MIDIConnectionEvent: !1,
      MIDIInput: !1,
      MIDIInputMap: !1,
      MIDIMessageEvent: !1,
      MIDIOutput: !1,
      MIDIOutputMap: !1,
      MIDIPort: !1,
      MimeType: !1,
      MimeTypeArray: !1,
      MouseEvent: !1,
      moveBy: !1,
      moveTo: !1,
      MutationEvent: !1,
      MutationObserver: !1,
      MutationRecord: !1,
      name: !1,
      NamedNodeMap: !1,
      NavigationPreloadManager: !1,
      navigator: !1,
      Navigator: !1,
      NetworkInformation: !1,
      Node: !1,
      NodeFilter: !1,
      NodeIterator: !1,
      NodeList: !1,
      Notification: !1,
      OfflineAudioCompletionEvent: !1,
      OfflineAudioContext: !1,
      offscreenBuffering: !1,
      OffscreenCanvas: !0,
      onabort: !0,
      onafterprint: !0,
      onanimationend: !0,
      onanimationiteration: !0,
      onanimationstart: !0,
      onappinstalled: !0,
      onauxclick: !0,
      onbeforeinstallprompt: !0,
      onbeforeprint: !0,
      onbeforeunload: !0,
      onblur: !0,
      oncancel: !0,
      oncanplay: !0,
      oncanplaythrough: !0,
      onchange: !0,
      onclick: !0,
      onclose: !0,
      oncontextmenu: !0,
      oncuechange: !0,
      ondblclick: !0,
      ondevicemotion: !0,
      ondeviceorientation: !0,
      ondeviceorientationabsolute: !0,
      ondrag: !0,
      ondragend: !0,
      ondragenter: !0,
      ondragleave: !0,
      ondragover: !0,
      ondragstart: !0,
      ondrop: !0,
      ondurationchange: !0,
      onemptied: !0,
      onended: !0,
      onerror: !0,
      onfocus: !0,
      ongotpointercapture: !0,
      onhashchange: !0,
      oninput: !0,
      oninvalid: !0,
      onkeydown: !0,
      onkeypress: !0,
      onkeyup: !0,
      onlanguagechange: !0,
      onload: !0,
      onloadeddata: !0,
      onloadedmetadata: !0,
      onloadstart: !0,
      onlostpointercapture: !0,
      onmessage: !0,
      onmessageerror: !0,
      onmousedown: !0,
      onmouseenter: !0,
      onmouseleave: !0,
      onmousemove: !0,
      onmouseout: !0,
      onmouseover: !0,
      onmouseup: !0,
      onmousewheel: !0,
      onoffline: !0,
      ononline: !0,
      onpagehide: !0,
      onpageshow: !0,
      onpause: !0,
      onplay: !0,
      onplaying: !0,
      onpointercancel: !0,
      onpointerdown: !0,
      onpointerenter: !0,
      onpointerleave: !0,
      onpointermove: !0,
      onpointerout: !0,
      onpointerover: !0,
      onpointerup: !0,
      onpopstate: !0,
      onprogress: !0,
      onratechange: !0,
      onrejectionhandled: !0,
      onreset: !0,
      onresize: !0,
      onscroll: !0,
      onsearch: !0,
      onseeked: !0,
      onseeking: !0,
      onselect: !0,
      onstalled: !0,
      onstorage: !0,
      onsubmit: !0,
      onsuspend: !0,
      ontimeupdate: !0,
      ontoggle: !0,
      ontransitionend: !0,
      onunhandledrejection: !0,
      onunload: !0,
      onvolumechange: !0,
      onwaiting: !0,
      onwheel: !0,
      open: !1,
      openDatabase: !1,
      opener: !1,
      Option: !1,
      origin: !1,
      OscillatorNode: !1,
      outerHeight: !1,
      outerWidth: !1,
      PageTransitionEvent: !1,
      pageXOffset: !1,
      pageYOffset: !1,
      PannerNode: !1,
      parent: !1,
      Path2D: !1,
      PaymentAddress: !1,
      PaymentRequest: !1,
      PaymentRequestUpdateEvent: !1,
      PaymentResponse: !1,
      performance: !1,
      Performance: !1,
      PerformanceEntry: !1,
      PerformanceLongTaskTiming: !1,
      PerformanceMark: !1,
      PerformanceMeasure: !1,
      PerformanceNavigation: !1,
      PerformanceNavigationTiming: !1,
      PerformanceObserver: !1,
      PerformanceObserverEntryList: !1,
      PerformancePaintTiming: !1,
      PerformanceResourceTiming: !1,
      PerformanceTiming: !1,
      PeriodicWave: !1,
      Permissions: !1,
      PermissionStatus: !1,
      personalbar: !1,
      PhotoCapabilities: !1,
      Plugin: !1,
      PluginArray: !1,
      PointerEvent: !1,
      PopStateEvent: !1,
      postMessage: !1,
      Presentation: !1,
      PresentationAvailability: !1,
      PresentationConnection: !1,
      PresentationConnectionAvailableEvent: !1,
      PresentationConnectionCloseEvent: !1,
      PresentationConnectionList: !1,
      PresentationReceiver: !1,
      PresentationRequest: !1,
      print: !1,
      ProcessingInstruction: !1,
      ProgressEvent: !1,
      PromiseRejectionEvent: !1,
      prompt: !1,
      PushManager: !1,
      PushSubscription: !1,
      PushSubscriptionOptions: !1,
      queueMicrotask: !1,
      RadioNodeList: !1,
      Range: !1,
      ReadableStream: !1,
      registerProcessor: !1,
      RemotePlayback: !1,
      removeEventListener: !1,
      Request: !1,
      requestAnimationFrame: !1,
      requestIdleCallback: !1,
      resizeBy: !1,
      ResizeObserver: !1,
      ResizeObserverEntry: !1,
      resizeTo: !1,
      Response: !1,
      RTCCertificate: !1,
      RTCDataChannel: !1,
      RTCDataChannelEvent: !1,
      RTCDtlsTransport: !1,
      RTCIceCandidate: !1,
      RTCIceGatherer: !1,
      RTCIceTransport: !1,
      RTCPeerConnection: !1,
      RTCPeerConnectionIceEvent: !1,
      RTCRtpContributingSource: !1,
      RTCRtpReceiver: !1,
      RTCRtpSender: !1,
      RTCSctpTransport: !1,
      RTCSessionDescription: !1,
      RTCStatsReport: !1,
      RTCTrackEvent: !1,
      screen: !1,
      Screen: !1,
      screenLeft: !1,
      ScreenOrientation: !1,
      screenTop: !1,
      screenX: !1,
      screenY: !1,
      ScriptProcessorNode: !1,
      scroll: !1,
      scrollbars: !1,
      scrollBy: !1,
      scrollTo: !1,
      scrollX: !1,
      scrollY: !1,
      SecurityPolicyViolationEvent: !1,
      Selection: !1,
      self: !1,
      ServiceWorker: !1,
      ServiceWorkerContainer: !1,
      ServiceWorkerRegistration: !1,
      sessionStorage: !1,
      setInterval: !1,
      setTimeout: !1,
      ShadowRoot: !1,
      SharedWorker: !1,
      SourceBuffer: !1,
      SourceBufferList: !1,
      speechSynthesis: !1,
      SpeechSynthesisEvent: !1,
      SpeechSynthesisUtterance: !1,
      StaticRange: !1,
      status: !1,
      statusbar: !1,
      StereoPannerNode: !1,
      stop: !1,
      Storage: !1,
      StorageEvent: !1,
      StorageManager: !1,
      styleMedia: !1,
      StyleSheet: !1,
      StyleSheetList: !1,
      SubtleCrypto: !1,
      SVGAElement: !1,
      SVGAngle: !1,
      SVGAnimatedAngle: !1,
      SVGAnimatedBoolean: !1,
      SVGAnimatedEnumeration: !1,
      SVGAnimatedInteger: !1,
      SVGAnimatedLength: !1,
      SVGAnimatedLengthList: !1,
      SVGAnimatedNumber: !1,
      SVGAnimatedNumberList: !1,
      SVGAnimatedPreserveAspectRatio: !1,
      SVGAnimatedRect: !1,
      SVGAnimatedString: !1,
      SVGAnimatedTransformList: !1,
      SVGAnimateElement: !1,
      SVGAnimateMotionElement: !1,
      SVGAnimateTransformElement: !1,
      SVGAnimationElement: !1,
      SVGCircleElement: !1,
      SVGClipPathElement: !1,
      SVGComponentTransferFunctionElement: !1,
      SVGDefsElement: !1,
      SVGDescElement: !1,
      SVGDiscardElement: !1,
      SVGElement: !1,
      SVGEllipseElement: !1,
      SVGFEBlendElement: !1,
      SVGFEColorMatrixElement: !1,
      SVGFEComponentTransferElement: !1,
      SVGFECompositeElement: !1,
      SVGFEConvolveMatrixElement: !1,
      SVGFEDiffuseLightingElement: !1,
      SVGFEDisplacementMapElement: !1,
      SVGFEDistantLightElement: !1,
      SVGFEDropShadowElement: !1,
      SVGFEFloodElement: !1,
      SVGFEFuncAElement: !1,
      SVGFEFuncBElement: !1,
      SVGFEFuncGElement: !1,
      SVGFEFuncRElement: !1,
      SVGFEGaussianBlurElement: !1,
      SVGFEImageElement: !1,
      SVGFEMergeElement: !1,
      SVGFEMergeNodeElement: !1,
      SVGFEMorphologyElement: !1,
      SVGFEOffsetElement: !1,
      SVGFEPointLightElement: !1,
      SVGFESpecularLightingElement: !1,
      SVGFESpotLightElement: !1,
      SVGFETileElement: !1,
      SVGFETurbulenceElement: !1,
      SVGFilterElement: !1,
      SVGForeignObjectElement: !1,
      SVGGElement: !1,
      SVGGeometryElement: !1,
      SVGGradientElement: !1,
      SVGGraphicsElement: !1,
      SVGImageElement: !1,
      SVGLength: !1,
      SVGLengthList: !1,
      SVGLinearGradientElement: !1,
      SVGLineElement: !1,
      SVGMarkerElement: !1,
      SVGMaskElement: !1,
      SVGMatrix: !1,
      SVGMetadataElement: !1,
      SVGMPathElement: !1,
      SVGNumber: !1,
      SVGNumberList: !1,
      SVGPathElement: !1,
      SVGPatternElement: !1,
      SVGPoint: !1,
      SVGPointList: !1,
      SVGPolygonElement: !1,
      SVGPolylineElement: !1,
      SVGPreserveAspectRatio: !1,
      SVGRadialGradientElement: !1,
      SVGRect: !1,
      SVGRectElement: !1,
      SVGScriptElement: !1,
      SVGSetElement: !1,
      SVGStopElement: !1,
      SVGStringList: !1,
      SVGStyleElement: !1,
      SVGSVGElement: !1,
      SVGSwitchElement: !1,
      SVGSymbolElement: !1,
      SVGTextContentElement: !1,
      SVGTextElement: !1,
      SVGTextPathElement: !1,
      SVGTextPositioningElement: !1,
      SVGTitleElement: !1,
      SVGTransform: !1,
      SVGTransformList: !1,
      SVGTSpanElement: !1,
      SVGUnitTypes: !1,
      SVGUseElement: !1,
      SVGViewElement: !1,
      TaskAttributionTiming: !1,
      Text: !1,
      TextDecoder: !1,
      TextEncoder: !1,
      TextEvent: !1,
      TextMetrics: !1,
      TextTrack: !1,
      TextTrackCue: !1,
      TextTrackCueList: !1,
      TextTrackList: !1,
      TimeRanges: !1,
      toolbar: !1,
      top: !1,
      Touch: !1,
      TouchEvent: !1,
      TouchList: !1,
      TrackEvent: !1,
      TransitionEvent: !1,
      TreeWalker: !1,
      UIEvent: !1,
      URL: !1,
      URLSearchParams: !1,
      ValidityState: !1,
      visualViewport: !1,
      VisualViewport: !1,
      VTTCue: !1,
      WaveShaperNode: !1,
      WebAssembly: !1,
      WebGL2RenderingContext: !1,
      WebGLActiveInfo: !1,
      WebGLBuffer: !1,
      WebGLContextEvent: !1,
      WebGLFramebuffer: !1,
      WebGLProgram: !1,
      WebGLQuery: !1,
      WebGLRenderbuffer: !1,
      WebGLRenderingContext: !1,
      WebGLSampler: !1,
      WebGLShader: !1,
      WebGLShaderPrecisionFormat: !1,
      WebGLSync: !1,
      WebGLTexture: !1,
      WebGLTransformFeedback: !1,
      WebGLUniformLocation: !1,
      WebGLVertexArrayObject: !1,
      WebSocket: !1,
      WheelEvent: !1,
      window: !1,
      Window: !1,
      Worker: !1,
      WritableStream: !1,
      XMLDocument: !1,
      XMLHttpRequest: !1,
      XMLHttpRequestEventTarget: !1,
      XMLHttpRequestUpload: !1,
      XMLSerializer: !1,
      XPathEvaluator: !1,
      XPathExpression: !1,
      XPathResult: !1,
      XSLTProcessor: !1
    },
    worker: {
      addEventListener: !1,
      applicationCache: !1,
      atob: !1,
      Blob: !1,
      BroadcastChannel: !1,
      btoa: !1,
      Cache: !1,
      caches: !1,
      clearInterval: !1,
      clearTimeout: !1,
      close: !0,
      console: !1,
      fetch: !1,
      FileReaderSync: !1,
      FormData: !1,
      Headers: !1,
      IDBCursor: !1,
      IDBCursorWithValue: !1,
      IDBDatabase: !1,
      IDBFactory: !1,
      IDBIndex: !1,
      IDBKeyRange: !1,
      IDBObjectStore: !1,
      IDBOpenDBRequest: !1,
      IDBRequest: !1,
      IDBTransaction: !1,
      IDBVersionChangeEvent: !1,
      ImageData: !1,
      importScripts: !0,
      indexedDB: !1,
      location: !1,
      MessageChannel: !1,
      MessagePort: !1,
      name: !1,
      navigator: !1,
      Notification: !1,
      onclose: !0,
      onconnect: !0,
      onerror: !0,
      onlanguagechange: !0,
      onmessage: !0,
      onoffline: !0,
      ononline: !0,
      onrejectionhandled: !0,
      onunhandledrejection: !0,
      performance: !1,
      Performance: !1,
      PerformanceEntry: !1,
      PerformanceMark: !1,
      PerformanceMeasure: !1,
      PerformanceNavigation: !1,
      PerformanceResourceTiming: !1,
      PerformanceTiming: !1,
      postMessage: !0,
      Promise: !1,
      queueMicrotask: !1,
      removeEventListener: !1,
      Request: !1,
      Response: !1,
      self: !0,
      ServiceWorkerRegistration: !1,
      setInterval: !1,
      setTimeout: !1,
      TextDecoder: !1,
      TextEncoder: !1,
      URL: !1,
      URLSearchParams: !1,
      WebSocket: !1,
      Worker: !1,
      WorkerGlobalScope: !1,
      XMLHttpRequest: !1
    },
    node: {
      __dirname: !1,
      __filename: !1,
      Buffer: !1,
      clearImmediate: !1,
      clearInterval: !1,
      clearTimeout: !1,
      console: !1,
      exports: !0,
      global: !1,
      Intl: !1,
      module: !1,
      process: !1,
      queueMicrotask: !1,
      require: !1,
      setImmediate: !1,
      setInterval: !1,
      setTimeout: !1,
      TextDecoder: !1,
      TextEncoder: !1,
      URL: !1,
      URLSearchParams: !1
    },
    commonjs: {
      exports: !0,
      global: !1,
      module: !1,
      require: !1
    },
    amd: {
      define: !1,
      require: !1
    },
    mocha: {
      after: !1,
      afterEach: !1,
      before: !1,
      beforeEach: !1,
      context: !1,
      describe: !1,
      it: !1,
      mocha: !1,
      run: !1,
      setup: !1,
      specify: !1,
      suite: !1,
      suiteSetup: !1,
      suiteTeardown: !1,
      teardown: !1,
      test: !1,
      xcontext: !1,
      xdescribe: !1,
      xit: !1,
      xspecify: !1
    },
    jasmine: {
      afterAll: !1,
      afterEach: !1,
      beforeAll: !1,
      beforeEach: !1,
      describe: !1,
      expect: !1,
      fail: !1,
      fdescribe: !1,
      fit: !1,
      it: !1,
      jasmine: !1,
      pending: !1,
      runs: !1,
      spyOn: !1,
      spyOnProperty: !1,
      waits: !1,
      waitsFor: !1,
      xdescribe: !1,
      xit: !1
    },
    jest: {
      afterAll: !1,
      afterEach: !1,
      beforeAll: !1,
      beforeEach: !1,
      describe: !1,
      expect: !1,
      fdescribe: !1,
      fit: !1,
      it: !1,
      jest: !1,
      pit: !1,
      require: !1,
      test: !1,
      xdescribe: !1,
      xit: !1,
      xtest: !1
    },
    qunit: {
      asyncTest: !1,
      deepEqual: !1,
      equal: !1,
      expect: !1,
      module: !1,
      notDeepEqual: !1,
      notEqual: !1,
      notOk: !1,
      notPropEqual: !1,
      notStrictEqual: !1,
      ok: !1,
      propEqual: !1,
      QUnit: !1,
      raises: !1,
      start: !1,
      stop: !1,
      strictEqual: !1,
      test: !1,
      throws: !1
    },
    phantomjs: {
      console: !0,
      exports: !0,
      phantom: !0,
      require: !0,
      WebPage: !0
    },
    couch: {
      emit: !1,
      exports: !1,
      getRow: !1,
      log: !1,
      module: !1,
      provides: !1,
      require: !1,
      respond: !1,
      send: !1,
      start: !1,
      sum: !1
    },
    rhino: {
      defineClass: !1,
      deserialize: !1,
      gc: !1,
      help: !1,
      importClass: !1,
      importPackage: !1,
      java: !1,
      load: !1,
      loadClass: !1,
      Packages: !1,
      print: !1,
      quit: !1,
      readFile: !1,
      readUrl: !1,
      runCommand: !1,
      seal: !1,
      serialize: !1,
      spawn: !1,
      sync: !1,
      toint32: !1,
      version: !1
    },
    nashorn: {
      __DIR__: !1,
      __FILE__: !1,
      __LINE__: !1,
      com: !1,
      edu: !1,
      exit: !1,
      java: !1,
      Java: !1,
      javafx: !1,
      JavaImporter: !1,
      javax: !1,
      JSAdapter: !1,
      load: !1,
      loadWithNewGlobal: !1,
      org: !1,
      Packages: !1,
      print: !1,
      quit: !1
    },
    wsh: {
      ActiveXObject: !0,
      Enumerator: !0,
      GetObject: !0,
      ScriptEngine: !0,
      ScriptEngineBuildVersion: !0,
      ScriptEngineMajorVersion: !0,
      ScriptEngineMinorVersion: !0,
      VBArray: !0,
      WScript: !0,
      WSH: !0,
      XDomainRequest: !0
    },
    jquery: {
      $: !1,
      jQuery: !1
    },
    yui: {
      YAHOO: !1,
      YAHOO_config: !1,
      YUI: !1,
      YUI_config: !1
    },
    shelljs: {
      cat: !1,
      cd: !1,
      chmod: !1,
      config: !1,
      cp: !1,
      dirs: !1,
      echo: !1,
      env: !1,
      error: !1,
      exec: !1,
      exit: !1,
      find: !1,
      grep: !1,
      ln: !1,
      ls: !1,
      mkdir: !1,
      mv: !1,
      popd: !1,
      pushd: !1,
      pwd: !1,
      rm: !1,
      sed: !1,
      set: !1,
      target: !1,
      tempdir: !1,
      test: !1,
      touch: !1,
      which: !1
    },
    prototypejs: {
      $: !1,
      $$: !1,
      $A: !1,
      $break: !1,
      $continue: !1,
      $F: !1,
      $H: !1,
      $R: !1,
      $w: !1,
      Abstract: !1,
      Ajax: !1,
      Autocompleter: !1,
      Builder: !1,
      Class: !1,
      Control: !1,
      Draggable: !1,
      Draggables: !1,
      Droppables: !1,
      Effect: !1,
      Element: !1,
      Enumerable: !1,
      Event: !1,
      Field: !1,
      Form: !1,
      Hash: !1,
      Insertion: !1,
      ObjectRange: !1,
      PeriodicalExecuter: !1,
      Position: !1,
      Prototype: !1,
      Scriptaculous: !1,
      Selector: !1,
      Sortable: !1,
      SortableObserver: !1,
      Sound: !1,
      Template: !1,
      Toggle: !1,
      Try: !1
    },
    meteor: {
      _: !1,
      $: !1,
      Accounts: !1,
      AccountsClient: !1,
      AccountsCommon: !1,
      AccountsServer: !1,
      App: !1,
      Assets: !1,
      Blaze: !1,
      check: !1,
      Cordova: !1,
      DDP: !1,
      DDPRateLimiter: !1,
      DDPServer: !1,
      Deps: !1,
      EJSON: !1,
      Email: !1,
      HTTP: !1,
      Log: !1,
      Match: !1,
      Meteor: !1,
      Mongo: !1,
      MongoInternals: !1,
      Npm: !1,
      Package: !1,
      Plugin: !1,
      process: !1,
      Random: !1,
      ReactiveDict: !1,
      ReactiveVar: !1,
      Router: !1,
      ServiceConfiguration: !1,
      Session: !1,
      share: !1,
      Spacebars: !1,
      Template: !1,
      Tinytest: !1,
      Tracker: !1,
      UI: !1,
      Utils: !1,
      WebApp: !1,
      WebAppInternals: !1
    },
    mongo: {
      _isWindows: !1,
      _rand: !1,
      BulkWriteResult: !1,
      cat: !1,
      cd: !1,
      connect: !1,
      db: !1,
      getHostName: !1,
      getMemInfo: !1,
      hostname: !1,
      ISODate: !1,
      listFiles: !1,
      load: !1,
      ls: !1,
      md5sumFile: !1,
      mkdir: !1,
      Mongo: !1,
      NumberInt: !1,
      NumberLong: !1,
      ObjectId: !1,
      PlanCache: !1,
      print: !1,
      printjson: !1,
      pwd: !1,
      quit: !1,
      removeFile: !1,
      rs: !1,
      sh: !1,
      UUID: !1,
      version: !1,
      WriteResult: !1
    },
    applescript: {
      $: !1,
      Application: !1,
      Automation: !1,
      console: !1,
      delay: !1,
      Library: !1,
      ObjC: !1,
      ObjectSpecifier: !1,
      Path: !1,
      Progress: !1,
      Ref: !1
    },
    serviceworker: {
      addEventListener: !1,
      applicationCache: !1,
      atob: !1,
      Blob: !1,
      BroadcastChannel: !1,
      btoa: !1,
      Cache: !1,
      caches: !1,
      CacheStorage: !1,
      clearInterval: !1,
      clearTimeout: !1,
      Client: !1,
      clients: !1,
      Clients: !1,
      close: !0,
      console: !1,
      ExtendableEvent: !1,
      ExtendableMessageEvent: !1,
      fetch: !1,
      FetchEvent: !1,
      FileReaderSync: !1,
      FormData: !1,
      Headers: !1,
      IDBCursor: !1,
      IDBCursorWithValue: !1,
      IDBDatabase: !1,
      IDBFactory: !1,
      IDBIndex: !1,
      IDBKeyRange: !1,
      IDBObjectStore: !1,
      IDBOpenDBRequest: !1,
      IDBRequest: !1,
      IDBTransaction: !1,
      IDBVersionChangeEvent: !1,
      ImageData: !1,
      importScripts: !1,
      indexedDB: !1,
      location: !1,
      MessageChannel: !1,
      MessagePort: !1,
      name: !1,
      navigator: !1,
      Notification: !1,
      onclose: !0,
      onconnect: !0,
      onerror: !0,
      onfetch: !0,
      oninstall: !0,
      onlanguagechange: !0,
      onmessage: !0,
      onmessageerror: !0,
      onnotificationclick: !0,
      onnotificationclose: !0,
      onoffline: !0,
      ononline: !0,
      onpush: !0,
      onpushsubscriptionchange: !0,
      onrejectionhandled: !0,
      onsync: !0,
      onunhandledrejection: !0,
      performance: !1,
      Performance: !1,
      PerformanceEntry: !1,
      PerformanceMark: !1,
      PerformanceMeasure: !1,
      PerformanceNavigation: !1,
      PerformanceResourceTiming: !1,
      PerformanceTiming: !1,
      postMessage: !0,
      Promise: !1,
      queueMicrotask: !1,
      registration: !1,
      removeEventListener: !1,
      Request: !1,
      Response: !1,
      self: !1,
      ServiceWorker: !1,
      ServiceWorkerContainer: !1,
      ServiceWorkerGlobalScope: !1,
      ServiceWorkerMessageEvent: !1,
      ServiceWorkerRegistration: !1,
      setInterval: !1,
      setTimeout: !1,
      skipWaiting: !1,
      TextDecoder: !1,
      TextEncoder: !1,
      URL: !1,
      URLSearchParams: !1,
      WebSocket: !1,
      WindowClient: !1,
      Worker: !1,
      WorkerGlobalScope: !1,
      XMLHttpRequest: !1
    },
    atomtest: {
      advanceClock: !1,
      fakeClearInterval: !1,
      fakeClearTimeout: !1,
      fakeSetInterval: !1,
      fakeSetTimeout: !1,
      resetTimeouts: !1,
      waitsForPromise: !1
    },
    embertest: {
      andThen: !1,
      click: !1,
      currentPath: !1,
      currentRouteName: !1,
      currentURL: !1,
      fillIn: !1,
      find: !1,
      findAll: !1,
      findWithAssert: !1,
      keyEvent: !1,
      pauseTest: !1,
      resumeTest: !1,
      triggerEvent: !1,
      visit: !1,
      wait: !1
    },
    protractor: {
      $: !1,
      $$: !1,
      browser: !1,
      by: !1,
      By: !1,
      DartObject: !1,
      element: !1,
      protractor: !1
    },
    "shared-node-browser": {
      clearInterval: !1,
      clearTimeout: !1,
      console: !1,
      setInterval: !1,
      setTimeout: !1,
      URL: !1,
      URLSearchParams: !1
    },
    webextensions: {
      browser: !1,
      chrome: !1,
      opr: !1
    },
    greasemonkey: {
      cloneInto: !1,
      createObjectIn: !1,
      exportFunction: !1,
      GM: !1,
      GM_addStyle: !1,
      GM_deleteValue: !1,
      GM_getResourceText: !1,
      GM_getResourceURL: !1,
      GM_getValue: !1,
      GM_info: !1,
      GM_listValues: !1,
      GM_log: !1,
      GM_openInTab: !1,
      GM_registerMenuCommand: !1,
      GM_setClipboard: !1,
      GM_setValue: !1,
      GM_xmlhttpRequest: !1,
      unsafeWindow: !1
    },
    devtools: {
      $: !1,
      $_: !1,
      $$: !1,
      $0: !1,
      $1: !1,
      $2: !1,
      $3: !1,
      $4: !1,
      $x: !1,
      chrome: !1,
      clear: !1,
      copy: !1,
      debug: !1,
      dir: !1,
      dirxml: !1,
      getEventListeners: !1,
      inspect: !1,
      keys: !1,
      monitor: !1,
      monitorEvents: !1,
      profile: !1,
      profileEnd: !1,
      queryObjects: !1,
      table: !1,
      undebug: !1,
      unmonitor: !1,
      unmonitorEvents: !1,
      values: !1
    }
  };
});

// ../node_modules/@babel/traverse/node_modules/globals/index.js
var tS = T((EAe, eS) => {
  "use strict";
  eS.exports = Zx();
});

// ../node_modules/@babel/traverse/lib/cache.js
var Vs = T((gr) => {
  "use strict";
  Object.defineProperty(gr, "__esModule", {
    value: !0
  });
  gr.clear = Hz;
  gr.clearPath = rS;
  gr.clearScope = nS;
  gr.getCachedPaths = Yz;
  gr.getOrCreateCachedPaths = zz;
  gr.scope = gr.path = void 0;
  var pu = gr.path = /* @__PURE__ */ new WeakMap(), Gz = gr.scope = /* @__PURE__ */ new WeakMap();
  function Hz() {
    rS(), nS();
  }
  s(Hz, "clear");
  function rS() {
    gr.path = pu = /* @__PURE__ */ new WeakMap();
  }
  s(rS, "clearPath");
  function nS() {
    gr.scope = Gz = /* @__PURE__ */ new WeakMap();
  }
  s(nS, "clearScope");
  var ym = Object.freeze({});
  function Yz(e, t) {
    var r, n;
    return e = null, (r = pu.get((n = e) != null ? n : ym)) == null ? void 0 : r.get(t);
  }
  s(Yz, "getCachedPaths");
  function zz(e, t) {
    var r, n;
    e = null;
    let i = pu.get((r = e) != null ? r : ym);
    i || pu.set((n = e) != null ? n : ym, i = /* @__PURE__ */ new WeakMap());
    let a = i.get(t);
    return a || i.set(t, a = /* @__PURE__ */ new Map()), a;
  }
  s(zz, "getOrCreateCachedPaths");
});

// ../node_modules/@babel/traverse/lib/scope/index.js
var vm = T((hu) => {
  "use strict";
  Object.defineProperty(hu, "__esModule", {
    value: !0
  });
  hu.default = void 0;
  var Jz = Xx(), Xz = Ir(), Qz = Qx(), Zz = tS(), dS = Se(), eJ = dS, sS = Vs(), tJ = io(), {
    NOT_LOCAL_BINDING: iS,
    assignmentExpression: rJ,
    callExpression: aS,
    cloneNode: oS,
    getBindingIdentifiers: hS,
    identifier: $s,
    isArrayExpression: lS,
    isBinary: nJ,
    isCallExpression: uS,
    isClass: sJ,
    isClassBody: iJ,
    isClassDeclaration: aJ,
    isExportAllDeclaration: mS,
    isExportDefaultDeclaration: oJ,
    isExportNamedDeclaration: gm,
    isFunctionDeclaration: lJ,
    isIdentifier: Ws,
    isImportDeclaration: bm,
    isLiteral: uJ,
    isMemberExpression: cJ,
    isMethod: fJ,
    isModuleSpecifier: pJ,
    isNullLiteral: dJ,
    isObjectExpression: hJ,
    isProperty: mJ,
    isPureish: yJ,
    isRegExpLiteral: gJ,
    isSuper: bJ,
    isTaggedTemplateExpression: EJ,
    isTemplateLiteral: yS,
    isThisExpression: cS,
    isUnaryExpression: vJ,
    isVariableDeclaration: TJ,
    expressionStatement: xJ,
    matchesPattern: fS,
    memberExpression: Em,
    numericLiteral: SJ,
    toIdentifier: PJ,
    variableDeclaration: AJ,
    variableDeclarator: CJ,
    isRecordExpression: wJ,
    isTupleExpression: DJ,
    isObjectProperty: IJ,
    isTopicReference: pS,
    isMetaProperty: _J,
    isPrivateName: OJ,
    isExportDeclaration: NJ,
    buildUndefinedNode: BJ,
    sequenceExpression: kJ
  } = dS;
  function ut(e, t) {
    switch (e?.type) {
      default:
        if (bm(e) || NJ(e)) {
          var r;
          if ((mS(e) || gm(e) || bm(e)) && e.source)
            ut(e.source, t);
          else if ((gm(e) || bm(e)) && (r = e.specifiers) != null && r.length)
            for (let n of e.specifiers) ut(n, t);
          else (oJ(e) || gm(e)) && e.declaration && ut(e.declaration, t);
        } else pJ(e) ? ut(e.local, t) : uJ(e) && !dJ(e) && !gJ(e) && !yS(e) && t.push(e.value);
        break;
      case "MemberExpression":
      case "OptionalMemberExpression":
      case "JSXMemberExpression":
        ut(e.object, t), ut(e.property, t);
        break;
      case "Identifier":
      case "JSXIdentifier":
        t.push(e.name);
        break;
      case "CallExpression":
      case "OptionalCallExpression":
      case "NewExpression":
        ut(e.callee, t);
        break;
      case "ObjectExpression":
      case "ObjectPattern":
        for (let n of e.properties)
          ut(n, t);
        break;
      case "SpreadElement":
      case "RestElement":
        ut(e.argument, t);
        break;
      case "ObjectProperty":
      case "ObjectMethod":
      case "ClassProperty":
      case "ClassMethod":
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
        ut(e.key, t);
        break;
      case "ThisExpression":
        t.push("this");
        break;
      case "Super":
        t.push("super");
        break;
      case "Import":
        t.push("import");
        break;
      case "DoExpression":
        t.push("do");
        break;
      case "YieldExpression":
        t.push("yield"), ut(e.argument, t);
        break;
      case "AwaitExpression":
        t.push("await"), ut(e.argument, t);
        break;
      case "AssignmentExpression":
        ut(e.left, t);
        break;
      case "VariableDeclarator":
        ut(e.id, t);
        break;
      case "FunctionExpression":
      case "FunctionDeclaration":
      case "ClassExpression":
      case "ClassDeclaration":
        ut(e.id, t);
        break;
      case "PrivateName":
        ut(e.id, t);
        break;
      case "ParenthesizedExpression":
        ut(e.expression, t);
        break;
      case "UnaryExpression":
      case "UpdateExpression":
        ut(e.argument, t);
        break;
      case "MetaProperty":
        ut(e.meta, t), ut(e.property, t);
        break;
      case "JSXElement":
        ut(e.openingElement, t);
        break;
      case "JSXOpeningElement":
        ut(e.name, t);
        break;
      case "JSXFragment":
        ut(e.openingFragment, t);
        break;
      case "JSXOpeningFragment":
        t.push("Fragment");
        break;
      case "JSXNamespacedName":
        ut(e.namespace, t), ut(e.name, t);
        break;
    }
  }
  s(ut, "gatherNodeParts");
  var du = {
    ForStatement(e) {
      let t = e.get("init");
      if (t.isVar()) {
        let {
          scope: r
        } = e;
        (r.getFunctionParent() || r.getProgramParent()).registerBinding("var", t);
      }
    },
    Declaration(e) {
      if (e.isBlockScoped() || e.isImportDeclaration() || e.isExportDeclaration()) return;
      (e.scope.getFunctionParent() || e.scope.getProgramParent()).registerDeclaration(e);
    },
    ImportDeclaration(e) {
      e.scope.getBlockParent().registerDeclaration(e);
    },
    ReferencedIdentifier(e, t) {
      t.references.push(e);
    },
    ForXStatement(e, t) {
      let r = e.get("left");
      if (r.isPattern() || r.isIdentifier())
        t.constantViolations.push(e);
      else if (r.isVar()) {
        let {
          scope: n
        } = e;
        (n.getFunctionParent() || n.getProgramParent()).registerBinding("var", r);
      }
    },
    ExportDeclaration: {
      exit(e) {
        let {
          node: t,
          scope: r
        } = e;
        if (mS(t)) return;
        let n = t.declaration;
        if (aJ(n) || lJ(n)) {
          let i = n.id;
          if (!i) return;
          let a = r.getBinding(i.name);
          a?.reference(e);
        } else if (TJ(n))
          for (let i of n.declarations)
            for (let a of Object.keys(hS(i))) {
              let o = r.getBinding(a);
              o?.reference(e);
            }
      }
    },
    LabeledStatement(e) {
      e.scope.getBlockParent().registerDeclaration(e);
    },
    AssignmentExpression(e, t) {
      t.assignments.push(e);
    },
    UpdateExpression(e, t) {
      t.constantViolations.push(e);
    },
    UnaryExpression(e, t) {
      e.node.operator === "delete" && t.constantViolations.push(e);
    },
    BlockScoped(e) {
      let t = e.scope;
      if (t.path === e && (t = t.parent), t.getBlockParent().registerDeclaration(e), e.isClassDeclaration() && e.node.id) {
        let i = e.node.id.name;
        e.scope.bindings[i] = e.scope.parent.getBinding(i);
      }
    },
    CatchClause(e) {
      e.scope.registerBinding("let", e);
    },
    Function(e) {
      let t = e.get("params");
      for (let r of t)
        e.scope.registerBinding("param", r);
      e.isFunctionExpression() && e.has("id") && !e.get("id").node[iS] && e.scope.registerBinding("local", e.get("id"), e);
    },
    ClassExpression(e) {
      e.has("id") && !e.get("id").node[iS] && e.scope.registerBinding("local", e.get("id"), e);
    },
    TSTypeAnnotation(e) {
      e.skip();
    }
  }, FJ = 0, ao = class e {
    static {
      s(this, "Scope");
    }
    constructor(t) {
      this.uid = void 0, this.path = void 0, this.block = void 0, this.labels = void 0, this.inited = void 0, this.bindings = void 0, this.references =
      void 0, this.globals = void 0, this.uids = void 0, this.data = void 0, this.crawling = void 0;
      let {
        node: r
      } = t, n = sS.scope.get(r);
      if (n?.path === t)
        return n;
      sS.scope.set(r, this), this.uid = FJ++, this.block = r, this.path = t, this.labels = /* @__PURE__ */ new Map(), this.inited = !1;
    }
    get parent() {
      var t;
      let r, n = this.path;
      do {
        var i;
        let a = n.key === "key" || n.listKey === "decorators";
        n = n.parentPath, a && n.isMethod() && (n = n.parentPath), (i = n) != null && i.isScope() && (r = n);
      } while (n && !r);
      return (t = r) == null ? void 0 : t.scope;
    }
    get parentBlock() {
      return this.path.parent;
    }
    get hub() {
      return this.path.hub;
    }
    traverse(t, r, n) {
      (0, Xz.default)(t, r, this, n, this.path);
    }
    generateDeclaredUidIdentifier(t) {
      let r = this.generateUidIdentifier(t);
      return this.push({
        id: r
      }), oS(r);
    }
    generateUidIdentifier(t) {
      return $s(this.generateUid(t));
    }
    generateUid(t = "temp") {
      t = PJ(t).replace(/^_+/, "").replace(/\d+$/g, "");
      let r, n = 1;
      do
        r = this._generateUid(t, n), n++;
      while (this.hasLabel(r) || this.hasBinding(r) || this.hasGlobal(r) || this.hasReference(r));
      let i = this.getProgramParent();
      return i.references[r] = !0, i.uids[r] = !0, r;
    }
    _generateUid(t, r) {
      let n = t;
      return r > 1 && (n += r), `_${n}`;
    }
    generateUidBasedOnNode(t, r) {
      let n = [];
      ut(t, n);
      let i = n.join("$");
      return i = i.replace(/^_/, "") || r || "ref", this.generateUid(i.slice(0, 20));
    }
    generateUidIdentifierBasedOnNode(t, r) {
      return $s(this.generateUidBasedOnNode(t, r));
    }
    isStatic(t) {
      if (cS(t) || bJ(t) || pS(t))
        return !0;
      if (Ws(t)) {
        let r = this.getBinding(t.name);
        return r ? r.constant : this.hasBinding(t.name);
      }
      return !1;
    }
    maybeGenerateMemoised(t, r) {
      if (this.isStatic(t))
        return null;
      {
        let n = this.generateUidIdentifierBasedOnNode(t);
        return r ? n : (this.push({
          id: n
        }), oS(n));
      }
    }
    checkBlockScopedCollisions(t, r, n, i) {
      if (r === "param" || t.kind === "local") return;
      if (r === "let" || t.kind === "let" || t.kind === "const" || t.kind === "module" || t.kind === "param" && r === "const")
        throw this.hub.buildError(i, `Duplicate declaration "${n}"`, TypeError);
    }
    rename(t, r) {
      let n = this.getBinding(t);
      n && (r || (r = this.generateUidIdentifier(t).name), new Jz.default(n, t, r).rename(arguments[2]));
    }
    _renameFromMap(t, r, n, i) {
      t[r] && (t[n] = i, t[r] = null);
    }
    dump() {
      let t = "-".repeat(60);
      console.log(t);
      let r = this;
      do {
        console.log("#", r.block.type);
        for (let n of Object.keys(r.bindings)) {
          let i = r.bindings[n];
          console.log(" -", n, {
            constant: i.constant,
            references: i.references,
            violations: i.constantViolations.length,
            kind: i.kind
          });
        }
      } while (r = r.parent);
      console.log(t);
    }
    toArray(t, r, n) {
      if (Ws(t)) {
        let o = this.getBinding(t.name);
        if (o != null && o.constant && o.path.isGenericType("Array"))
          return t;
      }
      if (lS(t))
        return t;
      if (Ws(t, {
        name: "arguments"
      }))
        return aS(Em(Em(Em($s("Array"), $s("prototype")), $s("slice")), $s("call")), [t]);
      let i, a = [t];
      return r === !0 ? i = "toConsumableArray" : typeof r == "number" ? (a.push(SJ(r)), i = "slicedToArray") : i = "toArray", n && (a.unshift(
      this.hub.addHelper(i)), i = "maybeArrayLike"), aS(this.hub.addHelper(i), a);
    }
    hasLabel(t) {
      return !!this.getLabel(t);
    }
    getLabel(t) {
      return this.labels.get(t);
    }
    registerLabel(t) {
      this.labels.set(t.node.label.name, t);
    }
    registerDeclaration(t) {
      if (t.isLabeledStatement())
        this.registerLabel(t);
      else if (t.isFunctionDeclaration())
        this.registerBinding("hoisted", t.get("id"), t);
      else if (t.isVariableDeclaration()) {
        let r = t.get("declarations"), {
          kind: n
        } = t.node;
        for (let i of r)
          this.registerBinding(n === "using" || n === "await using" ? "const" : n, i);
      } else if (t.isClassDeclaration()) {
        if (t.node.declare) return;
        this.registerBinding("let", t);
      } else if (t.isImportDeclaration()) {
        let r = t.node.importKind === "type" || t.node.importKind === "typeof", n = t.get("specifiers");
        for (let i of n) {
          let a = r || i.isImportSpecifier() && (i.node.importKind === "type" || i.node.importKind === "typeof");
          this.registerBinding(a ? "unknown" : "module", i);
        }
      } else if (t.isExportDeclaration()) {
        let r = t.get("declaration");
        (r.isClassDeclaration() || r.isFunctionDeclaration() || r.isVariableDeclaration()) && this.registerDeclaration(r);
      } else
        this.registerBinding("unknown", t);
    }
    buildUndefinedNode() {
      return BJ();
    }
    registerConstantViolation(t) {
      let r = t.getAssignmentIdentifiers();
      for (let i of Object.keys(r)) {
        var n;
        (n = this.getBinding(i)) == null || n.reassign(t);
      }
    }
    registerBinding(t, r, n = r) {
      if (!t) throw new ReferenceError("no `kind`");
      if (r.isVariableDeclaration()) {
        let o = r.get("declarations");
        for (let l of o)
          this.registerBinding(t, l);
        return;
      }
      let i = this.getProgramParent(), a = r.getOuterBindingIdentifiers(!0);
      for (let o of Object.keys(a)) {
        i.references[o] = !0;
        for (let l of a[o]) {
          let u = this.getOwnBinding(o);
          if (u) {
            if (u.identifier === l) continue;
            this.checkBlockScopedCollisions(u, t, o, l);
          }
          u ? u.reassign(n) : this.bindings[o] = new Qz.default({
            identifier: l,
            scope: this,
            path: n,
            kind: t
          });
        }
      }
    }
    addGlobal(t) {
      this.globals[t.name] = t;
    }
    hasUid(t) {
      let r = this;
      do
        if (r.uids[t]) return !0;
      while (r = r.parent);
      return !1;
    }
    hasGlobal(t) {
      let r = this;
      do
        if (r.globals[t]) return !0;
      while (r = r.parent);
      return !1;
    }
    hasReference(t) {
      return !!this.getProgramParent().references[t];
    }
    isPure(t, r) {
      if (Ws(t)) {
        let o = this.getBinding(t.name);
        return o ? r ? o.constant : !0 : !1;
      } else {
        if (cS(t) || _J(t) || pS(t) || OJ(t))
          return !0;
        if (sJ(t)) {
          var n;
          return t.superClass && !this.isPure(t.superClass, r) || ((n = t.decorators) == null ? void 0 : n.length) > 0 ? !1 : this.isPure(t.
          body, r);
        } else if (iJ(t)) {
          for (let o of t.body)
            if (!this.isPure(o, r)) return !1;
          return !0;
        } else {
          if (nJ(t))
            return this.isPure(t.left, r) && this.isPure(t.right, r);
          if (lS(t) || DJ(t)) {
            for (let o of t.elements)
              if (o !== null && !this.isPure(o, r)) return !1;
            return !0;
          } else if (hJ(t) || wJ(t)) {
            for (let o of t.properties)
              if (!this.isPure(o, r)) return !1;
            return !0;
          } else if (fJ(t)) {
            var i;
            return !(t.computed && !this.isPure(t.key, r) || ((i = t.decorators) == null ? void 0 : i.length) > 0);
          } else if (mJ(t)) {
            var a;
            return !(t.computed && !this.isPure(t.key, r) || ((a = t.decorators) == null ? void 0 : a.length) > 0 || (IJ(t) || t.static) && t.
            value !== null && !this.isPure(t.value, r));
          } else {
            if (vJ(t))
              return this.isPure(t.argument, r);
            if (yS(t)) {
              for (let o of t.expressions)
                if (!this.isPure(o, r)) return !1;
              return !0;
            } else return EJ(t) ? fS(t.tag, "String.raw") && !this.hasBinding("String", {
              noGlobals: !0
            }) && this.isPure(t.quasi, r) : cJ(t) ? !t.computed && Ws(t.object) && t.object.name === "Symbol" && Ws(t.property) && t.property.
            name !== "for" && !this.hasBinding("Symbol", {
              noGlobals: !0
            }) : uS(t) ? fS(t.callee, "Symbol.for") && !this.hasBinding("Symbol", {
              noGlobals: !0
            }) && t.arguments.length === 1 && eJ.isStringLiteral(t.arguments[0]) : yJ(t);
          }
        }
      }
    }
    setData(t, r) {
      return this.data[t] = r;
    }
    getData(t) {
      let r = this;
      do {
        let n = r.data[t];
        if (n != null) return n;
      } while (r = r.parent);
    }
    removeData(t) {
      let r = this;
      do
        r.data[t] != null && (r.data[t] = null);
      while (r = r.parent);
    }
    init() {
      this.inited || (this.inited = !0, this.crawl());
    }
    crawl() {
      let t = this.path;
      this.references = /* @__PURE__ */ Object.create(null), this.bindings = /* @__PURE__ */ Object.create(null), this.globals = /* @__PURE__ */ Object.
      create(null), this.uids = /* @__PURE__ */ Object.create(null), this.data = /* @__PURE__ */ Object.create(null);
      let r = this.getProgramParent();
      if (r.crawling) return;
      let n = {
        references: [],
        constantViolations: [],
        assignments: []
      };
      if (this.crawling = !0, t.type !== "Program" && (0, tJ.isExplodedVisitor)(du)) {
        for (let a of du.enter)
          a.call(n, t, n);
        let i = du[t.type];
        if (i)
          for (let a of i.enter)
            a.call(n, t, n);
      }
      t.traverse(du, n), this.crawling = !1;
      for (let i of n.assignments) {
        let a = i.getAssignmentIdentifiers();
        for (let o of Object.keys(a))
          i.scope.getBinding(o) || r.addGlobal(a[o]);
        i.scope.registerConstantViolation(i);
      }
      for (let i of n.references) {
        let a = i.scope.getBinding(i.node.name);
        a ? a.reference(i) : r.addGlobal(i.node);
      }
      for (let i of n.constantViolations)
        i.scope.registerConstantViolation(i);
    }
    push(t) {
      let r = this.path;
      r.isPattern() ? r = this.getPatternParent().path : !r.isBlockStatement() && !r.isProgram() && (r = this.getBlockParent().path), r.isSwitchStatement() &&
      (r = (this.getFunctionParent() || this.getProgramParent()).path);
      let {
        init: n,
        unique: i,
        kind: a = "var",
        id: o
      } = t;
      if (!n && !i && (a === "var" || a === "let") && r.isFunction() && !r.node.name && uS(r.parent, {
        callee: r.node
      }) && r.parent.arguments.length <= r.node.params.length && Ws(o)) {
        r.pushContainer("params", o), r.scope.registerBinding("param", r.get("params")[r.node.params.length - 1]);
        return;
      }
      (r.isLoop() || r.isCatchClause() || r.isFunction()) && (r.ensureBlock(), r = r.get("body"));
      let l = t._blockHoist == null ? 2 : t._blockHoist, u = `declaration:${a}:${l}`, c = !i && r.getData(u);
      if (!c) {
        let h = AJ(a, []);
        h._blockHoist = l, [c] = r.unshiftContainer("body", [h]), i || r.setData(u, c);
      }
      let f = CJ(o, n), p = c.node.declarations.push(f);
      r.scope.registerBinding(a, c.get("declarations")[p - 1]);
    }
    getProgramParent() {
      let t = this;
      do
        if (t.path.isProgram())
          return t;
      while (t = t.parent);
      throw new Error("Couldn't find a Program");
    }
    getFunctionParent() {
      let t = this;
      do
        if (t.path.isFunctionParent())
          return t;
      while (t = t.parent);
      return null;
    }
    getBlockParent() {
      let t = this;
      do
        if (t.path.isBlockParent())
          return t;
      while (t = t.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    }
    getPatternParent() {
      let t = this;
      do
        if (!t.path.isPattern())
          return t.getBlockParent();
      while (t = t.parent.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    }
    getAllBindings() {
      let t = /* @__PURE__ */ Object.create(null), r = this;
      do {
        for (let n of Object.keys(r.bindings))
          n in t || (t[n] = r.bindings[n]);
        r = r.parent;
      } while (r);
      return t;
    }
    getAllBindingsOfKind(...t) {
      let r = /* @__PURE__ */ Object.create(null);
      for (let n of t) {
        let i = this;
        do {
          for (let a of Object.keys(i.bindings)) {
            let o = i.bindings[a];
            o.kind === n && (r[a] = o);
          }
          i = i.parent;
        } while (i);
      }
      return r;
    }
    bindingIdentifierEquals(t, r) {
      return this.getBindingIdentifier(t) === r;
    }
    getBinding(t) {
      let r = this, n;
      do {
        let a = r.getOwnBinding(t);
        if (a) {
          var i;
          if (!((i = n) != null && i.isPattern() && a.kind !== "param" && a.kind !== "local"))
            return a;
        } else if (!a && t === "arguments" && r.path.isFunction() && !r.path.isArrowFunctionExpression())
          break;
        n = r.path;
      } while (r = r.parent);
    }
    getOwnBinding(t) {
      return this.bindings[t];
    }
    getBindingIdentifier(t) {
      var r;
      return (r = this.getBinding(t)) == null ? void 0 : r.identifier;
    }
    getOwnBindingIdentifier(t) {
      let r = this.bindings[t];
      return r?.identifier;
    }
    hasOwnBinding(t) {
      return !!this.getOwnBinding(t);
    }
    hasBinding(t, r) {
      if (!t) return !1;
      let n = this;
      do
        if (n.hasOwnBinding(t))
          return !0;
      while (n = n.parent);
      let i, a;
      return typeof r == "object" ? (i = r.noGlobals, a = r.noUids) : typeof r == "boolean" && (i = r), !!(!a && this.hasUid(t) || !i && e.globals.
      includes(t) || !i && e.contextVariables.includes(t));
    }
    parentHasBinding(t, r) {
      var n;
      return (n = this.parent) == null ? void 0 : n.hasBinding(t, r);
    }
    moveBindingTo(t, r) {
      let n = this.getBinding(t);
      n && (n.scope.removeOwnBinding(t), n.scope = r, r.bindings[t] = n);
    }
    removeOwnBinding(t) {
      delete this.bindings[t];
    }
    removeBinding(t) {
      var r;
      (r = this.getBinding(t)) == null || r.scope.removeOwnBinding(t);
      let n = this;
      do
        n.uids[t] && (n.uids[t] = !1);
      while (n = n.parent);
    }
    hoistVariables(t = (r) => this.push({
      id: r
    })) {
      this.crawl();
      let r = /* @__PURE__ */ new Set();
      for (let i of Object.keys(this.bindings)) {
        let a = this.bindings[i];
        if (!a) continue;
        let {
          path: o
        } = a;
        if (!o.isVariableDeclarator()) continue;
        let {
          parent: l,
          parentPath: u
        } = o;
        if (l.kind !== "var" || r.has(l)) continue;
        r.add(o.parent);
        let c, f = [];
        for (let p of l.declarations) {
          var n;
          (n = c) != null || (c = p.id), p.init && f.push(rJ("=", p.id, p.init));
          let h = Object.keys(hS(p, !1, !0, !0));
          for (let y of h)
            t($s(y), p.init != null);
        }
        if (u.parentPath.isFor({
          left: l
        }))
          u.replaceWith(c);
        else if (f.length === 0)
          u.remove();
        else {
          let p = f.length === 1 ? f[0] : kJ(f);
          u.parentPath.isForStatement({
            init: l
          }) ? u.replaceWith(p) : u.replaceWith(xJ(p));
        }
      }
    }
  };
  hu.default = ao;
  ao.globals = Object.keys(Zz.builtin);
  ao.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
});

// ../node_modules/@jridgewell/set-array/dist/set-array.umd.js
var bS = T((mu, gS) => {
  (function(e, t) {
    typeof mu == "object" && typeof gS < "u" ? t(mu) : typeof define == "function" && define.amd ? define(["exports"], t) : (e = typeof globalThis <
    "u" ? globalThis : e || self, t(e.setArray = {}));
  })(mu, function(e) {
    "use strict";
    class t {
      static {
        s(this, "SetArray");
      }
      constructor() {
        this._indexes = { __proto__: null }, this.array = [];
      }
    }
    function r(l) {
      return l;
    }
    s(r, "cast");
    function n(l, u) {
      return l._indexes[u];
    }
    s(n, "get");
    function i(l, u) {
      let c = n(l, u);
      if (c !== void 0)
        return c;
      let { array: f, _indexes: p } = l, h = f.push(u);
      return p[u] = h - 1;
    }
    s(i, "put");
    function a(l) {
      let { array: u, _indexes: c } = l;
      if (u.length === 0)
        return;
      let f = u.pop();
      c[f] = void 0;
    }
    s(a, "pop");
    function o(l, u) {
      let c = n(l, u);
      if (c === void 0)
        return;
      let { array: f, _indexes: p } = l;
      for (let h = c + 1; h < f.length; h++) {
        let y = f[h];
        f[h - 1] = y, p[y]--;
      }
      p[u] = void 0, f.pop();
    }
    s(o, "remove"), e.SetArray = t, e.get = n, e.pop = a, e.put = i, e.remove = o, Object.defineProperty(e, "__esModule", { value: !0 });
  });
});

// ../node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js
var Tm = T((yu, ES) => {
  (function(e, t) {
    typeof yu == "object" && typeof ES < "u" ? t(yu) : typeof define == "function" && define.amd ? define(["exports"], t) : (e = typeof globalThis <
    "u" ? globalThis : e || self, t(e.sourcemapCodec = {}));
  })(yu, function(e) {
    "use strict";
    let n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", i = new Uint8Array(64), a = new Uint8Array(128);
    for (let W = 0; W < n.length; W++) {
      let q = n.charCodeAt(W);
      i[W] = q, a[q] = W;
    }
    function o(W, q) {
      let M = 0, K = 0, fe = 0;
      do {
        let X = W.next();
        fe = a[X], M |= (fe & 31) << K, K += 5;
      } while (fe & 32);
      let ie = M & 1;
      return M >>>= 1, ie && (M = -2147483648 | -M), q + M;
    }
    s(o, "decodeInteger");
    function l(W, q, M) {
      let K = q - M;
      K = K < 0 ? -K << 1 | 1 : K << 1;
      do {
        let fe = K & 31;
        K >>>= 5, K > 0 && (fe |= 32), W.write(i[fe]);
      } while (K > 0);
      return q;
    }
    s(l, "encodeInteger");
    function u(W, q) {
      return W.pos >= q ? !1 : W.peek() !== 44;
    }
    s(u, "hasMoreVlq");
    let c = 1024 * 16, f = typeof TextDecoder < "u" ? /* @__PURE__ */ new TextDecoder() : typeof Buffer < "u" ? {
      decode(W) {
        return Buffer.from(W.buffer, W.byteOffset, W.byteLength).toString();
      }
    } : {
      decode(W) {
        let q = "";
        for (let M = 0; M < W.length; M++)
          q += String.fromCharCode(W[M]);
        return q;
      }
    };
    class p {
      static {
        s(this, "StringWriter");
      }
      constructor() {
        this.pos = 0, this.out = "", this.buffer = new Uint8Array(c);
      }
      write(q) {
        let { buffer: M } = this;
        M[this.pos++] = q, this.pos === c && (this.out += f.decode(M), this.pos = 0);
      }
      flush() {
        let { buffer: q, out: M, pos: K } = this;
        return K > 0 ? M + f.decode(q.subarray(0, K)) : M;
      }
    }
    class h {
      static {
        s(this, "StringReader");
      }
      constructor(q) {
        this.pos = 0, this.buffer = q;
      }
      next() {
        return this.buffer.charCodeAt(this.pos++);
      }
      peek() {
        return this.buffer.charCodeAt(this.pos);
      }
      indexOf(q) {
        let { buffer: M, pos: K } = this, fe = M.indexOf(q, K);
        return fe === -1 ? M.length : fe;
      }
    }
    let y = [];
    function v(W) {
      let { length: q } = W, M = new h(W), K = [], fe = [], ie = 0;
      for (; M.pos < q; M.pos++) {
        ie = o(M, ie);
        let X = o(M, 0);
        if (!u(M, q)) {
          let we = fe.pop();
          we[2] = ie, we[3] = X;
          continue;
        }
        let J = o(M, 0), ge = o(M, 0) & 1 ? [ie, X, 0, 0, J, o(M, 0)] : [ie, X, 0, 0, J], xe = y;
        if (u(M, q)) {
          xe = [];
          do {
            let we = o(M, 0);
            xe.push(we);
          } while (u(M, q));
        }
        ge.vars = xe, K.push(ge), fe.push(ge);
      }
      return K;
    }
    s(v, "decodeOriginalScopes");
    function d(W) {
      let q = new p();
      for (let M = 0; M < W.length; )
        M = b(W, M, q, [0]);
      return q.flush();
    }
    s(d, "encodeOriginalScopes");
    function b(W, q, M, K) {
      let fe = W[q], { 0: ie, 1: X, 2: J, 3: ne, 4: ae, vars: ge } = fe;
      q > 0 && M.write(44), K[0] = l(M, ie, K[0]), l(M, X, 0), l(M, ae, 0);
      let xe = fe.length === 6 ? 1 : 0;
      l(M, xe, 0), fe.length === 6 && l(M, fe[5], 0);
      for (let we of ge)
        l(M, we, 0);
      for (q++; q < W.length; ) {
        let we = W[q], { 0: de, 1: Oe } = we;
        if (de > J || de === J && Oe >= ne)
          break;
        q = b(W, q, M, K);
      }
      return M.write(44), K[0] = l(M, J, K[0]), l(M, ne, 0), q;
    }
    s(b, "_encodeOriginalScopes");
    function E(W) {
      let { length: q } = W, M = new h(W), K = [], fe = [], ie = 0, X = 0, J = 0, ne = 0, ae = 0, ge = 0, xe = 0, we = 0;
      do {
        let de = M.indexOf(";"), Oe = 0;
        for (; M.pos < de; M.pos++) {
          if (Oe = o(M, Oe), !u(M, de)) {
            let wt = fe.pop();
            wt[2] = ie, wt[3] = Oe;
            continue;
          }
          let ht = o(M, 0), _e = ht & 1, Be = ht & 2, ct = ht & 4, Ot = null, Qt = y, Nt;
          if (_e) {
            let wt = o(M, X);
            J = o(M, X === wt ? J : 0), X = wt, Nt = [ie, Oe, 0, 0, wt, J];
          } else
            Nt = [ie, Oe, 0, 0];
          if (Nt.isScope = !!ct, Be) {
            let wt = ne, fr = ae;
            ne = o(M, ne);
            let rn = wt === ne;
            ae = o(M, rn ? ae : 0), ge = o(M, rn && fr === ae ? ge : 0), Ot = [ne, ae, ge];
          }
          if (Nt.callsite = Ot, u(M, de)) {
            Qt = [];
            do {
              xe = ie, we = Oe;
              let wt = o(M, 0), fr;
              if (wt < -1) {
                fr = [[o(M, 0)]];
                for (let rn = -1; rn > wt; rn--) {
                  let vn = xe;
                  xe = o(M, xe), we = o(M, xe === vn ? we : 0);
                  let Ur = o(M, 0);
                  fr.push([Ur, xe, we]);
                }
              } else
                fr = [[wt]];
              Qt.push(fr);
            } while (u(M, de));
          }
          Nt.bindings = Qt, K.push(Nt), fe.push(Nt);
        }
        ie++, M.pos = de + 1;
      } while (M.pos < q);
      return K;
    }
    s(E, "decodeGeneratedRanges");
    function I(W) {
      if (W.length === 0)
        return "";
      let q = new p();
      for (let M = 0; M < W.length; )
        M = O(W, M, q, [0, 0, 0, 0, 0, 0, 0]);
      return q.flush();
    }
    s(I, "encodeGeneratedRanges");
    function O(W, q, M, K) {
      let fe = W[q], { 0: ie, 1: X, 2: J, 3: ne, isScope: ae, callsite: ge, bindings: xe } = fe;
      K[0] < ie ? (k(M, K[0], ie), K[0] = ie, K[1] = 0) : q > 0 && M.write(44), K[1] = l(M, fe[1], K[1]);
      let we = (fe.length === 6 ? 1 : 0) | (ge ? 2 : 0) | (ae ? 4 : 0);
      if (l(M, we, 0), fe.length === 6) {
        let { 4: de, 5: Oe } = fe;
        de !== K[2] && (K[3] = 0), K[2] = l(M, de, K[2]), K[3] = l(M, Oe, K[3]);
      }
      if (ge) {
        let { 0: de, 1: Oe, 2: ht } = fe.callsite;
        de !== K[4] ? (K[5] = 0, K[6] = 0) : Oe !== K[5] && (K[6] = 0), K[4] = l(M, de, K[4]), K[5] = l(M, Oe, K[5]), K[6] = l(M, ht, K[6]);
      }
      if (xe)
        for (let de of xe) {
          de.length > 1 && l(M, -de.length, 0);
          let Oe = de[0][0];
          l(M, Oe, 0);
          let ht = ie, _e = X;
          for (let Be = 1; Be < de.length; Be++) {
            let ct = de[Be];
            ht = l(M, ct[1], ht), _e = l(M, ct[2], _e), l(M, ct[0], 0);
          }
        }
      for (q++; q < W.length; ) {
        let de = W[q], { 0: Oe, 1: ht } = de;
        if (Oe > J || Oe === J && ht >= ne)
          break;
        q = O(W, q, M, K);
      }
      return K[0] < J ? (k(M, K[0], J), K[0] = J, K[1] = 0) : M.write(44), K[1] = l(M, ne, K[1]), q;
    }
    s(O, "_encodeGeneratedRanges");
    function k(W, q, M) {
      do
        W.write(59);
      while (++q < M);
    }
    s(k, "catchupLine");
    function j(W) {
      let { length: q } = W, M = new h(W), K = [], fe = 0, ie = 0, X = 0, J = 0, ne = 0;
      do {
        let ae = M.indexOf(";"), ge = [], xe = !0, we = 0;
        for (fe = 0; M.pos < ae; ) {
          let de;
          fe = o(M, fe), fe < we && (xe = !1), we = fe, u(M, ae) ? (ie = o(M, ie), X = o(M, X), J = o(M, J), u(M, ae) ? (ne = o(M, ne), de =
          [fe, ie, X, J, ne]) : de = [fe, ie, X, J]) : de = [fe], ge.push(de), M.pos++;
        }
        xe || R(ge), K.push(ge), M.pos = ae + 1;
      } while (M.pos <= q);
      return K;
    }
    s(j, "decode");
    function R(W) {
      W.sort(U);
    }
    s(R, "sort");
    function U(W, q) {
      return W[0] - q[0];
    }
    s(U, "sortComparator");
    function Q(W) {
      let q = new p(), M = 0, K = 0, fe = 0, ie = 0;
      for (let X = 0; X < W.length; X++) {
        let J = W[X];
        if (X > 0 && q.write(59), J.length === 0)
          continue;
        let ne = 0;
        for (let ae = 0; ae < J.length; ae++) {
          let ge = J[ae];
          ae > 0 && q.write(44), ne = l(q, ge[0], ne), ge.length !== 1 && (M = l(q, ge[1], M), K = l(q, ge[2], K), fe = l(q, ge[3], fe), ge.
          length !== 4 && (ie = l(q, ge[4], ie)));
        }
      }
      return q.flush();
    }
    s(Q, "encode"), e.decode = j, e.decodeGeneratedRanges = E, e.decodeOriginalScopes = v, e.encode = Q, e.encodeGeneratedRanges = I, e.encodeOriginalScopes =
    d, Object.defineProperty(e, "__esModule", { value: !0 });
  });
});

// ../node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js
var vS = T((xm, Sm) => {
  (function(e, t) {
    typeof xm == "object" && typeof Sm < "u" ? Sm.exports = t() : typeof define == "function" && define.amd ? define(t) : (e = typeof globalThis <
    "u" ? globalThis : e || self, e.resolveURI = t());
  })(xm, function() {
    "use strict";
    let e = /^[\w+.-]+:\/\//, t = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/, r = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
    var n;
    (function(E) {
      E[E.Empty = 1] = "Empty", E[E.Hash = 2] = "Hash", E[E.Query = 3] = "Query", E[E.RelativePath = 4] = "RelativePath", E[E.AbsolutePath =
      5] = "AbsolutePath", E[E.SchemeRelative = 6] = "SchemeRelative", E[E.Absolute = 7] = "Absolute";
    })(n || (n = {}));
    function i(E) {
      return e.test(E);
    }
    s(i, "isAbsoluteUrl");
    function a(E) {
      return E.startsWith("//");
    }
    s(a, "isSchemeRelativeUrl");
    function o(E) {
      return E.startsWith("/");
    }
    s(o, "isAbsolutePath");
    function l(E) {
      return E.startsWith("file:");
    }
    s(l, "isFileUrl");
    function u(E) {
      return /^[.?#]/.test(E);
    }
    s(u, "isRelative");
    function c(E) {
      let I = t.exec(E);
      return p(I[1], I[2] || "", I[3], I[4] || "", I[5] || "/", I[6] || "", I[7] || "");
    }
    s(c, "parseAbsoluteUrl");
    function f(E) {
      let I = r.exec(E), O = I[2];
      return p("file:", "", I[1] || "", "", o(O) ? O : "/" + O, I[3] || "", I[4] || "");
    }
    s(f, "parseFileUrl");
    function p(E, I, O, k, j, R, U) {
      return {
        scheme: E,
        user: I,
        host: O,
        port: k,
        path: j,
        query: R,
        hash: U,
        type: n.Absolute
      };
    }
    s(p, "makeUrl");
    function h(E) {
      if (a(E)) {
        let O = c("http:" + E);
        return O.scheme = "", O.type = n.SchemeRelative, O;
      }
      if (o(E)) {
        let O = c("http://foo.com" + E);
        return O.scheme = "", O.host = "", O.type = n.AbsolutePath, O;
      }
      if (l(E))
        return f(E);
      if (i(E))
        return c(E);
      let I = c("http://foo.com/" + E);
      return I.scheme = "", I.host = "", I.type = E ? E.startsWith("?") ? n.Query : E.startsWith("#") ? n.Hash : n.RelativePath : n.Empty, I;
    }
    s(h, "parseUrl");
    function y(E) {
      if (E.endsWith("/.."))
        return E;
      let I = E.lastIndexOf("/");
      return E.slice(0, I + 1);
    }
    s(y, "stripPathFilename");
    function v(E, I) {
      d(I, I.type), E.path === "/" ? E.path = I.path : E.path = y(I.path) + E.path;
    }
    s(v, "mergePaths");
    function d(E, I) {
      let O = I <= n.RelativePath, k = E.path.split("/"), j = 1, R = 0, U = !1;
      for (let W = 1; W < k.length; W++) {
        let q = k[W];
        if (!q) {
          U = !0;
          continue;
        }
        if (U = !1, q !== ".") {
          if (q === "..") {
            R ? (U = !0, R--, j--) : O && (k[j++] = q);
            continue;
          }
          k[j++] = q, R++;
        }
      }
      let Q = "";
      for (let W = 1; W < j; W++)
        Q += "/" + k[W];
      (!Q || U && !Q.endsWith("/..")) && (Q += "/"), E.path = Q;
    }
    s(d, "normalizePath");
    function b(E, I) {
      if (!E && !I)
        return "";
      let O = h(E), k = O.type;
      if (I && k !== n.Absolute) {
        let R = h(I), U = R.type;
        switch (k) {
          case n.Empty:
            O.hash = R.hash;
          // fall through
          case n.Hash:
            O.query = R.query;
          // fall through
          case n.Query:
          case n.RelativePath:
            v(O, R);
          // fall through
          case n.AbsolutePath:
            O.user = R.user, O.host = R.host, O.port = R.port;
          // fall through
          case n.SchemeRelative:
            O.scheme = R.scheme;
        }
        U > k && (k = U);
      }
      d(O, k);
      let j = O.query + O.hash;
      switch (k) {
        // This is impossible, because of the empty checks at the start of the function.
        // case UrlType.Empty:
        case n.Hash:
        case n.Query:
          return j;
        case n.RelativePath: {
          let R = O.path.slice(1);
          return R ? u(I || E) && !u(R) ? "./" + R + j : R + j : j || ".";
        }
        case n.AbsolutePath:
          return O.path + j;
        default:
          return O.scheme + "//" + O.user + O.host + O.port + O.path + j;
      }
    }
    return s(b, "resolve"), b;
  });
});

// ../node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js
var bu = T((gu, TS) => {
  (function(e, t) {
    typeof gu == "object" && typeof TS < "u" ? t(gu, Tm(), vS()) : typeof define == "function" && define.amd ? define(["exports", "@jridgewe\
ll/sourcemap-codec", "@jridgewell/resolve-uri"], t) : (e = typeof globalThis < "u" ? globalThis : e || self, t(e.traceMapping = {}, e.sourcemapCodec,
    e.resolveURI));
  })(gu, function(e, t, r) {
    "use strict";
    function n(F, V) {
      return V && !V.endsWith("/") && (V += "/"), r(F, V);
    }
    s(n, "resolve");
    function i(F) {
      if (!F)
        return "";
      let V = F.lastIndexOf("/");
      return F.slice(0, V + 1);
    }
    s(i, "stripFilename");
    let a = 0, o = 1, l = 2, u = 3, c = 4, f = 1, p = 2;
    function h(F, V) {
      let H = y(F, 0);
      if (H === F.length)
        return F;
      V || (F = F.slice());
      for (let Z = H; Z < F.length; Z = y(F, Z + 1))
        F[Z] = d(F[Z], V);
      return F;
    }
    s(h, "maybeSort");
    function y(F, V) {
      for (let H = V; H < F.length; H++)
        if (!v(F[H]))
          return H;
      return F.length;
    }
    s(y, "nextUnsortedSegmentLine");
    function v(F) {
      for (let V = 1; V < F.length; V++)
        if (F[V][a] < F[V - 1][a])
          return !1;
      return !0;
    }
    s(v, "isSorted");
    function d(F, V) {
      return V || (F = F.slice()), F.sort(b);
    }
    s(d, "sortSegments");
    function b(F, V) {
      return F[a] - V[a];
    }
    s(b, "sortComparator");
    let E = !1;
    function I(F, V, H, Z) {
      for (; H <= Z; ) {
        let pe = H + (Z - H >> 1), ue = F[pe][a] - V;
        if (ue === 0)
          return E = !0, pe;
        ue < 0 ? H = pe + 1 : Z = pe - 1;
      }
      return E = !1, H - 1;
    }
    s(I, "binarySearch");
    function O(F, V, H) {
      for (let Z = H + 1; Z < F.length && F[Z][a] === V; H = Z++)
        ;
      return H;
    }
    s(O, "upperBound");
    function k(F, V, H) {
      for (let Z = H - 1; Z >= 0 && F[Z][a] === V; H = Z--)
        ;
      return H;
    }
    s(k, "lowerBound");
    function j() {
      return {
        lastKey: -1,
        lastNeedle: -1,
        lastIndex: -1
      };
    }
    s(j, "memoizedState");
    function R(F, V, H, Z) {
      let { lastKey: pe, lastNeedle: ue, lastIndex: Ae } = H, ke = 0, De = F.length - 1;
      if (Z === pe) {
        if (V === ue)
          return E = Ae !== -1 && F[Ae][a] === V, Ae;
        V >= ue ? ke = Ae === -1 ? 0 : Ae : De = Ae;
      }
      return H.lastKey = Z, H.lastNeedle = V, H.lastIndex = I(F, V, ke, De);
    }
    s(R, "memoizedBinarySearch");
    function U(F, V) {
      let H = V.map(W);
      for (let Z = 0; Z < F.length; Z++) {
        let pe = F[Z];
        for (let ue = 0; ue < pe.length; ue++) {
          let Ae = pe[ue];
          if (Ae.length === 1)
            continue;
          let ke = Ae[o], De = Ae[l], Fe = Ae[u], At = H[ke], ze = At[De] || (At[De] = []), Ve = V[ke], lt = O(ze, Fe, R(ze, Fe, Ve, De));
          Ve.lastIndex = ++lt, Q(ze, lt, [Fe, Z, Ae[a]]);
        }
      }
      return H;
    }
    s(U, "buildBySources");
    function Q(F, V, H) {
      for (let Z = F.length; Z > V; Z--)
        F[Z] = F[Z - 1];
      F[V] = H;
    }
    s(Q, "insert");
    function W() {
      return { __proto__: null };
    }
    s(W, "buildNullArray");
    let q = /* @__PURE__ */ s(function(F, V) {
      let H = M(F);
      if (!("sections" in H))
        return new xe(H, V);
      let Z = [], pe = [], ue = [], Ae = [], ke = [];
      K(H, V, Z, pe, ue, Ae, ke, 0, 0, 1 / 0, 1 / 0);
      let De = {
        version: 3,
        file: H.file,
        names: Ae,
        sources: pe,
        sourcesContent: ue,
        mappings: Z,
        ignoreList: ke
      };
      return fr(De);
    }, "AnyMap");
    function M(F) {
      return typeof F == "string" ? JSON.parse(F) : F;
    }
    s(M, "parse");
    function K(F, V, H, Z, pe, ue, Ae, ke, De, Fe, At) {
      let { sections: ze } = F;
      for (let Ve = 0; Ve < ze.length; Ve++) {
        let { map: lt, offset: Et } = ze[Ve], Bt = Fe, sn = At;
        if (Ve + 1 < ze.length) {
          let zn = ze[Ve + 1].offset;
          Bt = Math.min(Fe, ke + zn.line), Bt === Fe ? sn = Math.min(At, De + zn.column) : Bt < Fe && (sn = De + zn.column);
        }
        fe(lt, V, H, Z, pe, ue, Ae, ke + Et.line, De + Et.column, Bt, sn);
      }
    }
    s(K, "recurse");
    function fe(F, V, H, Z, pe, ue, Ae, ke, De, Fe, At) {
      let ze = M(F);
      if ("sections" in ze)
        return K(...arguments);
      let Ve = new xe(ze, V), lt = Z.length, Et = ue.length, Bt = Oe(Ve), { resolvedSources: sn, sourcesContent: zn, ignoreList: xa } = Ve;
      if (ie(Z, sn), ie(ue, Ve.names), zn)
        ie(pe, zn);
      else
        for (let Zt = 0; Zt < sn.length; Zt++)
          pe.push(null);
      if (xa)
        for (let Zt = 0; Zt < xa.length; Zt++)
          Ae.push(xa[Zt] + lt);
      for (let Zt = 0; Zt < Bt.length; Zt++) {
        let hi = ke + Zt;
        if (hi > Fe)
          return;
        let Sa = X(H, hi), nN = Zt === 0 ? De : 0, L1 = Bt[Zt];
        for (let Yf = 0; Yf < L1.length; Yf++) {
          let Ds = L1[Yf], cl = nN + Ds[a];
          if (hi === Fe && cl >= At)
            return;
          if (Ds.length === 1) {
            Sa.push([cl]);
            continue;
          }
          let M1 = lt + Ds[o], R1 = Ds[l], q1 = Ds[u];
          Sa.push(Ds.length === 4 ? [cl, M1, R1, q1] : [cl, M1, R1, q1, Et + Ds[c]]);
        }
      }
    }
    s(fe, "addSection");
    function ie(F, V) {
      for (let H = 0; H < V.length; H++)
        F.push(V[H]);
    }
    s(ie, "append");
    function X(F, V) {
      for (let H = F.length; H <= V; H++)
        F[H] = [];
      return F[V];
    }
    s(X, "getLine");
    let J = "`line` must be greater than 0 (lines start at line 1)", ne = "`column` must be greater than or equal to 0 (columns start at col\
umn 0)", ae = -1, ge = 1;
    class xe {
      static {
        s(this, "TraceMap");
      }
      constructor(V, H) {
        let Z = typeof V == "string";
        if (!Z && V._decodedMemo)
          return V;
        let pe = Z ? JSON.parse(V) : V, { version: ue, file: Ae, names: ke, sourceRoot: De, sources: Fe, sourcesContent: At } = pe;
        this.version = ue, this.file = Ae, this.names = ke || [], this.sourceRoot = De, this.sources = Fe, this.sourcesContent = At, this.ignoreList =
        pe.ignoreList || pe.x_google_ignoreList || void 0;
        let ze = n(De || "", i(H));
        this.resolvedSources = Fe.map((lt) => n(lt || "", ze));
        let { mappings: Ve } = pe;
        typeof Ve == "string" ? (this._encoded = Ve, this._decoded = void 0) : (this._encoded = void 0, this._decoded = h(Ve, Z)), this._decodedMemo =
        j(), this._bySources = void 0, this._bySourceMemos = void 0;
      }
    }
    function we(F) {
      return F;
    }
    s(we, "cast");
    function de(F) {
      var V, H;
      return (V = (H = F)._encoded) !== null && V !== void 0 ? V : H._encoded = t.encode(F._decoded);
    }
    s(de, "encodedMappings");
    function Oe(F) {
      var V;
      return (V = F)._decoded || (V._decoded = t.decode(F._encoded));
    }
    s(Oe, "decodedMappings");
    function ht(F, V, H) {
      let Z = Oe(F);
      if (V >= Z.length)
        return null;
      let pe = Z[V], ue = Tn(pe, F._decodedMemo, V, H, ge);
      return ue === -1 ? null : pe[ue];
    }
    s(ht, "traceSegment");
    function _e(F, V) {
      let { line: H, column: Z, bias: pe } = V;
      if (H--, H < 0)
        throw new Error(J);
      if (Z < 0)
        throw new Error(ne);
      let ue = Oe(F);
      if (H >= ue.length)
        return nn(null, null, null, null);
      let Ae = ue[H], ke = Tn(Ae, F._decodedMemo, H, Z, pe || ge);
      if (ke === -1)
        return nn(null, null, null, null);
      let De = Ae[ke];
      if (De.length === 1)
        return nn(null, null, null, null);
      let { names: Fe, resolvedSources: At } = F;
      return nn(At[De[o]], De[l] + 1, De[u], De.length === 5 ? Fe[De[c]] : null);
    }
    s(_e, "originalPositionFor");
    function Be(F, V) {
      let { source: H, line: Z, column: pe, bias: ue } = V;
      return re(F, H, Z, pe, ue || ge, !1);
    }
    s(Be, "generatedPositionFor");
    function ct(F, V) {
      let { source: H, line: Z, column: pe, bias: ue } = V;
      return re(F, H, Z, pe, ue || ae, !0);
    }
    s(ct, "allGeneratedPositionsFor");
    function Ot(F, V) {
      let H = Oe(F), { names: Z, resolvedSources: pe } = F;
      for (let ue = 0; ue < H.length; ue++) {
        let Ae = H[ue];
        for (let ke = 0; ke < Ae.length; ke++) {
          let De = Ae[ke], Fe = ue + 1, At = De[0], ze = null, Ve = null, lt = null, Et = null;
          De.length !== 1 && (ze = pe[De[1]], Ve = De[2] + 1, lt = De[3]), De.length === 5 && (Et = Z[De[4]]), V({
            generatedLine: Fe,
            generatedColumn: At,
            source: ze,
            originalLine: Ve,
            originalColumn: lt,
            name: Et
          });
        }
      }
    }
    s(Ot, "eachMapping");
    function Qt(F, V) {
      let { sources: H, resolvedSources: Z } = F, pe = H.indexOf(V);
      return pe === -1 && (pe = Z.indexOf(V)), pe;
    }
    s(Qt, "sourceIndex");
    function Nt(F, V) {
      let { sourcesContent: H } = F;
      if (H == null)
        return null;
      let Z = Qt(F, V);
      return Z === -1 ? null : H[Z];
    }
    s(Nt, "sourceContentFor");
    function wt(F, V) {
      let { ignoreList: H } = F;
      if (H == null)
        return !1;
      let Z = Qt(F, V);
      return Z === -1 ? !1 : H.includes(Z);
    }
    s(wt, "isIgnored");
    function fr(F, V) {
      let H = new xe(Ur(F, []), V);
      return H._decoded = F.mappings, H;
    }
    s(fr, "presortedDecodedMap");
    function rn(F) {
      return Ur(F, Oe(F));
    }
    s(rn, "decodedMap");
    function vn(F) {
      return Ur(F, de(F));
    }
    s(vn, "encodedMap");
    function Ur(F, V) {
      return {
        version: F.version,
        file: F.file,
        names: F.names,
        sourceRoot: F.sourceRoot,
        sources: F.sources,
        sourcesContent: F.sourcesContent,
        mappings: V,
        ignoreList: F.ignoreList || F.x_google_ignoreList
      };
    }
    s(Ur, "clone");
    function nn(F, V, H, Z) {
      return { source: F, line: V, column: H, name: Z };
    }
    s(nn, "OMapping");
    function Yn(F, V) {
      return { line: F, column: V };
    }
    s(Yn, "GMapping");
    function Tn(F, V, H, Z, pe) {
      let ue = R(F, Z, V, H);
      return E ? ue = (pe === ae ? O : k)(F, Z, ue) : pe === ae && ue++, ue === -1 || ue === F.length ? -1 : ue;
    }
    s(Tn, "traceSegmentInternal");
    function le(F, V, H, Z, pe) {
      let ue = Tn(F, V, H, Z, ge);
      if (!E && pe === ae && ue++, ue === -1 || ue === F.length)
        return [];
      let Ae = E ? Z : F[ue][a];
      E || (ue = k(F, Ae, ue));
      let ke = O(F, Ae, ue), De = [];
      for (; ue <= ke; ue++) {
        let Fe = F[ue];
        De.push(Yn(Fe[f] + 1, Fe[p]));
      }
      return De;
    }
    s(le, "sliceGeneratedPositions");
    function re(F, V, H, Z, pe, ue) {
      var Ae;
      if (H--, H < 0)
        throw new Error(J);
      if (Z < 0)
        throw new Error(ne);
      let { sources: ke, resolvedSources: De } = F, Fe = ke.indexOf(V);
      if (Fe === -1 && (Fe = De.indexOf(V)), Fe === -1)
        return ue ? [] : Yn(null, null);
      let ze = ((Ae = F)._bySources || (Ae._bySources = U(Oe(F), F._bySourceMemos = ke.map(j))))[Fe][H];
      if (ze == null)
        return ue ? [] : Yn(null, null);
      let Ve = F._bySourceMemos[Fe];
      if (ue)
        return le(ze, Ve, H, Z, pe);
      let lt = Tn(ze, Ve, H, Z, pe);
      if (lt === -1)
        return Yn(null, null);
      let Et = ze[lt];
      return Yn(Et[f] + 1, Et[p]);
    }
    s(re, "generatedPosition"), e.AnyMap = q, e.GREATEST_LOWER_BOUND = ge, e.LEAST_UPPER_BOUND = ae, e.TraceMap = xe, e.allGeneratedPositionsFor =
    ct, e.decodedMap = rn, e.decodedMappings = Oe, e.eachMapping = Ot, e.encodedMap = vn, e.encodedMappings = de, e.generatedPositionFor = Be,
    e.isIgnored = wt, e.originalPositionFor = _e, e.presortedDecodedMap = fr, e.sourceContentFor = Nt, e.traceSegment = ht;
  });
});

// ../node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js
var Pm = T((Eu, xS) => {
  (function(e, t) {
    typeof Eu == "object" && typeof xS < "u" ? t(Eu, bS(), Tm(), bu()) : typeof define == "function" && define.amd ? define(["exports", "@jr\
idgewell/set-array", "@jridgewell/sourcemap-codec", "@jridgewell/trace-mapping"], t) : (e = typeof globalThis < "u" ? globalThis : e || self,
    t(e.genMapping = {}, e.setArray, e.sourcemapCodec, e.traceMapping));
  })(Eu, function(e, t, r, n) {
    "use strict";
    class f {
      static {
        s(this, "GenMapping");
      }
      constructor({ file: J, sourceRoot: ne } = {}) {
        this._names = new t.SetArray(), this._sources = new t.SetArray(), this._sourcesContent = [], this._mappings = [], this.file = J, this.
        sourceRoot = ne, this._ignoreList = new t.SetArray();
      }
    }
    function p(X) {
      return X;
    }
    s(p, "cast");
    function h(X, J, ne, ae, ge, xe, we, de) {
      return R(!1, X, J, ne, ae, ge, xe, we, de);
    }
    s(h, "addSegment");
    function y(X, J) {
      return ie(!1, X, J);
    }
    s(y, "addMapping");
    let v = /* @__PURE__ */ s((X, J, ne, ae, ge, xe, we, de) => R(!0, X, J, ne, ae, ge, xe, we, de), "maybeAddSegment"), d = /* @__PURE__ */ s(
    (X, J) => ie(!0, X, J), "maybeAddMapping");
    function b(X, J, ne) {
      let { _sources: ae, _sourcesContent: ge } = X, xe = t.put(ae, J);
      ge[xe] = ne;
    }
    s(b, "setSourceContent");
    function E(X, J, ne = !0) {
      let { _sources: ae, _sourcesContent: ge, _ignoreList: xe } = X, we = t.put(ae, J);
      we === ge.length && (ge[we] = null), ne ? t.put(xe, we) : t.remove(xe, we);
    }
    s(E, "setIgnore");
    function I(X) {
      let { _mappings: J, _sources: ne, _sourcesContent: ae, _names: ge, _ignoreList: xe } = X;
      return q(J), {
        version: 3,
        file: X.file || void 0,
        names: ge.array,
        sourceRoot: X.sourceRoot || void 0,
        sources: ne.array,
        sourcesContent: ae,
        mappings: J,
        ignoreList: xe.array
      };
    }
    s(I, "toDecodedMap");
    function O(X) {
      let J = I(X);
      return Object.assign(Object.assign({}, J), { mappings: r.encode(J.mappings) });
    }
    s(O, "toEncodedMap");
    function k(X) {
      let J = new n.TraceMap(X), ne = new f({ file: J.file, sourceRoot: J.sourceRoot });
      return M(ne._names, J.names), M(ne._sources, J.sources), ne._sourcesContent = J.sourcesContent || J.sources.map(() => null), ne._mappings =
      n.decodedMappings(J), J.ignoreList && M(ne._ignoreList, J.ignoreList), ne;
    }
    s(k, "fromMap");
    function j(X) {
      let J = [], { _mappings: ne, _sources: ae, _names: ge } = X;
      for (let xe = 0; xe < ne.length; xe++) {
        let we = ne[xe];
        for (let de = 0; de < we.length; de++) {
          let Oe = we[de], ht = { line: xe + 1, column: Oe[0] }, _e, Be, ct;
          Oe.length !== 1 && (_e = ae.array[Oe[1]], Be = { line: Oe[2] + 1, column: Oe[3] }, Oe.length === 5 && (ct = ge.array[Oe[4]])), J.push(
          { generated: ht, source: _e, original: Be, name: ct });
        }
      }
      return J;
    }
    s(j, "allMappings");
    function R(X, J, ne, ae, ge, xe, we, de, Oe) {
      let { _mappings: ht, _sources: _e, _sourcesContent: Be, _names: ct } = J, Ot = U(ht, ne), Qt = Q(Ot, ae);
      if (!ge)
        return X && K(Ot, Qt) ? void 0 : W(Ot, Qt, [ae]);
      let Nt = t.put(_e, ge), wt = de ? t.put(ct, de) : -1;
      if (Nt === Be.length && (Be[Nt] = Oe ?? null), !(X && fe(Ot, Qt, Nt, xe, we, wt)))
        return W(Ot, Qt, de ? [ae, Nt, xe, we, wt] : [ae, Nt, xe, we]);
    }
    s(R, "addSegmentInternal");
    function U(X, J) {
      for (let ne = X.length; ne <= J; ne++)
        X[ne] = [];
      return X[J];
    }
    s(U, "getLine");
    function Q(X, J) {
      let ne = X.length;
      for (let ae = ne - 1; ae >= 0; ne = ae--) {
        let ge = X[ae];
        if (J >= ge[0])
          break;
      }
      return ne;
    }
    s(Q, "getColumnIndex");
    function W(X, J, ne) {
      for (let ae = X.length; ae > J; ae--)
        X[ae] = X[ae - 1];
      X[J] = ne;
    }
    s(W, "insert");
    function q(X) {
      let { length: J } = X, ne = J;
      for (let ae = ne - 1; ae >= 0 && !(X[ae].length > 0); ne = ae, ae--)
        ;
      ne < J && (X.length = ne);
    }
    s(q, "removeEmptyFinalLines");
    function M(X, J) {
      for (let ne = 0; ne < J.length; ne++)
        t.put(X, J[ne]);
    }
    s(M, "putAll");
    function K(X, J) {
      return J === 0 ? !0 : X[J - 1].length === 1;
    }
    s(K, "skipSourceless");
    function fe(X, J, ne, ae, ge, xe) {
      if (J === 0)
        return !1;
      let we = X[J - 1];
      return we.length === 1 ? !1 : ne === we[1] && ae === we[2] && ge === we[3] && xe === (we.length === 5 ? we[4] : -1);
    }
    s(fe, "skipSource");
    function ie(X, J, ne) {
      let { generated: ae, source: ge, original: xe, name: we, content: de } = ne;
      return ge ? R(X, J, ae.line - 1, ae.column, ge, xe.line - 1, xe.column, we, de) : R(X, J, ae.line - 1, ae.column, null, null, null, null,
      null);
    }
    s(ie, "addMappingInternal"), e.GenMapping = f, e.addMapping = y, e.addSegment = h, e.allMappings = j, e.fromMap = k, e.maybeAddMapping =
    d, e.maybeAddSegment = v, e.setIgnore = E, e.setSourceContent = b, e.toDecodedMap = I, e.toEncodedMap = O, Object.defineProperty(e, "__e\
sModule", { value: !0 });
  });
});

// ../node_modules/@babel/generator/lib/source-map.js
var SS = T((vu) => {
  "use strict";
  Object.defineProperty(vu, "__esModule", {
    value: !0
  });
  vu.default = void 0;
  var ss = Pm(), Am = bu(), Cm = class {
    static {
      s(this, "SourceMap");
    }
    constructor(t, r) {
      var n;
      this._map = void 0, this._rawMappings = void 0, this._sourceFileName = void 0, this._lastGenLine = 0, this._lastSourceLine = 0, this._lastSourceColumn =
      0, this._inputMap = void 0;
      let i = this._map = new ss.GenMapping({
        sourceRoot: t.sourceRoot
      });
      if (this._sourceFileName = (n = t.sourceFileName) == null ? void 0 : n.replace(/\\/g, "/"), this._rawMappings = void 0, t.inputSourceMap) {
        this._inputMap = new Am.TraceMap(t.inputSourceMap);
        let o = this._inputMap.resolvedSources;
        if (o.length)
          for (let l = 0; l < o.length; l++) {
            var a;
            (0, ss.setSourceContent)(i, o[l], (a = this._inputMap.sourcesContent) == null ? void 0 : a[l]);
          }
      }
      if (typeof r == "string" && !t.inputSourceMap)
        (0, ss.setSourceContent)(i, this._sourceFileName, r);
      else if (typeof r == "object")
        for (let o of Object.keys(r))
          (0, ss.setSourceContent)(i, o.replace(/\\/g, "/"), r[o]);
    }
    get() {
      return (0, ss.toEncodedMap)(this._map);
    }
    getDecoded() {
      return (0, ss.toDecodedMap)(this._map);
    }
    getRawMappings() {
      return this._rawMappings || (this._rawMappings = (0, ss.allMappings)(this._map));
    }
    mark(t, r, n, i, a, o) {
      var l;
      this._rawMappings = void 0;
      let u;
      if (r != null)
        if (this._inputMap) {
          if (u = (0, Am.originalPositionFor)(this._inputMap, {
            line: r,
            column: n
          }), !u.name && a) {
            let c = (0, Am.originalPositionFor)(this._inputMap, a);
            c.name && (i = c.name);
          }
        } else
          u = {
            source: o?.replace(/\\/g, "/") || this._sourceFileName,
            line: r,
            column: n
          };
      (0, ss.maybeAddMapping)(this._map, {
        name: i,
        generated: t,
        source: (l = u) == null ? void 0 : l.source,
        original: u
      });
    }
  };
  vu.default = Cm;
});

// ../node_modules/@babel/generator/lib/buffer.js
var PS = T((Tu) => {
  "use strict";
  Object.defineProperty(Tu, "__esModule", {
    value: !0
  });
  Tu.default = void 0;
  var wm = class {
    static {
      s(this, "Buffer");
    }
    constructor(t, r) {
      this._map = null, this._buf = "", this._str = "", this._appendCount = 0, this._last = 0, this._queue = [], this._queueCursor = 0, this.
      _canMarkIdName = !0, this._indentChar = "", this._fastIndentations = [], this._position = {
        line: 1,
        column: 0
      }, this._sourcePosition = {
        identifierName: void 0,
        identifierNamePos: void 0,
        line: void 0,
        column: void 0,
        filename: void 0
      }, this._map = t, this._indentChar = r;
      for (let n = 0; n < 64; n++)
        this._fastIndentations.push(r.repeat(n));
      this._allocQueue();
    }
    _allocQueue() {
      let t = this._queue;
      for (let r = 0; r < 16; r++)
        t.push({
          char: 0,
          repeat: 1,
          line: void 0,
          column: void 0,
          identifierName: void 0,
          identifierNamePos: void 0,
          filename: ""
        });
    }
    _pushQueue(t, r, n, i, a) {
      let o = this._queueCursor;
      o === this._queue.length && this._allocQueue();
      let l = this._queue[o];
      l.char = t, l.repeat = r, l.line = n, l.column = i, l.filename = a, this._queueCursor++;
    }
    _popQueue() {
      if (this._queueCursor === 0)
        throw new Error("Cannot pop from empty queue");
      return this._queue[--this._queueCursor];
    }
    get() {
      this._flush();
      let t = this._map, r = {
        code: (this._buf + this._str).trimRight(),
        decodedMap: t?.getDecoded(),
        get __mergedMap() {
          return this.map;
        },
        get map() {
          let n = t ? t.get() : null;
          return r.map = n, n;
        },
        set map(n) {
          Object.defineProperty(r, "map", {
            value: n,
            writable: !0
          });
        },
        get rawMappings() {
          let n = t?.getRawMappings();
          return r.rawMappings = n, n;
        },
        set rawMappings(n) {
          Object.defineProperty(r, "rawMappings", {
            value: n,
            writable: !0
          });
        }
      };
      return r;
    }
    append(t, r) {
      this._flush(), this._append(t, this._sourcePosition, r);
    }
    appendChar(t) {
      this._flush(), this._appendChar(t, 1, this._sourcePosition);
    }
    queue(t) {
      if (t === 10)
        for (; this._queueCursor !== 0; ) {
          let n = this._queue[this._queueCursor - 1].char;
          if (n !== 32 && n !== 9)
            break;
          this._queueCursor--;
        }
      let r = this._sourcePosition;
      this._pushQueue(t, 1, r.line, r.column, r.filename);
    }
    queueIndentation(t) {
      t !== 0 && this._pushQueue(-1, t, void 0, void 0, void 0);
    }
    _flush() {
      let t = this._queueCursor, r = this._queue;
      for (let n = 0; n < t; n++) {
        let i = r[n];
        this._appendChar(i.char, i.repeat, i);
      }
      this._queueCursor = 0;
    }
    _appendChar(t, r, n) {
      if (this._last = t, t === -1) {
        let i = this._fastIndentations[r];
        i !== void 0 ? this._str += i : this._str += r > 1 ? this._indentChar.repeat(r) : this._indentChar;
      } else
        this._str += r > 1 ? String.fromCharCode(t).repeat(r) : String.fromCharCode(t);
      t !== 10 ? (this._mark(n.line, n.column, n.identifierName, n.identifierNamePos, n.filename), this._position.column += r) : (this._position.
      line++, this._position.column = 0), this._canMarkIdName && (n.identifierName = void 0, n.identifierNamePos = void 0);
    }
    _append(t, r, n) {
      let i = t.length, a = this._position;
      if (this._last = t.charCodeAt(i - 1), ++this._appendCount > 4096 ? (+this._str, this._buf += this._str, this._str = t, this._appendCount =
      0) : this._str += t, !n && !this._map) {
        a.column += i;
        return;
      }
      let {
        column: o,
        identifierName: l,
        identifierNamePos: u,
        filename: c
      } = r, f = r.line;
      (l != null || u != null) && this._canMarkIdName && (r.identifierName = void 0, r.identifierNamePos = void 0);
      let p = t.indexOf(`
`), h = 0;
      for (p !== 0 && this._mark(f, o, l, u, c); p !== -1; )
        a.line++, a.column = 0, h = p + 1, h < i && f !== void 0 && this._mark(++f, 0, null, null, c), p = t.indexOf(`
`, h);
      a.column += i - h;
    }
    _mark(t, r, n, i, a) {
      var o;
      (o = this._map) == null || o.mark(this._position, t, r, n, i, a);
    }
    removeTrailingNewline() {
      let t = this._queueCursor;
      t !== 0 && this._queue[t - 1].char === 10 && this._queueCursor--;
    }
    removeLastSemicolon() {
      let t = this._queueCursor;
      t !== 0 && this._queue[t - 1].char === 59 && this._queueCursor--;
    }
    getLastChar() {
      let t = this._queueCursor;
      return t !== 0 ? this._queue[t - 1].char : this._last;
    }
    getNewlineCount() {
      let t = this._queueCursor, r = 0;
      if (t === 0) return this._last === 10 ? 1 : 0;
      for (let n = t - 1; n >= 0 && this._queue[n].char === 10; n--)
        r++;
      return r === t && this._last === 10 ? r + 1 : r;
    }
    endsWithCharAndNewline() {
      let t = this._queue, r = this._queueCursor;
      if (r !== 0)
        return t[r - 1].char !== 10 ? void 0 : r > 1 ? t[r - 2].char : this._last;
    }
    hasContent() {
      return this._queueCursor !== 0 || !!this._last;
    }
    exactSource(t, r) {
      if (!this._map) {
        r();
        return;
      }
      this.source("start", t);
      let n = t.identifierName, i = this._sourcePosition;
      n && (this._canMarkIdName = !1, i.identifierName = n), r(), n && (this._canMarkIdName = !0, i.identifierName = void 0, i.identifierNamePos =
      void 0), this.source("end", t);
    }
    source(t, r) {
      this._map && this._normalizePosition(t, r, 0);
    }
    sourceWithOffset(t, r, n) {
      this._map && this._normalizePosition(t, r, n);
    }
    _normalizePosition(t, r, n) {
      let i = r[t], a = this._sourcePosition;
      i && (a.line = i.line, a.column = Math.max(i.column + n, 0), a.filename = r.filename);
    }
    getCurrentColumn() {
      let t = this._queue, r = this._queueCursor, n = -1, i = 0;
      for (let a = 0; a < r; a++) {
        let o = t[a];
        o.char === 10 && (n = i), i += o.repeat;
      }
      return n === -1 ? this._position.column + i : i - 1 - n;
    }
    getCurrentLine() {
      let t = 0, r = this._queue;
      for (let n = 0; n < this._queueCursor; n++)
        r[n].char === 10 && t++;
      return this._position.line + t;
    }
  };
  Tu.default = wm;
});

// ../node_modules/@babel/generator/lib/node/whitespace.js
var IS = T((Su) => {
  "use strict";
  Object.defineProperty(Su, "__esModule", {
    value: !0
  });
  Su.nodes = void 0;
  var jJ = Se(), {
    FLIPPED_ALIAS_KEYS: LJ,
    isArrayExpression: MJ,
    isAssignmentExpression: CS,
    isBinary: wS,
    isBlockStatement: RJ,
    isCallExpression: DS,
    isFunction: oo,
    isIdentifier: xu,
    isLiteral: qJ,
    isMemberExpression: Dm,
    isObjectExpression: UJ,
    isOptionalCallExpression: VJ,
    isOptionalMemberExpression: $J,
    isStringLiteral: WJ
  } = jJ;
  function ji(e, t) {
    return e && (Dm(e) || $J(e) ? (ji(e.object, t), e.computed && ji(e.property, t)) : wS(e) || CS(e) ? (ji(e.left, t), ji(e.right, t)) : DS(
    e) || VJ(e) ? (t.hasCall = !0, ji(e.callee, t)) : oo(e) ? t.hasFunction = !0 : xu(e) && (t.hasHelper = t.hasHelper || e.callee && _n(e.callee))),
    t;
  }
  s(ji, "crawlInternal");
  function AS(e) {
    return ji(e, {
      hasCall: !1,
      hasFunction: !1,
      hasHelper: !1
    });
  }
  s(AS, "crawl");
  function _n(e) {
    return e ? Dm(e) ? _n(e.object) || _n(e.property) : xu(e) ? e.name === "require" || e.name.charCodeAt(0) === 95 : DS(e) ? _n(e.callee) :
    wS(e) || CS(e) ? xu(e.left) && _n(e.left) || _n(e.right) : !1 : !1;
  }
  s(_n, "isHelper");
  function KJ(e) {
    return qJ(e) || UJ(e) || MJ(e) || xu(e) || Dm(e);
  }
  s(KJ, "isType");
  var Ks = Su.nodes = {
    AssignmentExpression(e) {
      let t = AS(e.right);
      if (t.hasCall && t.hasHelper || t.hasFunction)
        return t.hasFunction ? 3 : 2;
    },
    SwitchCase(e, t) {
      return (e.consequent.length || t.cases[0] === e ? 1 : 0) | (!e.consequent.length && t.cases[t.cases.length - 1] === e ? 2 : 0);
    },
    LogicalExpression(e) {
      if (oo(e.left) || oo(e.right))
        return 2;
    },
    Literal(e) {
      if (WJ(e) && e.value === "use strict")
        return 2;
    },
    CallExpression(e) {
      if (oo(e.callee) || _n(e))
        return 3;
    },
    OptionalCallExpression(e) {
      if (oo(e.callee))
        return 3;
    },
    VariableDeclaration(e) {
      for (let t = 0; t < e.declarations.length; t++) {
        let r = e.declarations[t], n = _n(r.id) && !KJ(r.init);
        if (!n && r.init) {
          let i = AS(r.init);
          n = _n(r.init) && i.hasCall || i.hasFunction;
        }
        if (n)
          return 3;
      }
    },
    IfStatement(e) {
      if (RJ(e.consequent))
        return 3;
    }
  };
  Ks.ObjectProperty = Ks.ObjectTypeProperty = Ks.ObjectMethod = function(e, t) {
    if (t.properties[0] === e)
      return 1;
  };
  Ks.ObjectTypeCallProperty = function(e, t) {
    var r;
    if (t.callProperties[0] === e && !((r = t.properties) != null && r.length))
      return 1;
  };
  Ks.ObjectTypeIndexer = function(e, t) {
    var r, n;
    if (t.indexers[0] === e && !((r = t.properties) != null && r.length) && !((n = t.callProperties) != null && n.length))
      return 1;
  };
  Ks.ObjectTypeInternalSlot = function(e, t) {
    var r, n, i;
    if (t.internalSlots[0] === e && !((r = t.properties) != null && r.length) && !((n = t.callProperties) != null && n.length) && !((i = t.indexers) !=
    null && i.length))
      return 1;
  };
  [["Function", !0], ["Class", !0], ["Loop", !0], ["LabeledStatement", !0], ["SwitchStatement", !0], ["TryStatement", !0]].forEach(function([
  e, t]) {
    [e].concat(LJ[e] || []).forEach(function(r) {
      let n = t ? 3 : 0;
      Ks[r] = () => n;
    });
  });
});

// ../node_modules/@babel/generator/lib/node/parentheses.js
var FS = T((tt) => {
  "use strict";
  Object.defineProperty(tt, "__esModule", {
    value: !0
  });
  tt.ArrowFunctionExpression = bX;
  tt.AssignmentExpression = vX;
  tt.Binary = BS;
  tt.BinaryExpression = dX;
  tt.ClassExpression = yX;
  tt.ConditionalExpression = _m;
  tt.DoExpression = aX;
  tt.FunctionExpression = gX;
  tt.FunctionTypeAnnotation = nX;
  tt.Identifier = xX;
  tt.LogicalExpression = TX;
  tt.NullableTypeAnnotation = rX;
  tt.ObjectExpression = iX;
  tt.OptionalIndexedAccessType = lX;
  tt.OptionalCallExpression = tt.OptionalMemberExpression = EX;
  tt.SequenceExpression = hX;
  tt.TSSatisfiesExpression = tt.TSAsExpression = uX;
  tt.TSInferType = fX;
  tt.TSInstantiationExpression = pX;
  tt.UnaryLike = tt.TSTypeAssertion = kS;
  tt.TSIntersectionType = tt.TSUnionType = cX;
  tt.IntersectionTypeAnnotation = tt.UnionTypeAnnotation = oX;
  tt.UpdateExpression = sX;
  tt.AwaitExpression = tt.YieldExpression = mX;
  var GJ = Se(), _r = is(), {
    isArrayTypeAnnotation: HJ,
    isBinaryExpression: YJ,
    isCallExpression: zJ,
    isExportDeclaration: JJ,
    isForOfStatement: XJ,
    isIndexedAccessType: QJ,
    isMemberExpression: NS,
    isObjectPattern: ZJ,
    isOptionalMemberExpression: eX,
    isYieldExpression: tX
  } = GJ, _S = /* @__PURE__ */ new Map([["||", 0], ["??", 0], ["|>", 0], ["&&", 1], ["|", 2], ["^", 3], ["&", 4], ["==", 5], ["===", 5], ["!\
=", 5], ["!==", 5], ["<", 6], [">", 6], ["<=", 6], [">=", 6], ["in", 6], ["instanceof", 6], [">>", 7], ["<<", 7], [">>>", 7], ["+", 8], ["-",
  8], ["*", 9], ["/", 9], ["%", 9], ["**", 10]]);
  function OS(e, t) {
    if (t === "BinaryExpression" || t === "LogicalExpression")
      return _S.get(e.operator);
    if (t === "TSAsExpression" || t === "TSSatisfiesExpression")
      return _S.get("in");
  }
  s(OS, "getBinaryPrecedence");
  function Im(e) {
    return e === "TSAsExpression" || e === "TSSatisfiesExpression" || e === "TSTypeAssertion";
  }
  s(Im, "isTSTypeExpression");
  var Pu = /* @__PURE__ */ s((e, t) => {
    let r = t.type;
    return (r === "ClassDeclaration" || r === "ClassExpression") && t.superClass === e;
  }, "isClassExtendsClause"), Au = /* @__PURE__ */ s((e, t) => {
    let r = t.type;
    return (r === "MemberExpression" || r === "OptionalMemberExpression") && t.object === e || (r === "CallExpression" || r === "OptionalCal\
lExpression" || r === "NewExpression") && t.callee === e || r === "TaggedTemplateExpression" && t.tag === e || r === "TSNonNullExpression";
  }, "hasPostfixPart");
  function rX(e, t) {
    return HJ(t);
  }
  s(rX, "NullableTypeAnnotation");
  function nX(e, t, r) {
    let n = t.type;
    return n === "UnionTypeAnnotation" || n === "IntersectionTypeAnnotation" || n === "ArrayTypeAnnotation" || !!(r & _r.TokenContext.arrowFlowReturnType);
  }
  s(nX, "FunctionTypeAnnotation");
  function sX(e, t) {
    return Au(e, t) || Pu(e, t);
  }
  s(sX, "UpdateExpression");
  function iX(e, t, r) {
    return !!(r & (_r.TokenContext.expressionStatement | _r.TokenContext.arrowBody));
  }
  s(iX, "ObjectExpression");
  function aX(e, t, r) {
    return !e.async && !!(r & _r.TokenContext.expressionStatement);
  }
  s(aX, "DoExpression");
  function BS(e, t) {
    let r = t.type;
    if (e.type === "BinaryExpression" && e.operator === "**" && r === "BinaryExpression" && t.operator === "**")
      return t.left === e;
    if (Pu(e, t) || Au(e, t) || r === "UnaryExpression" || r === "SpreadElement" || r === "AwaitExpression")
      return !0;
    let n = OS(t, r);
    if (n != null) {
      let i = OS(e, e.type);
      if (n === i && r === "BinaryExpression" && t.right === e || n > i)
        return !0;
    }
  }
  s(BS, "Binary");
  function oX(e, t) {
    let r = t.type;
    return r === "ArrayTypeAnnotation" || r === "NullableTypeAnnotation" || r === "IntersectionTypeAnnotation" || r === "UnionTypeAnnotation";
  }
  s(oX, "UnionTypeAnnotation");
  function lX(e, t) {
    return QJ(t) && t.objectType === e;
  }
  s(lX, "OptionalIndexedAccessType");
  function uX(e, t) {
    return (t.type === "AssignmentExpression" || t.type === "AssignmentPattern") && t.left === e || t.type === "BinaryExpression" && (t.operator ===
    "|" || t.operator === "&") && e === t.left ? !0 : BS(e, t);
  }
  s(uX, "TSAsExpression");
  function cX(e, t) {
    let r = t.type;
    return r === "TSArrayType" || r === "TSOptionalType" || r === "TSIntersectionType" || r === "TSUnionType" || r === "TSRestType";
  }
  s(cX, "TSUnionType");
  function fX(e, t) {
    let r = t.type;
    return r === "TSArrayType" || r === "TSOptionalType";
  }
  s(fX, "TSInferType");
  function pX(e, t) {
    let r = t.type;
    return (r === "CallExpression" || r === "OptionalCallExpression" || r === "NewExpression" || r === "TSInstantiationExpression") && !!t.typeParameters;
  }
  s(pX, "TSInstantiationExpression");
  function dX(e, t, r, n) {
    return e.operator === "in" && n;
  }
  s(dX, "BinaryExpression");
  function hX(e, t) {
    let r = t.type;
    return !(r === "ForStatement" || r === "ThrowStatement" || r === "ReturnStatement" || r === "IfStatement" && t.test === e || r === "Whil\
eStatement" && t.test === e || r === "ForInStatement" && t.right === e || r === "SwitchStatement" && t.discriminant === e || r === "Expressi\
onStatement" && t.expression === e);
  }
  s(hX, "SequenceExpression");
  function mX(e, t) {
    let r = t.type;
    return r === "BinaryExpression" || r === "LogicalExpression" || r === "UnaryExpression" || r === "SpreadElement" || Au(e, t) || r === "A\
waitExpression" && tX(e) || r === "ConditionalExpression" && e === t.test || Pu(e, t) || Im(r);
  }
  s(mX, "YieldExpression");
  function yX(e, t, r) {
    return !!(r & (_r.TokenContext.expressionStatement | _r.TokenContext.exportDefault));
  }
  s(yX, "ClassExpression");
  function kS(e, t) {
    return Au(e, t) || YJ(t) && t.operator === "**" && t.left === e || Pu(e, t);
  }
  s(kS, "UnaryLike");
  function gX(e, t, r) {
    return !!(r & (_r.TokenContext.expressionStatement | _r.TokenContext.exportDefault));
  }
  s(gX, "FunctionExpression");
  function bX(e, t) {
    return JJ(t) || _m(e, t);
  }
  s(bX, "ArrowFunctionExpression");
  function _m(e, t) {
    let r = t.type;
    return r === "UnaryExpression" || r === "SpreadElement" || r === "BinaryExpression" || r === "LogicalExpression" || r === "ConditionalEx\
pression" && t.test === e || r === "AwaitExpression" || Im(r) ? !0 : kS(e, t);
  }
  s(_m, "ConditionalExpression");
  function EX(e, t) {
    return zJ(t) && t.callee === e || NS(t) && t.object === e;
  }
  s(EX, "OptionalMemberExpression");
  function vX(e, t) {
    return ZJ(e.left) ? !0 : _m(e, t);
  }
  s(vX, "AssignmentExpression");
  function TX(e, t) {
    let r = t.type;
    if (Im(r)) return !0;
    if (r !== "LogicalExpression") return !1;
    switch (e.operator) {
      case "||":
        return t.operator === "??" || t.operator === "&&";
      case "&&":
        return t.operator === "??";
      case "??":
        return t.operator !== "??";
    }
  }
  s(TX, "LogicalExpression");
  function xX(e, t, r) {
    var n;
    let i = t.type;
    if ((n = e.extra) != null && n.parenthesized && i === "AssignmentExpression" && t.left === e) {
      let a = t.right.type;
      if ((a === "FunctionExpression" || a === "ClassExpression") && t.right.id == null)
        return !0;
    }
    return e.name === "let" ? (NS(t, {
      object: e,
      computed: !0
    }) || eX(t, {
      object: e,
      computed: !0,
      optional: !1
    })) && r & (_r.TokenContext.expressionStatement | _r.TokenContext.forHead | _r.TokenContext.forInHead) ? !0 : !!(r & _r.TokenContext.forOfHead) :
    e.name === "async" && XJ(t, {
      left: e,
      await: !1
    });
  }
  s(xX, "Identifier");
});

// ../node_modules/@babel/generator/lib/node/index.js
var is = T((as) => {
  "use strict";
  Object.defineProperty(as, "__esModule", {
    value: !0
  });
  as.TokenContext = void 0;
  as.needsParens = jX;
  as.needsWhitespace = Nm;
  as.needsWhitespaceAfter = FX;
  as.needsWhitespaceBefore = kX;
  var SX = IS(), PX = FS(), AX = Se(), {
    FLIPPED_ALIAS_KEYS: CX,
    isCallExpression: jS,
    isDecorator: wX,
    isExpressionStatement: DX,
    isMemberExpression: IX,
    isNewExpression: _X,
    isParenthesizedExpression: OX
  } = AX, LAe = as.TokenContext = {
    expressionStatement: 1,
    arrowBody: 2,
    exportDefault: 4,
    forHead: 8,
    forInHead: 16,
    forOfHead: 32,
    arrowFlowReturnType: 64
  };
  function LS(e) {
    let t = /* @__PURE__ */ new Map();
    function r(n, i) {
      let a = t.get(n);
      t.set(n, a ? function(o, l, u, c) {
        var f;
        return (f = a(o, l, u, c)) != null ? f : i(o, l, u, c);
      } : i);
    }
    s(r, "add");
    for (let n of Object.keys(e)) {
      let i = CX[n];
      if (i)
        for (let a of i)
          r(a, e[n]);
      else
        r(n, e[n]);
    }
    return t;
  }
  s(LS, "expandAliases");
  var NX = LS(PX), BX = LS(SX.nodes);
  function MS(e) {
    return jS(e) ? !0 : IX(e) && MS(e.object);
  }
  s(MS, "isOrHasCallExpression");
  function Nm(e, t, r) {
    var n;
    if (!e) return !1;
    DX(e) && (e = e.expression);
    let i = (n = BX.get(e.type)) == null ? void 0 : n(e, t);
    return typeof i == "number" ? (i & r) !== 0 : !1;
  }
  s(Nm, "needsWhitespace");
  function kX(e, t) {
    return Nm(e, t, 1);
  }
  s(kX, "needsWhitespaceBefore");
  function FX(e, t) {
    return Nm(e, t, 2);
  }
  s(FX, "needsWhitespaceAfter");
  function jX(e, t, r, n) {
    var i;
    return t ? _X(t) && t.callee === e && MS(e) ? !0 : wX(t) ? !Om(e) && !(jS(e) && Om(e.callee)) && !OX(e) : (i = NX.get(e.type)) == null ?
    void 0 : i(e, t, r, n) : !1;
  }
  s(jX, "needsParens");
  function Om(e) {
    switch (e.type) {
      case "Identifier":
        return !0;
      case "MemberExpression":
        return !e.computed && e.property.type === "Identifier" && Om(e.object);
      default:
        return !1;
    }
  }
  s(Om, "isDecoratorMemberExpression");
});

// ../node_modules/@babel/generator/lib/generators/template-literals.js
var RS = T((lo) => {
  "use strict";
  Object.defineProperty(lo, "__esModule", {
    value: !0
  });
  lo.TaggedTemplateExpression = LX;
  lo.TemplateElement = MX;
  lo.TemplateLiteral = RX;
  function LX(e) {
    this.print(e.tag, e), this.print(e.typeParameters, e), this.print(e.quasi, e);
  }
  s(LX, "TaggedTemplateExpression");
  function MX() {
    throw new Error("TemplateElement printing is handled in TemplateLiteral");
  }
  s(MX, "TemplateElement");
  function RX(e) {
    let t = e.quasis, r = "`";
    for (let n = 0; n < t.length; n++)
      r += t[n].value.raw, n + 1 < t.length && (this.token(r + "${", !0), this.print(e.expressions[n], e), r = "}");
    this.token(r + "`", !0);
  }
  s(RX, "TemplateLiteral");
});

// ../node_modules/@babel/generator/lib/generators/expressions.js
var US = T((st) => {
  "use strict";
  Object.defineProperty(st, "__esModule", {
    value: !0
  });
  st.LogicalExpression = st.BinaryExpression = st.AssignmentExpression = cQ;
  st.AssignmentPattern = uQ;
  st.AwaitExpression = iQ;
  st.BindExpression = fQ;
  st.CallExpression = nQ;
  st.ConditionalExpression = YX;
  st.Decorator = eQ;
  st.DoExpression = KX;
  st.EmptyStatement = oQ;
  st.ExpressionStatement = lQ;
  st.Import = sQ;
  st.MemberExpression = pQ;
  st.MetaProperty = dQ;
  st.ModuleExpression = yQ;
  st.NewExpression = zX;
  st.OptionalCallExpression = rQ;
  st.OptionalMemberExpression = tQ;
  st.ParenthesizedExpression = GX;
  st.PrivateName = hQ;
  st.SequenceExpression = JX;
  st.Super = QX;
  st.ThisExpression = XX;
  st.UnaryExpression = WX;
  st.UpdateExpression = HX;
  st.V8IntrinsicIdentifier = mQ;
  st.YieldExpression = aQ;
  st._shouldPrintDecoratorsBeforeExport = ZX;
  var qX = Se(), UX = is(), {
    isCallExpression: VX,
    isLiteral: qS,
    isMemberExpression: Bm,
    isNewExpression: $X
  } = qX;
  function WX(e) {
    let {
      operator: t
    } = e;
    t === "void" || t === "delete" || t === "typeof" || t === "throw" ? (this.word(t), this.space()) : this.token(t), this.print(e.argument,
    e);
  }
  s(WX, "UnaryExpression");
  function KX(e) {
    e.async && (this.word("async", !0), this.space()), this.word("do"), this.space(), this.print(e.body, e);
  }
  s(KX, "DoExpression");
  function GX(e) {
    this.tokenChar(40), this.print(e.expression, e), this.rightParens(e);
  }
  s(GX, "ParenthesizedExpression");
  function HX(e) {
    e.prefix ? (this.token(e.operator), this.print(e.argument, e)) : (this.printTerminatorless(e.argument, e, !0), this.token(e.operator));
  }
  s(HX, "UpdateExpression");
  function YX(e) {
    this.print(e.test, e), this.space(), this.tokenChar(63), this.space(), this.print(e.consequent, e), this.space(), this.tokenChar(58), this.
    space(), this.print(e.alternate, e);
  }
  s(YX, "ConditionalExpression");
  function zX(e, t) {
    if (this.word("new"), this.space(), this.print(e.callee, e), this.format.minified && e.arguments.length === 0 && !e.optional && !VX(t, {
      callee: e
    }) && !Bm(t) && !$X(t))
      return;
    this.print(e.typeArguments, e), this.print(e.typeParameters, e), e.optional && this.token("?."), this.tokenChar(40);
    let r = this.enterForStatementInit(!1);
    this.printList(e.arguments, e), r(), this.rightParens(e);
  }
  s(zX, "NewExpression");
  function JX(e) {
    this.printList(e.expressions, e);
  }
  s(JX, "SequenceExpression");
  function XX() {
    this.word("this");
  }
  s(XX, "ThisExpression");
  function QX() {
    this.word("super");
  }
  s(QX, "Super");
  function ZX(e) {
    return typeof this.format.decoratorsBeforeExport == "boolean" ? this.format.decoratorsBeforeExport : typeof e.start == "number" && e.start ===
    e.declaration.start;
  }
  s(ZX, "_shouldPrintDecoratorsBeforeExport");
  function eQ(e) {
    this.tokenChar(64), this.print(e.expression, e), this.newline();
  }
  s(eQ, "Decorator");
  function tQ(e) {
    let {
      computed: t
    } = e, {
      optional: r,
      property: n
    } = e;
    if (this.print(e.object, e), !t && Bm(n))
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    qS(n) && typeof n.value == "number" && (t = !0), r && this.token("?."), t ? (this.tokenChar(91), this.print(n, e), this.tokenChar(93)) :
    (r || this.tokenChar(46), this.print(n, e));
  }
  s(tQ, "OptionalMemberExpression");
  function rQ(e) {
    this.print(e.callee, e), this.print(e.typeParameters, e), e.optional && this.token("?."), this.print(e.typeArguments, e), this.tokenChar(
    40);
    let t = this.enterForStatementInit(!1);
    this.printList(e.arguments, e), t(), this.rightParens(e);
  }
  s(rQ, "OptionalCallExpression");
  function nQ(e) {
    this.print(e.callee, e), this.print(e.typeArguments, e), this.print(e.typeParameters, e), this.tokenChar(40);
    let t = this.enterForStatementInit(!1);
    this.printList(e.arguments, e), t(), this.rightParens(e);
  }
  s(nQ, "CallExpression");
  function sQ() {
    this.word("import");
  }
  s(sQ, "Import");
  function iQ(e) {
    this.word("await"), e.argument && (this.space(), this.printTerminatorless(e.argument, e, !1));
  }
  s(iQ, "AwaitExpression");
  function aQ(e) {
    this.word("yield", !0), e.delegate ? (this.tokenChar(42), e.argument && (this.space(), this.print(e.argument, e))) : e.argument && (this.
    space(), this.printTerminatorless(e.argument, e, !1));
  }
  s(aQ, "YieldExpression");
  function oQ() {
    this.semicolon(!0);
  }
  s(oQ, "EmptyStatement");
  function lQ(e) {
    this.tokenContext |= UX.TokenContext.expressionStatement, this.print(e.expression, e), this.semicolon();
  }
  s(lQ, "ExpressionStatement");
  function uQ(e) {
    this.print(e.left, e), e.left.type === "Identifier" && (e.left.optional && this.tokenChar(63), this.print(e.left.typeAnnotation, e)), this.
    space(), this.tokenChar(61), this.space(), this.print(e.right, e);
  }
  s(uQ, "AssignmentPattern");
  function cQ(e) {
    this.print(e.left, e), this.space(), e.operator === "in" || e.operator === "instanceof" ? this.word(e.operator) : this.token(e.operator),
    this.space(), this.print(e.right, e);
  }
  s(cQ, "AssignmentExpression");
  function fQ(e) {
    this.print(e.object, e), this.token("::"), this.print(e.callee, e);
  }
  s(fQ, "BindExpression");
  function pQ(e) {
    if (this.print(e.object, e), !e.computed && Bm(e.property))
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    let t = e.computed;
    if (qS(e.property) && typeof e.property.value == "number" && (t = !0), t) {
      let r = this.enterForStatementInit(!1);
      this.tokenChar(91), this.print(e.property, e), this.tokenChar(93), r();
    } else
      this.tokenChar(46), this.print(e.property, e);
  }
  s(pQ, "MemberExpression");
  function dQ(e) {
    this.print(e.meta, e), this.tokenChar(46), this.print(e.property, e);
  }
  s(dQ, "MetaProperty");
  function hQ(e) {
    this.tokenChar(35), this.print(e.id, e);
  }
  s(hQ, "PrivateName");
  function mQ(e) {
    this.tokenChar(37), this.word(e.name);
  }
  s(mQ, "V8IntrinsicIdentifier");
  function yQ(e) {
    this.word("module", !0), this.space(), this.tokenChar(123), this.indent();
    let {
      body: t
    } = e;
    (t.body.length || t.directives.length) && this.newline(), this.print(t, e), this.dedent(), this.rightBrace(e);
  }
  s(yQ, "ModuleExpression");
});

// ../node_modules/@babel/generator/lib/generators/statements.js
var KS = T((yt) => {
  "use strict";
  Object.defineProperty(yt, "__esModule", {
    value: !0
  });
  yt.BreakStatement = CQ;
  yt.CatchClause = NQ;
  yt.ContinueStatement = wQ;
  yt.DebuggerStatement = FQ;
  yt.DoWhileStatement = AQ;
  yt.ForOfStatement = yt.ForInStatement = void 0;
  yt.ForStatement = SQ;
  yt.IfStatement = xQ;
  yt.LabeledStatement = _Q;
  yt.ReturnStatement = DQ;
  yt.SwitchCase = kQ;
  yt.SwitchStatement = BQ;
  yt.ThrowStatement = IQ;
  yt.TryStatement = OQ;
  yt.VariableDeclaration = jQ;
  yt.VariableDeclarator = LQ;
  yt.WhileStatement = PQ;
  yt.WithStatement = TQ;
  var gQ = Se(), km = is(), {
    isFor: VS,
    isForStatement: bQ,
    isIfStatement: EQ,
    isStatement: vQ
  } = gQ;
  function TQ(e) {
    this.word("with"), this.space(), this.tokenChar(40), this.print(e.object, e), this.tokenChar(41), this.printBlock(e);
  }
  s(TQ, "WithStatement");
  function xQ(e) {
    this.word("if"), this.space(), this.tokenChar(40), this.print(e.test, e), this.tokenChar(41), this.space();
    let t = e.alternate && EQ($S(e.consequent));
    t && (this.tokenChar(123), this.newline(), this.indent()), this.printAndIndentOnComments(e.consequent, e), t && (this.dedent(), this.newline(),
    this.tokenChar(125)), e.alternate && (this.endsWith(125) && this.space(), this.word("else"), this.space(), this.printAndIndentOnComments(
    e.alternate, e));
  }
  s(xQ, "IfStatement");
  function $S(e) {
    let {
      body: t
    } = e;
    return vQ(t) === !1 ? e : $S(t);
  }
  s($S, "getLastStatement");
  function SQ(e) {
    this.word("for"), this.space(), this.tokenChar(40);
    {
      let t = this.enterForStatementInit(!0);
      this.tokenContext |= km.TokenContext.forHead, this.print(e.init, e), t();
    }
    this.tokenChar(59), e.test && (this.space(), this.print(e.test, e)), this.tokenChar(59), e.update && (this.space(), this.print(e.update,
    e)), this.tokenChar(41), this.printBlock(e);
  }
  s(SQ, "ForStatement");
  function PQ(e) {
    this.word("while"), this.space(), this.tokenChar(40), this.print(e.test, e), this.tokenChar(41), this.printBlock(e);
  }
  s(PQ, "WhileStatement");
  function WS(e) {
    this.word("for"), this.space();
    let t = e.type === "ForOfStatement";
    t && e.await && (this.word("await"), this.space()), this.noIndentInnerCommentsHere(), this.tokenChar(40);
    {
      let r = t ? null : this.enterForStatementInit(!0);
      this.tokenContext |= t ? km.TokenContext.forOfHead : km.TokenContext.forInHead, this.print(e.left, e), r?.();
    }
    this.space(), this.word(t ? "of" : "in"), this.space(), this.print(e.right, e), this.tokenChar(41), this.printBlock(e);
  }
  s(WS, "ForXStatement");
  var WAe = yt.ForInStatement = WS, KAe = yt.ForOfStatement = WS;
  function AQ(e) {
    this.word("do"), this.space(), this.print(e.body, e), this.space(), this.word("while"), this.space(), this.tokenChar(40), this.print(e.test,
    e), this.tokenChar(41), this.semicolon();
  }
  s(AQ, "DoWhileStatement");
  function Cu(e, t, r, n) {
    t && (e.space(), e.printTerminatorless(t, r, n)), e.semicolon();
  }
  s(Cu, "printStatementAfterKeyword");
  function CQ(e) {
    this.word("break"), Cu(this, e.label, e, !0);
  }
  s(CQ, "BreakStatement");
  function wQ(e) {
    this.word("continue"), Cu(this, e.label, e, !0);
  }
  s(wQ, "ContinueStatement");
  function DQ(e) {
    this.word("return"), Cu(this, e.argument, e, !1);
  }
  s(DQ, "ReturnStatement");
  function IQ(e) {
    this.word("throw"), Cu(this, e.argument, e, !1);
  }
  s(IQ, "ThrowStatement");
  function _Q(e) {
    this.print(e.label, e), this.tokenChar(58), this.space(), this.print(e.body, e);
  }
  s(_Q, "LabeledStatement");
  function OQ(e) {
    this.word("try"), this.space(), this.print(e.block, e), this.space(), e.handlers ? this.print(e.handlers[0], e) : this.print(e.handler, e),
    e.finalizer && (this.space(), this.word("finally"), this.space(), this.print(e.finalizer, e));
  }
  s(OQ, "TryStatement");
  function NQ(e) {
    this.word("catch"), this.space(), e.param && (this.tokenChar(40), this.print(e.param, e), this.print(e.param.typeAnnotation, e), this.tokenChar(
    41), this.space()), this.print(e.body, e);
  }
  s(NQ, "CatchClause");
  function BQ(e) {
    this.word("switch"), this.space(), this.tokenChar(40), this.print(e.discriminant, e), this.tokenChar(41), this.space(), this.tokenChar(123),
    this.printSequence(e.cases, e, {
      indent: !0,
      addNewlines(t, r) {
        if (!t && e.cases[e.cases.length - 1] === r) return -1;
      }
    }), this.rightBrace(e);
  }
  s(BQ, "SwitchStatement");
  function kQ(e) {
    e.test ? (this.word("case"), this.space(), this.print(e.test, e), this.tokenChar(58)) : (this.word("default"), this.tokenChar(58)), e.consequent.
    length && (this.newline(), this.printSequence(e.consequent, e, {
      indent: !0
    }));
  }
  s(kQ, "SwitchCase");
  function FQ() {
    this.word("debugger"), this.semicolon();
  }
  s(FQ, "DebuggerStatement");
  function jQ(e, t) {
    e.declare && (this.word("declare"), this.space());
    let {
      kind: r
    } = e;
    r === "await using" ? (this.word("await"), this.space(), this.word("using", !0)) : this.word(r, r === "using"), this.space();
    let n = !1;
    if (!VS(t))
      for (let i of e.declarations)
        i.init && (n = !0);
    if (this.printList(e.declarations, e, {
      separator: n ? function() {
        this.tokenChar(44), this.newline();
      } : void 0,
      indent: e.declarations.length > 1
    }), VS(t)) {
      if (bQ(t)) {
        if (t.init === e) return;
      } else if (t.left === e) return;
    }
    this.semicolon();
  }
  s(jQ, "VariableDeclaration");
  function LQ(e) {
    this.print(e.id, e), e.definite && this.tokenChar(33), this.print(e.id.typeAnnotation, e), e.init && (this.space(), this.tokenChar(61), this.
    space(), this.print(e.init, e));
  }
  s(LQ, "VariableDeclarator");
});

// ../node_modules/@babel/generator/lib/generators/classes.js
var GS = T((Or) => {
  "use strict";
  Object.defineProperty(Or, "__esModule", {
    value: !0
  });
  Or.ClassAccessorProperty = WQ;
  Or.ClassBody = VQ;
  Or.ClassExpression = Or.ClassDeclaration = UQ;
  Or.ClassMethod = GQ;
  Or.ClassPrivateMethod = HQ;
  Or.ClassPrivateProperty = KQ;
  Or.ClassProperty = $Q;
  Or.StaticBlock = zQ;
  Or._classMethodHead = YQ;
  var MQ = Se(), {
    isExportDefaultDeclaration: RQ,
    isExportNamedDeclaration: qQ
  } = MQ;
  function UQ(e, t) {
    (!(RQ(t) || qQ(t)) || !this._shouldPrintDecoratorsBeforeExport(t)) && this.printJoin(e.decorators, e), e.declare && (this.word("declare"),
    this.space()), e.abstract && (this.word("abstract"), this.space()), this.word("class"), e.id && (this.space(), this.print(e.id, e)), this.
    print(e.typeParameters, e), e.superClass && (this.space(), this.word("extends"), this.space(), this.print(e.superClass, e), this.print(e.
    superTypeParameters, e)), e.implements && (this.space(), this.word("implements"), this.space(), this.printList(e.implements, e)), this.space(),
    this.print(e.body, e);
  }
  s(UQ, "ClassDeclaration");
  function VQ(e) {
    if (this.tokenChar(123), e.body.length === 0)
      this.tokenChar(125);
    else {
      this.newline();
      let t = this.enterForStatementInit(!1);
      this.printSequence(e.body, e, {
        indent: !0
      }), t(), this.endsWith(10) || this.newline(), this.rightBrace(e);
    }
  }
  s(VQ, "ClassBody");
  function $Q(e) {
    var t;
    this.printJoin(e.decorators, e);
    let r = (t = e.key.loc) == null || (t = t.end) == null ? void 0 : t.line;
    r && this.catchUp(r), this.tsPrintClassMemberModifiers(e), e.computed ? (this.tokenChar(91), this.print(e.key, e), this.tokenChar(93)) :
    (this._variance(e), this.print(e.key, e)), e.optional && this.tokenChar(63), e.definite && this.tokenChar(33), this.print(e.typeAnnotation,
    e), e.value && (this.space(), this.tokenChar(61), this.space(), this.print(e.value, e)), this.semicolon();
  }
  s($Q, "ClassProperty");
  function WQ(e) {
    var t;
    this.printJoin(e.decorators, e);
    let r = (t = e.key.loc) == null || (t = t.end) == null ? void 0 : t.line;
    r && this.catchUp(r), this.tsPrintClassMemberModifiers(e), this.word("accessor", !0), this.space(), e.computed ? (this.tokenChar(91), this.
    print(e.key, e), this.tokenChar(93)) : (this._variance(e), this.print(e.key, e)), e.optional && this.tokenChar(63), e.definite && this.tokenChar(
    33), this.print(e.typeAnnotation, e), e.value && (this.space(), this.tokenChar(61), this.space(), this.print(e.value, e)), this.semicolon();
  }
  s(WQ, "ClassAccessorProperty");
  function KQ(e) {
    this.printJoin(e.decorators, e), e.static && (this.word("static"), this.space()), this.print(e.key, e), this.print(e.typeAnnotation, e),
    e.value && (this.space(), this.tokenChar(61), this.space(), this.print(e.value, e)), this.semicolon();
  }
  s(KQ, "ClassPrivateProperty");
  function GQ(e) {
    this._classMethodHead(e), this.space(), this.print(e.body, e);
  }
  s(GQ, "ClassMethod");
  function HQ(e) {
    this._classMethodHead(e), this.space(), this.print(e.body, e);
  }
  s(HQ, "ClassPrivateMethod");
  function YQ(e) {
    var t;
    this.printJoin(e.decorators, e);
    let r = (t = e.key.loc) == null || (t = t.end) == null ? void 0 : t.line;
    r && this.catchUp(r), this.tsPrintClassMemberModifiers(e), this._methodHead(e);
  }
  s(YQ, "_classMethodHead");
  function zQ(e) {
    this.word("static"), this.space(), this.tokenChar(123), e.body.length === 0 ? this.tokenChar(125) : (this.newline(), this.printSequence(
    e.body, e, {
      indent: !0
    }), this.rightBrace(e));
  }
  s(zQ, "StaticBlock");
});

// ../node_modules/@babel/generator/lib/generators/methods.js
var HS = T((Kr) => {
  "use strict";
  Object.defineProperty(Kr, "__esModule", {
    value: !0
  });
  Kr.ArrowFunctionExpression = aZ;
  Kr.FunctionDeclaration = Kr.FunctionExpression = iZ;
  Kr._functionHead = sZ;
  Kr._methodHead = rZ;
  Kr._param = tZ;
  Kr._parameters = eZ;
  Kr._params = ZQ;
  Kr._predicate = nZ;
  var JQ = Se(), XQ = is(), {
    isIdentifier: QQ
  } = JQ;
  function ZQ(e, t, r) {
    this.print(e.typeParameters, e);
    let n = lZ.call(this, t, r);
    n && this.sourceIdentifierName(n.name, n.pos), this.tokenChar(40), this._parameters(e.params, e), this.tokenChar(41);
    let i = e.type === "ArrowFunctionExpression";
    this.print(e.returnType, e, i), this._noLineTerminator = i;
  }
  s(ZQ, "_params");
  function eZ(e, t) {
    let r = this.enterForStatementInit(!1), n = e.length;
    for (let i = 0; i < n; i++)
      this._param(e[i], t), i < e.length - 1 && (this.tokenChar(44), this.space());
    r();
  }
  s(eZ, "_parameters");
  function tZ(e, t) {
    this.printJoin(e.decorators, e), this.print(e, t), e.optional && this.tokenChar(63), this.print(e.typeAnnotation, e);
  }
  s(tZ, "_param");
  function rZ(e) {
    let t = e.kind, r = e.key;
    (t === "get" || t === "set") && (this.word(t), this.space()), e.async && (this.word("async", !0), this.space()), (t === "method" || t ===
    "init") && e.generator && this.tokenChar(42), e.computed ? (this.tokenChar(91), this.print(r, e), this.tokenChar(93)) : this.print(r, e),
    e.optional && this.tokenChar(63), this._params(e, e.computed && e.key.type !== "StringLiteral" ? void 0 : e.key, void 0);
  }
  s(rZ, "_methodHead");
  function nZ(e, t) {
    e.predicate && (e.returnType || this.tokenChar(58), this.space(), this.print(e.predicate, e, t));
  }
  s(nZ, "_predicate");
  function sZ(e, t) {
    e.async && (this.word("async"), this._endsWithInnerRaw = !1, this.space()), this.word("function"), e.generator && (this._endsWithInnerRaw =
    !1, this.tokenChar(42)), this.space(), e.id && this.print(e.id, e), this._params(e, e.id, t), e.type !== "TSDeclareFunction" && this._predicate(
    e);
  }
  s(sZ, "_functionHead");
  function iZ(e, t) {
    this._functionHead(e, t), this.space(), this.print(e.body, e);
  }
  s(iZ, "FunctionExpression");
  function aZ(e, t) {
    e.async && (this.word("async", !0), this.space());
    let r;
    !this.format.retainLines && e.params.length === 1 && QQ(r = e.params[0]) && !oZ(e, r) ? this.print(r, e, !0) : this._params(e, void 0, t),
    this._predicate(e, !0), this.space(), this.printInnerComments(), this.token("=>"), this.space(), this.tokenContext |= XQ.TokenContext.arrowBody,
    this.print(e.body, e);
  }
  s(aZ, "ArrowFunctionExpression");
  function oZ(e, t) {
    var r, n;
    return !!(e.typeParameters || e.returnType || e.predicate || t.typeAnnotation || t.optional || (r = t.leadingComments) != null && r.length ||
    (n = t.trailingComments) != null && n.length);
  }
  s(oZ, "hasTypesOrComments");
  function lZ(e, t) {
    let r = e;
    if (!r && t) {
      let u = t.type;
      u === "VariableDeclarator" ? r = t.id : u === "AssignmentExpression" || u === "AssignmentPattern" ? r = t.left : u === "ObjectProperty" ||
      u === "ClassProperty" ? (!t.computed || t.key.type === "StringLiteral") && (r = t.key) : (u === "ClassPrivateProperty" || u === "Class\
AccessorProperty") && (r = t.key);
    }
    if (!r) return;
    let n;
    if (r.type === "Identifier") {
      var i, a;
      n = {
        pos: (i = r.loc) == null ? void 0 : i.start,
        name: ((a = r.loc) == null ? void 0 : a.identifierName) || r.name
      };
    } else if (r.type === "PrivateName") {
      var o;
      n = {
        pos: (o = r.loc) == null ? void 0 : o.start,
        name: "#" + r.id.name
      };
    } else if (r.type === "StringLiteral") {
      var l;
      n = {
        pos: (l = r.loc) == null ? void 0 : l.start,
        name: r.value
      };
    }
    return n;
  }
  s(lZ, "_getFuncIdName");
});

// ../node_modules/@babel/generator/lib/generators/modules.js
var Fm = T((or) => {
  "use strict";
  Object.defineProperty(or, "__esModule", {
    value: !0
  });
  or.ExportAllDeclaration = xZ;
  or.ExportDefaultDeclaration = PZ;
  or.ExportDefaultSpecifier = bZ;
  or.ExportNamedDeclaration = SZ;
  or.ExportNamespaceSpecifier = vZ;
  or.ExportSpecifier = EZ;
  or.ImportAttribute = CZ;
  or.ImportDeclaration = AZ;
  or.ImportDefaultSpecifier = gZ;
  or.ImportExpression = DZ;
  or.ImportNamespaceSpecifier = wZ;
  or.ImportSpecifier = yZ;
  or._printAttributes = TZ;
  var uZ = Se(), cZ = is(), {
    isClassDeclaration: fZ,
    isExportDefaultSpecifier: pZ,
    isExportNamespaceSpecifier: dZ,
    isImportDefaultSpecifier: hZ,
    isImportNamespaceSpecifier: mZ,
    isStatement: zS
  } = uZ;
  function yZ(e) {
    (e.importKind === "type" || e.importKind === "typeof") && (this.word(e.importKind), this.space()), this.print(e.imported, e), e.local &&
    e.local.name !== e.imported.name && (this.space(), this.word("as"), this.space(), this.print(e.local, e));
  }
  s(yZ, "ImportSpecifier");
  function gZ(e) {
    this.print(e.local, e);
  }
  s(gZ, "ImportDefaultSpecifier");
  function bZ(e) {
    this.print(e.exported, e);
  }
  s(bZ, "ExportDefaultSpecifier");
  function EZ(e) {
    e.exportKind === "type" && (this.word("type"), this.space()), this.print(e.local, e), e.exported && e.local.name !== e.exported.name && (this.
    space(), this.word("as"), this.space(), this.print(e.exported, e));
  }
  s(EZ, "ExportSpecifier");
  function vZ(e) {
    this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(e.exported, e);
  }
  s(vZ, "ExportNamespaceSpecifier");
  var YS = !1;
  function TZ(e) {
    let {
      importAttributesKeyword: t
    } = this.format, {
      attributes: r,
      assertions: n
    } = e;
    r && !t && !YS && (YS = !0, console.warn('You are using import attributes, without specifying the desired output syntax.\nPlease specify \
the "importAttributesKeyword" generator option, whose value can be one of:\n - "with"        : `import { a } from "b" with { type: "json" };`\
\n - "assert"      : `import { a } from "b" assert { type: "json" };`\n - "with-legacy" : `import { a } from "b" with type: "json";`\n'));
    let i = t === "assert" || !t && n;
    if (this.word(i ? "assert" : "with"), this.space(), !i && t !== "with") {
      this.printList(r || n, e);
      return;
    }
    this.tokenChar(123), this.space(), this.printList(r || n, e), this.space(), this.tokenChar(125);
  }
  s(TZ, "_printAttributes");
  function xZ(e) {
    var t, r;
    this.word("export"), this.space(), e.exportKind === "type" && (this.word("type"), this.space()), this.tokenChar(42), this.space(), this.
    word("from"), this.space(), (t = e.attributes) != null && t.length || (r = e.assertions) != null && r.length ? (this.print(e.source, e, !0),
    this.space(), this._printAttributes(e)) : this.print(e.source, e), this.semicolon();
  }
  s(xZ, "ExportAllDeclaration");
  function JS(e, t) {
    fZ(t.declaration) && e._shouldPrintDecoratorsBeforeExport(t) && e.printJoin(t.declaration.decorators, t);
  }
  s(JS, "maybePrintDecoratorsBeforeExport");
  function SZ(e) {
    if (JS(this, e), this.word("export"), this.space(), e.declaration) {
      let n = e.declaration;
      this.print(n, e), zS(n) || this.semicolon();
    } else {
      e.exportKind === "type" && (this.word("type"), this.space());
      let n = e.specifiers.slice(0), i = !1;
      for (; ; ) {
        let a = n[0];
        if (pZ(a) || dZ(a))
          i = !0, this.print(n.shift(), e), n.length && (this.tokenChar(44), this.space());
        else
          break;
      }
      if ((n.length || !n.length && !i) && (this.tokenChar(123), n.length && (this.space(), this.printList(n, e), this.space()), this.tokenChar(
      125)), e.source) {
        var t, r;
        this.space(), this.word("from"), this.space(), (t = e.attributes) != null && t.length || (r = e.assertions) != null && r.length ? (this.
        print(e.source, e, !0), this.space(), this._printAttributes(e)) : this.print(e.source, e);
      }
      this.semicolon();
    }
  }
  s(SZ, "ExportNamedDeclaration");
  function PZ(e) {
    JS(this, e), this.word("export"), this.noIndentInnerCommentsHere(), this.space(), this.word("default"), this.space(), this.tokenContext |=
    cZ.TokenContext.exportDefault;
    let t = e.declaration;
    this.print(t, e), zS(t) || this.semicolon();
  }
  s(PZ, "ExportDefaultDeclaration");
  function AZ(e) {
    var t, r;
    this.word("import"), this.space();
    let n = e.importKind === "type" || e.importKind === "typeof";
    n ? (this.noIndentInnerCommentsHere(), this.word(e.importKind), this.space()) : e.module ? (this.noIndentInnerCommentsHere(), this.word(
    "module"), this.space()) : e.phase && (this.noIndentInnerCommentsHere(), this.word(e.phase), this.space());
    let i = e.specifiers.slice(0), a = !!i.length;
    for (; a; ) {
      let o = i[0];
      if (hZ(o) || mZ(o))
        this.print(i.shift(), e), i.length && (this.tokenChar(44), this.space());
      else
        break;
    }
    i.length ? (this.tokenChar(123), this.space(), this.printList(i, e), this.space(), this.tokenChar(125)) : n && !a && (this.tokenChar(123),
    this.tokenChar(125)), (a || n) && (this.space(), this.word("from"), this.space()), (t = e.attributes) != null && t.length || (r = e.assertions) !=
    null && r.length ? (this.print(e.source, e, !0), this.space(), this._printAttributes(e)) : this.print(e.source, e), this.semicolon();
  }
  s(AZ, "ImportDeclaration");
  function CZ(e) {
    this.print(e.key), this.tokenChar(58), this.space(), this.print(e.value);
  }
  s(CZ, "ImportAttribute");
  function wZ(e) {
    this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(e.local, e);
  }
  s(wZ, "ImportNamespaceSpecifier");
  function DZ(e) {
    this.word("import"), e.phase && (this.tokenChar(46), this.word(e.phase)), this.tokenChar(40), this.print(e.source, e), e.options != null &&
    (this.tokenChar(44), this.space(), this.print(e.options, e)), this.tokenChar(41);
  }
  s(DZ, "ImportExpression");
});

// ../node_modules/jsesc/jsesc.js
var eP = T((eCe, ZS) => {
  "use strict";
  var XS = {}, IZ = XS.hasOwnProperty, QS = /* @__PURE__ */ s((e, t) => {
    for (let r in e)
      IZ.call(e, r) && t(r, e[r]);
  }, "forOwn"), _Z = /* @__PURE__ */ s((e, t) => (t && QS(t, (r, n) => {
    e[r] = n;
  }), e), "extend"), OZ = /* @__PURE__ */ s((e, t) => {
    let r = e.length, n = -1;
    for (; ++n < r; )
      t(e[n]);
  }, "forEach"), uo = XS.toString, NZ = Array.isArray, BZ = Buffer.isBuffer, kZ = /* @__PURE__ */ s((e) => uo.call(e) == "[object Object]", "\
isObject"), FZ = /* @__PURE__ */ s((e) => typeof e == "string" || uo.call(e) == "[object String]", "isString"), jZ = /* @__PURE__ */ s((e) => typeof e ==
  "number" || uo.call(e) == "[object Number]", "isNumber"), LZ = /* @__PURE__ */ s((e) => typeof e == "function", "isFunction"), MZ = /* @__PURE__ */ s(
  (e) => uo.call(e) == "[object Map]", "isMap"), RZ = /* @__PURE__ */ s((e) => uo.call(e) == "[object Set]", "isSet"), qZ = {
    '"': '\\"',
    "'": "\\'",
    "\\": "\\\\",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "	": "\\t"
    // `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
    // '\v': '\\x0B'
  }, UZ = /["'\\\b\f\n\r\t]/, VZ = /[0-9]/, $Z = /[ !#-&\(-\[\]-_a-~]/, os = /* @__PURE__ */ s((e, t) => {
    let r = /* @__PURE__ */ s(() => {
      c = u, ++t.indentLevel, u = t.indent.repeat(t.indentLevel);
    }, "increaseIndentation"), n = {
      escapeEverything: !1,
      minimal: !1,
      isScriptContext: !1,
      quotes: "single",
      wrap: !1,
      es6: !1,
      json: !1,
      compact: !0,
      lowercaseHex: !1,
      numbers: "decimal",
      indent: "	",
      indentLevel: 0,
      __inline1__: !1,
      __inline2__: !1
    }, i = t && t.json;
    i && (n.quotes = "double", n.wrap = !0), t = _Z(n, t), t.quotes != "single" && t.quotes != "double" && t.quotes != "backtick" && (t.quotes =
    "single");
    let a = t.quotes == "double" ? '"' : t.quotes == "backtick" ? "`" : "'", o = t.compact, l = t.lowercaseHex, u = t.indent.repeat(t.indentLevel),
    c = "", f = t.__inline1__, p = t.__inline2__, h = o ? "" : `
`, y, v = !0, d = t.numbers == "binary", b = t.numbers == "octal", E = t.numbers == "decimal", I = t.numbers == "hexadecimal";
    if (i && e && LZ(e.toJSON) && (e = e.toJSON()), !FZ(e)) {
      if (MZ(e))
        return e.size == 0 ? "new Map()" : (o || (t.__inline1__ = !0, t.__inline2__ = !1), "new Map(" + os(Array.from(e), t) + ")");
      if (RZ(e))
        return e.size == 0 ? "new Set()" : "new Set(" + os(Array.from(e), t) + ")";
      if (BZ(e))
        return e.length == 0 ? "Buffer.from([])" : "Buffer.from(" + os(Array.from(e), t) + ")";
      if (NZ(e))
        return y = [], t.wrap = !0, f && (t.__inline1__ = !1, t.__inline2__ = !0), p || r(), OZ(e, (R) => {
          v = !1, p && (t.__inline2__ = !1), y.push(
            (o || p ? "" : u) + os(R, t)
          );
        }), v ? "[]" : p ? "[" + y.join(", ") + "]" : "[" + h + y.join("," + h) + h + (o ? "" : c) + "]";
      if (jZ(e)) {
        if (i)
          return JSON.stringify(e);
        if (E)
          return String(e);
        if (I) {
          let R = e.toString(16);
          return l || (R = R.toUpperCase()), "0x" + R;
        }
        if (d)
          return "0b" + e.toString(2);
        if (b)
          return "0o" + e.toString(8);
      } else return kZ(e) ? (y = [], t.wrap = !0, r(), QS(e, (R, U) => {
        v = !1, y.push(
          (o ? "" : u) + os(R, t) + ":" + (o ? "" : " ") + os(U, t)
        );
      }), v ? "{}" : "{" + h + y.join("," + h) + h + (o ? "" : c) + "}") : i ? JSON.stringify(e) || "null" : String(e);
    }
    let O = e, k = -1, j = O.length;
    for (y = ""; ++k < j; ) {
      let R = O.charAt(k);
      if (t.es6) {
        let M = O.charCodeAt(k);
        if (
          // check if it’s the start of a surrogate pair
          M >= 55296 && M <= 56319 && // high surrogate
          j > k + 1
        ) {
          let K = O.charCodeAt(k + 1);
          if (K >= 56320 && K <= 57343) {
            let ie = ((M - 55296) * 1024 + K - 56320 + 65536).toString(16);
            l || (ie = ie.toUpperCase()), y += "\\u{" + ie + "}", ++k;
            continue;
          }
        }
      }
      if (!t.escapeEverything) {
        if ($Z.test(R)) {
          y += R;
          continue;
        }
        if (R == '"') {
          y += a == R ? '\\"' : R;
          continue;
        }
        if (R == "`") {
          y += a == R ? "\\`" : R;
          continue;
        }
        if (R == "'") {
          y += a == R ? "\\'" : R;
          continue;
        }
      }
      if (R == "\0" && !i && !VZ.test(O.charAt(k + 1))) {
        y += "\\0";
        continue;
      }
      if (UZ.test(R)) {
        y += qZ[R];
        continue;
      }
      let U = R.charCodeAt(0);
      if (t.minimal && U != 8232 && U != 8233) {
        y += R;
        continue;
      }
      let Q = U.toString(16);
      l || (Q = Q.toUpperCase());
      let W = Q.length > 2 || i, q = "\\" + (W ? "u" : "x") + ("0000" + Q).slice(W ? -4 : -2);
      y += q;
    }
    return t.wrap && (y = a + y + a), a == "`" && (y = y.replace(/\$\{/g, "\\${")), t.isScriptContext ? y.replace(/<\/(script|style)/gi, "<\\\
/$1").replace(/<!--/g, i ? "\\u003C!--" : "\\x3C!--") : y;
  }, "jsesc");
  os.version = "2.5.2";
  ZS.exports = os;
});

// ../node_modules/@babel/generator/lib/generators/types.js
var Lm = T((ft) => {
  "use strict";
  Object.defineProperty(ft, "__esModule", {
    value: !0
  });
  ft.ArgumentPlaceholder = HZ;
  ft.ArrayPattern = ft.ArrayExpression = QZ;
  ft.BigIntLiteral = aee;
  ft.BooleanLiteral = ree;
  ft.DecimalLiteral = oee;
  ft.Identifier = GZ;
  ft.NullLiteral = nee;
  ft.NumericLiteral = see;
  ft.ObjectPattern = ft.ObjectExpression = zZ;
  ft.ObjectMethod = JZ;
  ft.ObjectProperty = XZ;
  ft.PipelineBareFunction = cee;
  ft.PipelinePrimaryTopicReference = fee;
  ft.PipelineTopicExpression = uee;
  ft.RecordExpression = ZZ;
  ft.RegExpLiteral = tee;
  ft.SpreadElement = ft.RestElement = YZ;
  ft.StringLiteral = iee;
  ft.TopicReference = lee;
  ft.TupleExpression = eee;
  var WZ = Se(), rP = eP(), {
    isAssignmentPattern: KZ,
    isIdentifier: jm
  } = WZ;
  function GZ(e) {
    var t;
    this.sourceIdentifierName(((t = e.loc) == null ? void 0 : t.identifierName) || e.name), this.word(e.name);
  }
  s(GZ, "Identifier");
  function HZ() {
    this.tokenChar(63);
  }
  s(HZ, "ArgumentPlaceholder");
  function YZ(e) {
    this.token("..."), this.print(e.argument, e);
  }
  s(YZ, "RestElement");
  function zZ(e) {
    let t = e.properties;
    if (this.tokenChar(123), t.length) {
      let r = this.enterForStatementInit(!1);
      this.space(), this.printList(t, e, {
        indent: !0,
        statement: !0
      }), this.space(), r();
    }
    this.sourceWithOffset("end", e.loc, -1), this.tokenChar(125);
  }
  s(zZ, "ObjectExpression");
  function JZ(e) {
    this.printJoin(e.decorators, e), this._methodHead(e), this.space(), this.print(e.body, e);
  }
  s(JZ, "ObjectMethod");
  function XZ(e) {
    if (this.printJoin(e.decorators, e), e.computed)
      this.tokenChar(91), this.print(e.key, e), this.tokenChar(93);
    else {
      if (KZ(e.value) && jm(e.key) && e.key.name === e.value.left.name) {
        this.print(e.value, e);
        return;
      }
      if (this.print(e.key, e), e.shorthand && jm(e.key) && jm(e.value) && e.key.name === e.value.name)
        return;
    }
    this.tokenChar(58), this.space(), this.print(e.value, e);
  }
  s(XZ, "ObjectProperty");
  function QZ(e) {
    let t = e.elements, r = t.length;
    this.tokenChar(91);
    let n = this.enterForStatementInit(!1);
    for (let i = 0; i < t.length; i++) {
      let a = t[i];
      a ? (i > 0 && this.space(), this.print(a, e), i < r - 1 && this.tokenChar(44)) : this.tokenChar(44);
    }
    n(), this.tokenChar(93);
  }
  s(QZ, "ArrayExpression");
  function ZZ(e) {
    let t = e.properties, r, n;
    if (this.format.recordAndTupleSyntaxType === "bar")
      r = "{|", n = "|}";
    else {
      if (this.format.recordAndTupleSyntaxType !== "hash" && this.format.recordAndTupleSyntaxType != null)
        throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)}\
 received).`);
      r = "#{", n = "}";
    }
    this.token(r), t.length && (this.space(), this.printList(t, e, {
      indent: !0,
      statement: !0
    }), this.space()), this.token(n);
  }
  s(ZZ, "RecordExpression");
  function eee(e) {
    let t = e.elements, r = t.length, n, i;
    if (this.format.recordAndTupleSyntaxType === "bar")
      n = "[|", i = "|]";
    else if (this.format.recordAndTupleSyntaxType === "hash")
      n = "#[", i = "]";
    else
      throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
    this.token(n);
    for (let a = 0; a < t.length; a++) {
      let o = t[a];
      o && (a > 0 && this.space(), this.print(o, e), a < r - 1 && this.tokenChar(44));
    }
    this.token(i);
  }
  s(eee, "TupleExpression");
  function tee(e) {
    this.word(`/${e.pattern}/${e.flags}`);
  }
  s(tee, "RegExpLiteral");
  function ree(e) {
    this.word(e.value ? "true" : "false");
  }
  s(ree, "BooleanLiteral");
  function nee() {
    this.word("null");
  }
  s(nee, "NullLiteral");
  function see(e) {
    let t = this.getPossibleRaw(e), r = this.format.jsescOption, n = e.value, i = n + "";
    r.numbers ? this.number(rP(n, r), n) : t == null ? this.number(i, n) : this.format.minified ? this.number(t.length < i.length ? t : i, n) :
    this.number(t, n);
  }
  s(see, "NumericLiteral");
  function iee(e) {
    let t = this.getPossibleRaw(e);
    if (!this.format.minified && t !== void 0) {
      this.token(t);
      return;
    }
    let r = rP(e.value, this.format.jsescOption);
    this.token(r);
  }
  s(iee, "StringLiteral");
  function aee(e) {
    let t = this.getPossibleRaw(e);
    if (!this.format.minified && t !== void 0) {
      this.word(t);
      return;
    }
    this.word(e.value + "n");
  }
  s(aee, "BigIntLiteral");
  function oee(e) {
    let t = this.getPossibleRaw(e);
    if (!this.format.minified && t !== void 0) {
      this.word(t);
      return;
    }
    this.word(e.value + "m");
  }
  s(oee, "DecimalLiteral");
  var tP = /* @__PURE__ */ new Set(["^^", "@@", "^", "%", "#"]);
  function lee() {
    let {
      topicToken: e
    } = this.format;
    if (tP.has(e))
      this.token(e);
    else {
      let t = JSON.stringify(e), r = Array.from(tP, (n) => JSON.stringify(n));
      throw new Error(`The "topicToken" generator option must be one of ${r.join(", ")} (${t} received instead).`);
    }
  }
  s(lee, "TopicReference");
  function uee(e) {
    this.print(e.expression, e);
  }
  s(uee, "PipelineTopicExpression");
  function cee(e) {
    this.print(e.callee, e);
  }
  s(cee, "PipelineBareFunction");
  function fee() {
    this.tokenChar(35);
  }
  s(fee, "PipelinePrimaryTopicReference");
});

// ../node_modules/@babel/generator/lib/generators/flow.js
var sP = T((ce) => {
  "use strict";
  Object.defineProperty(ce, "__esModule", {
    value: !0
  });
  ce.AnyTypeAnnotation = yee;
  ce.ArrayTypeAnnotation = gee;
  ce.BooleanLiteralTypeAnnotation = Eee;
  ce.BooleanTypeAnnotation = bee;
  ce.DeclareClass = Tee;
  ce.DeclareExportAllDeclaration = Nee;
  ce.DeclareExportDeclaration = Oee;
  ce.DeclareFunction = xee;
  ce.DeclareInterface = Aee;
  ce.DeclareModule = Cee;
  ce.DeclareModuleExports = wee;
  ce.DeclareOpaqueType = Iee;
  ce.DeclareTypeAlias = Dee;
  ce.DeclareVariable = _ee;
  ce.DeclaredPredicate = Pee;
  ce.EmptyTypeAnnotation = ete;
  ce.EnumBooleanBody = kee;
  ce.EnumBooleanMember = Ree;
  ce.EnumDeclaration = Bee;
  ce.EnumDefaultedMember = Mee;
  ce.EnumNumberBody = Fee;
  ce.EnumNumberMember = qee;
  ce.EnumStringBody = jee;
  ce.EnumStringMember = Uee;
  ce.EnumSymbolBody = Lee;
  ce.ExistsTypeAnnotation = $ee;
  ce.FunctionTypeAnnotation = Wee;
  ce.FunctionTypeParam = Kee;
  ce.IndexedAccessType = Ate;
  ce.InferredPredicate = See;
  ce.InterfaceDeclaration = zee;
  ce.GenericTypeAnnotation = ce.ClassImplements = ce.InterfaceExtends = Gee;
  ce.InterfaceTypeAnnotation = Xee;
  ce.IntersectionTypeAnnotation = Qee;
  ce.MixedTypeAnnotation = Zee;
  ce.NullLiteralTypeAnnotation = vee;
  ce.NullableTypeAnnotation = tte;
  Object.defineProperty(ce, "NumberLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return nP.NumericLiteral;
    }, "get")
  });
  ce.NumberTypeAnnotation = rte;
  ce.ObjectTypeAnnotation = pte;
  ce.ObjectTypeCallProperty = hte;
  ce.ObjectTypeIndexer = mte;
  ce.ObjectTypeInternalSlot = dte;
  ce.ObjectTypeProperty = yte;
  ce.ObjectTypeSpreadProperty = gte;
  ce.OpaqueType = fte;
  ce.OptionalIndexedAccessType = Cte;
  ce.QualifiedTypeIdentifier = bte;
  Object.defineProperty(ce, "StringLiteralTypeAnnotation", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return nP.StringLiteral;
    }, "get")
  });
  ce.StringTypeAnnotation = nte;
  ce.SymbolTypeAnnotation = Ete;
  ce.ThisTypeAnnotation = ste;
  ce.TupleTypeAnnotation = ite;
  ce.TypeAlias = ote;
  ce.TypeAnnotation = lte;
  ce.TypeCastExpression = xte;
  ce.TypeParameter = cte;
  ce.TypeParameterDeclaration = ce.TypeParameterInstantiation = ute;
  ce.TypeofTypeAnnotation = ate;
  ce.UnionTypeAnnotation = Tte;
  ce.Variance = Ste;
  ce.VoidTypeAnnotation = Pte;
  ce._interfaceish = Hee;
  ce._variance = Yee;
  var pee = Se(), dee = Fm(), hee = is(), nP = Lm(), {
    isDeclareExportDeclaration: wu,
    isStatement: mee
  } = pee;
  function yee() {
    this.word("any");
  }
  s(yee, "AnyTypeAnnotation");
  function gee(e) {
    this.print(e.elementType, e, !0), this.tokenChar(91), this.tokenChar(93);
  }
  s(gee, "ArrayTypeAnnotation");
  function bee() {
    this.word("boolean");
  }
  s(bee, "BooleanTypeAnnotation");
  function Eee(e) {
    this.word(e.value ? "true" : "false");
  }
  s(Eee, "BooleanLiteralTypeAnnotation");
  function vee() {
    this.word("null");
  }
  s(vee, "NullLiteralTypeAnnotation");
  function Tee(e, t) {
    wu(t) || (this.word("declare"), this.space()), this.word("class"), this.space(), this._interfaceish(e);
  }
  s(Tee, "DeclareClass");
  function xee(e, t) {
    wu(t) || (this.word("declare"), this.space()), this.word("function"), this.space(), this.print(e.id, e), this.print(e.id.typeAnnotation.
    typeAnnotation, e), e.predicate && (this.space(), this.print(e.predicate, e)), this.semicolon();
  }
  s(xee, "DeclareFunction");
  function See() {
    this.tokenChar(37), this.word("checks");
  }
  s(See, "InferredPredicate");
  function Pee(e) {
    this.tokenChar(37), this.word("checks"), this.tokenChar(40), this.print(e.value, e), this.tokenChar(41);
  }
  s(Pee, "DeclaredPredicate");
  function Aee(e) {
    this.word("declare"), this.space(), this.InterfaceDeclaration(e);
  }
  s(Aee, "DeclareInterface");
  function Cee(e) {
    this.word("declare"), this.space(), this.word("module"), this.space(), this.print(e.id, e), this.space(), this.print(e.body, e);
  }
  s(Cee, "DeclareModule");
  function wee(e) {
    this.word("declare"), this.space(), this.word("module"), this.tokenChar(46), this.word("exports"), this.print(e.typeAnnotation, e);
  }
  s(wee, "DeclareModuleExports");
  function Dee(e) {
    this.word("declare"), this.space(), this.TypeAlias(e);
  }
  s(Dee, "DeclareTypeAlias");
  function Iee(e, t) {
    wu(t) || (this.word("declare"), this.space()), this.OpaqueType(e);
  }
  s(Iee, "DeclareOpaqueType");
  function _ee(e, t) {
    wu(t) || (this.word("declare"), this.space()), this.word("var"), this.space(), this.print(e.id, e), this.print(e.id.typeAnnotation, e), this.
    semicolon();
  }
  s(_ee, "DeclareVariable");
  function Oee(e) {
    this.word("declare"), this.space(), this.word("export"), this.space(), e.default && (this.word("default"), this.space()), Vee.call(this,
    e);
  }
  s(Oee, "DeclareExportDeclaration");
  function Nee(e) {
    this.word("declare"), this.space(), dee.ExportAllDeclaration.call(this, e);
  }
  s(Nee, "DeclareExportAllDeclaration");
  function Bee(e) {
    let {
      id: t,
      body: r
    } = e;
    this.word("enum"), this.space(), this.print(t, e), this.print(r, e);
  }
  s(Bee, "EnumDeclaration");
  function Du(e, t, r) {
    r && (e.space(), e.word("of"), e.space(), e.word(t)), e.space();
  }
  s(Du, "enumExplicitType");
  function Iu(e, t) {
    let {
      members: r
    } = t;
    e.token("{"), e.indent(), e.newline();
    for (let n of r)
      e.print(n, t), e.newline();
    t.hasUnknownMembers && (e.token("..."), e.newline()), e.dedent(), e.token("}");
  }
  s(Iu, "enumBody");
  function kee(e) {
    let {
      explicitType: t
    } = e;
    Du(this, "boolean", t), Iu(this, e);
  }
  s(kee, "EnumBooleanBody");
  function Fee(e) {
    let {
      explicitType: t
    } = e;
    Du(this, "number", t), Iu(this, e);
  }
  s(Fee, "EnumNumberBody");
  function jee(e) {
    let {
      explicitType: t
    } = e;
    Du(this, "string", t), Iu(this, e);
  }
  s(jee, "EnumStringBody");
  function Lee(e) {
    Du(this, "symbol", !0), Iu(this, e);
  }
  s(Lee, "EnumSymbolBody");
  function Mee(e) {
    let {
      id: t
    } = e;
    this.print(t, e), this.tokenChar(44);
  }
  s(Mee, "EnumDefaultedMember");
  function Mm(e, t) {
    let {
      id: r,
      init: n
    } = t;
    e.print(r, t), e.space(), e.token("="), e.space(), e.print(n, t), e.token(",");
  }
  s(Mm, "enumInitializedMember");
  function Ree(e) {
    Mm(this, e);
  }
  s(Ree, "EnumBooleanMember");
  function qee(e) {
    Mm(this, e);
  }
  s(qee, "EnumNumberMember");
  function Uee(e) {
    Mm(this, e);
  }
  s(Uee, "EnumStringMember");
  function Vee(e) {
    if (e.declaration) {
      let t = e.declaration;
      this.print(t, e), mee(t) || this.semicolon();
    } else
      this.tokenChar(123), e.specifiers.length && (this.space(), this.printList(e.specifiers, e), this.space()), this.tokenChar(125), e.source &&
      (this.space(), this.word("from"), this.space(), this.print(e.source, e)), this.semicolon();
  }
  s(Vee, "FlowExportDeclaration");
  function $ee() {
    this.tokenChar(42);
  }
  s($ee, "ExistsTypeAnnotation");
  function Wee(e, t) {
    this.print(e.typeParameters, e), this.tokenChar(40), e.this && (this.word("this"), this.tokenChar(58), this.space(), this.print(e.this.typeAnnotation,
    e), (e.params.length || e.rest) && (this.tokenChar(44), this.space())), this.printList(e.params, e), e.rest && (e.params.length && (this.
    tokenChar(44), this.space()), this.token("..."), this.print(e.rest, e)), this.tokenChar(41);
    let r = t?.type;
    r != null && (r === "ObjectTypeCallProperty" || r === "ObjectTypeInternalSlot" || r === "DeclareFunction" || r === "ObjectTypeProperty" &&
    t.method) ? this.tokenChar(58) : (this.space(), this.token("=>")), this.space(), this.print(e.returnType, e);
  }
  s(Wee, "FunctionTypeAnnotation");
  function Kee(e) {
    this.print(e.name, e), e.optional && this.tokenChar(63), e.name && (this.tokenChar(58), this.space()), this.print(e.typeAnnotation, e);
  }
  s(Kee, "FunctionTypeParam");
  function Gee(e) {
    this.print(e.id, e), this.print(e.typeParameters, e, !0);
  }
  s(Gee, "InterfaceExtends");
  function Hee(e) {
    var t;
    if (this.print(e.id, e), this.print(e.typeParameters, e), (t = e.extends) != null && t.length && (this.space(), this.word("extends"), this.
    space(), this.printList(e.extends, e)), e.type === "DeclareClass") {
      var r, n;
      (r = e.mixins) != null && r.length && (this.space(), this.word("mixins"), this.space(), this.printList(e.mixins, e)), (n = e.implements) !=
      null && n.length && (this.space(), this.word("implements"), this.space(), this.printList(e.implements, e));
    }
    this.space(), this.print(e.body, e);
  }
  s(Hee, "_interfaceish");
  function Yee(e) {
    var t;
    let r = (t = e.variance) == null ? void 0 : t.kind;
    r != null && (r === "plus" ? this.tokenChar(43) : r === "minus" && this.tokenChar(45));
  }
  s(Yee, "_variance");
  function zee(e) {
    this.word("interface"), this.space(), this._interfaceish(e);
  }
  s(zee, "InterfaceDeclaration");
  function Jee() {
    this.space(), this.tokenChar(38), this.space();
  }
  s(Jee, "andSeparator");
  function Xee(e) {
    var t;
    this.word("interface"), (t = e.extends) != null && t.length && (this.space(), this.word("extends"), this.space(), this.printList(e.extends,
    e)), this.space(), this.print(e.body, e);
  }
  s(Xee, "InterfaceTypeAnnotation");
  function Qee(e) {
    this.printJoin(e.types, e, {
      separator: Jee
    });
  }
  s(Qee, "IntersectionTypeAnnotation");
  function Zee() {
    this.word("mixed");
  }
  s(Zee, "MixedTypeAnnotation");
  function ete() {
    this.word("empty");
  }
  s(ete, "EmptyTypeAnnotation");
  function tte(e) {
    this.tokenChar(63), this.print(e.typeAnnotation, e);
  }
  s(tte, "NullableTypeAnnotation");
  function rte() {
    this.word("number");
  }
  s(rte, "NumberTypeAnnotation");
  function nte() {
    this.word("string");
  }
  s(nte, "StringTypeAnnotation");
  function ste() {
    this.word("this");
  }
  s(ste, "ThisTypeAnnotation");
  function ite(e) {
    this.tokenChar(91), this.printList(e.types, e), this.tokenChar(93);
  }
  s(ite, "TupleTypeAnnotation");
  function ate(e) {
    this.word("typeof"), this.space(), this.print(e.argument, e);
  }
  s(ate, "TypeofTypeAnnotation");
  function ote(e) {
    this.word("type"), this.space(), this.print(e.id, e), this.print(e.typeParameters, e), this.space(), this.tokenChar(61), this.space(), this.
    print(e.right, e), this.semicolon();
  }
  s(ote, "TypeAlias");
  function lte(e, t) {
    this.tokenChar(58), this.space(), t.type === "ArrowFunctionExpression" ? this.tokenContext |= hee.TokenContext.arrowFlowReturnType : e.optional &&
    this.tokenChar(63), this.print(e.typeAnnotation, e);
  }
  s(lte, "TypeAnnotation");
  function ute(e) {
    this.tokenChar(60), this.printList(e.params, e, {}), this.tokenChar(62);
  }
  s(ute, "TypeParameterInstantiation");
  function cte(e) {
    this._variance(e), this.word(e.name), e.bound && this.print(e.bound, e), e.default && (this.space(), this.tokenChar(61), this.space(), this.
    print(e.default, e));
  }
  s(cte, "TypeParameter");
  function fte(e) {
    this.word("opaque"), this.space(), this.word("type"), this.space(), this.print(e.id, e), this.print(e.typeParameters, e), e.supertype &&
    (this.tokenChar(58), this.space(), this.print(e.supertype, e)), e.impltype && (this.space(), this.tokenChar(61), this.space(), this.print(
    e.impltype, e)), this.semicolon();
  }
  s(fte, "OpaqueType");
  function pte(e) {
    e.exact ? this.token("{|") : this.tokenChar(123);
    let t = [...e.properties, ...e.callProperties || [], ...e.indexers || [], ...e.internalSlots || []];
    t.length && (this.newline(), this.space(), this.printJoin(t, e, {
      addNewlines(r) {
        if (r && !t[0]) return 1;
      },
      indent: !0,
      statement: !0,
      iterator: /* @__PURE__ */ s(() => {
        (t.length !== 1 || e.inexact) && (this.tokenChar(44), this.space());
      }, "iterator")
    }), this.space()), e.inexact && (this.indent(), this.token("..."), t.length && this.newline(), this.dedent()), e.exact ? this.token("|}") :
    this.tokenChar(125);
  }
  s(pte, "ObjectTypeAnnotation");
  function dte(e) {
    e.static && (this.word("static"), this.space()), this.tokenChar(91), this.tokenChar(91), this.print(e.id, e), this.tokenChar(93), this.tokenChar(
    93), e.optional && this.tokenChar(63), e.method || (this.tokenChar(58), this.space()), this.print(e.value, e);
  }
  s(dte, "ObjectTypeInternalSlot");
  function hte(e) {
    e.static && (this.word("static"), this.space()), this.print(e.value, e);
  }
  s(hte, "ObjectTypeCallProperty");
  function mte(e) {
    e.static && (this.word("static"), this.space()), this._variance(e), this.tokenChar(91), e.id && (this.print(e.id, e), this.tokenChar(58),
    this.space()), this.print(e.key, e), this.tokenChar(93), this.tokenChar(58), this.space(), this.print(e.value, e);
  }
  s(mte, "ObjectTypeIndexer");
  function yte(e) {
    e.proto && (this.word("proto"), this.space()), e.static && (this.word("static"), this.space()), (e.kind === "get" || e.kind === "set") &&
    (this.word(e.kind), this.space()), this._variance(e), this.print(e.key, e), e.optional && this.tokenChar(63), e.method || (this.tokenChar(
    58), this.space()), this.print(e.value, e);
  }
  s(yte, "ObjectTypeProperty");
  function gte(e) {
    this.token("..."), this.print(e.argument, e);
  }
  s(gte, "ObjectTypeSpreadProperty");
  function bte(e) {
    this.print(e.qualification, e), this.tokenChar(46), this.print(e.id, e);
  }
  s(bte, "QualifiedTypeIdentifier");
  function Ete() {
    this.word("symbol");
  }
  s(Ete, "SymbolTypeAnnotation");
  function vte() {
    this.space(), this.tokenChar(124), this.space();
  }
  s(vte, "orSeparator");
  function Tte(e) {
    this.printJoin(e.types, e, {
      separator: vte
    });
  }
  s(Tte, "UnionTypeAnnotation");
  function xte(e) {
    this.tokenChar(40), this.print(e.expression, e), this.print(e.typeAnnotation, e), this.tokenChar(41);
  }
  s(xte, "TypeCastExpression");
  function Ste(e) {
    e.kind === "plus" ? this.tokenChar(43) : this.tokenChar(45);
  }
  s(Ste, "Variance");
  function Pte() {
    this.word("void");
  }
  s(Pte, "VoidTypeAnnotation");
  function Ate(e) {
    this.print(e.objectType, e, !0), this.tokenChar(91), this.print(e.indexType, e), this.tokenChar(93);
  }
  s(Ate, "IndexedAccessType");
  function Cte(e) {
    this.print(e.objectType, e), e.optional && this.token("?."), this.tokenChar(91), this.print(e.indexType, e), this.tokenChar(93);
  }
  s(Cte, "OptionalIndexedAccessType");
});

// ../node_modules/@babel/generator/lib/generators/base.js
var iP = T((On) => {
  "use strict";
  Object.defineProperty(On, "__esModule", {
    value: !0
  });
  On.BlockStatement = Ite;
  On.Directive = _te;
  On.DirectiveLiteral = Bte;
  On.File = wte;
  On.InterpreterDirective = kte;
  On.Placeholder = Fte;
  On.Program = Dte;
  function wte(e) {
    e.program && this.print(e.program.interpreter, e), this.print(e.program, e);
  }
  s(wte, "File");
  function Dte(e) {
    var t;
    this.noIndentInnerCommentsHere(), this.printInnerComments();
    let r = (t = e.directives) == null ? void 0 : t.length;
    if (r) {
      var n;
      let i = e.body.length ? 2 : 1;
      this.printSequence(e.directives, e, {
        trailingCommentsLineOffset: i
      }), (n = e.directives[r - 1].trailingComments) != null && n.length || this.newline(i);
    }
    this.printSequence(e.body, e);
  }
  s(Dte, "Program");
  function Ite(e) {
    var t;
    this.tokenChar(123);
    let r = (t = e.directives) == null ? void 0 : t.length;
    if (r) {
      var n;
      let a = e.body.length ? 2 : 1;
      this.printSequence(e.directives, e, {
        indent: !0,
        trailingCommentsLineOffset: a
      }), (n = e.directives[r - 1].trailingComments) != null && n.length || this.newline(a);
    }
    let i = this.enterForStatementInit(!1);
    this.printSequence(e.body, e, {
      indent: !0
    }), i(), this.rightBrace(e);
  }
  s(Ite, "BlockStatement");
  function _te(e) {
    this.print(e.value, e), this.semicolon();
  }
  s(_te, "Directive");
  var Ote = /(?:^|[^\\])(?:\\\\)*'/, Nte = /(?:^|[^\\])(?:\\\\)*"/;
  function Bte(e) {
    let t = this.getPossibleRaw(e);
    if (!this.format.minified && t !== void 0) {
      this.token(t);
      return;
    }
    let {
      value: r
    } = e;
    if (!Nte.test(r))
      this.token(`"${r}"`);
    else if (!Ote.test(r))
      this.token(`'${r}'`);
    else
      throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
  }
  s(Bte, "DirectiveLiteral");
  function kte(e) {
    this.token(`#!${e.value}`), this.newline(1, !0);
  }
  s(kte, "InterpreterDirective");
  function Fte(e) {
    this.token("%%"), this.print(e.name), this.token("%%"), e.expectedNode === "Statement" && this.semicolon();
  }
  s(Fte, "Placeholder");
});

// ../node_modules/@babel/generator/lib/generators/jsx.js
var aP = T((Ut) => {
  "use strict";
  Object.defineProperty(Ut, "__esModule", {
    value: !0
  });
  Ut.JSXAttribute = jte;
  Ut.JSXClosingElement = Hte;
  Ut.JSXClosingFragment = Xte;
  Ut.JSXElement = Wte;
  Ut.JSXEmptyExpression = Yte;
  Ut.JSXExpressionContainer = Ute;
  Ut.JSXFragment = zte;
  Ut.JSXIdentifier = Lte;
  Ut.JSXMemberExpression = Rte;
  Ut.JSXNamespacedName = Mte;
  Ut.JSXOpeningElement = Gte;
  Ut.JSXOpeningFragment = Jte;
  Ut.JSXSpreadAttribute = qte;
  Ut.JSXSpreadChild = Vte;
  Ut.JSXText = $te;
  function jte(e) {
    this.print(e.name, e), e.value && (this.tokenChar(61), this.print(e.value, e));
  }
  s(jte, "JSXAttribute");
  function Lte(e) {
    this.word(e.name);
  }
  s(Lte, "JSXIdentifier");
  function Mte(e) {
    this.print(e.namespace, e), this.tokenChar(58), this.print(e.name, e);
  }
  s(Mte, "JSXNamespacedName");
  function Rte(e) {
    this.print(e.object, e), this.tokenChar(46), this.print(e.property, e);
  }
  s(Rte, "JSXMemberExpression");
  function qte(e) {
    this.tokenChar(123), this.token("..."), this.print(e.argument, e), this.tokenChar(125);
  }
  s(qte, "JSXSpreadAttribute");
  function Ute(e) {
    this.tokenChar(123), this.print(e.expression, e), this.tokenChar(125);
  }
  s(Ute, "JSXExpressionContainer");
  function Vte(e) {
    this.tokenChar(123), this.token("..."), this.print(e.expression, e), this.tokenChar(125);
  }
  s(Vte, "JSXSpreadChild");
  function $te(e) {
    let t = this.getPossibleRaw(e);
    t !== void 0 ? this.token(t, !0) : this.token(e.value, !0);
  }
  s($te, "JSXText");
  function Wte(e) {
    let t = e.openingElement;
    if (this.print(t, e), !t.selfClosing) {
      this.indent();
      for (let r of e.children)
        this.print(r, e);
      this.dedent(), this.print(e.closingElement, e);
    }
  }
  s(Wte, "JSXElement");
  function Kte() {
    this.space();
  }
  s(Kte, "spaceSeparator");
  function Gte(e) {
    this.tokenChar(60), this.print(e.name, e), this.print(e.typeParameters, e), e.attributes.length > 0 && (this.space(), this.printJoin(e.attributes,
    e, {
      separator: Kte
    })), e.selfClosing ? (this.space(), this.token("/>")) : this.tokenChar(62);
  }
  s(Gte, "JSXOpeningElement");
  function Hte(e) {
    this.token("</"), this.print(e.name, e), this.tokenChar(62);
  }
  s(Hte, "JSXClosingElement");
  function Yte() {
    this.printInnerComments();
  }
  s(Yte, "JSXEmptyExpression");
  function zte(e) {
    this.print(e.openingFragment, e), this.indent();
    for (let t of e.children)
      this.print(t, e);
    this.dedent(), this.print(e.closingFragment, e);
  }
  s(zte, "JSXFragment");
  function Jte() {
    this.tokenChar(60), this.tokenChar(62);
  }
  s(Jte, "JSXOpeningFragment");
  function Xte() {
    this.token("</"), this.tokenChar(62);
  }
  s(Xte, "JSXClosingFragment");
});

// ../node_modules/@babel/generator/lib/generators/typescript.js
var uP = T((oe) => {
  "use strict";
  Object.defineProperty(oe, "__esModule", {
    value: !0
  });
  oe.TSAnyKeyword = fre;
  oe.TSArrayType = Bre;
  oe.TSSatisfiesExpression = oe.TSAsExpression = Xre;
  oe.TSBigIntKeyword = pre;
  oe.TSBooleanKeyword = yre;
  oe.TSCallSignatureDeclaration = ire;
  oe.TSConditionalType = qre;
  oe.TSConstructSignatureDeclaration = are;
  oe.TSConstructorType = Cre;
  oe.TSDeclareFunction = rre;
  oe.TSDeclareMethod = nre;
  oe.TSEnumDeclaration = ene;
  oe.TSEnumMember = tne;
  oe.TSExportAssignment = lne;
  oe.TSExpressionWithTypeArguments = Hre;
  oe.TSExternalModuleReference = ane;
  oe.TSFunctionType = Are;
  oe.TSImportEqualsDeclaration = ine;
  oe.TSImportType = sne;
  oe.TSIndexSignature = cre;
  oe.TSIndexedAccessType = Wre;
  oe.TSInferType = Ure;
  oe.TSInstantiationExpression = Zre;
  oe.TSInterfaceBody = zre;
  oe.TSInterfaceDeclaration = Yre;
  oe.TSIntersectionType = Rre;
  oe.TSIntrinsicKeyword = Sre;
  oe.TSLiteralType = Gre;
  oe.TSMappedType = Kre;
  oe.TSMethodSignature = ure;
  oe.TSModuleBlock = nne;
  oe.TSModuleDeclaration = rne;
  oe.TSNamedTupleMember = Lre;
  oe.TSNamespaceExportDeclaration = une;
  oe.TSNeverKeyword = xre;
  oe.TSNonNullExpression = one;
  oe.TSNullKeyword = Tre;
  oe.TSNumberKeyword = hre;
  oe.TSObjectKeyword = mre;
  oe.TSOptionalType = Fre;
  oe.TSParameterProperty = tre;
  oe.TSParenthesizedType = Vre;
  oe.TSPropertySignature = ore;
  oe.TSQualifiedName = sre;
  oe.TSRestType = jre;
  oe.TSStringKeyword = gre;
  oe.TSSymbolKeyword = bre;
  oe.TSThisType = Pre;
  oe.TSTupleType = kre;
  oe.TSTypeAliasDeclaration = Jre;
  oe.TSTypeAnnotation = Qte;
  oe.TSTypeAssertion = Qre;
  oe.TSTypeLiteral = Ore;
  oe.TSTypeOperator = $re;
  oe.TSTypeParameter = ere;
  oe.TSTypeParameterDeclaration = oe.TSTypeParameterInstantiation = Zte;
  oe.TSTypePredicate = Ire;
  oe.TSTypeQuery = _re;
  oe.TSTypeReference = Dre;
  oe.TSUndefinedKeyword = vre;
  oe.TSUnionType = Mre;
  oe.TSUnknownKeyword = dre;
  oe.TSVoidKeyword = Ere;
  oe.tsPrintClassMemberModifiers = fne;
  oe.tsPrintFunctionOrConstructorType = wre;
  oe.tsPrintPropertyOrMethodName = lre;
  oe.tsPrintSignatureDeclarationBase = cne;
  oe.tsPrintTypeLiteralOrInterfaceBody = Nre;
  function Qte(e) {
    this.tokenChar(58), this.space(), e.optional && this.tokenChar(63), this.print(e.typeAnnotation, e);
  }
  s(Qte, "TSTypeAnnotation");
  function Zte(e, t) {
    this.tokenChar(60), this.printList(e.params, e, {}), t.type === "ArrowFunctionExpression" && e.params.length === 1 && this.tokenChar(44),
    this.tokenChar(62);
  }
  s(Zte, "TSTypeParameterInstantiation");
  function ere(e) {
    e.in && (this.word("in"), this.space()), e.out && (this.word("out"), this.space()), this.word(e.name), e.constraint && (this.space(), this.
    word("extends"), this.space(), this.print(e.constraint, e)), e.default && (this.space(), this.tokenChar(61), this.space(), this.print(e.
    default, e));
  }
  s(ere, "TSTypeParameter");
  function tre(e) {
    e.accessibility && (this.word(e.accessibility), this.space()), e.readonly && (this.word("readonly"), this.space()), this._param(e.parameter);
  }
  s(tre, "TSParameterProperty");
  function rre(e, t) {
    e.declare && (this.word("declare"), this.space()), this._functionHead(e, t), this.tokenChar(59);
  }
  s(rre, "TSDeclareFunction");
  function nre(e) {
    this._classMethodHead(e), this.tokenChar(59);
  }
  s(nre, "TSDeclareMethod");
  function sre(e) {
    this.print(e.left, e), this.tokenChar(46), this.print(e.right, e);
  }
  s(sre, "TSQualifiedName");
  function ire(e) {
    this.tsPrintSignatureDeclarationBase(e), this.tokenChar(59);
  }
  s(ire, "TSCallSignatureDeclaration");
  function are(e) {
    this.word("new"), this.space(), this.tsPrintSignatureDeclarationBase(e), this.tokenChar(59);
  }
  s(are, "TSConstructSignatureDeclaration");
  function ore(e) {
    let {
      readonly: t
    } = e;
    t && (this.word("readonly"), this.space()), this.tsPrintPropertyOrMethodName(e), this.print(e.typeAnnotation, e), this.tokenChar(59);
  }
  s(ore, "TSPropertySignature");
  function lre(e) {
    e.computed && this.tokenChar(91), this.print(e.key, e), e.computed && this.tokenChar(93), e.optional && this.tokenChar(63);
  }
  s(lre, "tsPrintPropertyOrMethodName");
  function ure(e) {
    let {
      kind: t
    } = e;
    (t === "set" || t === "get") && (this.word(t), this.space()), this.tsPrintPropertyOrMethodName(e), this.tsPrintSignatureDeclarationBase(
    e), this.tokenChar(59);
  }
  s(ure, "TSMethodSignature");
  function cre(e) {
    let {
      readonly: t,
      static: r
    } = e;
    r && (this.word("static"), this.space()), t && (this.word("readonly"), this.space()), this.tokenChar(91), this._parameters(e.parameters,
    e), this.tokenChar(93), this.print(e.typeAnnotation, e), this.tokenChar(59);
  }
  s(cre, "TSIndexSignature");
  function fre() {
    this.word("any");
  }
  s(fre, "TSAnyKeyword");
  function pre() {
    this.word("bigint");
  }
  s(pre, "TSBigIntKeyword");
  function dre() {
    this.word("unknown");
  }
  s(dre, "TSUnknownKeyword");
  function hre() {
    this.word("number");
  }
  s(hre, "TSNumberKeyword");
  function mre() {
    this.word("object");
  }
  s(mre, "TSObjectKeyword");
  function yre() {
    this.word("boolean");
  }
  s(yre, "TSBooleanKeyword");
  function gre() {
    this.word("string");
  }
  s(gre, "TSStringKeyword");
  function bre() {
    this.word("symbol");
  }
  s(bre, "TSSymbolKeyword");
  function Ere() {
    this.word("void");
  }
  s(Ere, "TSVoidKeyword");
  function vre() {
    this.word("undefined");
  }
  s(vre, "TSUndefinedKeyword");
  function Tre() {
    this.word("null");
  }
  s(Tre, "TSNullKeyword");
  function xre() {
    this.word("never");
  }
  s(xre, "TSNeverKeyword");
  function Sre() {
    this.word("intrinsic");
  }
  s(Sre, "TSIntrinsicKeyword");
  function Pre() {
    this.word("this");
  }
  s(Pre, "TSThisType");
  function Are(e) {
    this.tsPrintFunctionOrConstructorType(e);
  }
  s(Are, "TSFunctionType");
  function Cre(e) {
    e.abstract && (this.word("abstract"), this.space()), this.word("new"), this.space(), this.tsPrintFunctionOrConstructorType(e);
  }
  s(Cre, "TSConstructorType");
  function wre(e) {
    let {
      typeParameters: t
    } = e, r = e.parameters;
    this.print(t, e), this.tokenChar(40), this._parameters(r, e), this.tokenChar(41), this.space(), this.token("=>"), this.space();
    let n = e.typeAnnotation;
    this.print(n.typeAnnotation, e);
  }
  s(wre, "tsPrintFunctionOrConstructorType");
  function Dre(e) {
    this.print(e.typeName, e, !0), this.print(e.typeParameters, e, !0);
  }
  s(Dre, "TSTypeReference");
  function Ire(e) {
    e.asserts && (this.word("asserts"), this.space()), this.print(e.parameterName), e.typeAnnotation && (this.space(), this.word("is"), this.
    space(), this.print(e.typeAnnotation.typeAnnotation));
  }
  s(Ire, "TSTypePredicate");
  function _re(e) {
    this.word("typeof"), this.space(), this.print(e.exprName), e.typeParameters && this.print(e.typeParameters, e);
  }
  s(_re, "TSTypeQuery");
  function Ore(e) {
    this.tsPrintTypeLiteralOrInterfaceBody(e.members, e);
  }
  s(Ore, "TSTypeLiteral");
  function Nre(e, t) {
    Rm(this, e, t);
  }
  s(Nre, "tsPrintTypeLiteralOrInterfaceBody");
  function Rm(e, t, r) {
    if (e.token("{"), t.length) {
      e.indent(), e.newline();
      for (let n of t)
        e.print(n, r), e.newline();
      e.dedent();
    }
    e.rightBrace(r);
  }
  s(Rm, "tsPrintBraced");
  function Bre(e) {
    this.print(e.elementType, e, !0), this.token("[]");
  }
  s(Bre, "TSArrayType");
  function kre(e) {
    this.tokenChar(91), this.printList(e.elementTypes, e), this.tokenChar(93);
  }
  s(kre, "TSTupleType");
  function Fre(e) {
    this.print(e.typeAnnotation, e), this.tokenChar(63);
  }
  s(Fre, "TSOptionalType");
  function jre(e) {
    this.token("..."), this.print(e.typeAnnotation, e);
  }
  s(jre, "TSRestType");
  function Lre(e) {
    this.print(e.label, e), e.optional && this.tokenChar(63), this.tokenChar(58), this.space(), this.print(e.elementType, e);
  }
  s(Lre, "TSNamedTupleMember");
  function Mre(e) {
    lP(this, e, "|");
  }
  s(Mre, "TSUnionType");
  function Rre(e) {
    lP(this, e, "&");
  }
  s(Rre, "TSIntersectionType");
  function lP(e, t, r) {
    e.printJoin(t.types, t, {
      separator() {
        this.space(), this.token(r), this.space();
      }
    });
  }
  s(lP, "tsPrintUnionOrIntersectionType");
  function qre(e) {
    this.print(e.checkType), this.space(), this.word("extends"), this.space(), this.print(e.extendsType), this.space(), this.tokenChar(63), this.
    space(), this.print(e.trueType), this.space(), this.tokenChar(58), this.space(), this.print(e.falseType);
  }
  s(qre, "TSConditionalType");
  function Ure(e) {
    this.token("infer"), this.space(), this.print(e.typeParameter);
  }
  s(Ure, "TSInferType");
  function Vre(e) {
    this.tokenChar(40), this.print(e.typeAnnotation, e), this.tokenChar(41);
  }
  s(Vre, "TSParenthesizedType");
  function $re(e) {
    this.word(e.operator), this.space(), this.print(e.typeAnnotation, e);
  }
  s($re, "TSTypeOperator");
  function Wre(e) {
    this.print(e.objectType, e, !0), this.tokenChar(91), this.print(e.indexType, e), this.tokenChar(93);
  }
  s(Wre, "TSIndexedAccessType");
  function Kre(e) {
    let {
      nameType: t,
      optional: r,
      readonly: n,
      typeParameter: i,
      typeAnnotation: a
    } = e;
    this.tokenChar(123), this.space(), n && (oP(this, n), this.word("readonly"), this.space()), this.tokenChar(91), this.word(i.name), this.
    space(), this.word("in"), this.space(), this.print(i.constraint, i), t && (this.space(), this.word("as"), this.space(), this.print(t, e)),
    this.tokenChar(93), r && (oP(this, r), this.tokenChar(63)), a && (this.tokenChar(58), this.space(), this.print(a, e)), this.space(), this.
    tokenChar(125);
  }
  s(Kre, "TSMappedType");
  function oP(e, t) {
    t !== !0 && e.token(t);
  }
  s(oP, "tokenIfPlusMinus");
  function Gre(e) {
    this.print(e.literal, e);
  }
  s(Gre, "TSLiteralType");
  function Hre(e) {
    this.print(e.expression, e), this.print(e.typeParameters, e);
  }
  s(Hre, "TSExpressionWithTypeArguments");
  function Yre(e) {
    let {
      declare: t,
      id: r,
      typeParameters: n,
      extends: i,
      body: a
    } = e;
    t && (this.word("declare"), this.space()), this.word("interface"), this.space(), this.print(r, e), this.print(n, e), i != null && i.length &&
    (this.space(), this.word("extends"), this.space(), this.printList(i, e)), this.space(), this.print(a, e);
  }
  s(Yre, "TSInterfaceDeclaration");
  function zre(e) {
    this.tsPrintTypeLiteralOrInterfaceBody(e.body, e);
  }
  s(zre, "TSInterfaceBody");
  function Jre(e) {
    let {
      declare: t,
      id: r,
      typeParameters: n,
      typeAnnotation: i
    } = e;
    t && (this.word("declare"), this.space()), this.word("type"), this.space(), this.print(r, e), this.print(n, e), this.space(), this.tokenChar(
    61), this.space(), this.print(i, e), this.tokenChar(59);
  }
  s(Jre, "TSTypeAliasDeclaration");
  function Xre(e) {
    var t;
    let {
      type: r,
      expression: n,
      typeAnnotation: i
    } = e, a = !!((t = n.trailingComments) != null && t.length);
    this.print(n, e, !0, void 0, a), this.space(), this.word(r === "TSAsExpression" ? "as" : "satisfies"), this.space(), this.print(i, e);
  }
  s(Xre, "TSTypeExpression");
  function Qre(e) {
    let {
      typeAnnotation: t,
      expression: r
    } = e;
    this.tokenChar(60), this.print(t, e), this.tokenChar(62), this.space(), this.print(r, e);
  }
  s(Qre, "TSTypeAssertion");
  function Zre(e) {
    this.print(e.expression, e), this.print(e.typeParameters, e);
  }
  s(Zre, "TSInstantiationExpression");
  function ene(e) {
    let {
      declare: t,
      const: r,
      id: n,
      members: i
    } = e;
    t && (this.word("declare"), this.space()), r && (this.word("const"), this.space()), this.word("enum"), this.space(), this.print(n, e), this.
    space(), Rm(this, i, e);
  }
  s(ene, "TSEnumDeclaration");
  function tne(e) {
    let {
      id: t,
      initializer: r
    } = e;
    this.print(t, e), r && (this.space(), this.tokenChar(61), this.space(), this.print(r, e)), this.tokenChar(44);
  }
  s(tne, "TSEnumMember");
  function rne(e) {
    let {
      declare: t,
      id: r
    } = e;
    if (t && (this.word("declare"), this.space()), e.global || (this.word(r.type === "Identifier" ? "namespace" : "module"), this.space()), this.
    print(r, e), !e.body) {
      this.tokenChar(59);
      return;
    }
    let n = e.body;
    for (; n.type === "TSModuleDeclaration"; )
      this.tokenChar(46), this.print(n.id, n), n = n.body;
    this.space(), this.print(n, e);
  }
  s(rne, "TSModuleDeclaration");
  function nne(e) {
    Rm(this, e.body, e);
  }
  s(nne, "TSModuleBlock");
  function sne(e) {
    let {
      argument: t,
      qualifier: r,
      typeParameters: n
    } = e;
    this.word("import"), this.tokenChar(40), this.print(t, e), this.tokenChar(41), r && (this.tokenChar(46), this.print(r, e)), n && this.print(
    n, e);
  }
  s(sne, "TSImportType");
  function ine(e) {
    let {
      isExport: t,
      id: r,
      moduleReference: n
    } = e;
    t && (this.word("export"), this.space()), this.word("import"), this.space(), this.print(r, e), this.space(), this.tokenChar(61), this.space(),
    this.print(n, e), this.tokenChar(59);
  }
  s(ine, "TSImportEqualsDeclaration");
  function ane(e) {
    this.token("require("), this.print(e.expression, e), this.tokenChar(41);
  }
  s(ane, "TSExternalModuleReference");
  function one(e) {
    this.print(e.expression, e), this.tokenChar(33);
  }
  s(one, "TSNonNullExpression");
  function lne(e) {
    this.word("export"), this.space(), this.tokenChar(61), this.space(), this.print(e.expression, e), this.tokenChar(59);
  }
  s(lne, "TSExportAssignment");
  function une(e) {
    this.word("export"), this.space(), this.word("as"), this.space(), this.word("namespace"), this.space(), this.print(e.id, e);
  }
  s(une, "TSNamespaceExportDeclaration");
  function cne(e) {
    let {
      typeParameters: t
    } = e, r = e.parameters;
    this.print(t, e), this.tokenChar(40), this._parameters(r, e), this.tokenChar(41);
    let n = e.typeAnnotation;
    this.print(n, e);
  }
  s(cne, "tsPrintSignatureDeclarationBase");
  function fne(e) {
    let t = e.type === "ClassAccessorProperty" || e.type === "ClassProperty";
    t && e.declare && (this.word("declare"), this.space()), e.accessibility && (this.word(e.accessibility), this.space()), e.static && (this.
    word("static"), this.space()), e.override && (this.word("override"), this.space()), e.abstract && (this.word("abstract"), this.space()),
    t && e.readonly && (this.word("readonly"), this.space());
  }
  s(fne, "tsPrintClassMemberModifiers");
});

// ../node_modules/@babel/generator/lib/generators/index.js
var cP = T((Ye) => {
  "use strict";
  Object.defineProperty(Ye, "__esModule", {
    value: !0
  });
  var qm = RS();
  Object.keys(qm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === qm[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return qm[e];
      }, "get")
    });
  });
  var Um = US();
  Object.keys(Um).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === Um[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Um[e];
      }, "get")
    });
  });
  var Vm = KS();
  Object.keys(Vm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === Vm[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Vm[e];
      }, "get")
    });
  });
  var $m = GS();
  Object.keys($m).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === $m[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return $m[e];
      }, "get")
    });
  });
  var Wm = HS();
  Object.keys(Wm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === Wm[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Wm[e];
      }, "get")
    });
  });
  var Km = Fm();
  Object.keys(Km).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === Km[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Km[e];
      }, "get")
    });
  });
  var Gm = Lm();
  Object.keys(Gm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === Gm[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Gm[e];
      }, "get")
    });
  });
  var Hm = sP();
  Object.keys(Hm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === Hm[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Hm[e];
      }, "get")
    });
  });
  var Ym = iP();
  Object.keys(Ym).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === Ym[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Ym[e];
      }, "get")
    });
  });
  var zm = aP();
  Object.keys(zm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === zm[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return zm[e];
      }, "get")
    });
  });
  var Jm = uP();
  Object.keys(Jm).forEach(function(e) {
    e === "default" || e === "__esModule" || e in Ye && Ye[e] === Jm[e] || Object.defineProperty(Ye, e, {
      enumerable: !0,
      get: /* @__PURE__ */ s(function() {
        return Jm[e];
      }, "get")
    });
  });
});

// ../node_modules/@babel/generator/lib/printer.js
var pP = T((_u) => {
  "use strict";
  Object.defineProperty(_u, "__esModule", {
    value: !0
  });
  _u.default = void 0;
  var pne = PS(), dne = is(), hne = Se(), mne = cP(), {
    isFunction: yne,
    isStatement: gne,
    isClassBody: bne,
    isTSInterfaceBody: Ene,
    isTSEnumDeclaration: vne
  } = hne, Tne = /e/i, xne = /\.0+$/, fP = /[\n\r\u2028\u2029]/, Sne = /[\n\r\u2028\u2029]|\*\//, {
    needsParens: Pne
  } = dne, co = class {
    static {
      s(this, "Printer");
    }
    constructor(t, r) {
      this.inForStatementInit = !1, this.tokenContext = 0, this._currentNode = null, this._indent = 0, this._indentRepeat = 0, this._insideAux =
      !1, this._parenPushNewlineState = null, this._noLineTerminator = !1, this._printAuxAfterOnNextUserNode = !1, this._printedComments = /* @__PURE__ */ new Set(),
      this._endsWithInteger = !1, this._endsWithWord = !1, this._lastCommentLine = 0, this._endsWithInnerRaw = !1, this._indentInnerComments =
      !0, this.format = t, this._indentRepeat = t.indent.style.length, this._inputMap = r?._inputMap, this._buf = new pne.default(r, t.indent.
      style[0]);
    }
    enterForStatementInit(t) {
      let r = this.inForStatementInit;
      return r === t ? () => {
      } : (this.inForStatementInit = t, () => {
        this.inForStatementInit = r;
      });
    }
    generate(t) {
      return this.print(t), this._maybeAddAuxComment(), this._buf.get();
    }
    indent() {
      this.format.compact || this.format.concise || this._indent++;
    }
    dedent() {
      this.format.compact || this.format.concise || this._indent--;
    }
    semicolon(t = !1) {
      this._maybeAddAuxComment(), t ? this._appendChar(59) : this._queue(59), this._noLineTerminator = !1;
    }
    rightBrace(t) {
      this.format.minified && this._buf.removeLastSemicolon(), this.sourceWithOffset("end", t.loc, -1), this.tokenChar(125);
    }
    rightParens(t) {
      this.sourceWithOffset("end", t.loc, -1), this.tokenChar(41);
    }
    space(t = !1) {
      if (!this.format.compact) {
        if (t)
          this._space();
        else if (this._buf.hasContent()) {
          let r = this.getLastChar();
          r !== 32 && r !== 10 && this._space();
        }
      }
    }
    word(t, r = !1) {
      this.tokenContext = 0, this._maybePrintInnerComments(), (this._endsWithWord || t.charCodeAt(0) === 47 && this.endsWith(47)) && this._space(),
      this._maybeAddAuxComment(), this._append(t, !1), this._endsWithWord = !0, this._noLineTerminator = r;
    }
    number(t, r) {
      function n(i) {
        if (i.length > 2 && i.charCodeAt(0) === 48) {
          let a = i.charCodeAt(1);
          return a === 98 || a === 111 || a === 120;
        }
        return !1;
      }
      s(n, "isNonDecimalLiteral"), this.word(t), this._endsWithInteger = Number.isInteger(r) && !n(t) && !Tne.test(t) && !xne.test(t) && t.charCodeAt(
      t.length - 1) !== 46;
    }
    token(t, r = !1) {
      this.tokenContext = 0, this._maybePrintInnerComments();
      let n = this.getLastChar(), i = t.charCodeAt(0);
      (n === 33 && (t === "--" || i === 61) || i === 43 && n === 43 || i === 45 && n === 45 || i === 46 && this._endsWithInteger) && this._space(),
      this._maybeAddAuxComment(), this._append(t, r), this._noLineTerminator = !1;
    }
    tokenChar(t) {
      this.tokenContext = 0, this._maybePrintInnerComments();
      let r = this.getLastChar();
      (t === 43 && r === 43 || t === 45 && r === 45 || t === 46 && this._endsWithInteger) && this._space(), this._maybeAddAuxComment(), this.
      _appendChar(t), this._noLineTerminator = !1;
    }
    newline(t = 1, r) {
      if (!(t <= 0)) {
        if (!r) {
          if (this.format.retainLines || this.format.compact) return;
          if (this.format.concise) {
            this.space();
            return;
          }
        }
        t > 2 && (t = 2), t -= this._buf.getNewlineCount();
        for (let n = 0; n < t; n++)
          this._newline();
      }
    }
    endsWith(t) {
      return this.getLastChar() === t;
    }
    getLastChar() {
      return this._buf.getLastChar();
    }
    endsWithCharAndNewline() {
      return this._buf.endsWithCharAndNewline();
    }
    removeTrailingNewline() {
      this._buf.removeTrailingNewline();
    }
    exactSource(t, r) {
      if (!t) {
        r();
        return;
      }
      this._catchUp("start", t), this._buf.exactSource(t, r);
    }
    source(t, r) {
      r && (this._catchUp(t, r), this._buf.source(t, r));
    }
    sourceWithOffset(t, r, n) {
      r && (this._catchUp(t, r), this._buf.sourceWithOffset(t, r, n));
    }
    sourceIdentifierName(t, r) {
      if (!this._buf._canMarkIdName) return;
      let n = this._buf._sourcePosition;
      n.identifierNamePos = r, n.identifierName = t;
    }
    _space() {
      this._queue(32);
    }
    _newline() {
      this._queue(10);
    }
    _append(t, r) {
      this._maybeAddParen(t), this._maybeIndent(t.charCodeAt(0)), this._buf.append(t, r), this._endsWithWord = !1, this._endsWithInteger = !1;
    }
    _appendChar(t) {
      this._maybeAddParenChar(t), this._maybeIndent(t), this._buf.appendChar(t), this._endsWithWord = !1, this._endsWithInteger = !1;
    }
    _queue(t) {
      this._maybeAddParenChar(t), this._maybeIndent(t), this._buf.queue(t), this._endsWithWord = !1, this._endsWithInteger = !1;
    }
    _maybeIndent(t) {
      this._indent && t !== 10 && this.endsWith(10) && this._buf.queueIndentation(this._getIndent());
    }
    _shouldIndent(t) {
      if (this._indent && t !== 10 && this.endsWith(10))
        return !0;
    }
    _maybeAddParenChar(t) {
      let r = this._parenPushNewlineState;
      if (r && t !== 32) {
        if (t !== 10) {
          this._parenPushNewlineState = null;
          return;
        }
        this.tokenChar(40), this.indent(), r.printed = !0;
      }
    }
    _maybeAddParen(t) {
      let r = this._parenPushNewlineState;
      if (!r) return;
      let n = t.length, i;
      for (i = 0; i < n && t.charCodeAt(i) === 32; i++) ;
      if (i === n)
        return;
      let a = t.charCodeAt(i);
      if (a !== 10) {
        if (a !== 47 || i + 1 === n) {
          this._parenPushNewlineState = null;
          return;
        }
        let o = t.charCodeAt(i + 1);
        if (o === 42)
          return;
        if (o !== 47) {
          this._parenPushNewlineState = null;
          return;
        }
      }
      this.tokenChar(40), this.indent(), r.printed = !0;
    }
    catchUp(t) {
      if (!this.format.retainLines) return;
      let r = t - this._buf.getCurrentLine();
      for (let n = 0; n < r; n++)
        this._newline();
    }
    _catchUp(t, r) {
      var n;
      if (!this.format.retainLines) return;
      let i = r == null || (n = r[t]) == null ? void 0 : n.line;
      if (i != null) {
        let a = i - this._buf.getCurrentLine();
        for (let o = 0; o < a; o++)
          this._newline();
      }
    }
    _getIndent() {
      return this._indentRepeat * this._indent;
    }
    printTerminatorless(t, r, n) {
      if (n)
        this._noLineTerminator = !0, this.print(t, r);
      else {
        let i = {
          printed: !1
        };
        this._parenPushNewlineState = i, this.print(t, r), i.printed && (this.dedent(), this.newline(), this.tokenChar(41));
      }
    }
    print(t, r, n, i, a) {
      var o, l;
      if (!t) return;
      this._endsWithInnerRaw = !1;
      let u = t.type, c = this.format, f = c.concise;
      t._compact && (c.concise = !0);
      let p = this[u];
      if (p === void 0)
        throw new ReferenceError(`unknown node of type ${JSON.stringify(u)} with constructor ${JSON.stringify(t.constructor.name)}`);
      let h = this._currentNode;
      this._currentNode = t;
      let y = this._insideAux;
      this._insideAux = t.loc == null, this._maybeAddAuxComment(this._insideAux && !y);
      let v = (o = t.extra) == null ? void 0 : o.parenthesized, d = a || v && c.retainFunctionParens && u === "FunctionExpression" || Pne(t,
      r, this.tokenContext, this.inForStatementInit);
      if (!d && v && (l = t.leadingComments) != null && l.length && t.leadingComments[0].type === "CommentBlock")
        switch (r?.type) {
          case "ExpressionStatement":
          case "VariableDeclarator":
          case "AssignmentExpression":
          case "ReturnStatement":
            break;
          case "CallExpression":
          case "OptionalCallExpression":
          case "NewExpression":
            if (r.callee !== t) break;
          default:
            d = !0;
        }
      let b;
      d && (this.tokenChar(40), this._endsWithInnerRaw = !1, b = this.enterForStatementInit(!1)), this._lastCommentLine = 0, this._printLeadingComments(
      t, r);
      let E = u === "Program" || u === "File" ? null : t.loc;
      this.exactSource(E, p.bind(this, t, r)), d ? (this._printTrailingComments(t, r), this.tokenChar(41), this._noLineTerminator = n, b()) :
      n && !this._noLineTerminator ? (this._noLineTerminator = !0, this._printTrailingComments(t, r)) : this._printTrailingComments(t, r, i),
      this._currentNode = h, c.concise = f, this._insideAux = y, this._endsWithInnerRaw = !1;
    }
    _maybeAddAuxComment(t) {
      t && this._printAuxBeforeComment(), this._insideAux || this._printAuxAfterComment();
    }
    _printAuxBeforeComment() {
      if (this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = !0;
      let t = this.format.auxiliaryCommentBefore;
      t && this._printComment({
        type: "CommentBlock",
        value: t
      }, 0);
    }
    _printAuxAfterComment() {
      if (!this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = !1;
      let t = this.format.auxiliaryCommentAfter;
      t && this._printComment({
        type: "CommentBlock",
        value: t
      }, 0);
    }
    getPossibleRaw(t) {
      let r = t.extra;
      if (r?.raw != null && r.rawValue != null && t.value === r.rawValue)
        return r.raw;
    }
    printJoin(t, r, n = {}) {
      if (!(t != null && t.length)) return;
      let {
        indent: i
      } = n;
      if (i == null && this.format.retainLines) {
        var a;
        let p = (a = t[0].loc) == null ? void 0 : a.start.line;
        p != null && p !== this._buf.getCurrentLine() && (i = !0);
      }
      i && this.indent();
      let o = {
        addNewlines: n.addNewlines,
        nextNodeStartLine: 0
      }, l = n.separator ? n.separator.bind(this) : null, u = t.length;
      for (let p = 0; p < u; p++) {
        let h = t[p];
        if (h && (n.statement && this._printNewline(p === 0, o), this.print(h, r, void 0, n.trailingCommentsLineOffset || 0), n.iterator == null ||
        n.iterator(h, p), p < u - 1 && l?.(), n.statement)) {
          var c;
          if ((c = h.trailingComments) != null && c.length || (this._lastCommentLine = 0), p + 1 === u)
            this.newline(1);
          else {
            var f;
            let y = t[p + 1];
            o.nextNodeStartLine = ((f = y.loc) == null ? void 0 : f.start.line) || 0, this._printNewline(!0, o);
          }
        }
      }
      i && this.dedent();
    }
    printAndIndentOnComments(t, r) {
      let n = t.leadingComments && t.leadingComments.length > 0;
      n && this.indent(), this.print(t, r), n && this.dedent();
    }
    printBlock(t) {
      let r = t.body;
      r.type !== "EmptyStatement" && this.space(), this.print(r, t);
    }
    _printTrailingComments(t, r, n) {
      let {
        innerComments: i,
        trailingComments: a
      } = t;
      i != null && i.length && this._printComments(2, i, t, r, n), a != null && a.length && this._printComments(2, a, t, r, n);
    }
    _printLeadingComments(t, r) {
      let n = t.leadingComments;
      n != null && n.length && this._printComments(0, n, t, r);
    }
    _maybePrintInnerComments() {
      this._endsWithInnerRaw && this.printInnerComments(), this._endsWithInnerRaw = !0, this._indentInnerComments = !0;
    }
    printInnerComments() {
      let t = this._currentNode, r = t.innerComments;
      if (!(r != null && r.length)) return;
      let n = this.endsWith(32), i = this._indentInnerComments, a = this._printedComments.size;
      i && this.indent(), this._printComments(1, r, t), n && a !== this._printedComments.size && this.space(), i && this.dedent();
    }
    noIndentInnerCommentsHere() {
      this._indentInnerComments = !1;
    }
    printSequence(t, r, n = {}) {
      var i;
      n.statement = !0, (i = n.indent) != null || (n.indent = !1), this.printJoin(t, r, n);
    }
    printList(t, r, n = {}) {
      n.separator == null && (n.separator = Ane), this.printJoin(t, r, n);
    }
    _printNewline(t, r) {
      let n = this.format;
      if (n.retainLines || n.compact) return;
      if (n.concise) {
        this.space();
        return;
      }
      if (!t)
        return;
      let i = r.nextNodeStartLine, a = this._lastCommentLine;
      if (i > 0 && a > 0) {
        let o = i - a;
        if (o >= 0) {
          this.newline(o || 1);
          return;
        }
      }
      this._buf.hasContent() && this.newline(1);
    }
    _shouldPrintComment(t) {
      return t.ignore || this._printedComments.has(t) ? 0 : this._noLineTerminator && Sne.test(t.value) ? 2 : (this._printedComments.add(t),
      this.format.shouldPrintComment(t.value) ? 1 : 0);
    }
    _printComment(t, r) {
      let n = this._noLineTerminator, i = t.type === "CommentBlock", a = i && r !== 1 && !this._noLineTerminator;
      a && this._buf.hasContent() && r !== 2 && this.newline(1);
      let o = this.getLastChar();
      o !== 91 && o !== 123 && this.space();
      let l;
      if (i) {
        let {
          _parenPushNewlineState: c
        } = this;
        if (c?.printed === !1 && fP.test(t.value) && (this.tokenChar(40), this.indent(), c.printed = !0), l = `/*${t.value}*/`, this.format.
        indent.adjustMultilineComment) {
          var u;
          let f = (u = t.loc) == null ? void 0 : u.start.column;
          if (f) {
            let p = new RegExp("\\n\\s{1," + f + "}", "g");
            l = l.replace(p, `
`);
          }
          if (this.format.concise)
            l = l.replace(/\n(?!$)/g, `
`);
          else {
            let p = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
            (this._shouldIndent(47) || this.format.retainLines) && (p += this._getIndent()), l = l.replace(/\n(?!$)/g, `
${" ".repeat(p)}`);
          }
        }
      } else n ? l = `/*${t.value}*/` : l = `//${t.value}`;
      this.endsWith(47) && this._space(), this.source("start", t.loc), this._append(l, i), !i && !n && this.newline(1, !0), a && r !== 3 && this.
      newline(1);
    }
    _printComments(t, r, n, i, a = 0) {
      let o = n.loc, l = r.length, u = !!o, c = u ? o.start.line : 0, f = u ? o.end.line : 0, p = 0, h = 0, y = this._noLineTerminator ? function() {
      } : this.newline.bind(this);
      for (let v = 0; v < l; v++) {
        let d = r[v], b = this._shouldPrintComment(d);
        if (b === 2) {
          u = !1;
          break;
        }
        if (u && d.loc && b === 1) {
          let E = d.loc.start.line, I = d.loc.end.line;
          if (t === 0) {
            let O = 0;
            v === 0 ? this._buf.hasContent() && (d.type === "CommentLine" || E !== I) && (O = h = 1) : O = E - p, p = I, y(O), this._printComment(
            d, 1), v + 1 === l && (y(Math.max(c - p, h)), p = c);
          } else if (t === 1) {
            let O = E - (v === 0 ? c : p);
            p = I, y(O), this._printComment(d, 1), v + 1 === l && (y(Math.min(1, f - p)), p = f);
          } else {
            let O = E - (v === 0 ? f - a : p);
            p = I, y(O), this._printComment(d, 1);
          }
        } else {
          if (u = !1, b !== 1)
            continue;
          if (l === 1) {
            let E = d.loc ? d.loc.start.line === d.loc.end.line : !fP.test(d.value), I = E && !gne(n) && !bne(i) && !Ene(i) && !vne(i);
            t === 0 ? this._printComment(d, I && n.type !== "ObjectExpression" || E && yne(i, {
              body: n
            }) ? 1 : 0) : I && t === 2 ? this._printComment(d, 1) : this._printComment(d, 0);
          } else t === 1 && !(n.type === "ObjectExpression" && n.properties.length > 1) && n.type !== "ClassBody" && n.type !== "TSInterface\
Body" ? this._printComment(d, v === 0 ? 2 : v === l - 1 ? 3 : 0) : this._printComment(d, 0);
        }
      }
      t === 2 && u && p && (this._lastCommentLine = p);
    }
  };
  Object.assign(co.prototype, mne);
  co.prototype.Noop = /* @__PURE__ */ s(function() {
  }, "Noop");
  var hCe = _u.default = co;
  function Ane() {
    this.tokenChar(44), this.space();
  }
  s(Ane, "commaSeparator");
});

// ../node_modules/@babel/generator/lib/index.js
var fo = T((Ou) => {
  "use strict";
  Object.defineProperty(Ou, "__esModule", {
    value: !0
  });
  Ou.default = Cne;
  var dP = SS(), hP = pP();
  function mP(e, t) {
    let r = {
      auxiliaryCommentBefore: t.auxiliaryCommentBefore,
      auxiliaryCommentAfter: t.auxiliaryCommentAfter,
      shouldPrintComment: t.shouldPrintComment,
      retainLines: t.retainLines,
      retainFunctionParens: t.retainFunctionParens,
      comments: t.comments == null || t.comments,
      compact: t.compact,
      minified: t.minified,
      concise: t.concise,
      indent: {
        adjustMultilineComment: !0,
        style: "  "
      },
      jsescOption: Object.assign({
        quotes: "double",
        wrap: !0,
        minimal: !1
      }, t.jsescOption),
      topicToken: t.topicToken,
      importAttributesKeyword: t.importAttributesKeyword
    };
    {
      var n;
      r.decoratorsBeforeExport = t.decoratorsBeforeExport, r.jsescOption.json = t.jsonCompatibleStrings, r.recordAndTupleSyntaxType = (n = t.
      recordAndTupleSyntaxType) != null ? n : "hash";
    }
    r.minified ? (r.compact = !0, r.shouldPrintComment = r.shouldPrintComment || (() => r.comments)) : r.shouldPrintComment = r.shouldPrintComment ||
    ((l) => r.comments || l.includes("@license") || l.includes("@preserve")), r.compact === "auto" && (r.compact = typeof e == "string" && e.
    length > 5e5, r.compact && console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${t.filename} as it exceeds th\
e max of 500KB.`)), r.compact && (r.indent.adjustMultilineComment = !1);
    let {
      auxiliaryCommentBefore: i,
      auxiliaryCommentAfter: a,
      shouldPrintComment: o
    } = r;
    return i && !o(i) && (r.auxiliaryCommentBefore = void 0), a && !o(a) && (r.auxiliaryCommentAfter = void 0), r;
  }
  s(mP, "normalizeOptions");
  Ou.CodeGenerator = class {
    static {
      s(this, "CodeGenerator");
    }
    constructor(t, r = {}, n) {
      this._ast = void 0, this._format = void 0, this._map = void 0, this._ast = t, this._format = mP(n, r), this._map = r.sourceMaps ? new dP.
      default(r, n) : null;
    }
    generate() {
      return new hP.default(this._format, this._map).generate(this._ast);
    }
  };
  function Cne(e, t = {}, r) {
    let n = mP(r, t), i = t.sourceMaps ? new dP.default(t, r) : null;
    return new hP.default(n, i).generate(e);
  }
  s(Cne, "generate");
});

// ../node_modules/@babel/traverse/lib/path/ancestry.js
var yP = T((Nr) => {
  "use strict";
  Object.defineProperty(Nr, "__esModule", {
    value: !0
  });
  Nr.find = _ne;
  Nr.findParent = Ine;
  Nr.getAncestry = Fne;
  Nr.getDeepestCommonAncestorFrom = kne;
  Nr.getEarliestCommonAncestorFrom = Bne;
  Nr.getFunctionParent = One;
  Nr.getStatementParent = Nne;
  Nr.inType = Mne;
  Nr.isAncestor = jne;
  Nr.isDescendant = Lne;
  var wne = Se(), {
    VISITOR_KEYS: Dne
  } = wne;
  function Ine(e) {
    let t = this;
    for (; t = t.parentPath; )
      if (e(t)) return t;
    return null;
  }
  s(Ine, "findParent");
  function _ne(e) {
    let t = this;
    do
      if (e(t)) return t;
    while (t = t.parentPath);
    return null;
  }
  s(_ne, "find");
  function One() {
    return this.findParent((e) => e.isFunction());
  }
  s(One, "getFunctionParent");
  function Nne() {
    let e = this;
    do {
      if (!e.parentPath || Array.isArray(e.container) && e.isStatement())
        break;
      e = e.parentPath;
    } while (e);
    if (e && (e.isProgram() || e.isFile()))
      throw new Error("File/Program node, we can't possibly find a statement parent to this");
    return e;
  }
  s(Nne, "getStatementParent");
  function Bne(e) {
    return this.getDeepestCommonAncestorFrom(e, function(t, r, n) {
      let i, a = Dne[t.type];
      for (let o of n) {
        let l = o[r + 1];
        if (!i) {
          i = l;
          continue;
        }
        if (l.listKey && i.listKey === l.listKey && l.key < i.key) {
          i = l;
          continue;
        }
        let u = a.indexOf(i.parentKey), c = a.indexOf(l.parentKey);
        u > c && (i = l);
      }
      return i;
    });
  }
  s(Bne, "getEarliestCommonAncestorFrom");
  function kne(e, t) {
    if (!e.length)
      return this;
    if (e.length === 1)
      return e[0];
    let r = 1 / 0, n, i, a = e.map((l) => {
      let u = [];
      do
        u.unshift(l);
      while ((l = l.parentPath) && l !== this);
      return u.length < r && (r = u.length), u;
    }), o = a[0];
    e: for (let l = 0; l < r; l++) {
      let u = o[l];
      for (let c of a)
        if (c[l] !== u)
          break e;
      n = l, i = u;
    }
    if (i)
      return t ? t(i, n, a) : i;
    throw new Error("Couldn't find intersection");
  }
  s(kne, "getDeepestCommonAncestorFrom");
  function Fne() {
    let e = this, t = [];
    do
      t.push(e);
    while (e = e.parentPath);
    return t;
  }
  s(Fne, "getAncestry");
  function jne(e) {
    return e.isDescendant(this);
  }
  s(jne, "isAncestor");
  function Lne(e) {
    return !!this.findParent((t) => t === e);
  }
  s(Lne, "isDescendant");
  function Mne(...e) {
    let t = this;
    for (; t; ) {
      for (let r of e)
        if (t.node.type === r) return !0;
      t = t.parentPath;
    }
    return !1;
  }
  s(Mne, "inType");
});

// ../node_modules/@babel/traverse/lib/path/inference/util.js
var Qm = T((Xm) => {
  "use strict";
  Object.defineProperty(Xm, "__esModule", {
    value: !0
  });
  Xm.createUnionType = $ne;
  var Rne = Se(), {
    createFlowUnionType: gP,
    createTSUnionType: bP,
    createUnionTypeAnnotation: qne,
    isFlowType: Une,
    isTSType: Vne
  } = Rne;
  function $ne(e) {
    {
      if (e.every((t) => Une(t)))
        return gP ? gP(e) : qne(e);
      if (e.every((t) => Vne(t)) && bP)
        return bP(e);
    }
  }
  s($ne, "createUnionType");
});

// ../node_modules/@babel/traverse/lib/path/inference/inferer-reference.js
var SP = T((Zm) => {
  "use strict";
  Object.defineProperty(Zm, "__esModule", {
    value: !0
  });
  Zm.default = Yne;
  var Wne = Se(), vP = Qm(), {
    BOOLEAN_NUMBER_BINARY_OPERATORS: Kne,
    createTypeAnnotationBasedOnTypeof: Gne,
    numberTypeAnnotation: TP,
    voidTypeAnnotation: Hne
  } = Wne;
  function Yne(e) {
    if (!this.isReferenced()) return;
    let t = this.scope.getBinding(e.name);
    if (t)
      return t.identifier.typeAnnotation ? t.identifier.typeAnnotation : zne(t, this, e.name);
    if (e.name === "undefined")
      return Hne();
    if (e.name === "NaN" || e.name === "Infinity")
      return TP();
    e.name;
  }
  s(Yne, "_default");
  function zne(e, t, r) {
    let n = [], i = [], a = EP(e, t, i), o = xP(e, t, r);
    if (o) {
      let l = EP(e, o.ifStatement);
      a = a.filter((u) => !l.includes(u)), n.push(o.typeAnnotation);
    }
    if (a.length) {
      a.push(...i);
      for (let l of a)
        n.push(l.getTypeAnnotation());
    }
    if (n.length)
      return (0, vP.createUnionType)(n);
  }
  s(zne, "getTypeAnnotationBindingConstantViolations");
  function EP(e, t, r) {
    let n = e.constantViolations.slice();
    return n.unshift(e.path), n.filter((i) => {
      i = i.resolve();
      let a = i._guessExecutionStatusRelativeTo(t);
      return r && a === "unknown" && r.push(i), a === "before";
    });
  }
  s(EP, "getConstantViolationsBefore");
  function Jne(e, t) {
    let r = t.node.operator, n = t.get("right").resolve(), i = t.get("left").resolve(), a;
    if (i.isIdentifier({
      name: e
    }) ? a = n : n.isIdentifier({
      name: e
    }) && (a = i), a)
      return r === "===" ? a.getTypeAnnotation() : Kne.includes(r) ? TP() : void 0;
    if (r !== "===" && r !== "==") return;
    let o, l;
    if (i.isUnaryExpression({
      operator: "typeof"
    }) ? (o = i, l = n) : n.isUnaryExpression({
      operator: "typeof"
    }) && (o = n, l = i), !o || !o.get("argument").isIdentifier({
      name: e
    }) || (l = l.resolve(), !l.isLiteral())) return;
    let u = l.node.value;
    if (typeof u == "string")
      return Gne(u);
  }
  s(Jne, "inferAnnotationFromBinaryExpression");
  function Xne(e, t, r) {
    let n;
    for (; n = t.parentPath; ) {
      if (n.isIfStatement() || n.isConditionalExpression())
        return t.key === "test" ? void 0 : n;
      if (n.isFunction() && n.parentPath.scope.getBinding(r) !== e)
        return;
      t = n;
    }
  }
  s(Xne, "getParentConditionalPath");
  function xP(e, t, r) {
    let n = Xne(e, t, r);
    if (!n) return;
    let a = [n.get("test")], o = [];
    for (let l = 0; l < a.length; l++) {
      let u = a[l];
      if (u.isLogicalExpression())
        u.node.operator === "&&" && (a.push(u.get("left")), a.push(u.get("right")));
      else if (u.isBinaryExpression()) {
        let c = Jne(r, u);
        c && o.push(c);
      }
    }
    return o.length ? {
      typeAnnotation: (0, vP.createUnionType)(o),
      ifStatement: n
    } : xP(e, n, r);
  }
  s(xP, "getConditionalAnnotation");
});

// ../node_modules/@babel/traverse/lib/path/inference/inferers.js
var OP = T((rt) => {
  "use strict";
  Object.defineProperty(rt, "__esModule", {
    value: !0
  });
  rt.ArrayExpression = DP;
  rt.AssignmentExpression = vse;
  rt.BinaryExpression = mse;
  rt.BooleanLiteral = Pse;
  rt.CallExpression = Bse;
  rt.ConditionalExpression = gse;
  rt.ClassDeclaration = rt.ClassExpression = rt.FunctionDeclaration = rt.ArrowFunctionExpression = rt.FunctionExpression = Dse;
  Object.defineProperty(rt, "Identifier", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Zne.default;
    }, "get")
  });
  rt.LogicalExpression = yse;
  rt.NewExpression = pse;
  rt.NullLiteral = Ase;
  rt.NumericLiteral = Sse;
  rt.ObjectExpression = wse;
  rt.ParenthesizedExpression = Ese;
  rt.RegExpLiteral = Cse;
  rt.RestElement = IP;
  rt.SequenceExpression = bse;
  rt.StringLiteral = xse;
  rt.TSAsExpression = wP;
  rt.TSNonNullExpression = fse;
  rt.TaggedTemplateExpression = kse;
  rt.TemplateLiteral = dse;
  rt.TypeCastExpression = CP;
  rt.UnaryExpression = hse;
  rt.UpdateExpression = Tse;
  rt.VariableDeclarator = cse;
  var Qne = Se(), Zne = SP(), AP = Qm(), {
    BOOLEAN_BINARY_OPERATORS: ese,
    BOOLEAN_UNARY_OPERATORS: tse,
    NUMBER_BINARY_OPERATORS: rse,
    NUMBER_UNARY_OPERATORS: nse,
    STRING_UNARY_OPERATORS: sse,
    anyTypeAnnotation: PP,
    arrayTypeAnnotation: ey,
    booleanTypeAnnotation: ty,
    buildMatchMemberExpression: Nu,
    genericTypeAnnotation: ls,
    identifier: Gs,
    nullLiteralTypeAnnotation: ise,
    numberTypeAnnotation: Li,
    stringTypeAnnotation: Hs,
    tupleTypeAnnotation: ase,
    unionTypeAnnotation: ose,
    voidTypeAnnotation: lse,
    isIdentifier: use
  } = Qne;
  function cse() {
    if (this.get("id").isIdentifier())
      return this.get("init").getTypeAnnotation();
  }
  s(cse, "VariableDeclarator");
  function CP(e) {
    return e.typeAnnotation;
  }
  s(CP, "TypeCastExpression");
  CP.validParent = !0;
  function wP(e) {
    return e.typeAnnotation;
  }
  s(wP, "TSAsExpression");
  wP.validParent = !0;
  function fse() {
    return this.get("expression").getTypeAnnotation();
  }
  s(fse, "TSNonNullExpression");
  function pse(e) {
    if (e.callee.type === "Identifier")
      return ls(e.callee);
  }
  s(pse, "NewExpression");
  function dse() {
    return Hs();
  }
  s(dse, "TemplateLiteral");
  function hse(e) {
    let t = e.operator;
    if (t === "void")
      return lse();
    if (nse.includes(t))
      return Li();
    if (sse.includes(t))
      return Hs();
    if (tse.includes(t))
      return ty();
  }
  s(hse, "UnaryExpression");
  function mse(e) {
    let t = e.operator;
    if (rse.includes(t))
      return Li();
    if (ese.includes(t))
      return ty();
    if (t === "+") {
      let r = this.get("right"), n = this.get("left");
      return n.isBaseType("number") && r.isBaseType("number") ? Li() : n.isBaseType("string") || r.isBaseType("string") ? Hs() : ose([Hs(), Li()]);
    }
  }
  s(mse, "BinaryExpression");
  function yse() {
    let e = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
    return (0, AP.createUnionType)(e);
  }
  s(yse, "LogicalExpression");
  function gse() {
    let e = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
    return (0, AP.createUnionType)(e);
  }
  s(gse, "ConditionalExpression");
  function bse() {
    return this.get("expressions").pop().getTypeAnnotation();
  }
  s(bse, "SequenceExpression");
  function Ese() {
    return this.get("expression").getTypeAnnotation();
  }
  s(Ese, "ParenthesizedExpression");
  function vse() {
    return this.get("right").getTypeAnnotation();
  }
  s(vse, "AssignmentExpression");
  function Tse(e) {
    let t = e.operator;
    if (t === "++" || t === "--")
      return Li();
  }
  s(Tse, "UpdateExpression");
  function xse() {
    return Hs();
  }
  s(xse, "StringLiteral");
  function Sse() {
    return Li();
  }
  s(Sse, "NumericLiteral");
  function Pse() {
    return ty();
  }
  s(Pse, "BooleanLiteral");
  function Ase() {
    return ise();
  }
  s(Ase, "NullLiteral");
  function Cse() {
    return ls(Gs("RegExp"));
  }
  s(Cse, "RegExpLiteral");
  function wse() {
    return ls(Gs("Object"));
  }
  s(wse, "ObjectExpression");
  function DP() {
    return ls(Gs("Array"));
  }
  s(DP, "ArrayExpression");
  function IP() {
    return DP();
  }
  s(IP, "RestElement");
  IP.validParent = !0;
  function Dse() {
    return ls(Gs("Function"));
  }
  s(Dse, "Func");
  var Ise = Nu("Array.from"), _se = Nu("Object.keys"), Ose = Nu("Object.values"), Nse = Nu("Object.entries");
  function Bse() {
    let {
      callee: e
    } = this.node;
    return _se(e) ? ey(Hs()) : Ise(e) || Ose(e) || use(e, {
      name: "Array"
    }) ? ey(PP()) : Nse(e) ? ey(ase([Hs(), PP()])) : _P(this.get("callee"));
  }
  s(Bse, "CallExpression");
  function kse() {
    return _P(this.get("tag"));
  }
  s(kse, "TaggedTemplateExpression");
  function _P(e) {
    if (e = e.resolve(), e.isFunction()) {
      let {
        node: t
      } = e;
      if (t.async)
        return t.generator ? ls(Gs("AsyncIterator")) : ls(Gs("Promise"));
      if (t.generator)
        return ls(Gs("Iterator"));
      if (e.node.returnType)
        return e.node.returnType;
    }
  }
  s(_P, "resolveCall");
});

// ../node_modules/@babel/traverse/lib/path/inference/index.js
var jP = T((us) => {
  "use strict";
  Object.defineProperty(us, "__esModule", {
    value: !0
  });
  us._getTypeAnnotation = FP;
  us.baseTypeStrictlyMatches = rie;
  us.couldBeBaseType = tie;
  us.getTypeAnnotation = Zse;
  us.isBaseType = eie;
  us.isGenericType = nie;
  var NP = OP(), Fse = Se(), {
    anyTypeAnnotation: kP,
    isAnyTypeAnnotation: Bu,
    isArrayTypeAnnotation: jse,
    isBooleanTypeAnnotation: Lse,
    isEmptyTypeAnnotation: Mse,
    isFlowBaseAnnotation: Rse,
    isGenericTypeAnnotation: qse,
    isIdentifier: BP,
    isMixedTypeAnnotation: Use,
    isNumberTypeAnnotation: Vse,
    isStringTypeAnnotation: $se,
    isTSArrayType: Wse,
    isTSTypeAnnotation: Kse,
    isTSTypeReference: Gse,
    isTupleTypeAnnotation: Hse,
    isTypeAnnotation: Yse,
    isUnionTypeAnnotation: zse,
    isVoidTypeAnnotation: Jse,
    stringTypeAnnotation: Xse,
    voidTypeAnnotation: Qse
  } = Fse;
  function Zse() {
    let e = this.getData("typeAnnotation");
    return e != null || (e = FP.call(this) || kP(), (Yse(e) || Kse(e)) && (e = e.typeAnnotation), this.setData("typeAnnotation", e)), e;
  }
  s(Zse, "getTypeAnnotation");
  var ry = /* @__PURE__ */ new WeakSet();
  function FP() {
    let e = this.node;
    if (!e)
      if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
        let r = this.parentPath.parentPath, n = r.parentPath;
        return r.key === "left" && n.isForInStatement() ? Xse() : r.key === "left" && n.isForOfStatement() ? kP() : Qse();
      } else
        return;
    if (e.typeAnnotation)
      return e.typeAnnotation;
    if (!ry.has(e)) {
      ry.add(e);
      try {
        var t;
        let r = NP[e.type];
        if (r)
          return r.call(this, e);
        if (r = NP[this.parentPath.type], (t = r) != null && t.validParent)
          return this.parentPath.getTypeAnnotation();
      } finally {
        ry.delete(e);
      }
    }
  }
  s(FP, "_getTypeAnnotation");
  function eie(e, t) {
    return ny(e, this.getTypeAnnotation(), t);
  }
  s(eie, "isBaseType");
  function ny(e, t, r) {
    if (e === "string")
      return $se(t);
    if (e === "number")
      return Vse(t);
    if (e === "boolean")
      return Lse(t);
    if (e === "any")
      return Bu(t);
    if (e === "mixed")
      return Use(t);
    if (e === "empty")
      return Mse(t);
    if (e === "void")
      return Jse(t);
    if (r)
      return !1;
    throw new Error(`Unknown base type ${e}`);
  }
  s(ny, "_isBaseType");
  function tie(e) {
    let t = this.getTypeAnnotation();
    if (Bu(t)) return !0;
    if (zse(t)) {
      for (let r of t.types)
        if (Bu(r) || ny(e, r, !0))
          return !0;
      return !1;
    } else
      return ny(e, t, !0);
  }
  s(tie, "couldBeBaseType");
  function rie(e) {
    let t = this.getTypeAnnotation(), r = e.getTypeAnnotation();
    return !Bu(t) && Rse(t) ? r.type === t.type : !1;
  }
  s(rie, "baseTypeStrictlyMatches");
  function nie(e) {
    let t = this.getTypeAnnotation();
    return e === "Array" && (Wse(t) || jse(t) || Hse(t)) ? !0 : qse(t) && BP(t.id, {
      name: e
    }) || Gse(t) && BP(t.typeName, {
      name: e
    });
  }
  s(nie, "isGenericType");
});

// ../node_modules/@babel/traverse/lib/path/lib/hoister.js
var MP = T((ku) => {
  "use strict";
  Object.defineProperty(ku, "__esModule", {
    value: !0
  });
  ku.default = void 0;
  var LP = Se(), sie = LP, {
    react: iie
  } = LP, {
    cloneNode: aie,
    jsxExpressionContainer: oie,
    variableDeclaration: lie,
    variableDeclarator: uie
  } = sie, cie = {
    ReferencedIdentifier(e, t) {
      if (e.isJSXIdentifier() && iie.isCompatTag(e.node.name) && !e.parentPath.isJSXMemberExpression())
        return;
      if (e.node.name === "this") {
        let n = e.scope;
        do
          if (n.path.isFunction() && !n.path.isArrowFunctionExpression())
            break;
        while (n = n.parent);
        n && t.breakOnScopePaths.push(n.path);
      }
      let r = e.scope.getBinding(e.node.name);
      if (r) {
        for (let n of r.constantViolations)
          if (n.scope !== r.path.scope) {
            t.mutableBinding = !0, e.stop();
            return;
          }
        r === t.scope.getBinding(e.node.name) && (t.bindings[e.node.name] = r);
      }
    }
  }, sy = class {
    static {
      s(this, "PathHoister");
    }
    constructor(t, r) {
      this.breakOnScopePaths = void 0, this.bindings = void 0, this.mutableBinding = void 0, this.scopes = void 0, this.scope = void 0, this.
      path = void 0, this.attachAfter = void 0, this.breakOnScopePaths = [], this.bindings = {}, this.mutableBinding = !1, this.scopes = [],
      this.scope = r, this.path = t, this.attachAfter = !1;
    }
    isCompatibleScope(t) {
      for (let r of Object.keys(this.bindings)) {
        let n = this.bindings[r];
        if (!t.bindingIdentifierEquals(r, n.identifier))
          return !1;
      }
      return !0;
    }
    getCompatibleScopes() {
      let t = this.path.scope;
      do {
        if (this.isCompatibleScope(t))
          this.scopes.push(t);
        else
          break;
        if (this.breakOnScopePaths.includes(t.path))
          break;
      } while (t = t.parent);
    }
    getAttachmentPath() {
      let t = this._getAttachmentPath();
      if (!t) return;
      let r = t.scope;
      if (r.path === t && (r = t.scope.parent), r.path.isProgram() || r.path.isFunction())
        for (let n of Object.keys(this.bindings)) {
          if (!r.hasOwnBinding(n)) continue;
          let i = this.bindings[n];
          if (i.kind === "param" || i.path.parentKey === "params")
            continue;
          if (this.getAttachmentParentForPath(i.path).key >= t.key) {
            this.attachAfter = !0, t = i.path;
            for (let o of i.constantViolations)
              this.getAttachmentParentForPath(o).key > t.key && (t = o);
          }
        }
      return t;
    }
    _getAttachmentPath() {
      let r = this.scopes.pop();
      if (r) {
        if (r.path.isFunction())
          if (this.hasOwnParamBindings(r)) {
            if (this.scope === r) return;
            let n = r.path.get("body").get("body");
            for (let i = 0; i < n.length; i++)
              if (!n[i].node._blockHoist)
                return n[i];
          } else
            return this.getNextScopeAttachmentParent();
        else if (r.path.isProgram())
          return this.getNextScopeAttachmentParent();
      }
    }
    getNextScopeAttachmentParent() {
      let t = this.scopes.pop();
      if (t) return this.getAttachmentParentForPath(t.path);
    }
    getAttachmentParentForPath(t) {
      do
        if (!t.parentPath || Array.isArray(t.container) && t.isStatement())
          return t;
      while (t = t.parentPath);
    }
    hasOwnParamBindings(t) {
      for (let r of Object.keys(this.bindings)) {
        if (!t.hasOwnBinding(r)) continue;
        let n = this.bindings[r];
        if (n.kind === "param" && n.constant) return !0;
      }
      return !1;
    }
    run() {
      if (this.path.traverse(cie, this), this.mutableBinding) return;
      this.getCompatibleScopes();
      let t = this.getAttachmentPath();
      if (!t || t.getFunctionParent() === this.path.getFunctionParent()) return;
      let r = t.scope.generateUidIdentifier("ref"), n = uie(r, this.path.node), i = this.attachAfter ? "insertAfter" : "insertBefore", [a] = t[i](
      [t.isVariableDeclarator() ? n : lie("var", [n])]), o = this.path.parentPath;
      return o.isJSXElement() && this.path.container === o.node.children && (r = oie(r)), this.path.replaceWith(aie(r)), t.isVariableDeclarator() ?
      a.get("init") : a.get("declarations.0.init");
    }
  };
  ku.default = sy;
});

// ../node_modules/@babel/traverse/lib/path/lib/removal-hooks.js
var RP = T((Fu) => {
  "use strict";
  Object.defineProperty(Fu, "__esModule", {
    value: !0
  });
  Fu.hooks = void 0;
  var NCe = Fu.hooks = [function(e, t) {
    if (e.key === "test" && (t.isWhile() || t.isSwitchCase()) || e.key === "declaration" && t.isExportDeclaration() || e.key === "body" && t.
    isLabeledStatement() || e.listKey === "declarations" && t.isVariableDeclaration() && t.node.declarations.length === 1 || e.key === "expr\
ession" && t.isExpressionStatement())
      return t.remove(), !0;
  }, function(e, t) {
    if (t.isSequenceExpression() && t.node.expressions.length === 1)
      return t.replaceWith(t.node.expressions[0]), !0;
  }, function(e, t) {
    if (t.isBinary())
      return e.key === "left" ? t.replaceWith(t.node.right) : t.replaceWith(t.node.left), !0;
  }, function(e, t) {
    if (t.isIfStatement() && e.key === "consequent" || e.key === "body" && (t.isLoop() || t.isArrowFunctionExpression()))
      return e.replaceWith({
        type: "BlockStatement",
        body: []
      }), !0;
  }];
});

// ../node_modules/@babel/traverse/lib/path/removal.js
var ju = T((cs) => {
  "use strict";
  Object.defineProperty(cs, "__esModule", {
    value: !0
  });
  cs._assertUnremoved = WP;
  cs._callRemovalHooks = VP;
  cs._markRemoved = iy;
  cs._remove = $P;
  cs._removeFromScope = UP;
  cs.remove = yie;
  var fie = RP(), pie = Vs(), die = ay(), qP = fs(), hie = Se(), {
    getBindingIdentifiers: mie
  } = hie;
  function yie() {
    var e;
    if (WP.call(this), this.resync(), VP.call(this)) {
      iy.call(this);
      return;
    }
    (e = this.opts) != null && e.noScope || UP.call(this), this.shareCommentsWithSiblings(), $P.call(this), iy.call(this);
  }
  s(yie, "remove");
  function UP() {
    let e = mie(this.node, !1, !1, !0);
    Object.keys(e).forEach((t) => this.scope.removeBinding(t));
  }
  s(UP, "_removeFromScope");
  function VP() {
    if (this.parentPath) {
      for (let e of fie.hooks)
        if (e(this, this.parentPath)) return !0;
    }
  }
  s(VP, "_callRemovalHooks");
  function $P() {
    Array.isArray(this.container) ? (this.container.splice(this.key, 1), this.updateSiblingKeys(this.key, -1)) : die._replaceWith.call(this,
    null);
  }
  s($P, "_remove");
  function iy() {
    this._traverseFlags |= qP.SHOULD_SKIP | qP.REMOVED, this.parent && (0, pie.getCachedPaths)(this.hub, this.parent).delete(this.node), this.
    node = null;
  }
  s(iy, "_markRemoved");
  function WP() {
    if (this.removed)
      throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
  }
  s(WP, "_assertUnremoved");
});

// ../node_modules/@babel/traverse/lib/path/modification.js
var py = T((Br) => {
  "use strict";
  Object.defineProperty(Br, "__esModule", {
    value: !0
  });
  Br._containerInsert = cy;
  Br._containerInsertAfter = HP;
  Br._containerInsertBefore = fy;
  Br._verifyNodeList = po;
  Br.hoist = Mie;
  Br.insertAfter = kie;
  Br.insertBefore = Nie;
  Br.pushContainer = Lie;
  Br.unshiftContainer = jie;
  Br.updateSiblingKeys = Fie;
  var gie = Vs(), bie = MP(), uy = fs(), Eie = Fi(), Lu = ju(), vie = Se(), {
    arrowFunctionExpression: Tie,
    assertExpression: xie,
    assignmentExpression: Sie,
    blockStatement: KP,
    callExpression: Pie,
    cloneNode: oy,
    expressionStatement: ly,
    isAssignmentExpression: Aie,
    isCallExpression: Cie,
    isExportNamedDeclaration: GP,
    isExpression: wie,
    isIdentifier: Die,
    isSequenceExpression: Iie,
    isSuper: _ie,
    thisExpression: Oie
  } = vie;
  function Nie(e) {
    Lu._assertUnremoved.call(this);
    let t = po.call(this, e), {
      parentPath: r,
      parent: n
    } = this;
    if (r.isExpressionStatement() || r.isLabeledStatement() || GP(n) || r.isExportDefaultDeclaration() && this.isDeclaration())
      return r.insertBefore(t);
    if (this.isNodeType("Expression") && !this.isJSXElement() || r.isForStatement() && this.key === "init")
      return this.node && t.push(this.node), this.replaceExpressionWithStatements(t);
    if (Array.isArray(this.container))
      return fy.call(this, t);
    if (this.isStatementOrBlock()) {
      let i = this.node, a = i && (!this.isExpressionStatement() || i.expression != null);
      return this.replaceWith(KP(a ? [i] : [])), this.unshiftContainer("body", t);
    } else
      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
  }
  s(Nie, "insertBefore");
  function cy(e, t) {
    this.updateSiblingKeys(e, t.length);
    let r = [];
    this.container.splice(e, 0, ...t);
    for (let a = 0; a < t.length; a++) {
      var n;
      let o = e + a, l = this.getSibling(o);
      r.push(l), (n = this.context) != null && n.queue && l.pushContext(this.context);
    }
    let i = Eie._getQueueContexts.call(this);
    for (let a of r) {
      a.setScope(), a.debug("Inserted.");
      for (let o of i)
        o.maybeQueue(a, !0);
    }
    return r;
  }
  s(cy, "_containerInsert");
  function fy(e) {
    return cy.call(this, this.key, e);
  }
  s(fy, "_containerInsertBefore");
  function HP(e) {
    return cy.call(this, this.key + 1, e);
  }
  s(HP, "_containerInsertAfter");
  var YP = /* @__PURE__ */ s((e) => e[e.length - 1], "last");
  function zP(e) {
    return Iie(e.parent) && (YP(e.parent.expressions) !== e.node || zP(e.parentPath));
  }
  s(zP, "isHiddenInSequenceExpression");
  function Bie(e, t) {
    if (!Aie(e) || !Die(e.left))
      return !1;
    let r = t.getBlockParent();
    return r.hasOwnBinding(e.left.name) && r.getOwnBinding(e.left.name).constantViolations.length <= 1;
  }
  s(Bie, "isAlmostConstantAssignment");
  function kie(e) {
    if (Lu._assertUnremoved.call(this), this.isSequenceExpression())
      return YP(this.get("expressions")).insertAfter(e);
    let t = po.call(this, e), {
      parentPath: r,
      parent: n
    } = this;
    if (r.isExpressionStatement() || r.isLabeledStatement() || GP(n) || r.isExportDefaultDeclaration() && this.isDeclaration())
      return r.insertAfter(t.map((i) => wie(i) ? ly(i) : i));
    if (this.isNodeType("Expression") && !this.isJSXElement() && !r.isJSXElement() || r.isForStatement() && this.key === "init") {
      let i = this;
      if (i.node) {
        let a = i.node, {
          scope: o
        } = this;
        if (o.path.isPattern())
          return xie(a), i.replaceWith(Pie(Tie([], a), [])), i.get("callee.body").insertAfter(t), [i];
        if (zP(i))
          t.unshift(a);
        else if (Cie(a) && _ie(a.callee))
          t.unshift(a), t.push(Oie());
        else if (Bie(a, o))
          t.unshift(a), t.push(oy(a.left));
        else if (o.isPure(a, !0))
          t.push(a);
        else {
          r.isMethod({
            computed: !0,
            key: a
          }) && (o = o.parent);
          let l = o.generateDeclaredUidIdentifier();
          t.unshift(ly(Sie("=", oy(l), a))), t.push(ly(oy(l)));
        }
      }
      return this.replaceExpressionWithStatements(t);
    } else {
      if (Array.isArray(this.container))
        return HP.call(this, t);
      if (this.isStatementOrBlock()) {
        let i = this.node, a = i && (!this.isExpressionStatement() || i.expression != null);
        return this.replaceWith(KP(a ? [i] : [])), this.pushContainer("body", t);
      } else
        throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
    }
  }
  s(kie, "insertAfter");
  function Fie(e, t) {
    if (!this.parent) return;
    let r = (0, gie.getCachedPaths)(this.hub, this.parent) || [];
    for (let [, n] of r)
      typeof n.key == "number" && n.key >= e && (n.key += t);
  }
  s(Fie, "updateSiblingKeys");
  function po(e) {
    if (!e)
      return [];
    Array.isArray(e) || (e = [e]);
    for (let t = 0; t < e.length; t++) {
      let r = e[t], n;
      if (r ? typeof r != "object" ? n = "contains a non-object node" : r.type ? r instanceof uy.default && (n = "has a NodePath when it exp\
ected a raw object") : n = "without a type" : n = "has falsy node", n) {
        let i = Array.isArray(r) ? "array" : typeof r;
        throw new Error(`Node list ${n} with the index of ${t} and type of ${i}`);
      }
    }
    return e;
  }
  s(po, "_verifyNodeList");
  function jie(e, t) {
    Lu._assertUnremoved.call(this), t = po.call(this, t);
    let r = uy.default.get({
      parentPath: this,
      parent: this.node,
      container: this.node[e],
      listKey: e,
      key: 0
    }).setContext(this.context);
    return fy.call(r, t);
  }
  s(jie, "unshiftContainer");
  function Lie(e, t) {
    Lu._assertUnremoved.call(this);
    let r = po.call(this, t), n = this.node[e];
    return uy.default.get({
      parentPath: this,
      parent: this.node,
      container: n,
      listKey: e,
      key: n.length
    }).setContext(this.context).replaceWithMultiple(r);
  }
  s(Lie, "pushContainer");
  function Mie(e = this.scope) {
    return new bie.default(this, e).run();
  }
  s(Mie, "hoist");
});

// ../node_modules/@babel/traverse/lib/path/replacement.js
var ay = T((ps) => {
  "use strict";
  Object.defineProperty(ps, "__esModule", {
    value: !0
  });
  ps._replaceWith = nA;
  ps.replaceExpressionWithStatements = pae;
  ps.replaceInline = dae;
  ps.replaceWith = fae;
  ps.replaceWithMultiple = uae;
  ps.replaceWithSourceString = cae;
  var Rie = to(), hy = Ir(), qie = fs(), eA = Vs(), my = py(), Uie = js(), Vie = Se(), {
    FUNCTION_TYPES: JP,
    arrowFunctionExpression: $ie,
    assignmentExpression: tA,
    awaitExpression: Wie,
    blockStatement: Kie,
    buildUndefinedNode: dy,
    callExpression: Gie,
    cloneNode: yy,
    conditionalExpression: Hie,
    expressionStatement: Yie,
    getBindingIdentifiers: zie,
    identifier: Jie,
    inheritLeadingComments: Xie,
    inheritTrailingComments: Qie,
    inheritsComments: Zie,
    isBlockStatement: eae,
    isEmptyStatement: XP,
    isExpression: rA,
    isExpressionStatement: tae,
    isIfStatement: rae,
    isProgram: nae,
    isStatement: sae,
    isVariableDeclaration: iae,
    removeComments: aae,
    returnStatement: QP,
    sequenceExpression: oae,
    validate: ZP,
    yieldExpression: lae
  } = Vie;
  function uae(e) {
    var t;
    this.resync(), e = my._verifyNodeList.call(this, e), Xie(e[0], this.node), Qie(e[e.length - 1], this.node), (t = (0, eA.getCachedPaths)(
    this.hub, this.parent)) == null || t.delete(this.node), this.node = this.container[this.key] = null;
    let r = this.insertAfter(e);
    return this.node ? this.requeue() : this.remove(), r;
  }
  s(uae, "replaceWithMultiple");
  function cae(e) {
    this.resync();
    let t;
    try {
      e = `(${e})`, t = (0, Uie.parse)(e);
    } catch (n) {
      let i = n.loc;
      throw i && (n.message += ` - make sure this is an expression.
` + (0, Rie.codeFrameColumns)(e, {
        start: {
          line: i.line,
          column: i.column + 1
        }
      }), n.code = "BABEL_REPLACE_SOURCE_ERROR"), n;
    }
    let r = t.program.body[0].expression;
    return hy.default.removeProperties(r), this.replaceWith(r);
  }
  s(cae, "replaceWithSourceString");
  function fae(e) {
    if (this.resync(), this.removed)
      throw new Error("You can't replace this node, we've already removed it");
    let t = e instanceof qie.default ? e.node : e;
    if (!t)
      throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
    if (this.node === t)
      return [this];
    if (this.isProgram() && !nae(t))
      throw new Error("You can only replace a Program root node with another Program node");
    if (Array.isArray(t))
      throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
    if (typeof t == "string")
      throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
    let r = "";
    if (this.isNodeType("Statement") && rA(t) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(
    t) && !this.parentPath.isExportDefaultDeclaration() && (t = Yie(t), r = "expression"), this.isNodeType("Expression") && sae(t) && !this.
    canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(t))
      return this.replaceExpressionWithStatements([t]);
    let n = this.node;
    return n && (Zie(t, n), aae(n)), nA.call(this, t), this.type = t.type, this.setScope(), this.requeue(), [r ? this.get(r) : this];
  }
  s(fae, "replaceWith");
  function nA(e) {
    var t;
    if (!this.container)
      throw new ReferenceError("Container is falsy");
    this.inList ? ZP(this.parent, this.key, [e]) : ZP(this.parent, this.key, e), this.debug(`Replace with ${e?.type}`), (t = (0, eA.getCachedPaths)(
    this.hub, this.parent)) == null || t.set(e, this).delete(this.node), this.node = this.container[this.key] = e;
  }
  s(nA, "_replaceWith");
  function pae(e) {
    this.resync();
    let t = [], r = Mu(e, t);
    if (r) {
      for (let h of t) this.scope.push({
        id: h
      });
      return this.replaceWith(r)[0].get("expressions");
    }
    let n = this.getFunctionParent(), i = n?.is("async"), a = n?.is("generator"), o = $ie([], Kie(e));
    this.replaceWith(Gie(o, []));
    let l = this.get("callee");
    l.get("body").scope.hoistVariables((h) => this.scope.push({
      id: h
    }));
    let u = l.getCompletionRecords();
    for (let h of u) {
      if (!h.isExpressionStatement()) continue;
      let y = h.findParent((v) => v.isLoop());
      if (y) {
        let v = y.getData("expressionReplacementReturnUid");
        v ? v = Jie(v.name) : (v = l.scope.generateDeclaredUidIdentifier("ret"), l.get("body").pushContainer("body", QP(yy(v))), y.setData("\
expressionReplacementReturnUid", v)), h.get("expression").replaceWith(tA("=", yy(v), h.node.expression));
      } else
        h.replaceWith(QP(h.node.expression));
    }
    l.arrowFunctionToExpression();
    let c = l, f = i && hy.default.hasType(this.get("callee.body").node, "AwaitExpression", JP), p = a && hy.default.hasType(this.get("calle\
e.body").node, "YieldExpression", JP);
    return f && (c.set("async", !0), p || this.replaceWith(Wie(this.node))), p && (c.set("generator", !0), this.replaceWith(lae(this.node, !0))),
    c.get("body.body");
  }
  s(pae, "replaceExpressionWithStatements");
  function Mu(e, t) {
    let r = [], n = !0;
    for (let i of e)
      if (XP(i) || (n = !1), rA(i))
        r.push(i);
      else if (tae(i))
        r.push(i.expression);
      else if (iae(i)) {
        if (i.kind !== "var") return;
        for (let a of i.declarations) {
          let o = zie(a);
          for (let l of Object.keys(o))
            t.push(yy(o[l]));
          a.init && r.push(tA("=", a.id, a.init));
        }
        n = !0;
      } else if (rae(i)) {
        let a = i.consequent ? Mu([i.consequent], t) : dy(), o = i.alternate ? Mu([i.alternate], t) : dy();
        if (!a || !o) return;
        r.push(Hie(i.test, a, o));
      } else if (eae(i)) {
        let a = Mu(i.body, t);
        if (!a) return;
        r.push(a);
      } else if (XP(i))
        e.indexOf(i) === 0 && (n = !0);
      else
        return;
    return n && r.push(dy()), r.length === 1 ? r[0] : oae(r);
  }
  s(Mu, "gatherSequenceExpressions");
  function dae(e) {
    if (this.resync(), Array.isArray(e))
      if (Array.isArray(this.container)) {
        e = my._verifyNodeList.call(this, e);
        let t = my._containerInsertAfter.call(this, e);
        return this.remove(), t;
      } else
        return this.replaceWithMultiple(e);
    else
      return this.replaceWith(e);
  }
  s(dae, "replaceInline");
});

// ../node_modules/@babel/traverse/lib/path/evaluation.js
var oA = T((Ru) => {
  "use strict";
  Object.defineProperty(Ru, "__esModule", {
    value: !0
  });
  Ru.evaluate = Tae;
  Ru.evaluateTruthy = Eae;
  var hae = ["Number", "String", "Math"], mae = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeUR\
I", "encodeURIComponent", null, null], yae = ["random"];
  function sA(e) {
    return hae.includes(e);
  }
  s(sA, "isValidObjectCallee");
  function gae(e) {
    return mae.includes(e);
  }
  s(gae, "isValidIdentifierCallee");
  function bae(e) {
    return yae.includes(e);
  }
  s(bae, "isInvalidMethod");
  function Eae() {
    let e = this.evaluate();
    if (e.confident) return !!e.value;
  }
  s(Eae, "evaluateTruthy");
  function Nn(e, t) {
    t.confident && (t.deoptPath = e, t.confident = !1);
  }
  s(Nn, "deopt");
  var iA = /* @__PURE__ */ new Map([["undefined", void 0], ["Infinity", 1 / 0], ["NaN", NaN]]);
  function lr(e, t) {
    let {
      node: r
    } = e, {
      seen: n
    } = t;
    if (n.has(r)) {
      let i = n.get(r);
      if (i.resolved)
        return i.value;
      Nn(e, t);
      return;
    } else {
      let i = {
        resolved: !1
      };
      n.set(r, i);
      let a = vae(e, t);
      return t.confident && (i.resolved = !0, i.value = a), a;
    }
  }
  s(lr, "evaluateCached");
  function vae(e, t) {
    if (t.confident) {
      if (e.isSequenceExpression()) {
        let r = e.get("expressions");
        return lr(r[r.length - 1], t);
      }
      if (e.isStringLiteral() || e.isNumericLiteral() || e.isBooleanLiteral())
        return e.node.value;
      if (e.isNullLiteral())
        return null;
      if (e.isTemplateLiteral())
        return aA(e, e.node.quasis, t);
      if (e.isTaggedTemplateExpression() && e.get("tag").isMemberExpression()) {
        let r = e.get("tag.object"), {
          node: {
            name: n
          }
        } = r, i = e.get("tag.property");
        if (r.isIdentifier() && n === "String" && !e.scope.getBinding(n) && i.isIdentifier() && i.node.name === "raw")
          return aA(e, e.node.quasi.quasis, t, !0);
      }
      if (e.isConditionalExpression()) {
        let r = lr(e.get("test"), t);
        return t.confident ? lr(r ? e.get("consequent") : e.get("alternate"), t) : void 0;
      }
      if (e.isExpressionWrapper())
        return lr(e.get("expression"), t);
      if (e.isMemberExpression() && !e.parentPath.isCallExpression({
        callee: e.node
      })) {
        let r = e.get("property"), n = e.get("object");
        if (n.isLiteral()) {
          let i = n.node.value, a = typeof i, o = null;
          if (e.node.computed) {
            if (o = lr(r, t), !t.confident) return;
          } else r.isIdentifier() && (o = r.node.name);
          if ((a === "number" || a === "string") && o != null && (typeof o == "number" || typeof o == "string"))
            return i[o];
        }
      }
      if (e.isReferencedIdentifier()) {
        let r = e.scope.getBinding(e.node.name);
        if (r) {
          if (r.constantViolations.length > 0 || e.node.start < r.path.node.end) {
            Nn(r.path, t);
            return;
          }
          if (r.hasValue)
            return r.value;
        }
        let n = e.node.name;
        if (iA.has(n)) {
          if (!r)
            return iA.get(n);
          Nn(r.path, t);
          return;
        }
        let i = e.resolve();
        if (i === e) {
          Nn(e, t);
          return;
        } else
          return lr(i, t);
      }
      if (e.isUnaryExpression({
        prefix: !0
      })) {
        if (e.node.operator === "void")
          return;
        let r = e.get("argument");
        if (e.node.operator === "typeof" && (r.isFunction() || r.isClass()))
          return "function";
        let n = lr(r, t);
        if (!t.confident) return;
        switch (e.node.operator) {
          case "!":
            return !n;
          case "+":
            return +n;
          case "-":
            return -n;
          case "~":
            return ~n;
          case "typeof":
            return typeof n;
        }
      }
      if (e.isArrayExpression()) {
        let r = [], n = e.get("elements");
        for (let i of n) {
          let a = i.evaluate();
          if (a.confident)
            r.push(a.value);
          else {
            Nn(a.deopt, t);
            return;
          }
        }
        return r;
      }
      if (e.isObjectExpression()) {
        let r = {}, n = e.get("properties");
        for (let i of n) {
          if (i.isObjectMethod() || i.isSpreadElement()) {
            Nn(i, t);
            return;
          }
          let a = i.get("key"), o;
          if (i.node.computed) {
            if (o = a.evaluate(), !o.confident) {
              Nn(o.deopt, t);
              return;
            }
            o = o.value;
          } else a.isIdentifier() ? o = a.node.name : o = a.node.value;
          let u = i.get("value").evaluate();
          if (!u.confident) {
            Nn(u.deopt, t);
            return;
          }
          u = u.value, r[o] = u;
        }
        return r;
      }
      if (e.isLogicalExpression()) {
        let r = t.confident, n = lr(e.get("left"), t), i = t.confident;
        t.confident = r;
        let a = lr(e.get("right"), t), o = t.confident;
        switch (e.node.operator) {
          case "||":
            return t.confident = i && (!!n || o), t.confident ? n || a : void 0;
          case "&&":
            return t.confident = i && (!n || o), t.confident ? n && a : void 0;
          case "??":
            return t.confident = i && (n != null || o), t.confident ? n ?? a : void 0;
        }
      }
      if (e.isBinaryExpression()) {
        let r = lr(e.get("left"), t);
        if (!t.confident) return;
        let n = lr(e.get("right"), t);
        if (!t.confident) return;
        switch (e.node.operator) {
          case "-":
            return r - n;
          case "+":
            return r + n;
          case "/":
            return r / n;
          case "*":
            return r * n;
          case "%":
            return r % n;
          case "**":
            return Math.pow(r, n);
          case "<":
            return r < n;
          case ">":
            return r > n;
          case "<=":
            return r <= n;
          case ">=":
            return r >= n;
          case "==":
            return r == n;
          case "!=":
            return r != n;
          case "===":
            return r === n;
          case "!==":
            return r !== n;
          case "|":
            return r | n;
          case "&":
            return r & n;
          case "^":
            return r ^ n;
          case "<<":
            return r << n;
          case ">>":
            return r >> n;
          case ">>>":
            return r >>> n;
        }
      }
      if (e.isCallExpression()) {
        let r = e.get("callee"), n, i;
        if (r.isIdentifier() && !e.scope.getBinding(r.node.name) && (sA(r.node.name) || gae(r.node.name)) && (i = global[r.node.name]), r.isMemberExpression()) {
          let a = r.get("object"), o = r.get("property");
          if (a.isIdentifier() && o.isIdentifier() && sA(a.node.name) && !bae(o.node.name)) {
            n = global[a.node.name];
            let l = o.node.name;
            hasOwnProperty.call(n, l) && (i = n[l]);
          }
          if (a.isLiteral() && o.isIdentifier()) {
            let l = typeof a.node.value;
            (l === "string" || l === "number") && (n = a.node.value, i = n[o.node.name]);
          }
        }
        if (i) {
          let a = e.get("arguments").map((o) => lr(o, t));
          return t.confident ? i.apply(n, a) : void 0;
        }
      }
      Nn(e, t);
    }
  }
  s(vae, "_evaluate");
  function aA(e, t, r, n = !1) {
    let i = "", a = 0, o = e.isTemplateLiteral() ? e.get("expressions") : e.get("quasi.expressions");
    for (let l of t) {
      if (!r.confident) break;
      i += n ? l.value.raw : l.value.cooked;
      let u = o[a++];
      u && (i += String(lr(u, r)));
    }
    if (r.confident)
      return i;
  }
  s(aA, "evaluateQuasis");
  function Tae() {
    let e = {
      confident: !0,
      deoptPath: null,
      seen: /* @__PURE__ */ new Map()
    }, t = lr(this, e);
    return e.confident || (t = void 0), {
      confident: e.confident,
      deopt: e.deoptPath,
      value: t
    };
  }
  s(Tae, "evaluate");
});

// ../node_modules/@babel/traverse/lib/path/conversion.js
var mA = T((Bn) => {
  "use strict";
  Object.defineProperty(Bn, "__esModule", {
    value: !0
  });
  Bn.arrowFunctionToExpression = Jae;
  Bn.ensureBlock = Hae;
  Bn.ensureFunctionName = loe;
  Bn.splitExportDeclaration = aoe;
  Bn.toComputedKey = Gae;
  Bn.unwrapFunctionEnvironment = Yae;
  var xae = Se(), Sae = Oi(), Ey = io(), {
    arrowFunctionExpression: vy,
    assignmentExpression: Ys,
    binaryExpression: gy,
    blockStatement: Pae,
    callExpression: Mi,
    conditionalExpression: Aae,
    expressionStatement: cA,
    identifier: at,
    isIdentifier: Cae,
    jsxIdentifier: wae,
    logicalExpression: Dae,
    LOGICAL_OPERATORS: Iae,
    memberExpression: Gr,
    metaProperty: _ae,
    numericLiteral: Oae,
    objectExpression: Nae,
    restElement: Bae,
    returnStatement: kae,
    sequenceExpression: Fae,
    spreadElement: jae,
    stringLiteral: fA,
    super: by,
    thisExpression: ho,
    toExpression: pA,
    unaryExpression: Lae,
    toBindingIdentifierName: Mae,
    isFunction: Rae,
    isAssignmentPattern: qae,
    isRestElement: Uae,
    getFunctionName: Vae,
    cloneNode: zs,
    variableDeclaration: $ae,
    variableDeclarator: Wae,
    exportNamedDeclaration: lA,
    exportSpecifier: uA,
    inherits: Kae
  } = xae;
  function Gae() {
    let e;
    if (this.isMemberExpression())
      e = this.node.property;
    else if (this.isProperty() || this.isMethod())
      e = this.node.key;
    else
      throw new ReferenceError("todo");
    return this.node.computed || Cae(e) && (e = fA(e.name)), e;
  }
  s(Gae, "toComputedKey");
  function Hae() {
    let e = this.get("body"), t = e.node;
    if (Array.isArray(e))
      throw new Error("Can't convert array path to a block statement");
    if (!t)
      throw new Error("Can't convert node without a body");
    if (e.isBlockStatement())
      return t;
    let r = [], n = "body", i, a;
    e.isStatement() ? (a = "body", i = 0, r.push(e.node)) : (n += ".body.0", this.isFunction() ? (i = "argument", r.push(kae(e.node))) : (i =
    "expression", r.push(cA(e.node)))), this.node.body = Pae(r);
    let o = this.get(n);
    return e.setup(o, a ? o.node[a] : o.node, a, i), this.node;
  }
  s(Hae, "ensureBlock");
  Bn.arrowFunctionToShadowed = function() {
    this.isArrowFunctionExpression() && this.arrowFunctionToExpression();
  };
  function Yae() {
    if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration())
      throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
    dA(this);
  }
  s(Yae, "unwrapFunctionEnvironment");
  function zae(e, t) {
    e.node.type = t;
  }
  s(zae, "setType");
  function Jae({
    allowInsertArrow: e = !0,
    allowInsertArrowWithRest: t = e,
    noNewArrows: r = !((n) => (n = arguments[0]) == null ? void 0 : n.specCompliant)()
  } = {}) {
    if (!this.isArrowFunctionExpression())
      throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
    let n = this;
    if (!r) {
      var i;
      n = (i = n.ensureFunctionName(!1)) != null ? i : n;
    }
    let {
      thisBinding: a,
      fnPath: o
    } = dA(n, r, e, t);
    if (o.ensureBlock(), zae(o, "FunctionExpression"), !r) {
      let l = a ? null : o.scope.generateUidIdentifier("arrowCheckId");
      return l && o.parentPath.scope.push({
        id: l,
        init: Nae([])
      }), o.get("body").unshiftContainer("body", cA(Mi(this.hub.addHelper("newArrowCheck"), [ho(), at(l ? l.name : a)]))), o.replaceWith(Mi(
      Gr(o.node, at("bind")), [l ? at(l.name) : ho()])), o.get("callee.object");
    }
    return o;
  }
  s(Jae, "arrowFunctionToExpression");
  var Xae = (0, Ey.environmentVisitor)({
    CallExpression(e, {
      allSuperCalls: t
    }) {
      e.get("callee").isSuper() && t.push(e);
    }
  });
  function dA(e, t = !0, r = !0, n = !0) {
    let i, a = e.findParent((y) => {
      if (y.isArrowFunctionExpression()) {
        var v;
        return (v = i) != null || (i = y), !1;
      }
      return y.isFunction() || y.isProgram() || y.isClassProperty({
        static: !1
      }) || y.isClassPrivateProperty({
        static: !1
      });
    }), o = a.isClassMethod({
      kind: "constructor"
    });
    if (a.isClassProperty() || a.isClassPrivateProperty())
      if (i)
        a = i;
      else if (r)
        e.replaceWith(Mi(vy([], pA(e.node)), [])), a = e.get("callee"), e = a.get("body");
      else
        throw e.buildCodeFrameError("Unable to transform arrow inside class property");
    let {
      thisPaths: l,
      argumentsPaths: u,
      newTargetPaths: c,
      superProps: f,
      superCalls: p
    } = ioe(e);
    if (o && p.length > 0) {
      if (!r)
        throw p[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an a\
rrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
      if (!n)
        throw p[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow \
function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration\
.");
      let y = [];
      a.traverse(Xae, {
        allSuperCalls: y
      });
      let v = roe(a);
      y.forEach((d) => {
        let b = at(v);
        b.loc = d.node.callee.loc, d.get("callee").replaceWith(b);
      });
    }
    if (u.length > 0) {
      let y = mo(a, "arguments", () => {
        let v = /* @__PURE__ */ s(() => at("arguments"), "args");
        return a.scope.path.isProgram() ? Aae(gy("===", Lae("typeof", v()), fA("undefined")), a.scope.buildUndefinedNode(), v()) : v();
      });
      u.forEach((v) => {
        let d = at(y);
        d.loc = v.node.loc, v.replaceWith(d);
      });
    }
    if (c.length > 0) {
      let y = mo(a, "newtarget", () => _ae(at("new"), at("target")));
      c.forEach((v) => {
        let d = at(y);
        d.loc = v.node.loc, v.replaceWith(d);
      });
    }
    if (f.length > 0) {
      if (!r)
        throw f[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in a\
n arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
      f.reduce((v, d) => v.concat(Zae(d)), []).forEach((v) => {
        let d = v.node.computed ? "" : v.get("property").node.name, b = v.parentPath, E = b.isAssignmentExpression({
          left: v.node
        }), I = b.isCallExpression({
          callee: v.node
        }), O = b.isTaggedTemplateExpression({
          tag: v.node
        }), k = noe(a, E, d), j = [];
        if (v.node.computed && j.push(v.get("property").node), E) {
          let U = b.node.right;
          j.push(U);
        }
        let R = Mi(at(k), j);
        I ? (b.unshiftContainer("arguments", ho()), v.replaceWith(Gr(R, at("call"))), l.push(b.get("arguments.0"))) : E ? b.replaceWith(R) :
        O ? (v.replaceWith(Mi(Gr(R, at("bind"), !1), [ho()])), l.push(v.get("arguments.0"))) : v.replaceWith(R);
      });
    }
    let h;
    return (l.length > 0 || !t) && (h = toe(a, o), (t || o && hA(a)) && (l.forEach((y) => {
      let v = y.isJSX() ? wae(h) : at(h);
      v.loc = y.node.loc, y.replaceWith(v);
    }), t || (h = null))), {
      thisBinding: h,
      fnPath: e
    };
  }
  s(dA, "hoistFunctionEnvironment");
  function Qae(e) {
    return Iae.includes(e);
  }
  s(Qae, "isLogicalOp");
  function Zae(e) {
    if (e.parentPath.isAssignmentExpression() && e.parentPath.node.operator !== "=") {
      let r = e.parentPath, n = r.node.operator.slice(0, -1), i = r.node.right, a = Qae(n);
      if (e.node.computed) {
        let o = e.scope.generateDeclaredUidIdentifier("tmp"), l = e.node.object, u = e.node.property;
        r.get("left").replaceWith(Gr(l, Ys("=", o, u), !0)), r.get("right").replaceWith(t(a ? "=" : n, Gr(l, at(o.name), !0), i));
      } else {
        let o = e.node.object, l = e.node.property;
        r.get("left").replaceWith(Gr(o, l)), r.get("right").replaceWith(t(a ? "=" : n, Gr(o, at(l.name)), i));
      }
      return a ? r.replaceWith(Dae(n, r.node.left, r.node.right)) : r.node.operator = "=", [r.get("left"), r.get("right").get("left")];
    } else if (e.parentPath.isUpdateExpression()) {
      let r = e.parentPath, n = e.scope.generateDeclaredUidIdentifier("tmp"), i = e.node.computed ? e.scope.generateDeclaredUidIdentifier("p\
rop") : null, a = [Ys("=", n, Gr(e.node.object, i ? Ys("=", i, e.node.property) : e.node.property, e.node.computed)), Ys("=", Gr(e.node.object,
      i ? at(i.name) : e.node.property, e.node.computed), gy(e.parentPath.node.operator[0], at(n.name), Oae(1)))];
      e.parentPath.node.prefix || a.push(at(n.name)), r.replaceWith(Fae(a));
      let o = r.get("expressions.0.right"), l = r.get("expressions.1.left");
      return [o, l];
    }
    return [e];
    function t(r, n, i) {
      return r === "=" ? Ys("=", n, i) : gy(r, n, i);
    }
  }
  s(Zae, "standardizeSuperProperty");
  function hA(e) {
    return e.isClassMethod() && !!e.parentPath.parentPath.node.superClass;
  }
  s(hA, "hasSuperClass");
  var eoe = (0, Ey.environmentVisitor)({
    CallExpression(e, {
      supers: t,
      thisBinding: r
    }) {
      e.get("callee").isSuper() && (t.has(e.node) || (t.add(e.node), e.replaceWithMultiple([e.node, Ys("=", at(r), at("this"))])));
    }
  });
  function toe(e, t) {
    return mo(e, "this", (r) => {
      if (!t || !hA(e)) return ho();
      e.traverse(eoe, {
        supers: /* @__PURE__ */ new WeakSet(),
        thisBinding: r
      });
    });
  }
  s(toe, "getThisBinding");
  function roe(e) {
    return mo(e, "supercall", () => {
      let t = e.scope.generateUidIdentifier("args");
      return vy([Bae(t)], Mi(by(), [jae(at(t.name))]));
    });
  }
  s(roe, "getSuperBinding");
  function noe(e, t, r) {
    return mo(e, `superprop_${t ? "set" : "get"}:${r || ""}`, () => {
      let i = [], a;
      if (r)
        a = Gr(by(), at(r));
      else {
        let o = e.scope.generateUidIdentifier("prop");
        i.unshift(o), a = Gr(by(), at(o.name), !0);
      }
      if (t) {
        let o = e.scope.generateUidIdentifier("value");
        i.push(o), a = Ys("=", a, at(o.name));
      }
      return vy(i, a);
    });
  }
  s(noe, "getSuperPropBinding");
  function mo(e, t, r) {
    let n = "binding:" + t, i = e.getData(n);
    if (!i) {
      let a = e.scope.generateUidIdentifier(t);
      i = a.name, e.setData(n, i), e.scope.push({
        id: a,
        init: r(i)
      });
    }
    return i;
  }
  s(mo, "getBinding");
  var soe = (0, Ey.environmentVisitor)({
    ThisExpression(e, {
      thisPaths: t
    }) {
      t.push(e);
    },
    JSXIdentifier(e, {
      thisPaths: t
    }) {
      e.node.name === "this" && (!e.parentPath.isJSXMemberExpression({
        object: e.node
      }) && !e.parentPath.isJSXOpeningElement({
        name: e.node
      }) || t.push(e));
    },
    CallExpression(e, {
      superCalls: t
    }) {
      e.get("callee").isSuper() && t.push(e);
    },
    MemberExpression(e, {
      superProps: t
    }) {
      e.get("object").isSuper() && t.push(e);
    },
    Identifier(e, {
      argumentsPaths: t
    }) {
      if (!e.isReferencedIdentifier({
        name: "arguments"
      })) return;
      let r = e.scope;
      do {
        if (r.hasOwnBinding("arguments")) {
          r.rename("arguments");
          return;
        }
        if (r.path.isFunction() && !r.path.isArrowFunctionExpression())
          break;
      } while (r = r.parent);
      t.push(e);
    },
    MetaProperty(e, {
      newTargetPaths: t
    }) {
      e.get("meta").isIdentifier({
        name: "new"
      }) && e.get("property").isIdentifier({
        name: "target"
      }) && t.push(e);
    }
  });
  function ioe(e) {
    let t = [], r = [], n = [], i = [], a = [];
    return e.traverse(soe, {
      thisPaths: t,
      argumentsPaths: r,
      newTargetPaths: n,
      superProps: i,
      superCalls: a
    }), {
      thisPaths: t,
      argumentsPaths: r,
      newTargetPaths: n,
      superProps: i,
      superCalls: a
    };
  }
  s(ioe, "getScopeInformation");
  function aoe() {
    if (!this.isExportDeclaration() || this.isExportAllDeclaration())
      throw new Error("Only default and named export declarations can be split.");
    if (this.isExportNamedDeclaration() && this.get("specifiers").length > 0)
      throw new Error("It doesn't make sense to split exported specifiers.");
    let e = this.get("declaration");
    if (this.isExportDefaultDeclaration()) {
      let i = e.isFunctionDeclaration() || e.isClassDeclaration(), a = e.isFunctionExpression() || e.isClassExpression(), o = e.isScope() ? e.
      scope.parent : e.scope, l = e.node.id, u = !1;
      l ? a && o.hasBinding(l.name) && (u = !0, l = o.generateUidIdentifier(l.name)) : (u = !0, l = o.generateUidIdentifier("default"), (i ||
      a) && (e.node.id = zs(l)));
      let c = i ? e.node : $ae("var", [Wae(zs(l), e.node)]), f = lA(null, [uA(zs(l), at("default"))]);
      return this.insertAfter(f), this.replaceWith(c), u && o.registerDeclaration(this), this;
    } else if (this.get("specifiers").length > 0)
      throw new Error("It doesn't make sense to split exported specifiers.");
    let t = e.getOuterBindingIdentifiers(), r = Object.keys(t).map((i) => uA(at(i), at(i))), n = lA(null, r);
    return this.insertAfter(n), this.replaceWith(e.node), this;
  }
  s(aoe, "splitExportDeclaration");
  var ooe = {
    "ReferencedIdentifier|BindingIdentifier"(e, t) {
      e.node.name === t.name && (t.needsRename = !0, e.stop());
    },
    Scope(e, t) {
      e.scope.hasOwnBinding(t.name) && e.skip();
    }
  };
  function loe(e) {
    if (this.node.id) return this;
    let t = Vae(this.node, this.parent);
    if (t == null) return this;
    let {
      name: r
    } = t;
    if (!e && /[\uD800-\uDFFF]/.test(r) || r.startsWith("get ") || r.startsWith("set "))
      return null;
    r = Mae(r.replace(/[/ ]/g, "_"));
    let n = at(r);
    Kae(n, t.originalNode);
    let i = {
      needsRename: !1,
      name: r
    }, {
      scope: a
    } = this, o = a.getOwnBinding(r);
    if (o ? o.kind === "param" && (i.needsRename = !0) : (a.parent.hasBinding(r) || a.hasGlobal(r)) && this.traverse(ooe, i), !i.needsRename)
      return this.node.id = n, a.getProgramParent().references[n.name] = !0, this;
    if (a.hasBinding(n.name) && !a.hasGlobal(n.name))
      return a.rename(n.name), this.node.id = n, a.getProgramParent().references[n.name] = !0, this;
    if (!Rae(this.node)) return null;
    let l = a.generateUidIdentifier(n.name), u = [];
    for (let f = 0, p = uoe(this.node); f < p; f++)
      u.push(a.generateUidIdentifier("x"));
    let c = Sae.default.expression.ast`
    (function (${l}) {
      function ${n}(${u}) {
        return ${zs(l)}.apply(this, arguments);
      }

      ${zs(n)}.toString = function () {
        return ${zs(l)}.toString();
      }

      return ${zs(n)};
    })(${pA(this.node)})
  `;
    return this.replaceWith(c)[0].get("arguments.0");
  }
  s(loe, "ensureFunctionName");
  function uoe(e) {
    let t = e.params.findIndex((r) => qae(r) || Uae(r));
    return t === -1 ? e.params.length : t;
  }
  s(uoe, "getFunctionArity");
});

// ../node_modules/@babel/traverse/lib/path/introspection.js
var xA = T((Tt) => {
  "use strict";
  Object.defineProperty(Tt, "__esModule", {
    value: !0
  });
  Tt._guessExecutionStatusRelativeTo = Noe;
  Tt._resolve = TA;
  Tt.canHaveVariableDeclarationOrExpression = Poe;
  Tt.canSwapBetweenExpressionAndStatement = Aoe;
  Tt.equals = xoe;
  Tt.getSource = Ioe;
  Tt.has = vA;
  Tt.is = void 0;
  Tt.isCompletionRecord = Coe;
  Tt.isConstantExpression = joe;
  Tt.isInStrictMode = Loe;
  Tt.isNodeType = Soe;
  Tt.isStatementOrBlock = woe;
  Tt.isStatic = voe;
  Tt.isnt = Toe;
  Tt.matchesPattern = Eoe;
  Tt.referencesImport = Doe;
  Tt.resolve = Foe;
  Tt.willIMaybeExecuteBefore = _oe;
  var coe = Se(), {
    STATEMENT_OR_BLOCK_KEYS: foe,
    VISITOR_KEYS: poe,
    isBlockStatement: EA,
    isExpression: doe,
    isIdentifier: hoe,
    isLiteral: moe,
    isStringLiteral: yoe,
    isType: goe,
    matchesPattern: boe
  } = coe;
  function Eoe(e, t) {
    return boe(this.node, e, t);
  }
  s(Eoe, "matchesPattern");
  function vA(e) {
    var t;
    let r = (t = this.node) == null ? void 0 : t[e];
    return r && Array.isArray(r) ? !!r.length : !!r;
  }
  s(vA, "has");
  function voe() {
    return this.scope.isStatic(this.node);
  }
  s(voe, "isStatic");
  var WCe = Tt.is = vA;
  function Toe(e) {
    return !this.has(e);
  }
  s(Toe, "isnt");
  function xoe(e, t) {
    return this.node[e] === t;
  }
  s(xoe, "equals");
  function Soe(e) {
    return goe(this.type, e);
  }
  s(Soe, "isNodeType");
  function Poe() {
    return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
  }
  s(Poe, "canHaveVariableDeclarationOrExpression");
  function Aoe(e) {
    return this.key !== "body" || !this.parentPath.isArrowFunctionExpression() ? !1 : this.isExpression() ? EA(e) : this.isBlockStatement() ?
    doe(e) : !1;
  }
  s(Aoe, "canSwapBetweenExpressionAndStatement");
  function Coe(e) {
    let t = this, r = !0;
    do {
      let {
        type: n,
        container: i
      } = t;
      if (!r && (t.isFunction() || n === "StaticBlock"))
        return !!e;
      if (r = !1, Array.isArray(i) && t.key !== i.length - 1)
        return !1;
    } while ((t = t.parentPath) && !t.isProgram() && !t.isDoExpression());
    return !0;
  }
  s(Coe, "isCompletionRecord");
  function woe() {
    return this.parentPath.isLabeledStatement() || EA(this.container) ? !1 : foe.includes(this.key);
  }
  s(woe, "isStatementOrBlock");
  function Doe(e, t) {
    if (!this.isReferencedIdentifier()) {
      if (this.isJSXMemberExpression() && this.node.property.name === t || (this.isMemberExpression() || this.isOptionalMemberExpression()) &&
      (this.node.computed ? yoe(this.node.property, {
        value: t
      }) : this.node.property.name === t)) {
        let a = this.get("object");
        return a.isReferencedIdentifier() && a.referencesImport(e, "*");
      }
      return !1;
    }
    let r = this.scope.getBinding(this.node.name);
    if (!r || r.kind !== "module") return !1;
    let n = r.path, i = n.parentPath;
    if (!i.isImportDeclaration()) return !1;
    if (i.node.source.value === e) {
      if (!t) return !0;
    } else
      return !1;
    return !!(n.isImportDefaultSpecifier() && t === "default" || n.isImportNamespaceSpecifier() && t === "*" || n.isImportSpecifier() && hoe(
    n.node.imported, {
      name: t
    }));
  }
  s(Doe, "referencesImport");
  function Ioe() {
    let e = this.node;
    if (e.end) {
      let t = this.hub.getCode();
      if (t) return t.slice(e.start, e.end);
    }
    return "";
  }
  s(Ioe, "getSource");
  function _oe(e) {
    return this._guessExecutionStatusRelativeTo(e) !== "after";
  }
  s(_oe, "willIMaybeExecuteBefore");
  function yA(e) {
    return e.isProgram() ? e : (e.parentPath.scope.getFunctionParent() || e.parentPath.scope.getProgramParent()).path;
  }
  s(yA, "getOuterFunction");
  function Ooe(e, t) {
    switch (e) {
      case "LogicalExpression":
        return t === "right";
      case "ConditionalExpression":
      case "IfStatement":
        return t === "consequent" || t === "alternate";
      case "WhileStatement":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForOfStatement":
        return t === "body";
      case "ForStatement":
        return t === "body" || t === "update";
      case "SwitchStatement":
        return t === "cases";
      case "TryStatement":
        return t === "handler";
      case "AssignmentPattern":
        return t === "right";
      case "OptionalMemberExpression":
        return t === "property";
      case "OptionalCallExpression":
        return t === "arguments";
      default:
        return !1;
    }
  }
  s(Ooe, "isExecutionUncertain");
  function gA(e, t) {
    for (let r = 0; r < t; r++) {
      let n = e[r];
      if (Ooe(n.parent.type, n.parentKey))
        return !0;
    }
    return !1;
  }
  s(gA, "isExecutionUncertainInList");
  var bA = Symbol();
  function Noe(e) {
    return Ty(this, e, /* @__PURE__ */ new Map());
  }
  s(Noe, "_guessExecutionStatusRelativeTo");
  function Ty(e, t, r) {
    let n = {
      this: yA(e),
      target: yA(t)
    };
    if (n.target.node !== n.this.node)
      return koe(e, n.target, r);
    let i = {
      target: t.getAncestry(),
      this: e.getAncestry()
    };
    if (i.target.includes(e)) return "after";
    if (i.this.includes(t)) return "before";
    let a, o = {
      target: 0,
      this: 0
    };
    for (; !a && o.this < i.this.length; ) {
      let f = i.this[o.this];
      o.target = i.target.indexOf(f), o.target >= 0 ? a = f : o.this++;
    }
    if (!a)
      throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
    if (gA(i.this, o.this - 1) || gA(i.target, o.target - 1))
      return "unknown";
    let l = {
      this: i.this[o.this - 1],
      target: i.target[o.target - 1]
    };
    if (l.target.listKey && l.this.listKey && l.target.container === l.this.container)
      return l.target.key > l.this.key ? "before" : "after";
    let u = poe[a.type], c = {
      this: u.indexOf(l.this.parentKey),
      target: u.indexOf(l.target.parentKey)
    };
    return c.target > c.this ? "before" : "after";
  }
  s(Ty, "_guessExecutionStatusRelativeToCached");
  function Boe(e, t, r) {
    if (t.isFunctionDeclaration()) {
      if (t.parentPath.isExportDeclaration())
        return "unknown";
    } else return Ty(e, t, r) === "before" ? "before" : "unknown";
    let n = t.scope.getBinding(t.node.id.name);
    if (!n.references) return "before";
    let i = n.referencePaths, a;
    for (let o of i) {
      if (!!o.find((c) => c.node === t.node)) continue;
      if (o.key !== "callee" || !o.parentPath.isCallExpression())
        return "unknown";
      let u = Ty(e, o, r);
      if (a && a !== u)
        return "unknown";
      a = u;
    }
    return a;
  }
  s(Boe, "_guessExecutionStatusRelativeToDifferentFunctionsInternal");
  function koe(e, t, r) {
    let n = r.get(e.node), i;
    if (!n)
      r.set(e.node, n = /* @__PURE__ */ new Map());
    else if (i = n.get(t.node))
      return i === bA ? "unknown" : i;
    n.set(t.node, bA);
    let a = Boe(e, t, r);
    return n.set(t.node, a), a;
  }
  s(koe, "_guessExecutionStatusRelativeToDifferentFunctionsCached");
  function Foe(e, t) {
    return TA.call(this, e, t) || this;
  }
  s(Foe, "resolve");
  function TA(e, t) {
    var r;
    if (!((r = t) != null && r.includes(this)))
      if (t = t || [], t.push(this), this.isVariableDeclarator()) {
        if (this.get("id").isIdentifier())
          return this.get("init").resolve(e, t);
      } else if (this.isReferencedIdentifier()) {
        let n = this.scope.getBinding(this.node.name);
        if (!n || !n.constant || n.kind === "module") return;
        if (n.path !== this) {
          let i = n.path.resolve(e, t);
          return this.find((a) => a.node === i.node) ? void 0 : i;
        }
      } else {
        if (this.isTypeCastExpression())
          return this.get("expression").resolve(e, t);
        if (e && this.isMemberExpression()) {
          let n = this.toComputedKey();
          if (!moe(n)) return;
          let i = n.value, a = this.get("object").resolve(e, t);
          if (a.isObjectExpression()) {
            let o = a.get("properties");
            for (let l of o) {
              if (!l.isProperty()) continue;
              let u = l.get("key"), c = l.isnt("computed") && u.isIdentifier({
                name: i
              });
              if (c = c || u.isLiteral({
                value: i
              }), c) return l.get("value").resolve(e, t);
            }
          } else if (a.isArrayExpression() && !isNaN(+i)) {
            let l = a.get("elements")[i];
            if (l) return l.resolve(e, t);
          }
        }
      }
  }
  s(TA, "_resolve");
  function joe() {
    if (this.isIdentifier()) {
      let e = this.scope.getBinding(this.node.name);
      return e ? e.constant : !1;
    }
    if (this.isLiteral())
      return this.isRegExpLiteral() ? !1 : this.isTemplateLiteral() ? this.get("expressions").every((e) => e.isConstantExpression()) : !0;
    if (this.isUnaryExpression())
      return this.node.operator !== "void" ? !1 : this.get("argument").isConstantExpression();
    if (this.isBinaryExpression()) {
      let {
        operator: e
      } = this.node;
      return e !== "in" && e !== "instanceof" && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
    }
    return this.isMemberExpression() ? !this.node.computed && this.get("object").isIdentifier({
      name: "Symbol"
    }) && !this.scope.hasBinding("Symbol", {
      noGlobals: !0
    }) : this.isCallExpression() ? this.node.arguments.length === 1 && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding(
    "Symbol", {
      noGlobals: !0
    }) && this.get("arguments")[0].isStringLiteral() : !1;
  }
  s(joe, "isConstantExpression");
  function Loe() {
    return !!(this.isProgram() ? this : this.parentPath).find((r) => {
      if (r.isProgram({
        sourceType: "module"
      }) || r.isClass()) return !0;
      if (r.isArrowFunctionExpression() && !r.get("body").isBlockStatement())
        return !1;
      let n;
      if (r.isFunction())
        n = r.node.body;
      else if (r.isProgram())
        n = r.node;
      else
        return !1;
      for (let i of n.directives)
        if (i.value.value === "use strict")
          return !0;
    });
  }
  s(Loe, "isInStrictMode");
});

// ../node_modules/@babel/traverse/lib/path/family.js
var wA = T((Vt) => {
  "use strict";
  Object.defineProperty(Vt, "__esModule", {
    value: !0
  });
  Vt._getKey = AA;
  Vt._getPattern = CA;
  Vt.get = ele;
  Vt.getAllNextSiblings = Qoe;
  Vt.getAllPrevSiblings = Zoe;
  Vt.getAssignmentIdentifiers = tle;
  Vt.getBindingIdentifierPaths = sle;
  Vt.getBindingIdentifiers = rle;
  Vt.getCompletionRecords = Yoe;
  Vt.getNextSibling = Xoe;
  Vt.getOpposite = Koe;
  Vt.getOuterBindingIdentifierPaths = ile;
  Vt.getOuterBindingIdentifiers = nle;
  Vt.getPrevSibling = Joe;
  Vt.getSibling = zoe;
  var Sy = fs(), Moe = Se(), {
    getAssignmentIdentifiers: Roe,
    getBindingIdentifiers: PA,
    getOuterBindingIdentifiers: qoe,
    numericLiteral: Uoe,
    unaryExpression: Voe
  } = Moe, Py = 0, yo = 1;
  function $oe(e) {
    return {
      type: Py,
      path: e
    };
  }
  s($oe, "NormalCompletion");
  function Woe(e) {
    return {
      type: yo,
      path: e
    };
  }
  s(Woe, "BreakCompletion");
  function Koe() {
    return this.key === "left" ? this.getSibling("right") : this.key === "right" ? this.getSibling("left") : null;
  }
  s(Koe, "getOpposite");
  function Ri(e, t, r) {
    return e && t.push(...qi(e, r)), t;
  }
  s(Ri, "addCompletionRecords");
  function Goe(e, t, r) {
    let n = [];
    for (let i = 0; i < e.length; i++) {
      let a = e[i], o = qi(a, r), l = [], u = [];
      for (let c of o)
        c.type === Py && l.push(c), c.type === yo && u.push(c);
      l.length && (n = l), t.push(...u);
    }
    return t.push(...n), t;
  }
  s(Goe, "completionRecordForSwitch");
  function Hoe(e) {
    e.forEach((t) => {
      t.type = yo;
    });
  }
  s(Hoe, "normalCompletionToBreak");
  function xy(e, t) {
    e.forEach((r) => {
      r.path.isBreakStatement({
        label: null
      }) && (t ? r.path.replaceWith(Voe("void", Uoe(0))) : r.path.remove());
    });
  }
  s(xy, "replaceBreakStatementInBreakCompletion");
  function SA(e, t) {
    let r = [];
    if (t.canHaveBreak) {
      let n = [];
      for (let i = 0; i < e.length; i++) {
        let a = e[i], o = Object.assign({}, t, {
          inCaseClause: !1
        });
        a.isBlockStatement() && (t.inCaseClause || t.shouldPopulateBreak) ? o.shouldPopulateBreak = !0 : o.shouldPopulateBreak = !1;
        let l = qi(a, o);
        if (l.length > 0 && l.every((u) => u.type === yo)) {
          n.length > 0 && l.every((u) => u.path.isBreakStatement({
            label: null
          })) ? (Hoe(n), r.push(...n), n.some((u) => u.path.isDeclaration()) && (r.push(...l), xy(l, !0)), xy(l, !1)) : (r.push(...l), t.shouldPopulateBreak ||
          xy(l, !0));
          break;
        }
        if (i === e.length - 1)
          r.push(...l);
        else {
          n = [];
          for (let u = 0; u < l.length; u++) {
            let c = l[u];
            c.type === yo && r.push(c), c.type === Py && n.push(c);
          }
        }
      }
    } else if (e.length)
      for (let n = e.length - 1; n >= 0; n--) {
        let i = qi(e[n], t);
        if (i.length > 1 || i.length === 1 && !i[0].path.isVariableDeclaration()) {
          r.push(...i);
          break;
        }
      }
    return r;
  }
  s(SA, "getStatementListCompletion");
  function qi(e, t) {
    let r = [];
    if (e.isIfStatement())
      r = Ri(e.get("consequent"), r, t), r = Ri(e.get("alternate"), r, t);
    else {
      if (e.isDoExpression() || e.isFor() || e.isWhile() || e.isLabeledStatement())
        return Ri(e.get("body"), r, t);
      if (e.isProgram() || e.isBlockStatement())
        return SA(e.get("body"), t);
      if (e.isFunction())
        return qi(e.get("body"), t);
      if (e.isTryStatement())
        r = Ri(e.get("block"), r, t), r = Ri(e.get("handler"), r, t);
      else {
        if (e.isCatchClause())
          return Ri(e.get("body"), r, t);
        if (e.isSwitchStatement())
          return Goe(e.get("cases"), r, t);
        if (e.isSwitchCase())
          return SA(e.get("consequent"), {
            canHaveBreak: !0,
            shouldPopulateBreak: !1,
            inCaseClause: !0
          });
        e.isBreakStatement() ? r.push(Woe(e)) : r.push($oe(e));
      }
    }
    return r;
  }
  s(qi, "_getCompletionRecords");
  function Yoe() {
    return qi(this, {
      canHaveBreak: !1,
      shouldPopulateBreak: !1,
      inCaseClause: !1
    }).map((t) => t.path);
  }
  s(Yoe, "getCompletionRecords");
  function zoe(e) {
    return Sy.default.get({
      parentPath: this.parentPath,
      parent: this.parent,
      container: this.container,
      listKey: this.listKey,
      key: e
    }).setContext(this.context);
  }
  s(zoe, "getSibling");
  function Joe() {
    return this.getSibling(this.key - 1);
  }
  s(Joe, "getPrevSibling");
  function Xoe() {
    return this.getSibling(this.key + 1);
  }
  s(Xoe, "getNextSibling");
  function Qoe() {
    let e = this.key, t = this.getSibling(++e), r = [];
    for (; t.node; )
      r.push(t), t = this.getSibling(++e);
    return r;
  }
  s(Qoe, "getAllNextSiblings");
  function Zoe() {
    let e = this.key, t = this.getSibling(--e), r = [];
    for (; t.node; )
      r.push(t), t = this.getSibling(--e);
    return r;
  }
  s(Zoe, "getAllPrevSiblings");
  function ele(e, t = !0) {
    t === !0 && (t = this.context);
    let r = e.split(".");
    return r.length === 1 ? AA.call(this, e, t) : CA.call(this, r, t);
  }
  s(ele, "get");
  function AA(e, t) {
    let r = this.node, n = r[e];
    return Array.isArray(n) ? n.map((i, a) => Sy.default.get({
      listKey: e,
      parentPath: this,
      parent: r,
      container: n,
      key: a
    }).setContext(t)) : Sy.default.get({
      parentPath: this,
      parent: r,
      container: r,
      key: e
    }).setContext(t);
  }
  s(AA, "_getKey");
  function CA(e, t) {
    let r = this;
    for (let n of e)
      n === "." ? r = r.parentPath : Array.isArray(r) ? r = r[n] : r = r.get(n, t);
    return r;
  }
  s(CA, "_getPattern");
  function tle() {
    return Roe(this.node);
  }
  s(tle, "getAssignmentIdentifiers");
  function rle(e) {
    return PA(this.node, e);
  }
  s(rle, "getBindingIdentifiers");
  function nle(e) {
    return qoe(this.node, e);
  }
  s(nle, "getOuterBindingIdentifiers");
  function sle(e = !1, t = !1) {
    let n = [this], i = /* @__PURE__ */ Object.create(null);
    for (; n.length; ) {
      let a = n.shift();
      if (!a || !a.node) continue;
      let o = PA.keys[a.node.type];
      if (a.isIdentifier()) {
        e ? (i[a.node.name] = i[a.node.name] || []).push(a) : i[a.node.name] = a;
        continue;
      }
      if (a.isExportDeclaration()) {
        let l = a.get("declaration");
        l.isDeclaration() && n.push(l);
        continue;
      }
      if (t) {
        if (a.isFunctionDeclaration()) {
          n.push(a.get("id"));
          continue;
        }
        if (a.isFunctionExpression())
          continue;
      }
      if (o)
        for (let l = 0; l < o.length; l++) {
          let u = o[l], c = a.get(u);
          Array.isArray(c) ? n.push(...c) : c.node && n.push(c);
        }
    }
    return i;
  }
  s(sle, "getBindingIdentifierPaths");
  function ile(e = !1) {
    return this.getBindingIdentifierPaths(e, !0);
  }
  s(ile, "getOuterBindingIdentifierPaths");
});

// ../node_modules/@babel/traverse/lib/path/comments.js
var IA = T((go) => {
  "use strict";
  Object.defineProperty(go, "__esModule", {
    value: !0
  });
  go.addComment = cle;
  go.addComments = fle;
  go.shareCommentsWithSiblings = ule;
  var ale = Se(), {
    addComment: ole,
    addComments: lle
  } = ale;
  function ule() {
    if (typeof this.key == "string") return;
    let e = this.node;
    if (!e) return;
    let t = e.trailingComments, r = e.leadingComments;
    if (!t && !r) return;
    let n = this.getSibling(this.key - 1), i = this.getSibling(this.key + 1), a = !!n.node, o = !!i.node;
    a && (r && n.addComments("trailing", DA(r, n.node.trailingComments)), t && !o && n.addComments("trailing", t)), o && (t && i.addComments(
    "leading", DA(t, i.node.leadingComments)), r && !a && i.addComments("leading", r));
  }
  s(ule, "shareCommentsWithSiblings");
  function DA(e, t) {
    if (!(t != null && t.length)) return e;
    let r = new Set(t);
    return e.filter((n) => !r.has(n));
  }
  s(DA, "removeIfExisting");
  function cle(e, t, r) {
    ole(this.node, e, t, r);
  }
  s(cle, "addComment");
  function fle(e, t) {
    lle(this.node, e, t);
  }
  s(fle, "addComments");
});

// ../node_modules/@babel/traverse/lib/path/index.js
var fs = T((mn) => {
  "use strict";
  Object.defineProperty(mn, "__esModule", {
    value: !0
  });
  mn.default = mn.SHOULD_STOP = mn.SHOULD_SKIP = mn.REMOVED = void 0;
  var ple = om(), dle = Rs(), hle = Ir(), mle = vm(), NA = Se(), qu = NA, yle = Vs(), gle = fo(), dn = yP(), Ui = jP(), Vi = ay(), _A = oA(),
  Js = mA(), Ct = xA(), xt = Fi(), $i = ju(), hn = py(), ur = wA(), Ay = IA(), ble = dm(), {
    validate: Ele
  } = NA, OA = dle("babel"), XCe = mn.REMOVED = 1, QCe = mn.SHOULD_STOP = 2, ZCe = mn.SHOULD_SKIP = 4, ds = mn.default = class BA {
    static {
      s(this, "NodePath");
    }
    constructor(t, r) {
      this.contexts = [], this.state = null, this.opts = null, this._traverseFlags = 0, this.skipKeys = null, this.parentPath = null, this.container =
      null, this.listKey = null, this.key = null, this.node = null, this.type = null, this.parent = r, this.hub = t, this.data = null, this.
      context = null, this.scope = null;
    }
    get removed() {
      return (this._traverseFlags & 1) > 0;
    }
    set removed(t) {
      t ? this._traverseFlags |= 1 : this._traverseFlags &= -2;
    }
    get shouldStop() {
      return (this._traverseFlags & 2) > 0;
    }
    set shouldStop(t) {
      t ? this._traverseFlags |= 2 : this._traverseFlags &= -3;
    }
    get shouldSkip() {
      return (this._traverseFlags & 4) > 0;
    }
    set shouldSkip(t) {
      t ? this._traverseFlags |= 4 : this._traverseFlags &= -5;
    }
    static get({
      hub: t,
      parentPath: r,
      parent: n,
      container: i,
      listKey: a,
      key: o
    }) {
      if (!t && r && (t = r.hub), !n)
        throw new Error("To get a node path the parent needs to exist");
      let l = i[o], u = yle.getOrCreateCachedPaths(t, n), c = u.get(l);
      return c || (c = new BA(t, n), l && u.set(l, c)), c.setup(r, i, a, o), c;
    }
    getScope(t) {
      return this.isScope() ? new mle.default(this) : t;
    }
    setData(t, r) {
      return this.data == null && (this.data = /* @__PURE__ */ Object.create(null)), this.data[t] = r;
    }
    getData(t, r) {
      this.data == null && (this.data = /* @__PURE__ */ Object.create(null));
      let n = this.data[t];
      return n === void 0 && r !== void 0 && (n = this.data[t] = r), n;
    }
    hasNode() {
      return this.node != null;
    }
    buildCodeFrameError(t, r = SyntaxError) {
      return this.hub.buildError(this.node, t, r);
    }
    traverse(t, r) {
      (0, hle.default)(this.node, t, this.scope, r, this);
    }
    set(t, r) {
      Ele(this.node, t, r), this.node[t] = r;
    }
    getPathLocation() {
      let t = [], r = this;
      do {
        let n = r.key;
        r.inList && (n = `${r.listKey}[${n}]`), t.unshift(n);
      } while (r = r.parentPath);
      return t.join(".");
    }
    debug(t) {
      OA.enabled && OA(`${this.getPathLocation()} ${this.type}: ${t}`);
    }
    toString() {
      return (0, gle.default)(this.node).code;
    }
    get inList() {
      return !!this.listKey;
    }
    set inList(t) {
      t || (this.listKey = null);
    }
    get parentKey() {
      return this.listKey || this.key;
    }
  }, vle = {
    findParent: dn.findParent,
    find: dn.find,
    getFunctionParent: dn.getFunctionParent,
    getStatementParent: dn.getStatementParent,
    getEarliestCommonAncestorFrom: dn.getEarliestCommonAncestorFrom,
    getDeepestCommonAncestorFrom: dn.getDeepestCommonAncestorFrom,
    getAncestry: dn.getAncestry,
    isAncestor: dn.isAncestor,
    isDescendant: dn.isDescendant,
    inType: dn.inType,
    getTypeAnnotation: Ui.getTypeAnnotation,
    isBaseType: Ui.isBaseType,
    couldBeBaseType: Ui.couldBeBaseType,
    baseTypeStrictlyMatches: Ui.baseTypeStrictlyMatches,
    isGenericType: Ui.isGenericType,
    replaceWithMultiple: Vi.replaceWithMultiple,
    replaceWithSourceString: Vi.replaceWithSourceString,
    replaceWith: Vi.replaceWith,
    replaceExpressionWithStatements: Vi.replaceExpressionWithStatements,
    replaceInline: Vi.replaceInline,
    evaluateTruthy: _A.evaluateTruthy,
    evaluate: _A.evaluate,
    toComputedKey: Js.toComputedKey,
    ensureBlock: Js.ensureBlock,
    unwrapFunctionEnvironment: Js.unwrapFunctionEnvironment,
    arrowFunctionToExpression: Js.arrowFunctionToExpression,
    splitExportDeclaration: Js.splitExportDeclaration,
    ensureFunctionName: Js.ensureFunctionName,
    matchesPattern: Ct.matchesPattern,
    has: Ct.has,
    isStatic: Ct.isStatic,
    is: Ct.is,
    isnt: Ct.isnt,
    equals: Ct.equals,
    isNodeType: Ct.isNodeType,
    canHaveVariableDeclarationOrExpression: Ct.canHaveVariableDeclarationOrExpression,
    canSwapBetweenExpressionAndStatement: Ct.canSwapBetweenExpressionAndStatement,
    isCompletionRecord: Ct.isCompletionRecord,
    isStatementOrBlock: Ct.isStatementOrBlock,
    referencesImport: Ct.referencesImport,
    getSource: Ct.getSource,
    willIMaybeExecuteBefore: Ct.willIMaybeExecuteBefore,
    _guessExecutionStatusRelativeTo: Ct._guessExecutionStatusRelativeTo,
    resolve: Ct.resolve,
    isConstantExpression: Ct.isConstantExpression,
    isInStrictMode: Ct.isInStrictMode,
    call: xt.call,
    isDenylisted: xt.isDenylisted,
    isBlacklisted: xt.isBlacklisted,
    visit: xt.visit,
    skip: xt.skip,
    skipKey: xt.skipKey,
    stop: xt.stop,
    setScope: xt.setScope,
    setContext: xt.setContext,
    resync: xt.resync,
    popContext: xt.popContext,
    pushContext: xt.pushContext,
    setup: xt.setup,
    setKey: xt.setKey,
    requeue: xt.requeue,
    requeueComputedKeyAndDecorators: xt.requeueComputedKeyAndDecorators,
    remove: $i.remove,
    insertBefore: hn.insertBefore,
    insertAfter: hn.insertAfter,
    updateSiblingKeys: hn.updateSiblingKeys,
    unshiftContainer: hn.unshiftContainer,
    pushContainer: hn.pushContainer,
    hoist: hn.hoist,
    getOpposite: ur.getOpposite,
    getCompletionRecords: ur.getCompletionRecords,
    getSibling: ur.getSibling,
    getPrevSibling: ur.getPrevSibling,
    getNextSibling: ur.getNextSibling,
    getAllNextSiblings: ur.getAllNextSiblings,
    getAllPrevSiblings: ur.getAllPrevSiblings,
    get: ur.get,
    getAssignmentIdentifiers: ur.getAssignmentIdentifiers,
    getBindingIdentifiers: ur.getBindingIdentifiers,
    getOuterBindingIdentifiers: ur.getOuterBindingIdentifiers,
    getBindingIdentifierPaths: ur.getBindingIdentifierPaths,
    getOuterBindingIdentifierPaths: ur.getOuterBindingIdentifierPaths,
    shareCommentsWithSiblings: Ay.shareCommentsWithSiblings,
    addComment: Ay.addComment,
    addComments: Ay.addComments
  };
  Object.assign(ds.prototype, vle);
  ds.prototype.arrowFunctionToShadowed = Js.arrowFunctionToShadowed;
  ds.prototype._guessExecutionStatusRelativeToDifferentFunctions = Ct._guessExecutionStatusRelativeTo;
  ds.prototype._guessExecutionStatusRelativeToDifferentFunctions = Ct._guessExecutionStatusRelativeTo, Object.assign(ds.prototype, {
    _getTypeAnnotation: Ui._getTypeAnnotation,
    _replaceWith: Vi._replaceWith,
    _resolve: Ct._resolve,
    _call: xt._call,
    _resyncParent: xt._resyncParent,
    _resyncKey: xt._resyncKey,
    _resyncList: xt._resyncList,
    _resyncRemoved: xt._resyncRemoved,
    _getQueueContexts: xt._getQueueContexts,
    _removeFromScope: $i._removeFromScope,
    _callRemovalHooks: $i._callRemovalHooks,
    _remove: $i._remove,
    _markRemoved: $i._markRemoved,
    _assertUnremoved: $i._assertUnremoved,
    _containerInsert: hn._containerInsert,
    _containerInsertBefore: hn._containerInsertBefore,
    _containerInsertAfter: hn._containerInsertAfter,
    _verifyNodeList: hn._verifyNodeList,
    _getKey: ur._getKey,
    _getPattern: ur._getPattern
  });
  for (let e of qu.TYPES) {
    let t = `is${e}`, r = qu[t];
    ds.prototype[t] = function(n) {
      return r(this.node, n);
    }, ds.prototype[`assert${e}`] = function(n) {
      if (!r(this.node, n))
        throw new TypeError(`Expected node path of type ${e}`);
    };
  }
  Object.assign(ds.prototype, ble);
  for (let e of Object.keys(ple))
    e[0] !== "_" && (qu.TYPES.includes(e) || qu.TYPES.push(e));
});

// ../node_modules/@babel/traverse/lib/context.js
var kA = T((Uu) => {
  "use strict";
  Object.defineProperty(Uu, "__esModule", {
    value: !0
  });
  Uu.default = void 0;
  var Tle = fs(), xle = Se(), {
    VISITOR_KEYS: Sle
  } = xle, Cy = class {
    static {
      s(this, "TraversalContext");
    }
    constructor(t, r, n, i) {
      this.queue = null, this.priorityQueue = null, this.parentPath = i, this.scope = t, this.state = n, this.opts = r;
    }
    shouldVisit(t) {
      let r = this.opts;
      if (r.enter || r.exit || r[t.type]) return !0;
      let n = Sle[t.type];
      if (!(n != null && n.length)) return !1;
      for (let i of n)
        if (t[i])
          return !0;
      return !1;
    }
    create(t, r, n, i) {
      return Tle.default.get({
        parentPath: this.parentPath,
        parent: t,
        container: r,
        key: n,
        listKey: i
      });
    }
    maybeQueue(t, r) {
      this.queue && (r ? this.queue.push(t) : this.priorityQueue.push(t));
    }
    visitMultiple(t, r, n) {
      if (t.length === 0) return !1;
      let i = [];
      for (let a = 0; a < t.length; a++) {
        let o = t[a];
        o && this.shouldVisit(o) && i.push(this.create(r, t, a, n));
      }
      return this.visitQueue(i);
    }
    visitSingle(t, r) {
      return this.shouldVisit(t[r]) ? this.visitQueue([this.create(t, t, r)]) : !1;
    }
    visitQueue(t) {
      this.queue = t, this.priorityQueue = [];
      let r = /* @__PURE__ */ new WeakSet(), n = !1, i = 0;
      for (; i < t.length; ) {
        let a = t[i];
        if (i++, a.resync(), (a.contexts.length === 0 || a.contexts[a.contexts.length - 1] !== this) && a.pushContext(this), a.key === null)
         continue;
        let {
          node: o
        } = a;
        if (!r.has(o)) {
          if (o && r.add(o), a.visit()) {
            n = !0;
            break;
          }
          if (this.priorityQueue.length && (n = this.visitQueue(this.priorityQueue), this.priorityQueue = [], this.queue = t, n))
            break;
        }
      }
      for (let a = 0; a < i; a++)
        t[a].popContext();
      return this.queue = null, n;
    }
    visit(t, r) {
      let n = t[r];
      return n ? Array.isArray(n) ? this.visitMultiple(n, t, r) : this.visitSingle(t, r) : !1;
    }
  };
  Uu.default = Cy;
});

// ../node_modules/@babel/traverse/lib/traverse-node.js
var cu = T((wy) => {
  "use strict";
  Object.defineProperty(wy, "__esModule", {
    value: !0
  });
  wy.traverseNode = wle;
  var Ple = kA(), Ale = Se(), {
    VISITOR_KEYS: Cle
  } = Ale;
  function wle(e, t, r, n, i, a, o) {
    let l = Cle[e.type];
    if (!l) return !1;
    let u = new Ple.default(r, t, n, i);
    if (o)
      return a != null && a[i.parentKey] ? !1 : u.visitQueue([i]);
    for (let c of l)
      if (!(a != null && a[c]) && u.visit(e, c))
        return !0;
    return !1;
  }
  s(wle, "traverseNode");
});

// ../node_modules/@babel/traverse/lib/path/context.js
var Fi = T((mt) => {
  "use strict";
  Object.defineProperty(mt, "__esModule", {
    value: !0
  });
  mt._call = Dy;
  mt._getQueueContexts = Hle;
  mt._resyncKey = MA;
  mt._resyncList = RA;
  mt._resyncParent = LA;
  mt._resyncRemoved = qle;
  mt.call = Ole;
  mt.isBlacklisted = mt.isDenylisted = Nle;
  mt.popContext = Ule;
  mt.pushContext = Vle;
  mt.requeue = Kle;
  mt.requeueComputedKeyAndDecorators = Gle;
  mt.resync = Rle;
  mt.setContext = Mle;
  mt.setKey = Wle;
  mt.setScope = Lle;
  mt.setup = $le;
  mt.skip = kle;
  mt.skipKey = Fle;
  mt.stop = jle;
  mt.visit = Ble;
  var Dle = cu(), FA = fs(), Ile = ju(), _le = Se();
  function Ole(e) {
    let t = this.opts;
    if (this.debug(e), this.node && Dy.call(this, t[e]))
      return !0;
    if (this.node) {
      var r;
      return Dy.call(this, (r = t[this.node.type]) == null ? void 0 : r[e]);
    }
    return !1;
  }
  s(Ole, "call");
  function Dy(e) {
    if (!e) return !1;
    for (let t of e) {
      if (!t) continue;
      let r = this.node;
      if (!r) return !0;
      let n = t.call(this.state, this, this.state);
      if (n && typeof n == "object" && typeof n.then == "function")
        throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not suppo\
rt. If you're using a published plugin, you may need to upgrade your @babel/core version.");
      if (n)
        throw new Error(`Unexpected return value from visitor method ${t}`);
      if (this.node !== r || this._traverseFlags > 0) return !0;
    }
    return !1;
  }
  s(Dy, "_call");
  function Nle() {
    var e;
    let t = (e = this.opts.denylist) != null ? e : this.opts.blacklist;
    return t && t.indexOf(this.node.type) > -1;
  }
  s(Nle, "isDenylisted");
  function jA(e, t) {
    e.context !== t && (e.context = t, e.state = t.state, e.opts = t.opts);
  }
  s(jA, "restoreContext");
  function Ble() {
    var e, t;
    if (!this.node || this.isDenylisted() || (e = (t = this.opts).shouldSkip) != null && e.call(t, this))
      return !1;
    let r = this.context;
    return this.shouldSkip || this.call("enter") ? (this.debug("Skip..."), this.shouldStop) : (jA(this, r), this.debug("Recursing into..."),
    this.shouldStop = (0, Dle.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys), jA(this, r), this.call("exit"),
    this.shouldStop);
  }
  s(Ble, "visit");
  function kle() {
    this.shouldSkip = !0;
  }
  s(kle, "skip");
  function Fle(e) {
    this.skipKeys == null && (this.skipKeys = {}), this.skipKeys[e] = !0;
  }
  s(Fle, "skipKey");
  function jle() {
    this._traverseFlags |= FA.SHOULD_SKIP | FA.SHOULD_STOP;
  }
  s(jle, "stop");
  function Lle() {
    var e, t;
    if ((e = this.opts) != null && e.noScope) return;
    let r = this.parentPath;
    ((this.key === "key" || this.listKey === "decorators") && r.isMethod() || this.key === "discriminant" && r.isSwitchStatement()) && (r = r.
    parentPath);
    let n;
    for (; r && !n; ) {
      var i;
      if ((i = r.opts) != null && i.noScope) return;
      n = r.scope, r = r.parentPath;
    }
    this.scope = this.getScope(n), (t = this.scope) == null || t.init();
  }
  s(Lle, "setScope");
  function Mle(e) {
    return this.skipKeys != null && (this.skipKeys = {}), this._traverseFlags = 0, e && (this.context = e, this.state = e.state, this.opts =
    e.opts), this.setScope(), this;
  }
  s(Mle, "setContext");
  function Rle() {
    this.removed || (LA.call(this), RA.call(this), MA.call(this));
  }
  s(Rle, "resync");
  function LA() {
    this.parentPath && (this.parent = this.parentPath.node);
  }
  s(LA, "_resyncParent");
  function MA() {
    if (this.container && this.node !== this.container[this.key]) {
      if (Array.isArray(this.container)) {
        for (let e = 0; e < this.container.length; e++)
          if (this.container[e] === this.node) {
            this.setKey(e);
            return;
          }
      } else
        for (let e of Object.keys(this.container))
          if (this.container[e] === this.node) {
            this.setKey(e);
            return;
          }
      this.key = null;
    }
  }
  s(MA, "_resyncKey");
  function RA() {
    if (!this.parent || !this.inList) return;
    let e = this.parent[this.listKey];
    this.container !== e && (this.container = e || null);
  }
  s(RA, "_resyncList");
  function qle() {
    (this.key == null || !this.container || this.container[this.key] !== this.node) && Ile._markRemoved.call(this);
  }
  s(qle, "_resyncRemoved");
  function Ule() {
    this.contexts.pop(), this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(void 0);
  }
  s(Ule, "popContext");
  function Vle(e) {
    this.contexts.push(e), this.setContext(e);
  }
  s(Vle, "pushContext");
  function $le(e, t, r, n) {
    this.listKey = r, this.container = t, this.parentPath = e || this.parentPath, this.setKey(n);
  }
  s($le, "setup");
  function Wle(e) {
    var t;
    this.key = e, this.node = this.container[this.key], this.type = (t = this.node) == null ? void 0 : t.type;
  }
  s(Wle, "setKey");
  function Kle(e = this) {
    if (e.removed) return;
    let t = this.contexts;
    for (let r of t)
      r.maybeQueue(e);
  }
  s(Kle, "requeue");
  function Gle() {
    let {
      context: e,
      node: t
    } = this;
    if (!_le.isPrivate(t) && t.computed && e.maybeQueue(this.get("key")), t.decorators)
      for (let r of this.get("decorators"))
        e.maybeQueue(r);
  }
  s(Gle, "requeueComputedKeyAndDecorators");
  function Hle() {
    let e = this, t = this.contexts;
    for (; !t.length && (e = e.parentPath, !!e); )
      t = e.contexts;
    return t;
  }
  s(Hle, "_getQueueContexts");
});

// ../node_modules/@babel/traverse/lib/hub.js
var qA = T((Vu) => {
  "use strict";
  Object.defineProperty(Vu, "__esModule", {
    value: !0
  });
  Vu.default = void 0;
  var Iy = class {
    static {
      s(this, "Hub");
    }
    getCode() {
    }
    getScope() {
    }
    addHelper() {
      throw new Error("Helpers are not supported by the default hub.");
    }
    buildError(t, r, n = TypeError) {
      return new n(r);
    }
  };
  Vu.default = Iy;
});

// ../node_modules/@babel/traverse/lib/index.js
var Ir = T((kn) => {
  "use strict";
  Object.defineProperty(kn, "__esModule", {
    value: !0
  });
  Object.defineProperty(kn, "Hub", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Qle.default;
    }, "get")
  });
  Object.defineProperty(kn, "NodePath", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Jle.default;
    }, "get")
  });
  Object.defineProperty(kn, "Scope", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Xle.default;
    }, "get")
  });
  kn.visitors = kn.default = void 0;
  Fi();
  var bo = io();
  kn.visitors = bo;
  var Yle = Se(), zle = Vs(), UA = cu(), Jle = fs(), Xle = vm(), Qle = qA(), {
    VISITOR_KEYS: Zle,
    removeProperties: eue,
    traverseFast: VA
  } = Yle;
  function kr(e, t = {}, r, n, i, a) {
    if (e) {
      if (!t.noScope && !r && e.type !== "Program" && e.type !== "File")
        throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${e.
        type} node without passing scope and parentPath.`);
      if (!i && a)
        throw new Error("visitSelf can only be used when providing a NodePath.");
      Zle[e.type] && (bo.explode(t), (0, UA.traverseNode)(e, t, r, n, i, null, a));
    }
  }
  s(kr, "traverse");
  var c2e = kn.default = kr;
  kr.visitors = bo;
  kr.verify = bo.verify;
  kr.explode = bo.explode;
  kr.cheap = function(e, t) {
    VA(e, t);
  };
  kr.node = function(e, t, r, n, i, a) {
    (0, UA.traverseNode)(e, t, r, n, i, a);
  };
  kr.clearNode = function(e, t) {
    eue(e, t);
  };
  kr.removeProperties = function(e, t) {
    return VA(e, kr.clearNode, t), e;
  };
  function tue(e, t) {
    e.node.type === t.type && (t.has = !0, e.stop());
  }
  s(tue, "hasDenylistedType");
  kr.hasType = function(e, t, r) {
    if (r != null && r.includes(e.type)) return !1;
    if (e.type === t) return !0;
    let n = {
      has: !1,
      type: t
    };
    return kr(e, {
      noScope: !0,
      denylist: r,
      enter: tue
    }, null, n), n.has;
  };
  kr.cache = zle;
});

// ../node_modules/@babel/helper-module-imports/lib/import-builder.js
var KA = T((Wu) => {
  "use strict";
  Object.defineProperty(Wu, "__esModule", {
    value: !0
  });
  Wu.default = void 0;
  var Hr = require("assert"), rue = Se(), {
    callExpression: _y,
    cloneNode: $u,
    expressionStatement: $A,
    identifier: Eo,
    importDeclaration: nue,
    importDefaultSpecifier: sue,
    importNamespaceSpecifier: iue,
    importSpecifier: aue,
    memberExpression: Oy,
    stringLiteral: WA,
    variableDeclaration: oue,
    variableDeclarator: lue
  } = rue, Ny = class {
    static {
      s(this, "ImportBuilder");
    }
    constructor(t, r, n) {
      this._statements = [], this._resultName = null, this._importedSource = void 0, this._scope = r, this._hub = n, this._importedSource = t;
    }
    done() {
      return {
        statements: this._statements,
        resultName: this._resultName
      };
    }
    import() {
      return this._statements.push(nue([], WA(this._importedSource))), this;
    }
    require() {
      return this._statements.push($A(_y(Eo("require"), [WA(this._importedSource)]))), this;
    }
    namespace(t = "namespace") {
      let r = this._scope.generateUidIdentifier(t), n = this._statements[this._statements.length - 1];
      return Hr(n.type === "ImportDeclaration"), Hr(n.specifiers.length === 0), n.specifiers = [iue(r)], this._resultName = $u(r), this;
    }
    default(t) {
      let r = this._scope.generateUidIdentifier(t), n = this._statements[this._statements.length - 1];
      return Hr(n.type === "ImportDeclaration"), Hr(n.specifiers.length === 0), n.specifiers = [sue(r)], this._resultName = $u(r), this;
    }
    named(t, r) {
      if (r === "default") return this.default(t);
      let n = this._scope.generateUidIdentifier(t), i = this._statements[this._statements.length - 1];
      return Hr(i.type === "ImportDeclaration"), Hr(i.specifiers.length === 0), i.specifiers = [aue(n, Eo(r))], this._resultName = $u(n), this;
    }
    var(t) {
      let r = this._scope.generateUidIdentifier(t), n = this._statements[this._statements.length - 1];
      return n.type !== "ExpressionStatement" && (Hr(this._resultName), n = $A(this._resultName), this._statements.push(n)), this._statements[this.
      _statements.length - 1] = oue("var", [lue(r, n.expression)]), this._resultName = $u(r), this;
    }
    defaultInterop() {
      return this._interop(this._hub.addHelper("interopRequireDefault"));
    }
    wildcardInterop() {
      return this._interop(this._hub.addHelper("interopRequireWildcard"));
    }
    _interop(t) {
      let r = this._statements[this._statements.length - 1];
      return r.type === "ExpressionStatement" ? r.expression = _y(t, [r.expression]) : r.type === "VariableDeclaration" ? (Hr(r.declarations.
      length === 1), r.declarations[0].init = _y(t, [r.declarations[0].init])) : Hr.fail("Unexpected type."), this;
    }
    prop(t) {
      let r = this._statements[this._statements.length - 1];
      return r.type === "ExpressionStatement" ? r.expression = Oy(r.expression, Eo(t)) : r.type === "VariableDeclaration" ? (Hr(r.declarations.
      length === 1), r.declarations[0].init = Oy(r.declarations[0].init, Eo(t))) : Hr.fail("Unexpected type:" + r.type), this;
    }
    read(t) {
      this._resultName = Oy(this._resultName, Eo(t));
    }
  };
  Wu.default = Ny;
});

// ../node_modules/@babel/helper-module-imports/lib/is-module.js
var ky = T((By) => {
  "use strict";
  Object.defineProperty(By, "__esModule", {
    value: !0
  });
  By.default = uue;
  function uue(e) {
    return e.node.sourceType === "module";
  }
  s(uue, "isModule");
});

// ../node_modules/@babel/helper-module-imports/lib/import-injector.js
var XA = T((Gu) => {
  "use strict";
  Object.defineProperty(Gu, "__esModule", {
    value: !0
  });
  Gu.default = void 0;
  var GA = require("assert"), cue = Se(), fue = KA(), pue = ky(), {
    identifier: due,
    importSpecifier: hue,
    numericLiteral: mue,
    sequenceExpression: yue,
    isImportDeclaration: HA
  } = cue, Fy = class {
    static {
      s(this, "ImportInjector");
    }
    constructor(t, r, n) {
      this._defaultOpts = {
        importedSource: null,
        importedType: "commonjs",
        importedInterop: "babel",
        importingInterop: "babel",
        ensureLiveReference: !1,
        ensureNoContext: !1,
        importPosition: "before"
      };
      let i = t.find((a) => a.isProgram());
      this._programPath = i, this._programScope = i.scope, this._hub = i.hub, this._defaultOpts = this._applyDefaults(r, n, !0);
    }
    addDefault(t, r) {
      return this.addNamed("default", t, r);
    }
    addNamed(t, r, n) {
      return GA(typeof t == "string"), this._generateImport(this._applyDefaults(r, n), t);
    }
    addNamespace(t, r) {
      return this._generateImport(this._applyDefaults(t, r), null);
    }
    addSideEffect(t, r) {
      return this._generateImport(this._applyDefaults(t, r), void 0);
    }
    _applyDefaults(t, r, n = !1) {
      let i;
      return typeof t == "string" ? i = Object.assign({}, this._defaultOpts, {
        importedSource: t
      }, r) : (GA(!r, "Unexpected secondary arguments."), i = Object.assign({}, this._defaultOpts, t)), !n && r && (r.nameHint !== void 0 &&
      (i.nameHint = r.nameHint), r.blockHoist !== void 0 && (i.blockHoist = r.blockHoist)), i;
    }
    _generateImport(t, r) {
      let n = r === "default", i = !!r && !n, a = r === null, {
        importedSource: o,
        importedType: l,
        importedInterop: u,
        importingInterop: c,
        ensureLiveReference: f,
        ensureNoContext: p,
        nameHint: h,
        importPosition: y,
        blockHoist: v
      } = t, d = h || r, b = (0, pue.default)(this._programPath), E = b && c === "node", I = b && c === "babel";
      if (y === "after" && !b)
        throw new Error('"importPosition": "after" is only supported in modules');
      let O = new fue.default(o, this._programScope, this._hub);
      if (l === "es6") {
        if (!E && !I)
          throw new Error("Cannot import an ES6 module from CommonJS");
        O.import(), a ? O.namespace(h || o) : (n || i) && O.named(d, r);
      } else {
        if (l !== "commonjs")
          throw new Error(`Unexpected interopType "${l}"`);
        if (u === "babel")
          if (E) {
            d = d !== "default" ? d : o;
            let R = `${o}$es6Default`;
            O.import(), a ? O.default(R).var(d || o).wildcardInterop() : n ? f ? O.default(R).var(d || o).defaultInterop().read("default") :
            O.default(R).var(d).defaultInterop().prop(r) : i && O.default(R).read(r);
          } else I ? (O.import(), a ? O.namespace(d || o) : (n || i) && O.named(d, r)) : (O.require(), a ? O.var(d || o).wildcardInterop() :
          (n || i) && f ? n ? (d = d !== "default" ? d : o, O.var(d).read(r), O.defaultInterop()) : O.var(o).read(r) : n ? O.var(d).defaultInterop().
          prop(r) : i && O.var(d).prop(r));
        else if (u === "compiled")
          E ? (O.import(), a ? O.default(d || o) : (n || i) && O.default(o).read(d)) : I ? (O.import(), a ? O.namespace(d || o) : (n || i) &&
          O.named(d, r)) : (O.require(), a ? O.var(d || o) : (n || i) && (f ? O.var(o).read(d) : O.prop(r).var(d)));
        else if (u === "uncompiled") {
          if (n && f)
            throw new Error("No live reference for commonjs default");
          E ? (O.import(), a ? O.default(d || o) : n ? O.default(d) : i && O.default(o).read(d)) : I ? (O.import(), a ? O.default(d || o) : n ?
          O.default(d) : i && O.named(d, r)) : (O.require(), a ? O.var(d || o) : n ? O.var(d) : i && (f ? O.var(o).read(d) : O.var(d).prop(r)));
        } else
          throw new Error(`Unknown importedInterop "${u}".`);
      }
      let {
        statements: k,
        resultName: j
      } = O.done();
      return this._insertStatements(k, y, v), (n || i) && p && j.type !== "Identifier" ? yue([mue(0), j]) : j;
    }
    _insertStatements(t, r = "before", n = 3) {
      if (r === "after") {
        if (this._insertStatementsAfter(t)) return;
      } else if (this._insertStatementsBefore(t, n)) return;
      this._programPath.unshiftContainer("body", t);
    }
    _insertStatementsBefore(t, r) {
      if (t.length === 1 && HA(t[0]) && Ku(t[0])) {
        let i = this._programPath.get("body").find((a) => a.isImportDeclaration() && Ku(a.node));
        if (i?.node.source.value === t[0].source.value && JA(i.node, t[0]))
          return !0;
      }
      t.forEach((i) => {
        i._blockHoist = r;
      });
      let n = this._programPath.get("body").find((i) => {
        let a = i.node._blockHoist;
        return Number.isFinite(a) && a < 4;
      });
      return n ? (n.insertBefore(t), !0) : !1;
    }
    _insertStatementsAfter(t) {
      let r = new Set(t), n = /* @__PURE__ */ new Map();
      for (let a of t)
        if (HA(a) && Ku(a)) {
          let o = a.source.value;
          n.has(o) || n.set(o, []), n.get(o).push(a);
        }
      let i = null;
      for (let a of this._programPath.get("body"))
        if (a.isImportDeclaration() && Ku(a.node)) {
          i = a;
          let o = a.node.source.value, l = n.get(o);
          if (!l) continue;
          for (let u of l)
            r.has(u) && JA(a.node, u) && r.delete(u);
        }
      return r.size === 0 ? !0 : (i && i.insertAfter(Array.from(r)), !!i);
    }
  };
  Gu.default = Fy;
  function Ku(e) {
    return e.importKind !== "type" && e.importKind !== "typeof";
  }
  s(Ku, "isValueImport");
  function YA(e) {
    return e.specifiers.length === 1 && e.specifiers[0].type === "ImportNamespaceSpecifier" || e.specifiers.length === 2 && e.specifiers[1].
    type === "ImportNamespaceSpecifier";
  }
  s(YA, "hasNamespaceImport");
  function zA(e) {
    return e.specifiers.length > 0 && e.specifiers[0].type === "ImportDefaultSpecifier";
  }
  s(zA, "hasDefaultImport");
  function JA(e, t) {
    return e.specifiers.length ? t.specifiers.length ? YA(e) || YA(t) ? !1 : (zA(t) && (zA(e) ? t.specifiers[0] = hue(t.specifiers[0].local,
    due("default")) : e.specifiers.unshift(t.specifiers.shift())), e.specifiers.push(...t.specifiers), !0) : !0 : (e.specifiers = t.specifiers,
    !0);
  }
  s(JA, "maybeAppendImportSpecifiers");
});

// ../node_modules/@babel/helper-module-imports/lib/index.js
var QA = T((hs) => {
  "use strict";
  Object.defineProperty(hs, "__esModule", {
    value: !0
  });
  Object.defineProperty(hs, "ImportInjector", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return vo.default;
    }, "get")
  });
  hs.addDefault = bue;
  hs.addNamed = Eue;
  hs.addNamespace = vue;
  hs.addSideEffect = Tue;
  Object.defineProperty(hs, "isModule", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return gue.default;
    }, "get")
  });
  var vo = XA(), gue = ky();
  function bue(e, t, r) {
    return new vo.default(e).addDefault(t, r);
  }
  s(bue, "addDefault");
  function Eue(e, t, r, n) {
    return new vo.default(e).addNamed(t, r, n);
  }
  s(Eue, "addNamed");
  function vue(e, t, r) {
    return new vo.default(e).addNamespace(t, r);
  }
  s(vue, "addNamespace");
  function Tue(e, t, r) {
    return new vo.default(e).addSideEffect(t, r);
  }
  s(Tue, "addSideEffect");
});

// ../node_modules/@babel/helper-module-transforms/lib/rewrite-this.js
var tC = T((jy) => {
  "use strict";
  Object.defineProperty(jy, "__esModule", {
    value: !0
  });
  jy.default = xue;
  var ZA = gt(), eC = Ir(), Hu;
  function xue(e) {
    Hu || (Hu = eC.visitors.environmentVisitor({
      ThisExpression(t) {
        t.replaceWith(ZA.types.unaryExpression("void", ZA.types.numericLiteral(0), !0));
      }
    }), Hu.noScope = !0), (0, eC.default)(e.node, Hu);
  }
  s(xue, "rewriteThis");
});

// ../node_modules/@babel/helper-simple-access/lib/index.js
var Uy = T((qy) => {
  "use strict";
  Object.defineProperty(qy, "__esModule", {
    value: !0
  });
  qy.default = wue;
  var Sue = Se(), {
    LOGICAL_OPERATORS: Pue,
    assignmentExpression: To,
    binaryExpression: My,
    cloneNode: Ry,
    identifier: Yu,
    logicalExpression: Aue,
    numericLiteral: Ly,
    sequenceExpression: Cue,
    unaryExpression: rC
  } = Sue, nC = {
    AssignmentExpression: {
      exit(e) {
        let {
          scope: t,
          seen: r,
          bindingNames: n
        } = this;
        if (e.node.operator === "=" || r.has(e.node)) return;
        r.add(e.node);
        let i = e.get("left");
        if (!i.isIdentifier()) return;
        let a = i.node.name;
        if (!n.has(a) || t.getBinding(a) !== e.scope.getBinding(a))
          return;
        let o = e.node.operator.slice(0, -1);
        Pue.includes(o) ? e.replaceWith(Aue(o, e.node.left, To("=", Ry(e.node.left), e.node.right))) : (e.node.right = My(o, Ry(e.node.left),
        e.node.right), e.node.operator = "=");
      }
    }
  };
  nC.UpdateExpression = {
    exit(e) {
      if (!this.includeUpdateExpression) return;
      let {
        scope: t,
        bindingNames: r
      } = this, n = e.get("argument");
      if (!n.isIdentifier()) return;
      let i = n.node.name;
      if (r.has(i) && t.getBinding(i) === e.scope.getBinding(i))
        if (e.parentPath.isExpressionStatement() && !e.isCompletionRecord()) {
          let a = e.node.operator === "++" ? "+=" : "-=";
          e.replaceWith(To(a, n.node, Ly(1)));
        } else if (e.node.prefix)
          e.replaceWith(To("=", Yu(i), My(e.node.operator[0], rC("+", n.node), Ly(1))));
        else {
          let a = e.scope.generateUidIdentifierBasedOnNode(n.node, "old"), o = a.name;
          e.scope.push({
            id: a
          });
          let l = My(e.node.operator[0], Yu(o), Ly(1));
          e.replaceWith(Cue([To("=", Yu(o), rC("+", n.node)), To("=", Ry(n.node), l), Yu(o)]));
        }
    }
  };
  function wue(e, t) {
    {
      var r;
      e.traverse(nC, {
        scope: e.scope,
        bindingNames: t,
        seen: /* @__PURE__ */ new WeakSet(),
        includeUpdateExpression: (r = arguments[2]) != null ? r : !0
      });
    }
  }
  s(wue, "simplifyAccess");
});

// ../node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js
var sC = T((Vy) => {
  "use strict";
  Object.defineProperty(Vy, "__esModule", {
    value: !0
  });
  Vy.default = Oue;
  var Due = require("assert"), Ne = gt(), Iue = Uy();
  function _ue(e) {
    do
      switch (e.parent.type) {
        case "TSTypeAnnotation":
        case "TSTypeAliasDeclaration":
        case "TSTypeReference":
        case "TypeAnnotation":
        case "TypeAlias":
          return !0;
        case "ExportSpecifier":
          return e.parentPath.parent.exportKind === "type";
        default:
          if (e.parentPath.isStatement() || e.parentPath.isExpression())
            return !1;
      }
    while (e = e.parentPath);
  }
  s(_ue, "isInType");
  function Oue(e, t, r) {
    let n = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ s((c) => {
      e.requeue(c);
    }, "requeueInParent");
    for (let [c, f] of t.source) {
      for (let [p, h] of f.imports)
        n.set(p, [c, h, null]);
      for (let p of f.importsNamespace)
        n.set(p, [c, null, p]);
    }
    for (let [c, f] of t.local) {
      let p = i.get(c);
      p || (p = [], i.set(c, p)), p.push(...f.names);
    }
    let o = {
      metadata: t,
      requeueInParent: a,
      scope: e.scope,
      exported: i
    };
    e.traverse(Nue, o);
    let l = /* @__PURE__ */ new Set([...Array.from(n.keys()), ...Array.from(i.keys())]);
    (0, Iue.default)(e, l, !1);
    let u = {
      seen: /* @__PURE__ */ new WeakSet(),
      metadata: t,
      requeueInParent: a,
      scope: e.scope,
      imported: n,
      exported: i,
      buildImportReference([c, f, p], h) {
        let y = t.source.get(c);
        if (y.referenced = !0, p) {
          if (y.wrap) {
            var v;
            h = (v = r(h, y.wrap)) != null ? v : h;
          }
          return h;
        }
        let d = Ne.types.identifier(y.name);
        if (y.wrap) {
          var b;
          d = (b = r(d, y.wrap)) != null ? b : d;
        }
        if (f === "default" && y.interop === "node-default")
          return d;
        let E = t.stringSpecifiers.has(f);
        return Ne.types.memberExpression(d, E ? Ne.types.stringLiteral(f) : Ne.types.identifier(f), E);
      }
    };
    e.traverse(Bue, u);
  }
  s(Oue, "rewriteLiveReferences");
  var Nue = {
    Scope(e) {
      e.skip();
    },
    ClassDeclaration(e) {
      let {
        requeueInParent: t,
        exported: r,
        metadata: n
      } = this, {
        id: i
      } = e.node;
      if (!i) throw new Error("Expected class to have a name");
      let a = i.name, o = r.get(a) || [];
      if (o.length > 0) {
        let l = Ne.types.expressionStatement(Xs(n, o, Ne.types.identifier(a), e.scope));
        l._blockHoist = e.node._blockHoist, t(e.insertAfter(l)[0]);
      }
    },
    VariableDeclaration(e) {
      let {
        requeueInParent: t,
        exported: r,
        metadata: n
      } = this, i = e.node.kind === "var";
      for (let a of e.get("declarations")) {
        let {
          id: o
        } = a.node, {
          init: l
        } = a.node;
        if (Ne.types.isIdentifier(o) && r.has(o.name) && !Ne.types.isArrowFunctionExpression(l) && (!Ne.types.isFunctionExpression(l) || l.id) &&
        (!Ne.types.isClassExpression(l) || l.id)) {
          if (!l) {
            if (i)
              continue;
            l = e.scope.buildUndefinedNode();
          }
          a.node.init = Xs(n, r.get(o.name), l, e.scope), t(a.get("init"));
        } else
          for (let u of Object.keys(a.getOuterBindingIdentifiers()))
            if (r.has(u)) {
              let c = Ne.types.expressionStatement(Xs(n, r.get(u), Ne.types.identifier(u), e.scope));
              c._blockHoist = e.node._blockHoist, t(e.insertAfter(c)[0]);
            }
      }
    }
  }, Xs = /* @__PURE__ */ s((e, t, r, n) => {
    let i = e.exportName;
    for (let a = n; a != null; a = a.parent)
      a.hasOwnBinding(i) && a.rename(i);
    return (t || []).reduce((a, o) => {
      let {
        stringSpecifiers: l
      } = e, u = l.has(o);
      return Ne.types.assignmentExpression("=", Ne.types.memberExpression(Ne.types.identifier(i), u ? Ne.types.stringLiteral(o) : Ne.types.identifier(
      o), u), a);
    }, r);
  }, "buildBindingExportAssignmentExpression"), zu = /* @__PURE__ */ s((e) => Ne.template.expression.ast`
    (function() {
      throw new Error('"' + '${e}' + '" is read-only.');
    })()
  `, "buildImportThrow"), Bue = {
    ReferencedIdentifier(e) {
      let {
        seen: t,
        buildImportReference: r,
        scope: n,
        imported: i,
        requeueInParent: a
      } = this;
      if (t.has(e.node)) return;
      t.add(e.node);
      let o = e.node.name, l = i.get(o);
      if (l) {
        if (_ue(e))
          throw e.buildCodeFrameError(`Cannot transform the imported binding "${o}" since it's also used in a type annotation. Please strip \
type annotations using @babel/preset-typescript or @babel/preset-flow.`);
        let u = e.scope.getBinding(o);
        if (n.getBinding(o) !== u) return;
        let f = r(l, e.node);
        if (f.loc = e.node.loc, (e.parentPath.isCallExpression({
          callee: e.node
        }) || e.parentPath.isOptionalCallExpression({
          callee: e.node
        }) || e.parentPath.isTaggedTemplateExpression({
          tag: e.node
        })) && Ne.types.isMemberExpression(f))
          e.replaceWith(Ne.types.sequenceExpression([Ne.types.numericLiteral(0), f]));
        else if (e.isJSXIdentifier() && Ne.types.isMemberExpression(f)) {
          let {
            object: p,
            property: h
          } = f;
          e.replaceWith(Ne.types.jsxMemberExpression(Ne.types.jsxIdentifier(p.name), Ne.types.jsxIdentifier(h.name)));
        } else
          e.replaceWith(f);
        a(e), e.skip();
      }
    },
    UpdateExpression(e) {
      let {
        scope: t,
        seen: r,
        imported: n,
        exported: i,
        requeueInParent: a,
        buildImportReference: o
      } = this;
      if (r.has(e.node)) return;
      r.add(e.node);
      let l = e.get("argument");
      if (l.isMemberExpression()) return;
      let u = e.node;
      if (l.isIdentifier()) {
        let c = l.node.name;
        if (t.getBinding(c) !== e.scope.getBinding(c))
          return;
        let f = i.get(c), p = n.get(c);
        if (f?.length > 0 || p)
          if (p)
            e.replaceWith(Ne.types.assignmentExpression(u.operator[0] + "=", o(p, l.node), zu(c)));
          else if (u.prefix)
            e.replaceWith(Xs(this.metadata, f, Ne.types.cloneNode(u), e.scope));
          else {
            let h = t.generateDeclaredUidIdentifier(c);
            e.replaceWith(Ne.types.sequenceExpression([Ne.types.assignmentExpression("=", Ne.types.cloneNode(h), Ne.types.cloneNode(u)), Xs(
            this.metadata, f, Ne.types.identifier(c), e.scope), Ne.types.cloneNode(h)]));
          }
      }
      a(e), e.skip();
    },
    AssignmentExpression: {
      exit(e) {
        let {
          scope: t,
          seen: r,
          imported: n,
          exported: i,
          requeueInParent: a,
          buildImportReference: o
        } = this;
        if (r.has(e.node)) return;
        r.add(e.node);
        let l = e.get("left");
        if (!l.isMemberExpression())
          if (l.isIdentifier()) {
            let u = l.node.name;
            if (t.getBinding(u) !== e.scope.getBinding(u))
              return;
            let c = i.get(u), f = n.get(u);
            if (c?.length > 0 || f) {
              Due(e.node.operator === "=", "Path was not simplified");
              let p = e.node;
              f && (p.left = o(f, l.node), p.right = Ne.types.sequenceExpression([p.right, zu(u)])), e.replaceWith(Xs(this.metadata, c, p, e.
              scope)), a(e);
            }
          } else {
            let u = l.getOuterBindingIdentifiers(), c = Object.keys(u).filter((h) => t.getBinding(h) === e.scope.getBinding(h)), f = c.find(
            (h) => n.has(h));
            f && (e.node.right = Ne.types.sequenceExpression([e.node.right, zu(f)]));
            let p = [];
            if (c.forEach((h) => {
              let y = i.get(h) || [];
              y.length > 0 && p.push(Xs(this.metadata, y, Ne.types.identifier(h), e.scope));
            }), p.length > 0) {
              let h = Ne.types.sequenceExpression(p);
              e.parentPath.isExpressionStatement() && (h = Ne.types.expressionStatement(h), h._blockHoist = e.parentPath.node._blockHoist);
              let y = e.insertAfter(h)[0];
              a(y);
            }
          }
      }
    },
    "ForOfStatement|ForInStatement"(e) {
      let {
        scope: t,
        node: r
      } = e, {
        left: n
      } = r, {
        exported: i,
        imported: a,
        scope: o
      } = this;
      if (!Ne.types.isVariableDeclaration(n)) {
        let l = !1, u, c = e.get("body").scope;
        for (let h of Object.keys(Ne.types.getOuterBindingIdentifiers(n)))
          o.getBinding(h) === t.getBinding(h) && (i.has(h) && (l = !0, c.hasOwnBinding(h) && c.rename(h)), a.has(h) && !u && (u = h));
        if (!l && !u)
          return;
        e.ensureBlock();
        let f = e.get("body"), p = t.generateUidIdentifierBasedOnNode(n);
        e.get("left").replaceWith(Ne.types.variableDeclaration("let", [Ne.types.variableDeclarator(Ne.types.cloneNode(p))])), t.registerDeclaration(
        e.get("left")), l && f.unshiftContainer("body", Ne.types.expressionStatement(Ne.types.assignmentExpression("=", n, p))), u && f.unshiftContainer(
        "body", Ne.types.expressionStatement(zu(u)));
      }
    }
  };
});

// ../node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js
var $y = T((Wi) => {
  "use strict";
  Object.defineProperty(Wi, "__esModule", {
    value: !0
  });
  Wi.default = Mue;
  Wi.hasExports = Fue;
  Wi.isSideEffectImport = jue;
  Wi.validateImportInteropOption = aC;
  var iC = require("path"), kue = yi();
  function Fue(e) {
    return e.hasExports;
  }
  s(Fue, "hasExports");
  function jue(e) {
    return e.imports.size === 0 && e.importsNamespace.size === 0 && e.reexports.size === 0 && e.reexportNamespace.size === 0 && !e.reexportAll;
  }
  s(jue, "isSideEffectImport");
  function aC(e) {
    if (typeof e != "function" && e !== "none" && e !== "babel" && e !== "node")
      throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${e}).`);
    return e;
  }
  s(aC, "validateImportInteropOption");
  function Lue(e, t, r) {
    return typeof e == "function" ? aC(e(t, r)) : e;
  }
  s(Lue, "resolveImportInterop");
  function Mue(e, t, {
    importInterop: r,
    initializeReexports: n = !1,
    getWrapperPayload: i,
    esNamespaceOnly: a = !1,
    filename: o
  }) {
    t || (t = e.scope.generateUidIdentifier("exports").name);
    let l = /* @__PURE__ */ new Set();
    Uue(e);
    let {
      local: u,
      sources: c,
      hasExports: f
    } = Rue(e, {
      initializeReexports: n,
      getWrapperPayload: i
    }, l);
    Vue(e);
    for (let [p, h] of c) {
      let {
        importsNamespace: y,
        imports: v
      } = h;
      if (y.size > 0 && v.size === 0) {
        let [b] = y;
        h.name = b;
      }
      let d = Lue(r, p, o);
      d === "none" ? h.interop = "none" : d === "node" && h.interop === "namespace" ? h.interop = "node-namespace" : d === "node" && h.interop ===
      "default" ? h.interop = "node-default" : a && h.interop === "namespace" && (h.interop = "default");
    }
    return {
      exportName: t,
      exportNameListName: null,
      hasExports: f,
      local: u,
      source: c,
      stringSpecifiers: l
    };
  }
  s(Mue, "normalizeModuleAndLoadMetadata");
  function Ju(e, t) {
    if (e.isIdentifier())
      return e.node.name;
    if (e.isStringLiteral()) {
      let r = e.node.value;
      return (0, kue.isIdentifierName)(r) || t.add(r), r;
    } else
      throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${e.node.type}`);
  }
  s(Ju, "getExportSpecifierName");
  function oC(e) {
    if (!e.isExportSpecifier())
      throw e.isExportNamespaceSpecifier() ? e.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-transform\
-export-namespace-from`.") : e.buildCodeFrameError("Unexpected export specifier type");
  }
  s(oC, "assertExportSpecifier");
  function Rue(e, {
    getWrapperPayload: t,
    initializeReexports: r
  }, n) {
    let i = que(e, r, n), a = /* @__PURE__ */ new Map(), o = /* @__PURE__ */ new Map(), l = /* @__PURE__ */ s((c, f) => {
      let p = c.value, h = o.get(p);
      return h ? a.get(p).push(f) : (h = {
        name: e.scope.generateUidIdentifier((0, iC.basename)(p, (0, iC.extname)(p))).name,
        interop: "none",
        loc: null,
        imports: /* @__PURE__ */ new Map(),
        importsNamespace: /* @__PURE__ */ new Set(),
        reexports: /* @__PURE__ */ new Map(),
        reexportNamespace: /* @__PURE__ */ new Set(),
        reexportAll: null,
        wrap: null,
        get lazy() {
          return this.wrap === "lazy";
        },
        referenced: !1
      }, o.set(p, h), a.set(p, [f])), h;
    }, "getData"), u = !1;
    e.get("body").forEach((c) => {
      if (c.isImportDeclaration()) {
        let f = l(c.node.source, c.node);
        f.loc || (f.loc = c.node.loc), c.get("specifiers").forEach((p) => {
          if (p.isImportDefaultSpecifier()) {
            let h = p.get("local").node.name;
            f.imports.set(h, "default");
            let y = i.get(h);
            y && (i.delete(h), y.names.forEach((v) => {
              f.reexports.set(v, "default");
            }), f.referenced = !0);
          } else if (p.isImportNamespaceSpecifier()) {
            let h = p.get("local").node.name;
            f.importsNamespace.add(h);
            let y = i.get(h);
            y && (i.delete(h), y.names.forEach((v) => {
              f.reexportNamespace.add(v);
            }), f.referenced = !0);
          } else if (p.isImportSpecifier()) {
            let h = Ju(p.get("imported"), n), y = p.get("local").node.name;
            f.imports.set(y, h);
            let v = i.get(y);
            v && (i.delete(y), v.names.forEach((d) => {
              f.reexports.set(d, h);
            }), f.referenced = !0);
          }
        });
      } else if (c.isExportAllDeclaration()) {
        u = !0;
        let f = l(c.node.source, c.node);
        f.loc || (f.loc = c.node.loc), f.reexportAll = {
          loc: c.node.loc
        }, f.referenced = !0;
      } else if (c.isExportNamedDeclaration() && c.node.source) {
        u = !0;
        let f = l(c.node.source, c.node);
        f.loc || (f.loc = c.node.loc), c.get("specifiers").forEach((p) => {
          oC(p);
          let h = Ju(p.get("local"), n), y = Ju(p.get("exported"), n);
          if (f.reexports.set(y, h), f.referenced = !0, y === "__esModule")
            throw p.get("exported").buildCodeFrameError('Illegal export "__esModule".');
        });
      } else (c.isExportNamedDeclaration() || c.isExportDefaultDeclaration()) && (u = !0);
    });
    for (let c of o.values()) {
      let f = !1, p = !1;
      c.importsNamespace.size > 0 && (f = !0, p = !0), c.reexportAll && (p = !0);
      for (let h of c.imports.values())
        h === "default" ? f = !0 : p = !0;
      for (let h of c.reexports.values())
        h === "default" ? f = !0 : p = !0;
      f && p ? c.interop = "namespace" : f && (c.interop = "default");
    }
    if (t)
      for (let [c, f] of o)
        f.wrap = t(c, f, a.get(c));
    return {
      hasExports: u,
      local: i,
      sources: o
    };
  }
  s(Rue, "getModuleMetadata");
  function que(e, t, r) {
    let n = /* @__PURE__ */ new Map();
    e.get("body").forEach((o) => {
      let l;
      if (o.isImportDeclaration())
        l = "import";
      else {
        if (o.isExportDefaultDeclaration() && (o = o.get("declaration")), o.isExportNamedDeclaration()) {
          if (o.node.declaration)
            o = o.get("declaration");
          else if (t && o.node.source && o.get("source").isStringLiteral()) {
            o.get("specifiers").forEach((u) => {
              oC(u), n.set(u.get("local").node.name, "block");
            });
            return;
          }
        }
        if (o.isFunctionDeclaration())
          l = "hoisted";
        else if (o.isClassDeclaration())
          l = "block";
        else if (o.isVariableDeclaration({
          kind: "var"
        }))
          l = "var";
        else if (o.isVariableDeclaration())
          l = "block";
        else
          return;
      }
      Object.keys(o.getOuterBindingIdentifiers()).forEach((u) => {
        n.set(u, l);
      });
    });
    let i = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ s((o) => {
      let l = o.node.name, u = i.get(l);
      if (!u) {
        let c = n.get(l);
        if (c === void 0)
          throw o.buildCodeFrameError(`Exporting local "${l}", which is not declared.`);
        u = {
          names: [],
          kind: c
        }, i.set(l, u);
      }
      return u;
    }, "getLocalMetadata");
    return e.get("body").forEach((o) => {
      if (o.isExportNamedDeclaration() && (t || !o.node.source))
        if (o.node.declaration) {
          let l = o.get("declaration"), u = l.getOuterBindingIdentifierPaths();
          Object.keys(u).forEach((c) => {
            if (c === "__esModule")
              throw l.buildCodeFrameError('Illegal export "__esModule".');
            a(u[c]).names.push(c);
          });
        } else
          o.get("specifiers").forEach((l) => {
            let u = l.get("local"), c = l.get("exported"), f = a(u), p = Ju(c, r);
            if (p === "__esModule")
              throw c.buildCodeFrameError('Illegal export "__esModule".');
            f.names.push(p);
          });
      else if (o.isExportDefaultDeclaration()) {
        let l = o.get("declaration");
        if (l.isFunctionDeclaration() || l.isClassDeclaration())
          a(l.get("id")).names.push("default");
        else
          throw l.buildCodeFrameError("Unexpected default expression export.");
      }
    }), i;
  }
  s(que, "getLocalExportMetadata");
  function Uue(e) {
    e.get("body").forEach((t) => {
      if (t.isExportDefaultDeclaration()) {
        {
          var r;
          (r = t.splitExportDeclaration) != null || (t.splitExportDeclaration = Ir().NodePath.prototype.splitExportDeclaration);
        }
        t.splitExportDeclaration();
      }
    });
  }
  s(Uue, "nameAnonymousExports");
  function Vue(e) {
    e.get("body").forEach((t) => {
      if (t.isImportDeclaration())
        t.remove();
      else if (t.isExportNamedDeclaration())
        t.node.declaration ? (t.node.declaration._blockHoist = t.node._blockHoist, t.replaceWith(t.node.declaration)) : t.remove();
      else if (t.isExportDefaultDeclaration()) {
        let r = t.get("declaration");
        if (r.isFunctionDeclaration() || r.isClassDeclaration())
          r._blockHoist = t.node._blockHoist, t.replaceWith(r);
        else
          throw r.buildCodeFrameError("Unexpected default expression export.");
      } else t.isExportAllDeclaration() && t.remove();
    });
  }
  s(Vue, "removeImportExportDeclarations");
});

// ../node_modules/@babel/helper-module-transforms/lib/lazy-modules.js
var lC = T((Xu) => {
  "use strict";
  Object.defineProperty(Xu, "__esModule", {
    value: !0
  });
  Xu.toGetWrapperPayload = Kue;
  Xu.wrapReference = Gue;
  var $ue = gt(), Wue = $y();
  function Kue(e) {
    return (t, r) => {
      if (e === !1 || (0, Wue.isSideEffectImport)(r) || r.reexportAll) return null;
      if (e === !0)
        return t.includes(".") ? null : "lazy";
      if (Array.isArray(e))
        return e.includes(t) ? "lazy" : null;
      if (typeof e == "function")
        return e(t) ? "lazy" : null;
      throw new Error(".lazy must be a boolean, string array, or function");
    };
  }
  s(Kue, "toGetWrapperPayload");
  function Gue(e, t) {
    return t === "lazy" ? $ue.types.callExpression(e, []) : null;
  }
  s(Gue, "wrapReference");
});

// ../node_modules/@babel/helper-module-transforms/lib/dynamic-import.js
var Wy = T((Qu) => {
  "use strict";
  Object.defineProperty(Qu, "__esModule", {
    value: !0
  });
  Qu.buildDynamicImport = Hue;
  var $t = gt();
  Qu.getDynamicImportSource = /* @__PURE__ */ s(function(t) {
    let [r] = t.arguments;
    return $t.types.isStringLiteral(r) || $t.types.isTemplateLiteral(r) ? r : $t.template.expression.ast`\`\${${r}}\``;
  }, "getDynamicImportSource");
  function Hue(e, t, r, n) {
    let i = $t.types.isCallExpression(e) ? e.arguments[0] : e.source;
    if ($t.types.isStringLiteral(i) || $t.types.isTemplateLiteral(i) && i.quasis.length === 0)
      return t ? $t.template.expression.ast`
        Promise.resolve().then(() => ${n(i)})
      ` : n(i);
    let a = $t.types.isTemplateLiteral(i) ? $t.types.identifier("specifier") : $t.types.templateLiteral([$t.types.templateElement({
      raw: ""
    }), $t.types.templateElement({
      raw: ""
    })], [$t.types.identifier("specifier")]);
    return t ? $t.template.expression.ast`
      (specifier =>
        new Promise(r => r(${a}))
          .then(s => ${n($t.types.identifier("s"))})
      )(${i})
    ` : r ? $t.template.expression.ast`
      (specifier =>
        new Promise(r => r(${n(a)}))
      )(${i})
    ` : $t.template.expression.ast`
      (specifier => ${n(a)})(${i})
    `;
  }
  s(Hue, "buildDynamicImport");
});

// ../node_modules/@babel/helper-module-transforms/lib/get-module-name.js
var uC = T((Zu) => {
  "use strict";
  Object.defineProperty(Zu, "__esModule", {
    value: !0
  });
  Zu.default = Ky;
  {
    let e = Ky;
    Zu.default = Ky = /* @__PURE__ */ s(function(r, n) {
      var i, a, o, l;
      return e(r, {
        moduleId: (i = n.moduleId) != null ? i : r.moduleId,
        moduleIds: (a = n.moduleIds) != null ? a : r.moduleIds,
        getModuleId: (o = n.getModuleId) != null ? o : r.getModuleId,
        moduleRoot: (l = n.moduleRoot) != null ? l : r.moduleRoot
      });
    }, "getModuleName");
  }
  function Ky(e, t) {
    let {
      filename: r,
      filenameRelative: n = r,
      sourceRoot: i = t.moduleRoot
    } = e, {
      moduleId: a,
      moduleIds: o = !!a,
      getModuleId: l,
      moduleRoot: u = i
    } = t;
    if (!o) return null;
    if (a != null && !l)
      return a;
    let c = u != null ? u + "/" : "";
    if (n) {
      let f = i != null ? new RegExp("^" + i + "/?") : "";
      c += n.replace(f, "").replace(/\.\w*$/, "");
    }
    return c = c.replace(/\\/g, "/"), l && l(c) || c;
  }
  s(Ky, "getModuleName");
});

// ../node_modules/@babel/helper-module-transforms/lib/index.js
var So = T((br) => {
  "use strict";
  Object.defineProperty(br, "__esModule", {
    value: !0
  });
  Object.defineProperty(br, "buildDynamicImport", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Jue.buildDynamicImport;
    }, "get")
  });
  br.buildNamespaceInitStatements = tce;
  br.ensureStatementsHoisted = Zue;
  Object.defineProperty(br, "getModuleName", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Xue.default;
    }, "get")
  });
  Object.defineProperty(br, "hasExports", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return xo.hasExports;
    }, "get")
  });
  Object.defineProperty(br, "isModule", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return cC.isModule;
    }, "get")
  });
  Object.defineProperty(br, "isSideEffectImport", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return xo.isSideEffectImport;
    }, "get")
  });
  br.rewriteModuleStatementsAndPrepareHeader = Que;
  Object.defineProperty(br, "rewriteThis", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return fC.default;
    }, "get")
  });
  br.wrapInterop = ece;
  var Yue = require("assert"), We = gt(), cC = QA(), fC = tC(), zue = sC(), xo = $y(), zy = lC(), Jue = Wy(), Xue = uC();
  br.getDynamicImportSource = Wy().getDynamicImportSource;
  function Que(e, {
    exportName: t,
    strict: r,
    allowTopLevelThis: n,
    strictMode: i,
    noInterop: a,
    importInterop: o = a ? "none" : "babel",
    lazy: l,
    getWrapperPayload: u = zy.toGetWrapperPayload(l ?? !1),
    wrapReference: c = zy.wrapReference,
    esNamespaceOnly: f,
    filename: p,
    constantReexports: h = arguments[1].loose,
    enumerableModuleMeta: y = arguments[1].loose,
    noIncompleteNsImportDetection: v
  }) {
    (0, xo.validateImportInteropOption)(o), Yue((0, cC.isModule)(e), "Cannot process module statements in a script"), e.node.sourceType = "s\
cript";
    let d = (0, xo.default)(e, t, {
      importInterop: o,
      initializeReexports: h,
      getWrapperPayload: u,
      esNamespaceOnly: f,
      filename: p
    });
    n || (0, fC.default)(e), (0, zue.default)(e, d, c), i !== !1 && (e.node.directives.some((O) => O.value.value === "use strict") || e.unshiftContainer(
    "directives", We.types.directive(We.types.directiveLiteral("use strict"))));
    let b = [];
    (0, xo.hasExports)(d) && !r && b.push(rce(d, y));
    let E = sce(e, d);
    return E && (d.exportNameListName = E.name, b.push(E.statement)), b.push(...ice(e, d, c, h, v)), {
      meta: d,
      headers: b
    };
  }
  s(Que, "rewriteModuleStatementsAndPrepareHeader");
  function Zue(e) {
    e.forEach((t) => {
      t._blockHoist = 3;
    });
  }
  s(Zue, "ensureStatementsHoisted");
  function ece(e, t, r) {
    if (r === "none")
      return null;
    if (r === "node-namespace")
      return We.types.callExpression(e.hub.addHelper("interopRequireWildcard"), [t, We.types.booleanLiteral(!0)]);
    if (r === "node-default")
      return null;
    let n;
    if (r === "default")
      n = "interopRequireDefault";
    else if (r === "namespace")
      n = "interopRequireWildcard";
    else
      throw new Error(`Unknown interop: ${r}`);
    return We.types.callExpression(e.hub.addHelper(n), [t]);
  }
  s(ece, "wrapInterop");
  function tce(e, t, r = !1, n = zy.wrapReference) {
    var i;
    let a = [], o = We.types.identifier(t.name);
    for (let u of t.importsNamespace)
      u !== t.name && a.push(We.template.statement`var NAME = SOURCE;`({
        NAME: u,
        SOURCE: We.types.cloneNode(o)
      }));
    let l = (i = n(o, t.wrap)) != null ? i : o;
    r && a.push(...pC(e, t, !0, n));
    for (let u of t.reexportNamespace)
      a.push((We.types.isIdentifier(l) ? We.template.statement`EXPORTS.NAME = NAMESPACE;` : We.template.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          `)({
        EXPORTS: e.exportName,
        NAME: u,
        NAMESPACE: We.types.cloneNode(l)
      }));
    if (t.reexportAll) {
      let u = nce(e, We.types.cloneNode(l), r);
      u.loc = t.reexportAll.loc, a.push(u);
    }
    return a;
  }
  s(tce, "buildNamespaceInitStatements");
  var Gy = {
    constant: /* @__PURE__ */ s(({
      exports: e,
      exportName: t,
      namespaceImport: r
    }) => We.template.statement.ast`
      ${e}.${t} = ${r};
    `, "constant"),
    constantComputed: /* @__PURE__ */ s(({
      exports: e,
      exportName: t,
      namespaceImport: r
    }) => We.template.statement.ast`
      ${e}["${t}"] = ${r};
    `, "constantComputed"),
    spec: /* @__PURE__ */ s(({
      exports: e,
      exportName: t,
      namespaceImport: r
    }) => We.template.statement.ast`
      Object.defineProperty(${e}, "${t}", {
        enumerable: true,
        get: function() {
          return ${r};
        },
      });
    `, "spec")
  };
  function pC(e, t, r, n) {
    var i;
    let a = We.types.identifier(t.name);
    a = (i = n(a, t.wrap)) != null ? i : a;
    let {
      stringSpecifiers: o
    } = e;
    return Array.from(t.reexports, ([l, u]) => {
      let c = We.types.cloneNode(a);
      u === "default" && t.interop === "node-default" || (o.has(u) ? c = We.types.memberExpression(c, We.types.stringLiteral(u), !0) : c = We.
      types.memberExpression(c, We.types.identifier(u)));
      let f = {
        exports: e.exportName,
        exportName: l,
        namespaceImport: c
      };
      return r || We.types.isIdentifier(c) ? o.has(l) ? Gy.constantComputed(f) : Gy.constant(f) : Gy.spec(f);
    });
  }
  s(pC, "buildReexportsFromMeta");
  function rce(e, t = !1) {
    return (t ? We.template.statement`
        EXPORTS.__esModule = true;
      ` : We.template.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({
      EXPORTS: e.exportName
    });
  }
  s(rce, "buildESModuleHeader");
  function nce(e, t, r) {
    return (r ? We.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : We.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({
      NAMESPACE: t,
      EXPORTS: e.exportName,
      VERIFY_NAME_LIST: e.exportNameListName ? (0, We.template)`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({
        EXPORTS_LIST: e.exportNameListName
      }) : null
    });
  }
  s(nce, "buildNamespaceReexport");
  function sce(e, t) {
    let r = /* @__PURE__ */ Object.create(null);
    for (let a of t.local.values())
      for (let o of a.names)
        r[o] = !0;
    let n = !1;
    for (let a of t.source.values()) {
      for (let o of a.reexports.keys())
        r[o] = !0;
      for (let o of a.reexportNamespace)
        r[o] = !0;
      n = n || !!a.reexportAll;
    }
    if (!n || Object.keys(r).length === 0) return null;
    let i = e.scope.generateUidIdentifier("exportNames");
    return delete r.default, {
      name: i.name,
      statement: We.types.variableDeclaration("var", [We.types.variableDeclarator(i, We.types.valueToNode(r))])
    };
  }
  s(sce, "buildExportNameListDeclaration");
  function ice(e, t, r, n = !1, i = !1) {
    let a = [];
    for (let [l, u] of t.local)
      if (u.kind !== "import") {
        if (u.kind === "hoisted")
          a.push([u.names[0], Yy(t, u.names, We.types.identifier(l))]);
        else if (!i)
          for (let c of u.names)
            a.push([c, null]);
      }
    for (let l of t.source.values()) {
      if (!n) {
        let u = pC(t, l, !1, r), c = [...l.reexports.keys()];
        for (let f = 0; f < u.length; f++)
          a.push([c[f], u[f]]);
      }
      if (!i)
        for (let u of l.reexportNamespace)
          a.push([u, null]);
    }
    a.sort(([l], [u]) => l < u ? -1 : u < l ? 1 : 0);
    let o = [];
    if (i)
      for (let [, l] of a)
        o.push(l);
    else
      for (let u = 0; u < a.length; u += 100) {
        let c = [];
        for (let f = 0; f < 100 && u + f < a.length; f++) {
          let [p, h] = a[u + f];
          h !== null ? (c.length > 0 && (o.push(Yy(t, c, e.scope.buildUndefinedNode())), c = []), o.push(h)) : c.push(p);
        }
        c.length > 0 && o.push(Yy(t, c, e.scope.buildUndefinedNode()));
      }
    return o;
  }
  s(ice, "buildExportInitializationStatements");
  var Hy = {
    computed: /* @__PURE__ */ s(({
      exports: e,
      name: t,
      value: r
    }) => We.template.expression.ast`${e}["${t}"] = ${r}`, "computed"),
    default: /* @__PURE__ */ s(({
      exports: e,
      name: t,
      value: r
    }) => We.template.expression.ast`${e}.${t} = ${r}`, "default"),
    define: /* @__PURE__ */ s(({
      exports: e,
      name: t,
      value: r
    }) => We.template.expression.ast`
      Object.defineProperty(${e}, "${t}", {
        enumerable: true,
        value: void 0,
        writable: true
      })["${t}"] = ${r}`, "define")
  };
  function Yy(e, t, r) {
    let {
      stringSpecifiers: n,
      exportName: i
    } = e;
    return We.types.expressionStatement(t.reduce((a, o) => {
      let l = {
        exports: i,
        name: o,
        value: a
      };
      return o === "__proto__" ? Hy.define(l) : n.has(o) ? Hy.computed(l) : Hy.default(l);
    }, r));
  }
  s(Yy, "buildInitStatement");
});

// ../node_modules/@babel/core/lib/transformation/file/babel-7-helpers.cjs
var hC = T((dC) => {
  dC.getModuleName = () => So().getModuleName;
});

// ../node_modules/@babel/core/lib/transformation/file/file.js
var Xy = T((tc) => {
  "use strict";
  Object.defineProperty(tc, "__esModule", {
    value: !0
  });
  tc.default = void 0;
  function Po() {
    let e = am();
    return Po = /* @__PURE__ */ s(function() {
      return e;
    }, "helpers"), e;
  }
  s(Po, "helpers");
  function Jy() {
    let e = Ir();
    return Jy = /* @__PURE__ */ s(function() {
      return e;
    }, "_traverse"), e;
  }
  s(Jy, "_traverse");
  function mC() {
    let e = to();
    return mC = /* @__PURE__ */ s(function() {
      return e;
    }, "_codeFrame"), e;
  }
  s(mC, "_codeFrame");
  function yC() {
    let e = Se();
    return yC = /* @__PURE__ */ s(function() {
      return e;
    }, "_t"), e;
  }
  s(yC, "_t");
  function ec() {
    let e = require("semver");
    return ec = /* @__PURE__ */ s(function() {
      return e;
    }, "_semver"), e;
  }
  s(ec, "_semver");
  var ace = oce(hC(), !0);
  function gC(e) {
    if (typeof WeakMap != "function") return null;
    var t = /* @__PURE__ */ new WeakMap(), r = /* @__PURE__ */ new WeakMap();
    return (gC = /* @__PURE__ */ s(function(n) {
      return n ? r : t;
    }, "_getRequireWildcardCache"))(e);
  }
  s(gC, "_getRequireWildcardCache");
  function oce(e, t) {
    if (!t && e && e.__esModule) return e;
    if (e === null || typeof e != "object" && typeof e != "function") return { default: e };
    var r = gC(t);
    if (r && r.has(e)) return r.get(e);
    var n = { __proto__: null }, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var a in e) if (a !== "default" && {}.hasOwnProperty.call(e, a)) {
      var o = i ? Object.getOwnPropertyDescriptor(e, a) : null;
      o && (o.get || o.set) ? Object.defineProperty(n, a, o) : n[a] = e[a];
    }
    return n.default = e, r && r.set(e, n), n;
  }
  s(oce, "_interopRequireWildcard");
  var {
    cloneNode: lce,
    interpreterDirective: uce
  } = yC(), cce = {
    enter(e, t) {
      let r = e.node.loc;
      r && (t.loc = r, e.stop());
    }
  }, Ki = class {
    static {
      s(this, "File");
    }
    constructor(t, {
      code: r,
      ast: n,
      inputMap: i
    }) {
      this._map = /* @__PURE__ */ new Map(), this.opts = void 0, this.declarations = {}, this.path = void 0, this.ast = void 0, this.scope =
      void 0, this.metadata = {}, this.code = "", this.inputMap = void 0, this.hub = {
        file: this,
        getCode: /* @__PURE__ */ s(() => this.code, "getCode"),
        getScope: /* @__PURE__ */ s(() => this.scope, "getScope"),
        addHelper: this.addHelper.bind(this),
        buildError: this.buildCodeFrameError.bind(this)
      }, this.opts = t, this.code = r, this.ast = n, this.inputMap = i, this.path = Jy().NodePath.get({
        hub: this.hub,
        parentPath: null,
        parent: this.ast,
        container: this.ast,
        key: "program"
      }).setContext(), this.scope = this.path.scope;
    }
    get shebang() {
      let {
        interpreter: t
      } = this.path.node;
      return t ? t.value : "";
    }
    set shebang(t) {
      t ? this.path.get("interpreter").replaceWith(uce(t)) : this.path.get("interpreter").remove();
    }
    set(t, r) {
      if (t === "helpersNamespace")
        throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-\
helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to \
explore using 'helperGenerator' alongside 'file.availableHelper()'.");
      this._map.set(t, r);
    }
    get(t) {
      return this._map.get(t);
    }
    has(t) {
      return this._map.has(t);
    }
    availableHelper(t, r) {
      let n;
      try {
        n = Po().minVersion(t);
      } catch (i) {
        if (i.code !== "BABEL_HELPER_UNKNOWN") throw i;
        return !1;
      }
      return typeof r != "string" ? !0 : (ec().valid(r) && (r = `^${r}`), !ec().intersects(`<${n}`, r) && !ec().intersects(">=8.0.0", r));
    }
    addHelper(t) {
      let r = this.declarations[t];
      if (r) return lce(r);
      let n = this.get("helperGenerator");
      if (n) {
        let c = n(t);
        if (c) return c;
      }
      Po().minVersion(t);
      let i = this.declarations[t] = this.scope.generateUidIdentifier(t), a = {};
      for (let c of Po().getDependencies(t))
        a[c] = this.addHelper(c);
      let {
        nodes: o,
        globals: l
      } = Po().get(t, (c) => a[c], i.name, Object.keys(this.scope.getAllBindings()));
      l.forEach((c) => {
        this.path.scope.hasBinding(c, !0) && this.path.scope.rename(c);
      }), o.forEach((c) => {
        c._compact = !0;
      });
      let u = this.path.unshiftContainer("body", o);
      for (let c of u)
        c.isVariableDeclaration() && this.scope.registerDeclaration(c);
      return i;
    }
    buildCodeFrameError(t, r, n = SyntaxError) {
      let i = t?.loc;
      if (!i && t) {
        let a = {
          loc: null
        };
        (0, Jy().default)(t, cce, this.scope, a), i = a.loc;
        let o = "This is an error on an internal node. Probably an internal error.";
        i && (o += " Location has been estimated."), r += ` (${o})`;
      }
      if (i) {
        let {
          highlightCode: a = !0
        } = this.opts;
        r += `
` + (0, mC().codeFrameColumns)(this.code, {
          start: {
            line: i.start.line,
            column: i.start.column + 1
          },
          end: i.end && i.start.line === i.end.line ? {
            line: i.end.line,
            column: i.end.column + 1
          } : void 0
        }, {
          highlightCode: a
        });
      }
      return new n(r);
    }
  };
  tc.default = Ki;
  Ki.prototype.addImport = /* @__PURE__ */ s(function() {
    throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-mo\
dule-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
  }, "addImport"), Ki.prototype.addTemplateObject = /* @__PURE__ */ s(function() {
    throw new Error("This function has been moved into the template literal transform itself.");
  }, "addTemplateObject"), Ki.prototype.getModuleName = /* @__PURE__ */ s(function() {
    return ace.getModuleName()(this.opts, this.opts);
  }, "getModuleName");
});

// ../node_modules/@babel/core/lib/tools/build-external-helpers.js
var xC = T((s0) => {
  "use strict";
  Object.defineProperty(s0, "__esModule", {
    value: !0
  });
  s0.default = Cce;
  function Qy() {
    let e = am();
    return Qy = /* @__PURE__ */ s(function() {
      return e;
    }, "helpers"), e;
  }
  s(Qy, "helpers");
  function bC() {
    let e = fo();
    return bC = /* @__PURE__ */ s(function() {
      return e;
    }, "_generator"), e;
  }
  s(bC, "_generator");
  function EC() {
    let e = Oi();
    return EC = /* @__PURE__ */ s(function() {
      return e;
    }, "_template"), e;
  }
  s(EC, "_template");
  function vC() {
    let e = Se();
    return vC = /* @__PURE__ */ s(function() {
      return e;
    }, "_t"), e;
  }
  s(vC, "_t");
  var {
    arrayExpression: fce,
    assignmentExpression: rc,
    binaryExpression: pce,
    blockStatement: dce,
    callExpression: hce,
    cloneNode: mce,
    conditionalExpression: yce,
    exportNamedDeclaration: gce,
    exportSpecifier: bce,
    expressionStatement: Zy,
    functionExpression: Ece,
    identifier: Wt,
    memberExpression: e0,
    objectExpression: t0,
    program: nc,
    stringLiteral: TC,
    unaryExpression: vce,
    variableDeclaration: r0,
    variableDeclarator: n0
  } = vC(), Tce = /* @__PURE__ */ s((e) => EC().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(e), "buildUmdWrapper");
  function xce(e) {
    let t = Wt("babelHelpers"), r = [], n = Ece(null, [Wt("global")], dce(r)), i = nc([Zy(hce(n, [yce(pce("===", vce("typeof", Wt("global")),
    TC("undefined")), Wt("self"), Wt("global"))]))]);
    return r.push(r0("var", [n0(t, rc("=", e0(Wt("global"), t), t0([])))])), sc(r, t, e), i;
  }
  s(xce, "buildGlobal");
  function Sce(e) {
    let t = [], r = sc(t, null, e);
    return t.unshift(gce(null, Object.keys(r).map((n) => bce(mce(r[n]), Wt(n))))), nc(t, [], "module");
  }
  s(Sce, "buildModule");
  function Pce(e) {
    let t = Wt("babelHelpers"), r = [];
    return r.push(r0("var", [n0(t, Wt("global"))])), sc(r, t, e), nc([Tce({
      FACTORY_PARAMETERS: Wt("global"),
      BROWSER_ARGUMENTS: rc("=", e0(Wt("root"), t), t0([])),
      COMMON_ARGUMENTS: Wt("exports"),
      AMD_ARGUMENTS: fce([TC("exports")]),
      FACTORY_BODY: r,
      UMD_ROOT: Wt("this")
    })]);
  }
  s(Pce, "buildUmd");
  function Ace(e) {
    let t = Wt("babelHelpers"), r = [];
    r.push(r0("var", [n0(t, t0([]))]));
    let n = nc(r);
    return sc(r, t, e), r.push(Zy(t)), n;
  }
  s(Ace, "buildVar");
  function sc(e, t, r) {
    let n = /* @__PURE__ */ s((a) => t ? e0(t, Wt(a)) : Wt(`_${a}`), "getHelperReference"), i = {};
    return Qy().list.forEach(function(a) {
      if (r && !r.includes(a)) return;
      let o = i[a] = n(a), {
        nodes: l
      } = Qy().get(a, n, t ? null : `_${a}`, [], t ? (u, c, f) => {
        f((p) => rc("=", o, p)), u.body.push(Zy(rc("=", o, Wt(c))));
      } : null);
      e.push(...l);
    }), i;
  }
  s(sc, "buildHelpers");
  function Cce(e, t = "global") {
    let r, n = {
      global: xce,
      module: Sce,
      umd: Pce,
      var: Ace
    }[t];
    if (n)
      r = n(e);
    else
      throw new Error(`Unsupported output type ${t}`);
    return (0, bC().default)(r).code;
  }
  s(Cce, "_default");
});

// ../node_modules/gensync/index.js
var Er = T((V2e, _C) => {
  "use strict";
  var PC = Symbol.for("gensync:v1:start"), AC = Symbol.for("gensync:v1:suspend"), wce = "GENSYNC_EXPECTED_START", Dce = "GENSYNC_EXPECTED_SU\
SPEND", CC = "GENSYNC_OPTIONS_ERROR", SC = "GENSYNC_RACE_NONEMPTY", Ice = "GENSYNC_ERRBACK_NO_CALLBACK";
  _C.exports = Object.assign(
    /* @__PURE__ */ s(function(t) {
      let r = t;
      return typeof t != "function" ? r = Oce(t) : r = Nce(t), Object.assign(r, _ce(r));
    }, "gensync"),
    {
      all: i0({
        name: "all",
        arity: 1,
        sync: /* @__PURE__ */ s(function(e) {
          return Array.from(e[0]).map((r) => a0(r));
        }, "sync"),
        async: /* @__PURE__ */ s(function(e, t, r) {
          let n = Array.from(e[0]);
          if (n.length === 0) {
            Promise.resolve().then(() => t([]));
            return;
          }
          let i = 0, a = n.map(() => {
          });
          n.forEach((o, l) => {
            ic(
              o,
              (u) => {
                a[l] = u, i += 1, i === a.length && t(a);
              },
              r
            );
          });
        }, "async")
      }),
      race: i0({
        name: "race",
        arity: 1,
        sync: /* @__PURE__ */ s(function(e) {
          let t = Array.from(e[0]);
          if (t.length === 0)
            throw Qs("Must race at least 1 item", SC);
          return a0(t[0]);
        }, "sync"),
        async: /* @__PURE__ */ s(function(e, t, r) {
          let n = Array.from(e[0]);
          if (n.length === 0)
            throw Qs("Must race at least 1 item", SC);
          for (let i of n)
            ic(i, t, r);
        }, "async")
      })
    }
  );
  function _ce(e) {
    return {
      sync: /* @__PURE__ */ s(function(...r) {
        return a0(e.apply(this, r));
      }, "sync"),
      async: /* @__PURE__ */ s(function(...r) {
        return new Promise((n, i) => {
          ic(e.apply(this, r), n, i);
        });
      }, "async"),
      errback: /* @__PURE__ */ s(function(...r) {
        let n = r.pop();
        if (typeof n != "function")
          throw Qs(
            "Asynchronous function called without callback",
            Ice
          );
        let i;
        try {
          i = e.apply(this, r);
        } catch (a) {
          n(a);
          return;
        }
        ic(i, (a) => n(void 0, a), (a) => n(a));
      }, "errback")
    };
  }
  s(_ce, "makeFunctionAPI");
  function Ao(e, t, r, n) {
    if (typeof r === e || n && typeof r > "u")
      return;
    let i;
    throw n ? i = `Expected opts.${t} to be either a ${e}, or undefined.` : i = `Expected opts.${t} to be a ${e}.`, Qs(i, CC);
  }
  s(Ao, "assertTypeof");
  function Qs(e, t) {
    return Object.assign(new Error(e), { code: t });
  }
  s(Qs, "makeError");
  function Oce({ name: e, arity: t, sync: r, async: n, errback: i }) {
    if (Ao(
      "string",
      "name",
      e,
      !0
      /* allowUndefined */
    ), Ao(
      "number",
      "arity",
      t,
      !0
      /* allowUndefined */
    ), Ao("function", "sync", r), Ao(
      "function",
      "async",
      n,
      !0
      /* allowUndefined */
    ), Ao(
      "function",
      "errback",
      i,
      !0
      /* allowUndefined */
    ), n && i)
      throw Qs(
        "Expected one of either opts.async or opts.errback, but got _both_.",
        CC
      );
    if (typeof e != "string") {
      let a;
      i && i.name && i.name !== "errback" && (a = i.name), n && n.name && n.name !== "async" && (a = n.name.replace(/Async$/, "")), r && r.name &&
      r.name !== "sync" && (a = r.name.replace(/Sync$/, "")), typeof a == "string" && (e = a);
    }
    return typeof t != "number" && (t = r.length), i0({
      name: e,
      arity: t,
      sync: /* @__PURE__ */ s(function(a) {
        return r.apply(this, a);
      }, "sync"),
      async: /* @__PURE__ */ s(function(a, o, l) {
        n ? n.apply(this, a).then(o, l) : i ? i.call(this, ...a, (u, c) => {
          u == null ? o(c) : l(u);
        }) : o(r.apply(this, a));
      }, "async")
    });
  }
  s(Oce, "newGenerator");
  function Nce(e) {
    return IC(e.name, e.length, function(...t) {
      return e.apply(this, t);
    });
  }
  s(Nce, "wrapGenerator");
  function i0({ name: e, arity: t, sync: r, async: n }) {
    return IC(e, t, function* (...i) {
      let a = yield PC;
      if (!a)
        return r.call(this, i);
      let o;
      try {
        n.call(
          this,
          i,
          (l) => {
            o || (o = { value: l }, a());
          },
          (l) => {
            o || (o = { err: l }, a());
          }
        );
      } catch (l) {
        o = { err: l }, a();
      }
      if (yield AC, o.hasOwnProperty("err"))
        throw o.err;
      return o.value;
    });
  }
  s(i0, "buildOperation");
  function a0(e) {
    let t;
    for (; !({ value: t } = e.next()).done; )
      wC(t, e);
    return t;
  }
  s(a0, "evaluateSync");
  function ic(e, t, r) {
    (/* @__PURE__ */ s(function n() {
      try {
        let i;
        for (; !({ value: i } = e.next()).done; ) {
          wC(i, e);
          let a = !0, o = !1, l = e.next(() => {
            a ? o = !0 : n();
          });
          if (a = !1, Bce(l, e), !o)
            return;
        }
        return t(i);
      } catch (i) {
        return r(i);
      }
    }, "step"))();
  }
  s(ic, "evaluateAsync");
  function wC(e, t) {
    e !== PC && DC(
      t,
      Qs(
        `Got unexpected yielded value in gensync generator: ${JSON.stringify(
          e
        )}. Did you perhaps mean to use 'yield*' instead of 'yield'?`,
        wce
      )
    );
  }
  s(wC, "assertStart");
  function Bce({ value: e, done: t }, r) {
    !t && e === AC || DC(
      r,
      Qs(
        t ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(
          e
        )}. If you get this, it is probably a gensync bug.`,
        Dce
      )
    );
  }
  s(Bce, "assertSuspend");
  function DC(e, t) {
    throw e.throw && e.throw(t), t;
  }
  s(DC, "throwError");
  function IC(e, t, r) {
    if (typeof e == "string") {
      let n = Object.getOwnPropertyDescriptor(r, "name");
      (!n || n.configurable) && Object.defineProperty(
        r,
        "name",
        Object.assign(n || {}, {
          configurable: !0,
          value: e
        })
      );
    }
    if (typeof t == "number") {
      let n = Object.getOwnPropertyDescriptor(r, "length");
      (!n || n.configurable) && Object.defineProperty(
        r,
        "length",
        Object.assign(n || {}, {
          configurable: !0,
          value: t
        })
      );
    }
    return r;
  }
  s(IC, "setFunctionMetadata");
});

// ../node_modules/@babel/core/lib/gensync-utils/async.js
var Gi = T((Yr) => {
  "use strict";
  Object.defineProperty(Yr, "__esModule", {
    value: !0
  });
  Yr.forwardAsync = jce;
  Yr.isAsync = void 0;
  Yr.isThenable = kC;
  Yr.maybeAsync = kce;
  Yr.waitFor = Yr.onFirstPause = void 0;
  function ms() {
    let e = Er();
    return ms = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(ms, "_gensync");
  function OC(e, t, r, n, i, a, o) {
    try {
      var l = e[a](o), u = l.value;
    } catch (c) {
      r(c);
      return;
    }
    l.done ? t(u) : Promise.resolve(u).then(n, i);
  }
  s(OC, "asyncGeneratorStep");
  function BC(e) {
    return function() {
      var t = this, r = arguments;
      return new Promise(function(n, i) {
        var a = e.apply(t, r);
        function o(u) {
          OC(a, n, i, o, l, "next", u);
        }
        s(o, "_next");
        function l(u) {
          OC(a, n, i, o, l, "throw", u);
        }
        s(l, "_throw"), o(void 0);
      });
    };
  }
  s(BC, "_asyncToGenerator");
  var NC = ms()(function* (e) {
    return yield* e;
  }), W2e = Yr.isAsync = ms()({
    sync: /* @__PURE__ */ s(() => !1, "sync"),
    errback: /* @__PURE__ */ s((e) => e(null, !0), "errback")
  });
  function kce(e, t) {
    return ms()({
      sync(...r) {
        let n = e.apply(this, r);
        if (kC(n)) throw new Error(t);
        return n;
      },
      async(...r) {
        return Promise.resolve(e.apply(this, r));
      }
    });
  }
  s(kce, "maybeAsync");
  var Fce = ms()({
    sync: /* @__PURE__ */ s((e) => e("sync"), "sync"),
    async: function() {
      var e = BC(function* (t) {
        return t("async");
      });
      return /* @__PURE__ */ s(function(r) {
        return e.apply(this, arguments);
      }, "async");
    }()
  });
  function jce(e, t) {
    let r = ms()(e);
    return Fce((n) => {
      let i = r[n];
      return t(i);
    });
  }
  s(jce, "forwardAsync");
  var K2e = Yr.onFirstPause = ms()({
    name: "onFirstPause",
    arity: 2,
    sync: /* @__PURE__ */ s(function(e) {
      return NC.sync(e);
    }, "sync"),
    errback: /* @__PURE__ */ s(function(e, t, r) {
      let n = !1;
      NC.errback(e, (i, a) => {
        n = !0, r(i, a);
      }), n || t();
    }, "errback")
  }), G2e = Yr.waitFor = ms()({
    sync: /* @__PURE__ */ s((e) => e, "sync"),
    async: function() {
      var e = BC(function* (t) {
        return t;
      });
      return /* @__PURE__ */ s(function(r) {
        return e.apply(this, arguments);
      }, "async");
    }()
  });
  function kC(e) {
    return !!e && (typeof e == "object" || typeof e == "function") && !!e.then && typeof e.then == "function";
  }
  s(kC, "isThenable");
});

// ../node_modules/@babel/core/lib/config/util.js
var oc = T((ac) => {
  "use strict";
  Object.defineProperty(ac, "__esModule", {
    value: !0
  });
  ac.isIterableIterator = Rce;
  ac.mergeOptions = Lce;
  function Lce(e, t) {
    for (let r of Object.keys(t))
      if ((r === "parserOpts" || r === "generatorOpts" || r === "assumptions") && t[r]) {
        let n = t[r], i = e[r] || (e[r] = {});
        Mce(i, n);
      } else {
        let n = t[r];
        n !== void 0 && (e[r] = n);
      }
  }
  s(Lce, "mergeOptions");
  function Mce(e, t) {
    for (let r of Object.keys(t)) {
      let n = t[r];
      n !== void 0 && (e[r] = n);
    }
  }
  s(Mce, "mergeDefaultFields");
  function Rce(e) {
    return !!e && typeof e.next == "function" && typeof e[Symbol.iterator] == "function";
  }
  s(Rce, "isIterableIterator");
});

// ../node_modules/@babel/core/lib/config/caching.js
var ei = T((Zs) => {
  "use strict";
  Object.defineProperty(Zs, "__esModule", {
    value: !0
  });
  Zs.assertSimpleType = lc;
  Zs.makeStrongCache = RC;
  Zs.makeStrongCacheSync = $ce;
  Zs.makeWeakCache = MC;
  Zs.makeWeakCacheSync = Vce;
  function jC() {
    let e = Er();
    return jC = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(jC, "_gensync");
  var Hi = Gi(), qce = oc(), LC = /* @__PURE__ */ s((e) => jC()(e).sync, "synchronize");
  function* Uce() {
    return !0;
  }
  s(Uce, "genTrue");
  function MC(e) {
    return qC(WeakMap, e);
  }
  s(MC, "makeWeakCache");
  function Vce(e) {
    return LC(MC(e));
  }
  s(Vce, "makeWeakCacheSync");
  function RC(e) {
    return qC(Map, e);
  }
  s(RC, "makeStrongCache");
  function $ce(e) {
    return LC(RC(e));
  }
  s($ce, "makeStrongCacheSync");
  function qC(e, t) {
    let r = new e(), n = new e(), i = new e();
    return /* @__PURE__ */ s(function* (o, l) {
      let u = yield* (0, Hi.isAsync)(), c = u ? n : r, f = yield* Wce(u, c, i, o, l);
      if (f.valid) return f.value;
      let p = new o0(l), h = t(o, p), y, v;
      return (0, qce.isIterableIterator)(h) ? v = yield* (0, Hi.onFirstPause)(h, () => {
        y = Kce(p, i, o);
      }) : v = h, UC(c, p, o, v), y && (i.delete(o), y.release(v)), v;
    }, "cachedFunction");
  }
  s(qC, "makeCachedFunction");
  function* FC(e, t, r) {
    let n = e.get(t);
    if (n) {
      for (let {
        value: i,
        valid: a
      } of n)
        if (yield* a(r)) return {
          valid: !0,
          value: i
        };
    }
    return {
      valid: !1,
      value: null
    };
  }
  s(FC, "getCachedValue");
  function* Wce(e, t, r, n, i) {
    let a = yield* FC(t, n, i);
    if (a.valid)
      return a;
    if (e) {
      let o = yield* FC(r, n, i);
      if (o.valid)
        return {
          valid: !0,
          value: yield* (0, Hi.waitFor)(o.value.promise)
        };
    }
    return {
      valid: !1,
      value: null
    };
  }
  s(Wce, "getCachedValueOrWait");
  function Kce(e, t, r) {
    let n = new l0();
    return UC(t, e, r, n), n;
  }
  s(Kce, "setupAsyncLocks");
  function UC(e, t, r, n) {
    t.configured() || t.forever();
    let i = e.get(r);
    switch (t.deactivate(), t.mode()) {
      case "forever":
        i = [{
          value: n,
          valid: Uce
        }], e.set(r, i);
        break;
      case "invalidate":
        i = [{
          value: n,
          valid: t.validator()
        }], e.set(r, i);
        break;
      case "valid":
        i ? i.push({
          value: n,
          valid: t.validator()
        }) : (i = [{
          value: n,
          valid: t.validator()
        }], e.set(r, i));
    }
  }
  s(UC, "updateFunctionCache");
  var o0 = class {
    static {
      s(this, "CacheConfigurator");
    }
    constructor(t) {
      this._active = !0, this._never = !1, this._forever = !1, this._invalidate = !1, this._configured = !1, this._pairs = [], this._data = void 0,
      this._data = t;
    }
    simple() {
      return Gce(this);
    }
    mode() {
      return this._never ? "never" : this._forever ? "forever" : this._invalidate ? "invalidate" : "valid";
    }
    forever() {
      if (!this._active)
        throw new Error("Cannot change caching after evaluation has completed.");
      if (this._never)
        throw new Error("Caching has already been configured with .never()");
      this._forever = !0, this._configured = !0;
    }
    never() {
      if (!this._active)
        throw new Error("Cannot change caching after evaluation has completed.");
      if (this._forever)
        throw new Error("Caching has already been configured with .forever()");
      this._never = !0, this._configured = !0;
    }
    using(t) {
      if (!this._active)
        throw new Error("Cannot change caching after evaluation has completed.");
      if (this._never || this._forever)
        throw new Error("Caching has already been configured with .never or .forever()");
      this._configured = !0;
      let r = t(this._data), n = (0, Hi.maybeAsync)(t, "You appear to be using an async cache handler, but Babel has been called synchronous\
ly");
      return (0, Hi.isThenable)(r) ? r.then((i) => (this._pairs.push([i, n]), i)) : (this._pairs.push([r, n]), r);
    }
    invalidate(t) {
      return this._invalidate = !0, this.using(t);
    }
    validator() {
      let t = this._pairs;
      return function* (r) {
        for (let [n, i] of t)
          if (n !== (yield* i(r))) return !1;
        return !0;
      };
    }
    deactivate() {
      this._active = !1;
    }
    configured() {
      return this._configured;
    }
  };
  function Gce(e) {
    function t(r) {
      if (typeof r == "boolean") {
        r ? e.forever() : e.never();
        return;
      }
      return e.using(() => lc(r()));
    }
    return s(t, "cacheFn"), t.forever = () => e.forever(), t.never = () => e.never(), t.using = (r) => e.using(() => lc(r())), t.invalidate =
    (r) => e.invalidate(() => lc(r())), t;
  }
  s(Gce, "makeSimpleConfigurator");
  function lc(e) {
    if ((0, Hi.isThenable)(e))
      throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add suppo\
rt for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchron\
ously handle your caching logic.");
    if (e != null && typeof e != "string" && typeof e != "boolean" && typeof e != "number")
      throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
    return e;
  }
  s(lc, "assertSimpleType");
  var l0 = class {
    static {
      s(this, "Lock");
    }
    constructor() {
      this.released = !1, this.promise = void 0, this._resolve = void 0, this.promise = new Promise((t) => {
        this._resolve = t;
      });
    }
    release(t) {
      this.released = !0, this._resolve(t);
    }
  };
});

// ../node_modules/@babel/core/lib/gensync-utils/fs.js
var uc = T((Yi) => {
  "use strict";
  Object.defineProperty(Yi, "__esModule", {
    value: !0
  });
  Yi.stat = Yi.readFile = void 0;
  function Co() {
    let e = require("fs");
    return Co = /* @__PURE__ */ s(function() {
      return e;
    }, "_fs"), e;
  }
  s(Co, "_fs");
  function u0() {
    let e = Er();
    return u0 = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(u0, "_gensync");
  var Z2e = Yi.readFile = u0()({
    sync: Co().readFileSync,
    errback: Co().readFile
  }), ewe = Yi.stat = u0()({
    sync: Co().statSync,
    errback: Co().stat
  });
});

// ../node_modules/@babel/core/lib/config/files/utils.js
var p0 = T((f0) => {
  "use strict";
  Object.defineProperty(f0, "__esModule", {
    value: !0
  });
  f0.makeStaticFileCache = zce;
  var Hce = ei(), Yce = uc();
  function c0() {
    let e = require("fs");
    return c0 = /* @__PURE__ */ s(function() {
      return e;
    }, "_fs2"), e;
  }
  s(c0, "_fs2");
  function zce(e) {
    return (0, Hce.makeStrongCache)(function* (t, r) {
      return r.invalidate(() => Jce(t)) === null ? null : e(t, yield* Yce.readFile(t, "utf8"));
    });
  }
  s(zce, "makeStaticFileCache");
  function Jce(e) {
    if (!c0().existsSync(e)) return null;
    try {
      return +c0().statSync(e).mtime;
    } catch (t) {
      if (t.code !== "ENOENT" && t.code !== "ENOTDIR") throw t;
    }
    return null;
  }
  s(Jce, "fileMtime");
});

// ../node_modules/@babel/core/lib/errors/rewrite-stack-trace.js
var Fn = T((zi) => {
  "use strict";
  Object.defineProperty(zi, "__esModule", {
    value: !0
  });
  zi.beginHiddenCallStack = efe;
  zi.endHiddenCallStack = tfe;
  zi.expectedError = Zce;
  zi.injectVirtualStackFrame = Qce;
  var VC, $C = Function.call.bind(Error.prototype.toString), fc = !!Error.captureStackTrace && ((VC = Object.getOwnPropertyDescriptor(Error,
  "stackTraceLimit")) == null ? void 0 : VC.writable) === !0, WC = "startHiding - secret - don't use this - v1", KC = "stopHiding - secret -\
 don't use this - v1", GC = /* @__PURE__ */ new WeakSet(), cc = /* @__PURE__ */ new WeakMap();
  function Xce(e) {
    return /* @__PURE__ */ Object.create({
      isNative: /* @__PURE__ */ s(() => !1, "isNative"),
      isConstructor: /* @__PURE__ */ s(() => !1, "isConstructor"),
      isToplevel: /* @__PURE__ */ s(() => !0, "isToplevel"),
      getFileName: /* @__PURE__ */ s(() => e, "getFileName"),
      getLineNumber: /* @__PURE__ */ s(() => {
      }, "getLineNumber"),
      getColumnNumber: /* @__PURE__ */ s(() => {
      }, "getColumnNumber"),
      getFunctionName: /* @__PURE__ */ s(() => {
      }, "getFunctionName"),
      getMethodName: /* @__PURE__ */ s(() => {
      }, "getMethodName"),
      getTypeName: /* @__PURE__ */ s(() => {
      }, "getTypeName"),
      toString: /* @__PURE__ */ s(() => e, "toString")
    });
  }
  s(Xce, "CallSite");
  function Qce(e, t) {
    if (!fc) return;
    let r = cc.get(e);
    return r || cc.set(e, r = []), r.push(Xce(t)), e;
  }
  s(Qce, "injectVirtualStackFrame");
  function Zce(e) {
    if (fc)
      return GC.add(e), e;
  }
  s(Zce, "expectedError");
  function efe(e) {
    return fc ? Object.defineProperty(function(...t) {
      return HC(), e(...t);
    }, "name", {
      value: KC
    }) : e;
  }
  s(efe, "beginHiddenCallStack");
  function tfe(e) {
    return fc ? Object.defineProperty(function(...t) {
      return e(...t);
    }, "name", {
      value: WC
    }) : e;
  }
  s(tfe, "endHiddenCallStack");
  function HC() {
    HC = /* @__PURE__ */ s(() => {
    }, "setupPrepareStackTrace");
    let {
      prepareStackTrace: e = rfe
    } = Error, t = 50;
    Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, t)), Error.prepareStackTrace = /* @__PURE__ */ s(function(n, i) {
      let a = [], l = GC.has(n) ? "hiding" : "unknown";
      for (let u = 0; u < i.length; u++) {
        let c = i[u].getFunctionName();
        if (c === WC)
          l = "hiding";
        else if (c === KC) {
          if (l === "hiding")
            l = "showing", cc.has(n) && a.unshift(...cc.get(n));
          else if (l === "unknown") {
            a = i;
            break;
          }
        } else l !== "hiding" && a.push(i[u]);
      }
      return e(n, a);
    }, "stackTraceRewriter");
  }
  s(HC, "setupPrepareStackTrace");
  function rfe(e, t) {
    return t.length === 0 ? $C(e) : `${$C(e)}
    at ${t.join(`
    at `)}`;
  }
  s(rfe, "defaultPrepareStackTrace");
});

// ../node_modules/@babel/core/lib/errors/config-error.js
var ti = T((pc) => {
  "use strict";
  Object.defineProperty(pc, "__esModule", {
    value: !0
  });
  pc.default = void 0;
  var YC = Fn(), d0 = class extends Error {
    static {
      s(this, "ConfigError");
    }
    constructor(t, r) {
      super(t), (0, YC.expectedError)(this), r && (0, YC.injectVirtualStackFrame)(this, r);
    }
  };
  pc.default = d0;
});

// ../node_modules/@babel/core/lib/config/files/package.js
var zC = T((m0) => {
  "use strict";
  Object.defineProperty(m0, "__esModule", {
    value: !0
  });
  m0.findPackageData = afe;
  function Ji() {
    let e = require("path");
    return Ji = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(Ji, "_path");
  var nfe = p0(), h0 = ti(), sfe = "package.json", ife = (0, nfe.makeStaticFileCache)((e, t) => {
    let r;
    try {
      r = JSON.parse(t);
    } catch (n) {
      throw new h0.default(`Error while parsing JSON - ${n.message}`, e);
    }
    if (!r) throw new Error(`${e}: No config detected`);
    if (typeof r != "object")
      throw new h0.default(`Config returned typeof ${typeof r}`, e);
    if (Array.isArray(r))
      throw new h0.default("Expected config object but found array", e);
    return {
      filepath: e,
      dirname: Ji().dirname(e),
      options: r
    };
  });
  function* afe(e) {
    let t = null, r = [], n = !0, i = Ji().dirname(e);
    for (; !t && Ji().basename(i) !== "node_modules"; ) {
      r.push(i), t = yield* ife(Ji().join(i, sfe));
      let a = Ji().dirname(i);
      if (i === a) {
        n = !1;
        break;
      }
      i = a;
    }
    return {
      filepath: e,
      directories: r,
      pkg: t,
      isPackage: n
    };
  }
  s(afe, "findPackageData");
});

// ../node_modules/json5/lib/unicode.js
var JC = T((fwe, dc) => {
  dc.exports.Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
  dc.exports.ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
  dc.exports.ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
});

// ../node_modules/json5/lib/util.js
var g0 = T((pwe, XC) => {
  var y0 = JC();
  XC.exports = {
    isSpaceSeparator(e) {
      return typeof e == "string" && y0.Space_Separator.test(e);
    },
    isIdStartChar(e) {
      return typeof e == "string" && (e >= "a" && e <= "z" || e >= "A" && e <= "Z" || e === "$" || e === "_" || y0.ID_Start.test(e));
    },
    isIdContinueChar(e) {
      return typeof e == "string" && (e >= "a" && e <= "z" || e >= "A" && e <= "Z" || e >= "0" && e <= "9" || e === "$" || e === "_" || e ===
      "\u200C" || e === "\u200D" || y0.ID_Continue.test(e));
    },
    isDigit(e) {
      return typeof e == "string" && /[0-9]/.test(e);
    },
    isHexDigit(e) {
      return typeof e == "string" && /[0-9A-Fa-f]/.test(e);
    }
  };
});

// ../node_modules/json5/lib/parse.js
var r2 = T((dwe, t2) => {
  var Lt = g0(), E0, cr, Ln, mc, ys, zr, Mt, x0, Do;
  t2.exports = /* @__PURE__ */ s(function(t, r) {
    E0 = String(t), cr = "start", Ln = [], mc = 0, ys = 1, zr = 0, Mt = void 0, x0 = void 0, Do = void 0;
    do
      Mt = ofe(), cfe[cr]();
    while (Mt.type !== "eof");
    return typeof r == "function" ? v0({ "": Do }, "", r) : Do;
  }, "parse");
  function v0(e, t, r) {
    let n = e[t];
    if (n != null && typeof n == "object")
      if (Array.isArray(n))
        for (let i = 0; i < n.length; i++) {
          let a = String(i), o = v0(n, a, r);
          o === void 0 ? delete n[a] : Object.defineProperty(n, a, {
            value: o,
            writable: !0,
            enumerable: !0,
            configurable: !0
          });
        }
      else
        for (let i in n) {
          let a = v0(n, i, r);
          a === void 0 ? delete n[i] : Object.defineProperty(n, i, {
            value: a,
            writable: !0,
            enumerable: !0,
            configurable: !0
          });
        }
    return r.call(e, t, n);
  }
  s(v0, "internalize");
  var Me, je, wo, jn, Ke;
  function ofe() {
    for (Me = "default", je = "", wo = !1, jn = 1; ; ) {
      Ke = Mn();
      let e = ZC[Me]();
      if (e)
        return e;
    }
  }
  s(ofe, "lex");
  function Mn() {
    if (E0[mc])
      return String.fromCodePoint(E0.codePointAt(mc));
  }
  s(Mn, "peek");
  function Y() {
    let e = Mn();
    return e === `
` ? (ys++, zr = 0) : e ? zr += e.length : zr++, e && (mc += e.length), e;
  }
  s(Y, "read");
  var ZC = {
    default() {
      switch (Ke) {
        case "	":
        case "\v":
        case "\f":
        case " ":
        case "\xA0":
        case "\uFEFF":
        case `
`:
        case "\r":
        case "\u2028":
        case "\u2029":
          Y();
          return;
        case "/":
          Y(), Me = "comment";
          return;
        case void 0:
          return Y(), pt("eof");
      }
      if (Lt.isSpaceSeparator(Ke)) {
        Y();
        return;
      }
      return ZC[cr]();
    },
    comment() {
      switch (Ke) {
        case "*":
          Y(), Me = "multiLineComment";
          return;
        case "/":
          Y(), Me = "singleLineComment";
          return;
      }
      throw dt(Y());
    },
    multiLineComment() {
      switch (Ke) {
        case "*":
          Y(), Me = "multiLineCommentAsterisk";
          return;
        case void 0:
          throw dt(Y());
      }
      Y();
    },
    multiLineCommentAsterisk() {
      switch (Ke) {
        case "*":
          Y();
          return;
        case "/":
          Y(), Me = "default";
          return;
        case void 0:
          throw dt(Y());
      }
      Y(), Me = "multiLineComment";
    },
    singleLineComment() {
      switch (Ke) {
        case `
`:
        case "\r":
        case "\u2028":
        case "\u2029":
          Y(), Me = "default";
          return;
        case void 0:
          return Y(), pt("eof");
      }
      Y();
    },
    value() {
      switch (Ke) {
        case "{":
        case "[":
          return pt("punctuator", Y());
        case "n":
          return Y(), ri("ull"), pt("null", null);
        case "t":
          return Y(), ri("rue"), pt("boolean", !0);
        case "f":
          return Y(), ri("alse"), pt("boolean", !1);
        case "-":
        case "+":
          Y() === "-" && (jn = -1), Me = "sign";
          return;
        case ".":
          je = Y(), Me = "decimalPointLeading";
          return;
        case "0":
          je = Y(), Me = "zero";
          return;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          je = Y(), Me = "decimalInteger";
          return;
        case "I":
          return Y(), ri("nfinity"), pt("numeric", 1 / 0);
        case "N":
          return Y(), ri("aN"), pt("numeric", NaN);
        case '"':
        case "'":
          wo = Y() === '"', je = "", Me = "string";
          return;
      }
      throw dt(Y());
    },
    identifierNameStartEscape() {
      if (Ke !== "u")
        throw dt(Y());
      Y();
      let e = T0();
      switch (e) {
        case "$":
        case "_":
          break;
        default:
          if (!Lt.isIdStartChar(e))
            throw QC();
          break;
      }
      je += e, Me = "identifierName";
    },
    identifierName() {
      switch (Ke) {
        case "$":
        case "_":
        case "\u200C":
        case "\u200D":
          je += Y();
          return;
        case "\\":
          Y(), Me = "identifierNameEscape";
          return;
      }
      if (Lt.isIdContinueChar(Ke)) {
        je += Y();
        return;
      }
      return pt("identifier", je);
    },
    identifierNameEscape() {
      if (Ke !== "u")
        throw dt(Y());
      Y();
      let e = T0();
      switch (e) {
        case "$":
        case "_":
        case "\u200C":
        case "\u200D":
          break;
        default:
          if (!Lt.isIdContinueChar(e))
            throw QC();
          break;
      }
      je += e, Me = "identifierName";
    },
    sign() {
      switch (Ke) {
        case ".":
          je = Y(), Me = "decimalPointLeading";
          return;
        case "0":
          je = Y(), Me = "zero";
          return;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          je = Y(), Me = "decimalInteger";
          return;
        case "I":
          return Y(), ri("nfinity"), pt("numeric", jn * (1 / 0));
        case "N":
          return Y(), ri("aN"), pt("numeric", NaN);
      }
      throw dt(Y());
    },
    zero() {
      switch (Ke) {
        case ".":
          je += Y(), Me = "decimalPoint";
          return;
        case "e":
        case "E":
          je += Y(), Me = "decimalExponent";
          return;
        case "x":
        case "X":
          je += Y(), Me = "hexadecimal";
          return;
      }
      return pt("numeric", jn * 0);
    },
    decimalInteger() {
      switch (Ke) {
        case ".":
          je += Y(), Me = "decimalPoint";
          return;
        case "e":
        case "E":
          je += Y(), Me = "decimalExponent";
          return;
      }
      if (Lt.isDigit(Ke)) {
        je += Y();
        return;
      }
      return pt("numeric", jn * Number(je));
    },
    decimalPointLeading() {
      if (Lt.isDigit(Ke)) {
        je += Y(), Me = "decimalFraction";
        return;
      }
      throw dt(Y());
    },
    decimalPoint() {
      switch (Ke) {
        case "e":
        case "E":
          je += Y(), Me = "decimalExponent";
          return;
      }
      if (Lt.isDigit(Ke)) {
        je += Y(), Me = "decimalFraction";
        return;
      }
      return pt("numeric", jn * Number(je));
    },
    decimalFraction() {
      switch (Ke) {
        case "e":
        case "E":
          je += Y(), Me = "decimalExponent";
          return;
      }
      if (Lt.isDigit(Ke)) {
        je += Y();
        return;
      }
      return pt("numeric", jn * Number(je));
    },
    decimalExponent() {
      switch (Ke) {
        case "+":
        case "-":
          je += Y(), Me = "decimalExponentSign";
          return;
      }
      if (Lt.isDigit(Ke)) {
        je += Y(), Me = "decimalExponentInteger";
        return;
      }
      throw dt(Y());
    },
    decimalExponentSign() {
      if (Lt.isDigit(Ke)) {
        je += Y(), Me = "decimalExponentInteger";
        return;
      }
      throw dt(Y());
    },
    decimalExponentInteger() {
      if (Lt.isDigit(Ke)) {
        je += Y();
        return;
      }
      return pt("numeric", jn * Number(je));
    },
    hexadecimal() {
      if (Lt.isHexDigit(Ke)) {
        je += Y(), Me = "hexadecimalInteger";
        return;
      }
      throw dt(Y());
    },
    hexadecimalInteger() {
      if (Lt.isHexDigit(Ke)) {
        je += Y();
        return;
      }
      return pt("numeric", jn * Number(je));
    },
    string() {
      switch (Ke) {
        case "\\":
          Y(), je += lfe();
          return;
        case '"':
          if (wo)
            return Y(), pt("string", je);
          je += Y();
          return;
        case "'":
          if (!wo)
            return Y(), pt("string", je);
          je += Y();
          return;
        case `
`:
        case "\r":
          throw dt(Y());
        case "\u2028":
        case "\u2029":
          ffe(Ke);
          break;
        case void 0:
          throw dt(Y());
      }
      je += Y();
    },
    start() {
      switch (Ke) {
        case "{":
        case "[":
          return pt("punctuator", Y());
      }
      Me = "value";
    },
    beforePropertyName() {
      switch (Ke) {
        case "$":
        case "_":
          je = Y(), Me = "identifierName";
          return;
        case "\\":
          Y(), Me = "identifierNameStartEscape";
          return;
        case "}":
          return pt("punctuator", Y());
        case '"':
        case "'":
          wo = Y() === '"', Me = "string";
          return;
      }
      if (Lt.isIdStartChar(Ke)) {
        je += Y(), Me = "identifierName";
        return;
      }
      throw dt(Y());
    },
    afterPropertyName() {
      if (Ke === ":")
        return pt("punctuator", Y());
      throw dt(Y());
    },
    beforePropertyValue() {
      Me = "value";
    },
    afterPropertyValue() {
      switch (Ke) {
        case ",":
        case "}":
          return pt("punctuator", Y());
      }
      throw dt(Y());
    },
    beforeArrayValue() {
      if (Ke === "]")
        return pt("punctuator", Y());
      Me = "value";
    },
    afterArrayValue() {
      switch (Ke) {
        case ",":
        case "]":
          return pt("punctuator", Y());
      }
      throw dt(Y());
    },
    end() {
      throw dt(Y());
    }
  };
  function pt(e, t) {
    return {
      type: e,
      value: t,
      line: ys,
      column: zr
    };
  }
  s(pt, "newToken");
  function ri(e) {
    for (let t of e) {
      if (Mn() !== t)
        throw dt(Y());
      Y();
    }
  }
  s(ri, "literal");
  function lfe() {
    switch (Mn()) {
      case "b":
        return Y(), "\b";
      case "f":
        return Y(), "\f";
      case "n":
        return Y(), `
`;
      case "r":
        return Y(), "\r";
      case "t":
        return Y(), "	";
      case "v":
        return Y(), "\v";
      case "0":
        if (Y(), Lt.isDigit(Mn()))
          throw dt(Y());
        return "\0";
      case "x":
        return Y(), ufe();
      case "u":
        return Y(), T0();
      case `
`:
      case "\u2028":
      case "\u2029":
        return Y(), "";
      case "\r":
        return Y(), Mn() === `
` && Y(), "";
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        throw dt(Y());
      case void 0:
        throw dt(Y());
    }
    return Y();
  }
  s(lfe, "escape");
  function ufe() {
    let e = "", t = Mn();
    if (!Lt.isHexDigit(t) || (e += Y(), t = Mn(), !Lt.isHexDigit(t)))
      throw dt(Y());
    return e += Y(), String.fromCodePoint(parseInt(e, 16));
  }
  s(ufe, "hexEscape");
  function T0() {
    let e = "", t = 4;
    for (; t-- > 0; ) {
      let r = Mn();
      if (!Lt.isHexDigit(r))
        throw dt(Y());
      e += Y();
    }
    return String.fromCodePoint(parseInt(e, 16));
  }
  s(T0, "unicodeEscape");
  var cfe = {
    start() {
      if (Mt.type === "eof")
        throw ni();
      b0();
    },
    beforePropertyName() {
      switch (Mt.type) {
        case "identifier":
        case "string":
          x0 = Mt.value, cr = "afterPropertyName";
          return;
        case "punctuator":
          hc();
          return;
        case "eof":
          throw ni();
      }
    },
    afterPropertyName() {
      if (Mt.type === "eof")
        throw ni();
      cr = "beforePropertyValue";
    },
    beforePropertyValue() {
      if (Mt.type === "eof")
        throw ni();
      b0();
    },
    beforeArrayValue() {
      if (Mt.type === "eof")
        throw ni();
      if (Mt.type === "punctuator" && Mt.value === "]") {
        hc();
        return;
      }
      b0();
    },
    afterPropertyValue() {
      if (Mt.type === "eof")
        throw ni();
      switch (Mt.value) {
        case ",":
          cr = "beforePropertyName";
          return;
        case "}":
          hc();
      }
    },
    afterArrayValue() {
      if (Mt.type === "eof")
        throw ni();
      switch (Mt.value) {
        case ",":
          cr = "beforeArrayValue";
          return;
        case "]":
          hc();
      }
    },
    end() {
    }
  };
  function b0() {
    let e;
    switch (Mt.type) {
      case "punctuator":
        switch (Mt.value) {
          case "{":
            e = {};
            break;
          case "[":
            e = [];
            break;
        }
        break;
      case "null":
      case "boolean":
      case "numeric":
      case "string":
        e = Mt.value;
        break;
    }
    if (Do === void 0)
      Do = e;
    else {
      let t = Ln[Ln.length - 1];
      Array.isArray(t) ? t.push(e) : Object.defineProperty(t, x0, {
        value: e,
        writable: !0,
        enumerable: !0,
        configurable: !0
      });
    }
    if (e !== null && typeof e == "object")
      Ln.push(e), Array.isArray(e) ? cr = "beforeArrayValue" : cr = "beforePropertyName";
    else {
      let t = Ln[Ln.length - 1];
      t == null ? cr = "end" : Array.isArray(t) ? cr = "afterArrayValue" : cr = "afterPropertyValue";
    }
  }
  s(b0, "push");
  function hc() {
    Ln.pop();
    let e = Ln[Ln.length - 1];
    e == null ? cr = "end" : Array.isArray(e) ? cr = "afterArrayValue" : cr = "afterPropertyValue";
  }
  s(hc, "pop");
  function dt(e) {
    return yc(e === void 0 ? `JSON5: invalid end of input at ${ys}:${zr}` : `JSON5: invalid character '${e2(e)}' at ${ys}:${zr}`);
  }
  s(dt, "invalidChar");
  function ni() {
    return yc(`JSON5: invalid end of input at ${ys}:${zr}`);
  }
  s(ni, "invalidEOF");
  function QC() {
    return zr -= 5, yc(`JSON5: invalid identifier character at ${ys}:${zr}`);
  }
  s(QC, "invalidIdentifier");
  function ffe(e) {
    console.warn(`JSON5: '${e2(e)}' in strings is not valid ECMAScript; consider escaping`);
  }
  s(ffe, "separatorChar");
  function e2(e) {
    let t = {
      "'": "\\'",
      '"': '\\"',
      "\\": "\\\\",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t",
      "\v": "\\v",
      "\0": "\\0",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    };
    if (t[e])
      return t[e];
    if (e < " ") {
      let r = e.charCodeAt(0).toString(16);
      return "\\x" + ("00" + r).substring(r.length);
    }
    return e;
  }
  s(e2, "formatChar");
  function yc(e) {
    let t = new SyntaxError(e);
    return t.lineNumber = ys, t.columnNumber = zr, t;
  }
  s(yc, "syntaxError");
});

// ../node_modules/json5/lib/stringify.js
var s2 = T((mwe, n2) => {
  var S0 = g0();
  n2.exports = /* @__PURE__ */ s(function(t, r, n) {
    let i = [], a = "", o, l, u = "", c;
    if (r != null && typeof r == "object" && !Array.isArray(r) && (n = r.space, c = r.quote, r = r.replacer), typeof r == "function")
      l = r;
    else if (Array.isArray(r)) {
      o = [];
      for (let d of r) {
        let b;
        typeof d == "string" ? b = d : (typeof d == "number" || d instanceof String || d instanceof Number) && (b = String(d)), b !== void 0 &&
        o.indexOf(b) < 0 && o.push(b);
      }
    }
    return n instanceof Number ? n = Number(n) : n instanceof String && (n = String(n)), typeof n == "number" ? n > 0 && (n = Math.min(10, Math.
    floor(n)), u = "          ".substr(0, n)) : typeof n == "string" && (u = n.substr(0, 10)), f("", { "": t });
    function f(d, b) {
      let E = b[d];
      switch (E != null && (typeof E.toJSON5 == "function" ? E = E.toJSON5(d) : typeof E.toJSON == "function" && (E = E.toJSON(d))), l && (E =
      l.call(b, d, E)), E instanceof Number ? E = Number(E) : E instanceof String ? E = String(E) : E instanceof Boolean && (E = E.valueOf()),
      E) {
        case null:
          return "null";
        case !0:
          return "true";
        case !1:
          return "false";
      }
      if (typeof E == "string")
        return p(E, !1);
      if (typeof E == "number")
        return String(E);
      if (typeof E == "object")
        return Array.isArray(E) ? v(E) : h(E);
    }
    s(f, "serializeProperty");
    function p(d) {
      let b = {
        "'": 0.1,
        '"': 0.2
      }, E = {
        "'": "\\'",
        '"': '\\"',
        "\\": "\\\\",
        "\b": "\\b",
        "\f": "\\f",
        "\n": "\\n",
        "\r": "\\r",
        "	": "\\t",
        "\v": "\\v",
        "\0": "\\0",
        "\u2028": "\\u2028",
        "\u2029": "\\u2029"
      }, I = "";
      for (let k = 0; k < d.length; k++) {
        let j = d[k];
        switch (j) {
          case "'":
          case '"':
            b[j]++, I += j;
            continue;
          case "\0":
            if (S0.isDigit(d[k + 1])) {
              I += "\\x00";
              continue;
            }
        }
        if (E[j]) {
          I += E[j];
          continue;
        }
        if (j < " ") {
          let R = j.charCodeAt(0).toString(16);
          I += "\\x" + ("00" + R).substring(R.length);
          continue;
        }
        I += j;
      }
      let O = c || Object.keys(b).reduce((k, j) => b[k] < b[j] ? k : j);
      return I = I.replace(new RegExp(O, "g"), E[O]), O + I + O;
    }
    s(p, "quoteString");
    function h(d) {
      if (i.indexOf(d) >= 0)
        throw TypeError("Converting circular structure to JSON5");
      i.push(d);
      let b = a;
      a = a + u;
      let E = o || Object.keys(d), I = [];
      for (let k of E) {
        let j = f(k, d);
        if (j !== void 0) {
          let R = y(k) + ":";
          u !== "" && (R += " "), R += j, I.push(R);
        }
      }
      let O;
      if (I.length === 0)
        O = "{}";
      else {
        let k;
        if (u === "")
          k = I.join(","), O = "{" + k + "}";
        else {
          let j = `,
` + a;
          k = I.join(j), O = `{
` + a + k + `,
` + b + "}";
        }
      }
      return i.pop(), a = b, O;
    }
    s(h, "serializeObject");
    function y(d) {
      if (d.length === 0)
        return p(d, !0);
      let b = String.fromCodePoint(d.codePointAt(0));
      if (!S0.isIdStartChar(b))
        return p(d, !0);
      for (let E = b.length; E < d.length; E++)
        if (!S0.isIdContinueChar(String.fromCodePoint(d.codePointAt(E))))
          return p(d, !0);
      return d;
    }
    s(y, "serializeKey");
    function v(d) {
      if (i.indexOf(d) >= 0)
        throw TypeError("Converting circular structure to JSON5");
      i.push(d);
      let b = a;
      a = a + u;
      let E = [];
      for (let O = 0; O < d.length; O++) {
        let k = f(String(O), d);
        E.push(k !== void 0 ? k : "null");
      }
      let I;
      if (E.length === 0)
        I = "[]";
      else if (u === "")
        I = "[" + E.join(",") + "]";
      else {
        let O = `,
` + a, k = E.join(O);
        I = `[
` + a + k + `,
` + b + "]";
      }
      return i.pop(), a = b, I;
    }
    s(v, "serializeArray");
  }, "stringify");
});

// ../node_modules/json5/lib/index.js
var a2 = T((gwe, i2) => {
  var pfe = r2(), dfe = s2(), hfe = {
    parse: pfe,
    stringify: dfe
  };
  i2.exports = hfe;
});

// ../node_modules/@babel/core/lib/config/helpers/config-api.js
var P0 = T((Io) => {
  "use strict";
  Object.defineProperty(Io, "__esModule", {
    value: !0
  });
  Io.makeConfigAPI = u2;
  Io.makePluginAPI = mfe;
  Io.makePresetAPI = c2;
  function l2() {
    let e = require("semver");
    return l2 = /* @__PURE__ */ s(function() {
      return e;
    }, "_semver"), e;
  }
  s(l2, "_semver");
  var gc = gt(), o2 = ei();
  function u2(e) {
    let t = /* @__PURE__ */ s((n) => e.using((i) => typeof n > "u" ? i.envName : typeof n == "function" ? (0, o2.assertSimpleType)(n(i.envName)) :
    (Array.isArray(n) ? n : [n]).some((a) => {
      if (typeof a != "string")
        throw new Error("Unexpected non-string value");
      return a === i.envName;
    })), "env"), r = /* @__PURE__ */ s((n) => e.using((i) => (0, o2.assertSimpleType)(n(i.caller))), "caller");
    return {
      version: gc.version,
      cache: e.simple(),
      env: t,
      async: /* @__PURE__ */ s(() => !1, "async"),
      caller: r,
      assertVersion: yfe
    };
  }
  s(u2, "makeConfigAPI");
  function c2(e, t) {
    let r = /* @__PURE__ */ s(() => JSON.parse(e.using((i) => JSON.stringify(i.targets))), "targets"), n = /* @__PURE__ */ s((i) => {
      t.push(i);
    }, "addExternalDependency");
    return Object.assign({}, u2(e), {
      targets: r,
      addExternalDependency: n
    });
  }
  s(c2, "makePresetAPI");
  function mfe(e, t) {
    let r = /* @__PURE__ */ s((n) => e.using((i) => i.assumptions[n]), "assumption");
    return Object.assign({}, c2(e, t), {
      assumption: r
    });
  }
  s(mfe, "makePluginAPI");
  function yfe(e) {
    if (typeof e == "number") {
      if (!Number.isInteger(e))
        throw new Error("Expected string or integer value.");
      e = `^${e}.0.0-0`;
    }
    if (typeof e != "string")
      throw new Error("Expected string or integer value.");
    if (e === "*" || l2().satisfies(gc.version, e)) return;
    let t = Error.stackTraceLimit;
    typeof t == "number" && t < 25 && (Error.stackTraceLimit = 25);
    let r = new Error(`Requires Babel "${e}", but was loaded with "${gc.version}". If you are sure you have a compatible version of @babel/c\
ore, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the f\
irst entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
    throw typeof t == "number" && (Error.stackTraceLimit = t), Object.assign(r, {
      code: "BABEL_VERSION_UNSUPPORTED",
      version: gc.version,
      range: e
    });
  }
  s(yfe, "assertVersion");
});

// ../node_modules/@babel/core/lib/config/helpers/deep-array.js
var Ec = T((bc) => {
  "use strict";
  Object.defineProperty(bc, "__esModule", {
    value: !0
  });
  bc.finalize = gfe;
  bc.flattenToSet = bfe;
  function gfe(e) {
    return Object.freeze(e);
  }
  s(gfe, "finalize");
  function bfe(e) {
    let t = /* @__PURE__ */ new Set(), r = [e];
    for (; r.length > 0; )
      for (let n of r.pop())
        Array.isArray(n) ? r.push(n) : t.add(n);
    return t;
  }
  s(bfe, "flattenToSet");
});

// ../node_modules/@babel/core/lib/config/plugin.js
var Tc = T((vc) => {
  "use strict";
  Object.defineProperty(vc, "__esModule", {
    value: !0
  });
  vc.default = void 0;
  var Efe = Ec(), A0 = class {
    static {
      s(this, "Plugin");
    }
    constructor(t, r, n, i = (0, Efe.finalize)([])) {
      this.key = void 0, this.manipulateOptions = void 0, this.post = void 0, this.pre = void 0, this.visitor = void 0, this.parserOverride =
      void 0, this.generatorOverride = void 0, this.options = void 0, this.externalDependencies = void 0, this.key = t.name || n, this.manipulateOptions =
      t.manipulateOptions, this.post = t.post, this.pre = t.pre, this.visitor = t.visitor || {}, this.parserOverride = t.parserOverride, this.
      generatorOverride = t.generatorOverride, this.options = r, this.externalDependencies = i;
    }
  };
  vc.default = A0;
});

// ../node_modules/@babel/core/lib/gensync-utils/functional.js
var p2 = T((C0) => {
  "use strict";
  Object.defineProperty(C0, "__esModule", {
    value: !0
  });
  C0.once = vfe;
  var f2 = Gi();
  function vfe(e) {
    let t, r, n = !1;
    return function* () {
      if (!t) {
        if (r)
          return n = !0, yield* (0, f2.waitFor)(r);
        if (yield* (0, f2.isAsync)()) {
          let i, a;
          r = new Promise((o, l) => {
            i = o, a = l;
          });
          try {
            t = {
              ok: !0,
              value: yield* e()
            }, r = null, n && i(t.value);
          } catch (o) {
            t = {
              ok: !1,
              value: o
            }, r = null, n && a(o);
          }
        } else
          try {
            t = {
              ok: !0,
              value: yield* e()
            };
          } catch (i) {
            t = {
              ok: !1,
              value: i
            };
          }
      }
      if (t.ok) return t.value;
      throw t.value;
    };
  }
  s(vfe, "once");
});

// ../node_modules/node-releases/data/processed/envs.json
var d2 = T((Cwe, Tfe) => {
  Tfe.exports = [{ name: "nodejs", version: "0.2.0", date: "2011-08-26", lts: !1, security: !1, v8: "2.3.8.0" }, { name: "nodejs", version: "\
0.3.0", date: "2011-08-26", lts: !1, security: !1, v8: "2.5.1.0" }, { name: "nodejs", version: "0.4.0", date: "2011-08-26", lts: !1, security: !1,
  v8: "3.1.2.0" }, { name: "nodejs", version: "0.5.0", date: "2011-08-26", lts: !1, security: !1, v8: "3.1.8.25" }, { name: "nodejs", version: "\
0.6.0", date: "2011-11-04", lts: !1, security: !1, v8: "3.6.6.6" }, { name: "nodejs", version: "0.7.0", date: "2012-01-17", lts: !1, security: !1,
  v8: "3.8.6.0" }, { name: "nodejs", version: "0.8.0", date: "2012-06-22", lts: !1, security: !1, v8: "3.11.10.10" }, { name: "nodejs", version: "\
0.9.0", date: "2012-07-20", lts: !1, security: !1, v8: "3.11.10.15" }, { name: "nodejs", version: "0.10.0", date: "2013-03-11", lts: !1, security: !1,
  v8: "3.14.5.8" }, { name: "nodejs", version: "0.11.0", date: "2013-03-28", lts: !1, security: !1, v8: "3.17.13.0" }, { name: "nodejs", version: "\
0.12.0", date: "2015-02-06", lts: !1, security: !1, v8: "3.28.73.0" }, { name: "nodejs", version: "4.0.0", date: "2015-09-08", lts: !1, security: !1,
  v8: "4.5.103.30" }, { name: "nodejs", version: "4.1.0", date: "2015-09-17", lts: !1, security: !1, v8: "4.5.103.33" }, { name: "nodejs", version: "\
4.2.0", date: "2015-10-12", lts: "Argon", security: !1, v8: "4.5.103.35" }, { name: "nodejs", version: "4.3.0", date: "2016-02-09", lts: "Ar\
gon", security: !1, v8: "4.5.103.35" }, { name: "nodejs", version: "4.4.0", date: "2016-03-08", lts: "Argon", security: !1, v8: "4.5.103.35" },
  { name: "nodejs", version: "4.5.0", date: "2016-08-16", lts: "Argon", security: !1, v8: "4.5.103.37" }, { name: "nodejs", version: "4.6.0",
  date: "2016-09-27", lts: "Argon", security: !0, v8: "4.5.103.37" }, { name: "nodejs", version: "4.7.0", date: "2016-12-06", lts: "Argon", security: !1,
  v8: "4.5.103.43" }, { name: "nodejs", version: "4.8.0", date: "2017-02-21", lts: "Argon", security: !1, v8: "4.5.103.45" }, { name: "nodej\
s", version: "4.9.0", date: "2018-03-28", lts: "Argon", security: !0, v8: "4.5.103.53" }, { name: "nodejs", version: "5.0.0", date: "2015-10\
-29", lts: !1, security: !1, v8: "4.6.85.28" }, { name: "nodejs", version: "5.1.0", date: "2015-11-17", lts: !1, security: !1, v8: "4.6.85.3\
1" }, { name: "nodejs", version: "5.2.0", date: "2015-12-09", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "5.3.0", date: "\
2015-12-15", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "5.4.0", date: "2016-01-06", lts: !1, security: !1, v8: "4\
.6.85.31" }, { name: "nodejs", version: "5.5.0", date: "2016-01-21", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "5\
.6.0", date: "2016-02-09", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "5.7.0", date: "2016-02-23", lts: !1, security: !1,
  v8: "4.6.85.31" }, { name: "nodejs", version: "5.8.0", date: "2016-03-09", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "\
5.9.0", date: "2016-03-16", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "5.10.0", date: "2016-04-01", lts: !1, security: !1,
  v8: "4.6.85.31" }, { name: "nodejs", version: "5.11.0", date: "2016-04-21", lts: !1, security: !1, v8: "4.6.85.31" }, { name: "nodejs", version: "\
5.12.0", date: "2016-06-23", lts: !1, security: !1, v8: "4.6.85.32" }, { name: "nodejs", version: "6.0.0", date: "2016-04-26", lts: !1, security: !1,
  v8: "5.0.71.35" }, { name: "nodejs", version: "6.1.0", date: "2016-05-05", lts: !1, security: !1, v8: "5.0.71.35" }, { name: "nodejs", version: "\
6.2.0", date: "2016-05-17", lts: !1, security: !1, v8: "5.0.71.47" }, { name: "nodejs", version: "6.3.0", date: "2016-07-06", lts: !1, security: !1,
  v8: "5.0.71.52" }, { name: "nodejs", version: "6.4.0", date: "2016-08-12", lts: !1, security: !1, v8: "5.0.71.60" }, { name: "nodejs", version: "\
6.5.0", date: "2016-08-26", lts: !1, security: !1, v8: "5.1.281.81" }, { name: "nodejs", version: "6.6.0", date: "2016-09-14", lts: !1, security: !1,
  v8: "5.1.281.83" }, { name: "nodejs", version: "6.7.0", date: "2016-09-27", lts: !1, security: !0, v8: "5.1.281.83" }, { name: "nodejs", version: "\
6.8.0", date: "2016-10-12", lts: !1, security: !1, v8: "5.1.281.84" }, { name: "nodejs", version: "6.9.0", date: "2016-10-18", lts: "Boron",
  security: !1, v8: "5.1.281.84" }, { name: "nodejs", version: "6.10.0", date: "2017-02-21", lts: "Boron", security: !1, v8: "5.1.281.93" },
  { name: "nodejs", version: "6.11.0", date: "2017-06-06", lts: "Boron", security: !1, v8: "5.1.281.102" }, { name: "nodejs", version: "6.12\
.0", date: "2017-11-06", lts: "Boron", security: !1, v8: "5.1.281.108" }, { name: "nodejs", version: "6.13.0", date: "2018-02-10", lts: "Bor\
on", security: !1, v8: "5.1.281.111" }, { name: "nodejs", version: "6.14.0", date: "2018-03-28", lts: "Boron", security: !0, v8: "5.1.281.11\
1" }, { name: "nodejs", version: "6.15.0", date: "2018-11-27", lts: "Boron", security: !0, v8: "5.1.281.111" }, { name: "nodejs", version: "\
6.16.0", date: "2018-12-26", lts: "Boron", security: !1, v8: "5.1.281.111" }, { name: "nodejs", version: "6.17.0", date: "2019-02-28", lts: "\
Boron", security: !0, v8: "5.1.281.111" }, { name: "nodejs", version: "7.0.0", date: "2016-10-25", lts: !1, security: !1, v8: "5.4.500.36" },
  { name: "nodejs", version: "7.1.0", date: "2016-11-08", lts: !1, security: !1, v8: "5.4.500.36" }, { name: "nodejs", version: "7.2.0", date: "\
2016-11-22", lts: !1, security: !1, v8: "5.4.500.43" }, { name: "nodejs", version: "7.3.0", date: "2016-12-20", lts: !1, security: !1, v8: "\
5.4.500.45" }, { name: "nodejs", version: "7.4.0", date: "2017-01-04", lts: !1, security: !1, v8: "5.4.500.45" }, { name: "nodejs", version: "\
7.5.0", date: "2017-01-31", lts: !1, security: !1, v8: "5.4.500.48" }, { name: "nodejs", version: "7.6.0", date: "2017-02-21", lts: !1, security: !1,
  v8: "5.5.372.40" }, { name: "nodejs", version: "7.7.0", date: "2017-02-28", lts: !1, security: !1, v8: "5.5.372.41" }, { name: "nodejs", version: "\
7.8.0", date: "2017-03-29", lts: !1, security: !1, v8: "5.5.372.43" }, { name: "nodejs", version: "7.9.0", date: "2017-04-11", lts: !1, security: !1,
  v8: "5.5.372.43" }, { name: "nodejs", version: "7.10.0", date: "2017-05-02", lts: !1, security: !1, v8: "5.5.372.43" }, { name: "nodejs", version: "\
8.0.0", date: "2017-05-30", lts: !1, security: !1, v8: "5.8.283.41" }, { name: "nodejs", version: "8.1.0", date: "2017-06-08", lts: !1, security: !1,
  v8: "5.8.283.41" }, { name: "nodejs", version: "8.2.0", date: "2017-07-19", lts: !1, security: !1, v8: "5.8.283.41" }, { name: "nodejs", version: "\
8.3.0", date: "2017-08-08", lts: !1, security: !1, v8: "6.0.286.52" }, { name: "nodejs", version: "8.4.0", date: "2017-08-15", lts: !1, security: !1,
  v8: "6.0.286.52" }, { name: "nodejs", version: "8.5.0", date: "2017-09-12", lts: !1, security: !1, v8: "6.0.287.53" }, { name: "nodejs", version: "\
8.6.0", date: "2017-09-26", lts: !1, security: !1, v8: "6.0.287.53" }, { name: "nodejs", version: "8.7.0", date: "2017-10-11", lts: !1, security: !1,
  v8: "6.1.534.42" }, { name: "nodejs", version: "8.8.0", date: "2017-10-24", lts: !1, security: !1, v8: "6.1.534.42" }, { name: "nodejs", version: "\
8.9.0", date: "2017-10-31", lts: "Carbon", security: !1, v8: "6.1.534.46" }, { name: "nodejs", version: "8.10.0", date: "2018-03-06", lts: "\
Carbon", security: !1, v8: "6.2.414.50" }, { name: "nodejs", version: "8.11.0", date: "2018-03-28", lts: "Carbon", security: !0, v8: "6.2.41\
4.50" }, { name: "nodejs", version: "8.12.0", date: "2018-09-10", lts: "Carbon", security: !1, v8: "6.2.414.66" }, { name: "nodejs", version: "\
8.13.0", date: "2018-11-20", lts: "Carbon", security: !1, v8: "6.2.414.72" }, { name: "nodejs", version: "8.14.0", date: "2018-11-27", lts: "\
Carbon", security: !0, v8: "6.2.414.72" }, { name: "nodejs", version: "8.15.0", date: "2018-12-26", lts: "Carbon", security: !1, v8: "6.2.41\
4.75" }, { name: "nodejs", version: "8.16.0", date: "2019-04-16", lts: "Carbon", security: !1, v8: "6.2.414.77" }, { name: "nodejs", version: "\
8.17.0", date: "2019-12-17", lts: "Carbon", security: !0, v8: "6.2.414.78" }, { name: "nodejs", version: "9.0.0", date: "2017-10-31", lts: !1,
  security: !1, v8: "6.2.414.32" }, { name: "nodejs", version: "9.1.0", date: "2017-11-07", lts: !1, security: !1, v8: "6.2.414.32" }, { name: "\
nodejs", version: "9.2.0", date: "2017-11-14", lts: !1, security: !1, v8: "6.2.414.44" }, { name: "nodejs", version: "9.3.0", date: "2017-12\
-12", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "9.4.0", date: "2018-01-10", lts: !1, security: !1, v8: "6.2.414\
.46" }, { name: "nodejs", version: "9.5.0", date: "2018-01-31", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "9.6.0",
  date: "2018-02-21", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "9.7.0", date: "2018-03-01", lts: !1, security: !1,
  v8: "6.2.414.46" }, { name: "nodejs", version: "9.8.0", date: "2018-03-07", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "\
9.9.0", date: "2018-03-21", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "9.10.0", date: "2018-03-28", lts: !1, security: !0,
  v8: "6.2.414.46" }, { name: "nodejs", version: "9.11.0", date: "2018-04-04", lts: !1, security: !1, v8: "6.2.414.46" }, { name: "nodejs", version: "\
10.0.0", date: "2018-04-24", lts: !1, security: !1, v8: "6.6.346.24" }, { name: "nodejs", version: "10.1.0", date: "2018-05-08", lts: !1, security: !1,
  v8: "6.6.346.27" }, { name: "nodejs", version: "10.2.0", date: "2018-05-23", lts: !1, security: !1, v8: "6.6.346.32" }, { name: "nodejs", version: "\
10.3.0", date: "2018-05-29", lts: !1, security: !1, v8: "6.6.346.32" }, { name: "nodejs", version: "10.4.0", date: "2018-06-06", lts: !1, security: !1,
  v8: "6.7.288.43" }, { name: "nodejs", version: "10.5.0", date: "2018-06-20", lts: !1, security: !1, v8: "6.7.288.46" }, { name: "nodejs", version: "\
10.6.0", date: "2018-07-04", lts: !1, security: !1, v8: "6.7.288.46" }, { name: "nodejs", version: "10.7.0", date: "2018-07-18", lts: !1, security: !1,
  v8: "6.7.288.49" }, { name: "nodejs", version: "10.8.0", date: "2018-08-01", lts: !1, security: !1, v8: "6.7.288.49" }, { name: "nodejs", version: "\
10.9.0", date: "2018-08-15", lts: !1, security: !1, v8: "6.8.275.24" }, { name: "nodejs", version: "10.10.0", date: "2018-09-06", lts: !1, security: !1,
  v8: "6.8.275.30" }, { name: "nodejs", version: "10.11.0", date: "2018-09-19", lts: !1, security: !1, v8: "6.8.275.32" }, { name: "nodejs",
  version: "10.12.0", date: "2018-10-10", lts: !1, security: !1, v8: "6.8.275.32" }, { name: "nodejs", version: "10.13.0", date: "2018-10-30",
  lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "nodejs", version: "10.14.0", date: "2018-11-27", lts: "Dubnium", security: !0, v8: "\
6.8.275.32" }, { name: "nodejs", version: "10.15.0", date: "2018-12-26", lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "nodejs",
  version: "10.16.0", date: "2019-05-28", lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "nodejs", version: "10.17.0", date: "201\
9-10-22", lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "nodejs", version: "10.18.0", date: "2019-12-17", lts: "Dubnium", security: !0,
  v8: "6.8.275.32" }, { name: "nodejs", version: "10.19.0", date: "2020-02-05", lts: "Dubnium", security: !0, v8: "6.8.275.32" }, { name: "n\
odejs", version: "10.20.0", date: "2020-03-26", lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "nodejs", version: "10.21.0", date: "\
2020-06-02", lts: "Dubnium", security: !0, v8: "6.8.275.32" }, { name: "nodejs", version: "10.22.0", date: "2020-07-21", lts: "Dubnium", security: !1,
  v8: "6.8.275.32" }, { name: "nodejs", version: "10.23.0", date: "2020-10-27", lts: "Dubnium", security: !1, v8: "6.8.275.32" }, { name: "n\
odejs", version: "10.24.0", date: "2021-02-23", lts: "Dubnium", security: !0, v8: "6.8.275.32" }, { name: "nodejs", version: "11.0.0", date: "\
2018-10-23", lts: !1, security: !1, v8: "7.0.276.28" }, { name: "nodejs", version: "11.1.0", date: "2018-10-30", lts: !1, security: !1, v8: "\
7.0.276.32" }, { name: "nodejs", version: "11.2.0", date: "2018-11-15", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "\
11.3.0", date: "2018-11-27", lts: !1, security: !0, v8: "7.0.276.38" }, { name: "nodejs", version: "11.4.0", date: "2018-12-07", lts: !1, security: !1,
  v8: "7.0.276.38" }, { name: "nodejs", version: "11.5.0", date: "2018-12-18", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "\
11.6.0", date: "2018-12-26", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "11.7.0", date: "2019-01-17", lts: !1, security: !1,
  v8: "7.0.276.38" }, { name: "nodejs", version: "11.8.0", date: "2019-01-24", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "\
11.9.0", date: "2019-01-30", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "11.10.0", date: "2019-02-14", lts: !1, security: !1,
  v8: "7.0.276.38" }, { name: "nodejs", version: "11.11.0", date: "2019-03-05", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs",
  version: "11.12.0", date: "2019-03-14", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "11.13.0", date: "2019-03-28",
  lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "11.14.0", date: "2019-04-10", lts: !1, security: !1, v8: "7.0.276.3\
8" }, { name: "nodejs", version: "11.15.0", date: "2019-04-30", lts: !1, security: !1, v8: "7.0.276.38" }, { name: "nodejs", version: "12.0.\
0", date: "2019-04-23", lts: !1, security: !1, v8: "7.4.288.21" }, { name: "nodejs", version: "12.1.0", date: "2019-04-29", lts: !1, security: !1,
  v8: "7.4.288.21" }, { name: "nodejs", version: "12.2.0", date: "2019-05-07", lts: !1, security: !1, v8: "7.4.288.21" }, { name: "nodejs", version: "\
12.3.0", date: "2019-05-21", lts: !1, security: !1, v8: "7.4.288.27" }, { name: "nodejs", version: "12.4.0", date: "2019-06-04", lts: !1, security: !1,
  v8: "7.4.288.27" }, { name: "nodejs", version: "12.5.0", date: "2019-06-26", lts: !1, security: !1, v8: "7.5.288.22" }, { name: "nodejs", version: "\
12.6.0", date: "2019-07-03", lts: !1, security: !1, v8: "7.5.288.22" }, { name: "nodejs", version: "12.7.0", date: "2019-07-23", lts: !1, security: !1,
  v8: "7.5.288.22" }, { name: "nodejs", version: "12.8.0", date: "2019-08-06", lts: !1, security: !1, v8: "7.5.288.22" }, { name: "nodejs", version: "\
12.9.0", date: "2019-08-20", lts: !1, security: !1, v8: "7.6.303.29" }, { name: "nodejs", version: "12.10.0", date: "2019-09-04", lts: !1, security: !1,
  v8: "7.6.303.29" }, { name: "nodejs", version: "12.11.0", date: "2019-09-25", lts: !1, security: !1, v8: "7.7.299.11" }, { name: "nodejs",
  version: "12.12.0", date: "2019-10-11", lts: !1, security: !1, v8: "7.7.299.13" }, { name: "nodejs", version: "12.13.0", date: "2019-10-21",
  lts: "Erbium", security: !1, v8: "7.7.299.13" }, { name: "nodejs", version: "12.14.0", date: "2019-12-17", lts: "Erbium", security: !0, v8: "\
7.7.299.13" }, { name: "nodejs", version: "12.15.0", date: "2020-02-05", lts: "Erbium", security: !0, v8: "7.7.299.13" }, { name: "nodejs", version: "\
12.16.0", date: "2020-02-11", lts: "Erbium", security: !1, v8: "7.8.279.23" }, { name: "nodejs", version: "12.17.0", date: "2020-05-26", lts: "\
Erbium", security: !1, v8: "7.8.279.23" }, { name: "nodejs", version: "12.18.0", date: "2020-06-02", lts: "Erbium", security: !0, v8: "7.8.2\
79.23" }, { name: "nodejs", version: "12.19.0", date: "2020-10-06", lts: "Erbium", security: !1, v8: "7.8.279.23" }, { name: "nodejs", version: "\
12.20.0", date: "2020-11-24", lts: "Erbium", security: !1, v8: "7.8.279.23" }, { name: "nodejs", version: "12.21.0", date: "2021-02-23", lts: "\
Erbium", security: !0, v8: "7.8.279.23" }, { name: "nodejs", version: "12.22.0", date: "2021-03-30", lts: "Erbium", security: !1, v8: "7.8.2\
79.23" }, { name: "nodejs", version: "13.0.0", date: "2019-10-22", lts: !1, security: !1, v8: "7.8.279.17" }, { name: "nodejs", version: "13\
.1.0", date: "2019-11-05", lts: !1, security: !1, v8: "7.8.279.17" }, { name: "nodejs", version: "13.2.0", date: "2019-11-21", lts: !1, security: !1,
  v8: "7.9.317.23" }, { name: "nodejs", version: "13.3.0", date: "2019-12-03", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "\
13.4.0", date: "2019-12-17", lts: !1, security: !0, v8: "7.9.317.25" }, { name: "nodejs", version: "13.5.0", date: "2019-12-18", lts: !1, security: !1,
  v8: "7.9.317.25" }, { name: "nodejs", version: "13.6.0", date: "2020-01-07", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "\
13.7.0", date: "2020-01-21", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "13.8.0", date: "2020-02-05", lts: !1, security: !0,
  v8: "7.9.317.25" }, { name: "nodejs", version: "13.9.0", date: "2020-02-18", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "\
13.10.0", date: "2020-03-04", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "13.11.0", date: "2020-03-12", lts: !1, security: !1,
  v8: "7.9.317.25" }, { name: "nodejs", version: "13.12.0", date: "2020-03-26", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs",
  version: "13.13.0", date: "2020-04-14", lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "13.14.0", date: "2020-04-29",
  lts: !1, security: !1, v8: "7.9.317.25" }, { name: "nodejs", version: "14.0.0", date: "2020-04-21", lts: !1, security: !1, v8: "8.1.307.30" },
  { name: "nodejs", version: "14.1.0", date: "2020-04-29", lts: !1, security: !1, v8: "8.1.307.31" }, { name: "nodejs", version: "14.2.0", date: "\
2020-05-05", lts: !1, security: !1, v8: "8.1.307.31" }, { name: "nodejs", version: "14.3.0", date: "2020-05-19", lts: !1, security: !1, v8: "\
8.1.307.31" }, { name: "nodejs", version: "14.4.0", date: "2020-06-02", lts: !1, security: !0, v8: "8.1.307.31" }, { name: "nodejs", version: "\
14.5.0", date: "2020-06-30", lts: !1, security: !1, v8: "8.3.110.9" }, { name: "nodejs", version: "14.6.0", date: "2020-07-20", lts: !1, security: !1,
  v8: "8.4.371.19" }, { name: "nodejs", version: "14.7.0", date: "2020-07-29", lts: !1, security: !1, v8: "8.4.371.19" }, { name: "nodejs", version: "\
14.8.0", date: "2020-08-11", lts: !1, security: !1, v8: "8.4.371.19" }, { name: "nodejs", version: "14.9.0", date: "2020-08-27", lts: !1, security: !1,
  v8: "8.4.371.19" }, { name: "nodejs", version: "14.10.0", date: "2020-09-08", lts: !1, security: !1, v8: "8.4.371.19" }, { name: "nodejs",
  version: "14.11.0", date: "2020-09-15", lts: !1, security: !0, v8: "8.4.371.19" }, { name: "nodejs", version: "14.12.0", date: "2020-09-22",
  lts: !1, security: !1, v8: "8.4.371.19" }, { name: "nodejs", version: "14.13.0", date: "2020-09-29", lts: !1, security: !1, v8: "8.4.371.1\
9" }, { name: "nodejs", version: "14.14.0", date: "2020-10-15", lts: !1, security: !1, v8: "8.4.371.19" }, { name: "nodejs", version: "14.15\
.0", date: "2020-10-27", lts: "Fermium", security: !1, v8: "8.4.371.19" }, { name: "nodejs", version: "14.16.0", date: "2021-02-23", lts: "F\
ermium", security: !0, v8: "8.4.371.19" }, { name: "nodejs", version: "14.17.0", date: "2021-05-11", lts: "Fermium", security: !1, v8: "8.4.\
371.23" }, { name: "nodejs", version: "14.18.0", date: "2021-09-28", lts: "Fermium", security: !1, v8: "8.4.371.23" }, { name: "nodejs", version: "\
14.19.0", date: "2022-02-01", lts: "Fermium", security: !1, v8: "8.4.371.23" }, { name: "nodejs", version: "14.20.0", date: "2022-07-07", lts: "\
Fermium", security: !0, v8: "8.4.371.23" }, { name: "nodejs", version: "14.21.0", date: "2022-11-01", lts: "Fermium", security: !1, v8: "8.4\
.371.23" }, { name: "nodejs", version: "15.0.0", date: "2020-10-20", lts: !1, security: !1, v8: "8.6.395.16" }, { name: "nodejs", version: "\
15.1.0", date: "2020-11-04", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "15.2.0", date: "2020-11-10", lts: !1, security: !1,
  v8: "8.6.395.17" }, { name: "nodejs", version: "15.3.0", date: "2020-11-24", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "\
15.4.0", date: "2020-12-09", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "15.5.0", date: "2020-12-22", lts: !1, security: !1,
  v8: "8.6.395.17" }, { name: "nodejs", version: "15.6.0", date: "2021-01-14", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "\
15.7.0", date: "2021-01-25", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "15.8.0", date: "2021-02-02", lts: !1, security: !1,
  v8: "8.6.395.17" }, { name: "nodejs", version: "15.9.0", date: "2021-02-18", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "\
15.10.0", date: "2021-02-23", lts: !1, security: !0, v8: "8.6.395.17" }, { name: "nodejs", version: "15.11.0", date: "2021-03-03", lts: !1, security: !1,
  v8: "8.6.395.17" }, { name: "nodejs", version: "15.12.0", date: "2021-03-17", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs",
  version: "15.13.0", date: "2021-03-31", lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "15.14.0", date: "2021-04-06",
  lts: !1, security: !1, v8: "8.6.395.17" }, { name: "nodejs", version: "16.0.0", date: "2021-04-20", lts: !1, security: !1, v8: "9.0.257.17" },
  { name: "nodejs", version: "16.1.0", date: "2021-05-04", lts: !1, security: !1, v8: "9.0.257.24" }, { name: "nodejs", version: "16.2.0", date: "\
2021-05-19", lts: !1, security: !1, v8: "9.0.257.25" }, { name: "nodejs", version: "16.3.0", date: "2021-06-03", lts: !1, security: !1, v8: "\
9.0.257.25" }, { name: "nodejs", version: "16.4.0", date: "2021-06-23", lts: !1, security: !1, v8: "9.1.269.36" }, { name: "nodejs", version: "\
16.5.0", date: "2021-07-14", lts: !1, security: !1, v8: "9.1.269.38" }, { name: "nodejs", version: "16.6.0", date: "2021-07-29", lts: !1, security: !0,
  v8: "9.2.230.21" }, { name: "nodejs", version: "16.7.0", date: "2021-08-18", lts: !1, security: !1, v8: "9.2.230.21" }, { name: "nodejs", version: "\
16.8.0", date: "2021-08-25", lts: !1, security: !1, v8: "9.2.230.21" }, { name: "nodejs", version: "16.9.0", date: "2021-09-07", lts: !1, security: !1,
  v8: "9.3.345.16" }, { name: "nodejs", version: "16.10.0", date: "2021-09-22", lts: !1, security: !1, v8: "9.3.345.19" }, { name: "nodejs",
  version: "16.11.0", date: "2021-10-08", lts: !1, security: !1, v8: "9.4.146.19" }, { name: "nodejs", version: "16.12.0", date: "2021-10-20",
  lts: !1, security: !1, v8: "9.4.146.19" }, { name: "nodejs", version: "16.13.0", date: "2021-10-26", lts: "Gallium", security: !1, v8: "9.\
4.146.19" }, { name: "nodejs", version: "16.14.0", date: "2022-02-08", lts: "Gallium", security: !1, v8: "9.4.146.24" }, { name: "nodejs", version: "\
16.15.0", date: "2022-04-26", lts: "Gallium", security: !1, v8: "9.4.146.24" }, { name: "nodejs", version: "16.16.0", date: "2022-07-07", lts: "\
Gallium", security: !0, v8: "9.4.146.24" }, { name: "nodejs", version: "16.17.0", date: "2022-08-16", lts: "Gallium", security: !1, v8: "9.4\
.146.26" }, { name: "nodejs", version: "16.18.0", date: "2022-10-12", lts: "Gallium", security: !1, v8: "9.4.146.26" }, { name: "nodejs", version: "\
16.19.0", date: "2022-12-13", lts: "Gallium", security: !1, v8: "9.4.146.26" }, { name: "nodejs", version: "16.20.0", date: "2023-03-28", lts: "\
Gallium", security: !1, v8: "9.4.146.26" }, { name: "nodejs", version: "17.0.0", date: "2021-10-19", lts: !1, security: !1, v8: "9.5.172.21" },
  { name: "nodejs", version: "17.1.0", date: "2021-11-09", lts: !1, security: !1, v8: "9.5.172.25" }, { name: "nodejs", version: "17.2.0", date: "\
2021-11-30", lts: !1, security: !1, v8: "9.6.180.14" }, { name: "nodejs", version: "17.3.0", date: "2021-12-17", lts: !1, security: !1, v8: "\
9.6.180.15" }, { name: "nodejs", version: "17.4.0", date: "2022-01-18", lts: !1, security: !1, v8: "9.6.180.15" }, { name: "nodejs", version: "\
17.5.0", date: "2022-02-10", lts: !1, security: !1, v8: "9.6.180.15" }, { name: "nodejs", version: "17.6.0", date: "2022-02-22", lts: !1, security: !1,
  v8: "9.6.180.15" }, { name: "nodejs", version: "17.7.0", date: "2022-03-09", lts: !1, security: !1, v8: "9.6.180.15" }, { name: "nodejs", version: "\
17.8.0", date: "2022-03-22", lts: !1, security: !1, v8: "9.6.180.15" }, { name: "nodejs", version: "17.9.0", date: "2022-04-07", lts: !1, security: !1,
  v8: "9.6.180.15" }, { name: "nodejs", version: "18.0.0", date: "2022-04-18", lts: !1, security: !1, v8: "10.1.124.8" }, { name: "nodejs", version: "\
18.1.0", date: "2022-05-03", lts: !1, security: !1, v8: "10.1.124.8" }, { name: "nodejs", version: "18.2.0", date: "2022-05-17", lts: !1, security: !1,
  v8: "10.1.124.8" }, { name: "nodejs", version: "18.3.0", date: "2022-06-02", lts: !1, security: !1, v8: "10.2.154.4" }, { name: "nodejs", version: "\
18.4.0", date: "2022-06-16", lts: !1, security: !1, v8: "10.2.154.4" }, { name: "nodejs", version: "18.5.0", date: "2022-07-06", lts: !1, security: !0,
  v8: "10.2.154.4" }, { name: "nodejs", version: "18.6.0", date: "2022-07-13", lts: !1, security: !1, v8: "10.2.154.13" }, { name: "nodejs",
  version: "18.7.0", date: "2022-07-26", lts: !1, security: !1, v8: "10.2.154.13" }, { name: "nodejs", version: "18.8.0", date: "2022-08-24",
  lts: !1, security: !1, v8: "10.2.154.13" }, { name: "nodejs", version: "18.9.0", date: "2022-09-07", lts: !1, security: !1, v8: "10.2.154.\
15" }, { name: "nodejs", version: "18.10.0", date: "2022-09-28", lts: !1, security: !1, v8: "10.2.154.15" }, { name: "nodejs", version: "18.\
11.0", date: "2022-10-13", lts: !1, security: !1, v8: "10.2.154.15" }, { name: "nodejs", version: "18.12.0", date: "2022-10-25", lts: "Hydro\
gen", security: !1, v8: "10.2.154.15" }, { name: "nodejs", version: "18.13.0", date: "2023-01-05", lts: "Hydrogen", security: !1, v8: "10.2.\
154.23" }, { name: "nodejs", version: "18.14.0", date: "2023-02-01", lts: "Hydrogen", security: !1, v8: "10.2.154.23" }, { name: "nodejs", version: "\
18.15.0", date: "2023-03-05", lts: "Hydrogen", security: !1, v8: "10.2.154.26" }, { name: "nodejs", version: "18.16.0", date: "2023-04-12", lts: "\
Hydrogen", security: !1, v8: "10.2.154.26" }, { name: "nodejs", version: "18.17.0", date: "2023-07-18", lts: "Hydrogen", security: !1, v8: "\
10.2.154.26" }, { name: "nodejs", version: "18.18.0", date: "2023-09-18", lts: "Hydrogen", security: !1, v8: "10.2.154.26" }, { name: "nodej\
s", version: "18.19.0", date: "2023-11-29", lts: "Hydrogen", security: !1, v8: "10.2.154.26" }, { name: "nodejs", version: "18.20.0", date: "\
2024-03-26", lts: "Hydrogen", security: !1, v8: "10.2.154.26" }, { name: "nodejs", version: "19.0.0", date: "2022-10-17", lts: !1, security: !1,
  v8: "10.7.193.13" }, { name: "nodejs", version: "19.1.0", date: "2022-11-14", lts: !1, security: !1, v8: "10.7.193.20" }, { name: "nodejs",
  version: "19.2.0", date: "2022-11-29", lts: !1, security: !1, v8: "10.8.168.20" }, { name: "nodejs", version: "19.3.0", date: "2022-12-14",
  lts: !1, security: !1, v8: "10.8.168.21" }, { name: "nodejs", version: "19.4.0", date: "2023-01-05", lts: !1, security: !1, v8: "10.8.168.\
25" }, { name: "nodejs", version: "19.5.0", date: "2023-01-24", lts: !1, security: !1, v8: "10.8.168.25" }, { name: "nodejs", version: "19.6\
.0", date: "2023-02-01", lts: !1, security: !1, v8: "10.8.168.25" }, { name: "nodejs", version: "19.7.0", date: "2023-02-21", lts: !1, security: !1,
  v8: "10.8.168.25" }, { name: "nodejs", version: "19.8.0", date: "2023-03-14", lts: !1, security: !1, v8: "10.8.168.25" }, { name: "nodejs",
  version: "19.9.0", date: "2023-04-10", lts: !1, security: !1, v8: "10.8.168.25" }, { name: "nodejs", version: "20.0.0", date: "2023-04-17",
  lts: !1, security: !1, v8: "11.3.244.4" }, { name: "nodejs", version: "20.1.0", date: "2023-05-03", lts: !1, security: !1, v8: "11.3.244.8" },
  { name: "nodejs", version: "20.2.0", date: "2023-05-16", lts: !1, security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.3.0", date: "\
2023-06-08", lts: !1, security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.4.0", date: "2023-07-04", lts: !1, security: !1, v8: "\
11.3.244.8" }, { name: "nodejs", version: "20.5.0", date: "2023-07-19", lts: !1, security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "\
20.6.0", date: "2023-08-23", lts: !1, security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.7.0", date: "2023-09-18", lts: !1, security: !1,
  v8: "11.3.244.8" }, { name: "nodejs", version: "20.8.0", date: "2023-09-28", lts: !1, security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "\
20.9.0", date: "2023-10-24", lts: "Iron", security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.10.0", date: "2023-11-22", lts: "\
Iron", security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.11.0", date: "2024-01-09", lts: "Iron", security: !1, v8: "11.3.244.\
8" }, { name: "nodejs", version: "20.12.0", date: "2024-03-26", lts: "Iron", security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "2\
0.13.0", date: "2024-05-07", lts: "Iron", security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.14.0", date: "2024-05-28", lts: "\
Iron", security: !1, v8: "11.3.244.8" }, { name: "nodejs", version: "20.15.0", date: "2024-06-20", lts: "Iron", security: !1, v8: "11.3.244.\
8" }, { name: "nodejs", version: "21.0.0", date: "2023-10-17", lts: !1, security: !1, v8: "11.8.172.13" }, { name: "nodejs", version: "21.1.\
0", date: "2023-10-24", lts: !1, security: !1, v8: "11.8.172.15" }, { name: "nodejs", version: "21.2.0", date: "2023-11-14", lts: !1, security: !1,
  v8: "11.8.172.17" }, { name: "nodejs", version: "21.3.0", date: "2023-11-30", lts: !1, security: !1, v8: "11.8.172.17" }, { name: "nodejs",
  version: "21.4.0", date: "2023-12-05", lts: !1, security: !1, v8: "11.8.172.17" }, { name: "nodejs", version: "21.5.0", date: "2023-12-19",
  lts: !1, security: !1, v8: "11.8.172.17" }, { name: "nodejs", version: "21.6.0", date: "2024-01-14", lts: !1, security: !1, v8: "11.8.172.\
17" }, { name: "nodejs", version: "21.7.0", date: "2024-03-06", lts: !1, security: !1, v8: "11.8.172.17" }, { name: "nodejs", version: "22.0\
.0", date: "2024-04-24", lts: !1, security: !1, v8: "12.4.254.14" }, { name: "nodejs", version: "22.1.0", date: "2024-05-02", lts: !1, security: !1,
  v8: "12.4.254.14" }, { name: "nodejs", version: "22.2.0", date: "2024-05-15", lts: !1, security: !1, v8: "12.4.254.14" }, { name: "nodejs",
  version: "22.3.0", date: "2024-06-11", lts: !1, security: !1, v8: "12.4.254.20" }, { name: "nodejs", version: "22.4.0", date: "2024-07-02",
  lts: !1, security: !1, v8: "12.4.254.21" }, { name: "nodejs", version: "22.5.0", date: "2024-07-17", lts: !1, security: !1, v8: "12.4.254.\
21" }];
});

// ../node_modules/caniuse-lite/data/browsers.js
var m2 = T((wwe, h2) => {
  h2.exports = { A: "ie", B: "edge", C: "firefox", D: "chrome", E: "safari", F: "opera", G: "ios_saf", H: "op_mini", I: "android", J: "bb", K: "\
op_mob", L: "and_chr", M: "and_ff", N: "ie_mob", O: "and_uc", P: "samsung", Q: "and_qq", R: "baidu", S: "kaios" };
});

// ../node_modules/caniuse-lite/dist/unpacker/browsers.js
var xc = T((Dwe, y2) => {
  y2.exports.browsers = m2();
});

// ../node_modules/caniuse-lite/data/browserVersions.js
var b2 = T((Iwe, g2) => {
  g2.exports = { 0: "25", 1: "112", 2: "113", 3: "114", 4: "115", 5: "116", 6: "117", 7: "118", 8: "119", 9: "120", A: "10", B: "11", C: "12",
  D: "127", E: "7", F: "8", G: "9", H: "15", I: "80", J: "4", K: "6", L: "13", M: "14", N: "16", O: "17", P: "18", Q: "79", R: "81", S: "83",
  T: "84", U: "85", V: "86", W: "87", X: "88", Y: "89", Z: "90", a: "91", b: "92", c: "93", d: "94", e: "95", f: "96", g: "97", h: "98", i: "\
99", j: "100", k: "101", l: "102", m: "103", n: "104", o: "105", p: "106", q: "107", r: "108", s: "109", t: "110", u: "111", v: "20", w: "21",
  x: "22", y: "23", z: "24", AB: "121", BB: "122", CB: "123", DB: "124", EB: "125", FB: "126", GB: "5", HB: "19", IB: "26", JB: "27", KB: "2\
8", LB: "29", MB: "30", NB: "31", OB: "32", PB: "33", QB: "34", RB: "35", SB: "36", TB: "37", UB: "38", VB: "39", WB: "40", XB: "41", YB: "4\
2", ZB: "43", aB: "44", bB: "45", cB: "46", dB: "47", eB: "48", fB: "49", gB: "50", hB: "51", iB: "52", jB: "53", kB: "54", lB: "55", mB: "5\
6", nB: "57", oB: "58", pB: "60", qB: "62", rB: "63", sB: "64", tB: "65", uB: "66", vB: "67", wB: "68", xB: "69", yB: "70", zB: "71", "0B": "\
72", "1B": "73", "2B": "74", "3B": "75", "4B": "76", "5B": "77", "6B": "78", "7B": "11.1", "8B": "12.1", "9B": "15.5", AC: "16.0", BC: "17.0",
  CC: "18.0", DC: "3", EC: "59", FC: "61", GC: "82", HC: "128", IC: "129", JC: "130", KC: "3.2", LC: "10.1", MC: "15.2-15.3", NC: "15.4", OC: "\
16.1", PC: "16.2", QC: "16.3", RC: "16.4", SC: "16.5", TC: "17.1", UC: "17.2", VC: "17.3", WC: "17.4", XC: "17.5", YC: "17.6", ZC: "11.5", aC: "\
4.2-4.3", bC: "5.5", cC: "2", dC: "131", eC: "3.5", fC: "3.6", gC: "3.1", hC: "5.1", iC: "6.1", jC: "7.1", kC: "9.1", lC: "13.1", mC: "14.1",
  nC: "15.1", oC: "15.6", pC: "16.6", qC: "TP", rC: "9.5-9.6", sC: "10.0-10.1", tC: "10.5", uC: "10.6", vC: "11.6", wC: "4.0-4.1", xC: "5.0-\
5.1", yC: "6.0-6.1", zC: "7.0-7.1", "0C": "8.1-8.4", "1C": "9.0-9.2", "2C": "9.3", "3C": "10.0-10.2", "4C": "10.3", "5C": "11.0-11.2", "6C": "\
11.3-11.4", "7C": "12.0-12.1", "8C": "12.2-12.5", "9C": "13.0-13.1", AD: "13.2", BD: "13.3", CD: "13.4-13.7", DD: "14.0-14.4", ED: "14.5-14.\
8", FD: "15.0-15.1", GD: "15.6-15.8", HD: "16.6-16.7", ID: "all", JD: "2.1", KD: "2.2", LD: "2.3", MD: "4.1", ND: "4.4", OD: "4.4.3-4.4.4", PD: "\
5.0-5.4", QD: "6.2-6.4", RD: "7.2-7.4", SD: "8.2", TD: "9.2", UD: "11.1-11.2", VD: "12.0", WD: "13.0", XD: "14.0", YD: "15.0", ZD: "19.0", aD: "\
14.9", bD: "13.52", cD: "2.5", dD: "3.0-3.1" };
});

// ../node_modules/caniuse-lite/dist/unpacker/browserVersions.js
var w0 = T((_we, E2) => {
  E2.exports.browserVersions = b2();
});

// ../node_modules/caniuse-lite/data/agents.js
var T2 = T((Owe, v2) => {
  v2.exports = { A: { A: { K: 0, E: 0, F: 0.046943, G: 0.0625907, A: 0, B: 0.500725, bC: 0 }, B: "ms", C: ["", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "bC", "K", "E", "F", "G", "A", "B", "", "", ""], E: "IE", F: { bC: 962323200, K: 998870400, E: 1161129600,
  F: 1237420800, G: 1300060800, A: 1346716800, B: 1381968e3 } }, B: { A: { 1: 7222e-6, 2: 0.014444, 3: 0.010833, 4: 7222e-6, 5: 7222e-6, 6: 0.010833,
  7: 7222e-6, 8: 0.014444, 9: 0.03611, C: 0, L: 0, M: 0, H: 0, N: 0, O: 3611e-6, P: 0.043332, Q: 0, I: 0, R: 0, S: 0, T: 0, U: 0, V: 0, W: 0,
  X: 0, Y: 0, Z: 0, a: 0, b: 0.014444, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0, m: 0, n: 0, o: 0, p: 0, q: 7222e-6, r: 7222e-6,
  s: 0.064998, t: 7222e-6, u: 7222e-6, AB: 0.021666, BB: 0.032499, CB: 0.021666, DB: 0.039721, EB: 0.122774, FB: 3.94682, D: 0.512762 }, B: "\
webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "C", "L", "M", "H", "N", "O", "P", "Q", "I", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "\
e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "1", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB",
  "CB", "DB", "EB", "FB", "D", "", "", ""], E: "Edge", F: { 1: 1680825600, 2: 1683158400, 3: 1685664e3, 4: 1689897600, 5: 1692576e3, 6: 1694649600,
  7: 1697155200, 8: 1698969600, 9: 1701993600, C: 1438128e3, L: 1447286400, M: 1470096e3, H: 1491868800, N: 1508198400, O: 1525046400, P: 1542067200,
  Q: 1579046400, I: 1581033600, R: 1586736e3, S: 1590019200, T: 1594857600, U: 1598486400, V: 1602201600, W: 1605830400, X: 161136e4, Y: 1614816e3,
  Z: 1618358400, a: 1622073600, b: 1626912e3, c: 1630627200, d: 1632441600, e: 1634774400, f: 1637539200, g: 1641427200, h: 1643932800, i: 1646265600,
  j: 1649635200, k: 1651190400, l: 1653955200, m: 1655942400, n: 1659657600, o: 1661990400, p: 1664755200, q: 1666915200, r: 1670198400, s: 1673481600,
  t: 1675900800, u: 1678665600, AB: 1706227200, BB: 1708732800, CB: 1711152e3, DB: 1713398400, EB: 1715990400, FB: 1718841600, D: 1721865600 },
  D: { C: "ms", L: "ms", M: "ms", H: "ms", N: "ms", O: "ms", P: "ms" } }, C: { A: { 0: 0, 1: 0, 2: 7222e-6, 3: 0, 4: 0.346656, 5: 0, 6: 7222e-6,
  7: 0.07222, 8: 0, 9: 7222e-6, cC: 0, DC: 0, J: 0, GB: 0, K: 0, E: 0, F: 0, G: 0, A: 0, B: 0.018055, C: 0, L: 0, M: 0, H: 0, N: 0, O: 0, P: 0,
  HB: 0, v: 0, w: 0, x: 0, y: 0, z: 0, IB: 0, JB: 0, KB: 0, LB: 0, MB: 0, NB: 0, OB: 0, PB: 0, QB: 0, RB: 0, SB: 0, TB: 0, UB: 0, VB: 0, WB: 0,
  XB: 0, YB: 0, ZB: 7222e-6, aB: 7222e-6, bB: 7222e-6, cB: 0, dB: 0, eB: 0, fB: 0, gB: 3611e-6, hB: 0, iB: 0.043332, jB: 3611e-6, kB: 7222e-6,
  lB: 0, mB: 0.018055, nB: 0, oB: 0, EC: 3611e-6, pB: 0, FC: 0, qB: 0, rB: 0, sB: 0, tB: 0, uB: 0, vB: 0, wB: 0, xB: 0, yB: 0, zB: 0, "0B": 3611e-6,
  "1B": 0, "2B": 0, "3B": 0, "4B": 0, "5B": 0, "6B": 0.014444, Q: 0, I: 0, R: 0, GC: 0, S: 0, T: 0, U: 0, V: 0, W: 0, X: 7222e-6, Y: 0, Z: 0,
  a: 0, b: 0, c: 0, d: 3611e-6, e: 0, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 7222e-6, m: 7222e-6, n: 0, o: 3611e-6, p: 0, q: 3611e-6, r: 3611e-6,
  s: 0.010833, t: 0, u: 0, AB: 0.010833, BB: 7222e-6, CB: 0.028888, DB: 0.010833, EB: 0.018055, FB: 0.046943, D: 0.592204, HC: 0.953304, IC: 7222e-6,
  JC: 0, dC: 0, eC: 0, fC: 0 }, B: "moz", C: ["cC", "DC", "eC", "fC", "J", "GB", "K", "E", "F", "G", "A", "B", "C", "L", "M", "H", "N", "O",
  "P", "HB", "v", "w", "x", "y", "z", "0", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "\
YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "EC", "pB", "FC", "qB", "rB", "sB", "tB",
  "uB", "vB", "wB", "xB", "yB", "zB", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "Q", "I", "R", "GC", "S", "T", "U", "V", "W", "X", "Y", "Z",
  "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "1", "2", "3", "4", "5", "6", "7",
  "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "D", "HC", "IC", "JC", "dC"], E: "Firefox", F: { 0: 1379376e3, 1: 1681171200, 2: 1683590400,
  3: 1686009600, 4: 1688428800, 5: 1690848e3, 6: 1693267200, 7: 1695686400, 8: 1698105600, 9: 1700524800, cC: 1161648e3, DC: 1213660800, eC: 124632e4,
  fC: 1264032e3, J: 1300752e3, GB: 1308614400, K: 1313452800, E: 1317081600, F: 1317081600, G: 1320710400, A: 1324339200, B: 1327968e3, C: 1331596800,
  L: 1335225600, M: 1338854400, H: 1342483200, N: 1346112e3, O: 1349740800, P: 1353628800, HB: 1357603200, v: 1361232e3, w: 1364860800, x: 1368489600,
  y: 1372118400, z: 1375747200, IB: 1386633600, JB: 1391472e3, KB: 1395100800, LB: 1398729600, MB: 1402358400, NB: 1405987200, OB: 1409616e3,
  PB: 1413244800, QB: 1417392e3, RB: 1421107200, SB: 1424736e3, TB: 1428278400, UB: 1431475200, VB: 1435881600, WB: 1439251200, XB: 144288e4,
  YB: 1446508800, ZB: 1450137600, aB: 1453852800, bB: 1457395200, cB: 1461628800, dB: 1465257600, eB: 1470096e3, fB: 1474329600, gB: 1479168e3,
  hB: 1485216e3, iB: 1488844800, jB: 149256e4, kB: 1497312e3, lB: 1502150400, mB: 1506556800, nB: 1510617600, oB: 1516665600, EC: 1520985600,
  pB: 1525824e3, FC: 1529971200, qB: 1536105600, rB: 1540252800, sB: 1544486400, tB: 154872e4, uB: 1552953600, vB: 1558396800, wB: 1562630400,
  xB: 1567468800, yB: 1571788800, zB: 1575331200, "0B": 1578355200, "1B": 1581379200, "2B": 1583798400, "3B": 1586304e3, "4B": 1588636800, "\
5B": 1591056e3, "6B": 1593475200, Q: 1595894400, I: 1598313600, R: 1600732800, GC: 1603152e3, S: 1605571200, T: 1607990400, U: 1611619200, V: 1614038400,
  W: 1616457600, X: 1618790400, Y: 1622505600, Z: 1626134400, a: 1628553600, b: 1630972800, c: 1633392e3, d: 1635811200, e: 1638835200, f: 1641859200,
  g: 1644364800, h: 1646697600, i: 1649116800, j: 1651536e3, k: 1653955200, l: 1656374400, m: 1658793600, n: 1661212800, o: 1663632e3, p: 1666051200,
  q: 1668470400, r: 1670889600, s: 1673913600, t: 1676332800, u: 1678752e3, AB: 1702944e3, BB: 1705968e3, CB: 1708387200, DB: 1710806400, EB: 1713225600,
  FB: 1715644800, D: 1718064e3, HC: 1720483200, IC: null, JC: null, dC: null } }, D: { A: { 0: 0, 1: 0.050554, 2: 0.093886, 3: 0.090275, 4: 0.03611,
  5: 0.158884, 6: 0.104719, 7: 0.075831, 8: 0.064998, 9: 0.111941, J: 0, GB: 0, K: 0, E: 0, F: 0, G: 0, A: 0, B: 0, C: 0, L: 0, M: 0, H: 0, N: 0,
  O: 0, P: 0, HB: 0, v: 0, w: 0, x: 0, y: 0, z: 0, IB: 0, JB: 0, KB: 0, LB: 0, MB: 0, NB: 0, OB: 0, PB: 0, QB: 0, RB: 0, SB: 0, TB: 0, UB: 0.010833,
  VB: 0, WB: 0, XB: 0, YB: 0, ZB: 0, aB: 0, bB: 3611e-6, cB: 0, dB: 3611e-6, eB: 0.021666, fB: 0.021666, gB: 0.018055, hB: 0, iB: 3611e-6, jB: 7222e-6,
  kB: 0, lB: 0, mB: 0.010833, nB: 0, oB: 7222e-6, EC: 0, pB: 0, FC: 3611e-6, qB: 0, rB: 0, sB: 0, tB: 0, uB: 0.025277, vB: 7222e-6, wB: 0, xB: 0.014444,
  yB: 0.097497, zB: 3611e-6, "0B": 0, "1B": 0.014444, "2B": 0.010833, "3B": 0.010833, "4B": 7222e-6, "5B": 0.010833, "6B": 0.018055, Q: 0.10833,
  I: 0.014444, R: 0.021666, S: 0.03611, T: 7222e-6, U: 0.014444, V: 0.028888, W: 0.075831, X: 0.014444, Y: 0.010833, Z: 0.014444, a: 0.050554,
  b: 0.025277, c: 0.021666, d: 0.050554, e: 0.014444, f: 0.014444, g: 0.021666, h: 0.054165, i: 0.032499, j: 0.021666, k: 0.021666, l: 0.014444,
  m: 0.126385, n: 0.064998, o: 0.018055, p: 0.032499, q: 0.03611, r: 0.054165, s: 1.46607, t: 0.028888, u: 0.043332, AB: 0.148051, BB: 0.184161,
  CB: 0.176939, DB: 0.278047, EB: 0.769143, FB: 14.4007, D: 1.68273, HC: 0.018055, IC: 0, JC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "\
J", "GB", "K", "E", "F", "G", "A", "B", "C", "L", "M", "H", "N", "O", "P", "HB", "v", "w", "x", "y", "z", "0", "IB", "JB", "KB", "LB", "MB",
  "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "\
kB", "lB", "mB", "nB", "oB", "EC", "pB", "FC", "qB", "rB", "sB", "tB", "uB", "vB", "wB", "xB", "yB", "zB", "0B", "1B", "2B", "3B", "4B", "5B",
  "6B", "Q", "I", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p",
  "q", "r", "s", "t", "u", "1", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "D", "HC", "IC", "JC"], E: "Chro\
me", F: { 0: 1357862400, 1: 1680566400, 2: 1682985600, 3: 1685404800, 4: 1689724800, 5: 1692057600, 6: 1694476800, 7: 1696896e3, 8: 1698710400,
  9: 1701993600, J: 1264377600, GB: 1274745600, K: 1283385600, E: 1287619200, F: 1291248e3, G: 1296777600, A: 1299542400, B: 1303862400, C: 1307404800,
  L: 1312243200, M: 1316131200, H: 1316131200, N: 1319500800, O: 1323734400, P: 1328659200, HB: 1332892800, v: 133704e4, w: 1340668800, x: 1343692800,
  y: 1348531200, z: 1352246400, IB: 1361404800, JB: 1364428800, KB: 1369094400, LB: 1374105600, MB: 1376956800, NB: 1384214400, OB: 1389657600,
  PB: 1392940800, QB: 1397001600, RB: 1400544e3, SB: 1405468800, TB: 1409011200, UB: 141264e4, VB: 1416268800, WB: 1421798400, XB: 1425513600,
  YB: 1429401600, ZB: 143208e4, aB: 1437523200, bB: 1441152e3, cB: 1444780800, dB: 1449014400, eB: 1453248e3, fB: 1456963200, gB: 1460592e3,
  hB: 1464134400, iB: 1469059200, jB: 1472601600, kB: 1476230400, lB: 1480550400, mB: 1485302400, nB: 1489017600, oB: 149256e4, EC: 1496707200,
  pB: 1500940800, FC: 1504569600, qB: 1508198400, rB: 1512518400, sB: 1516752e3, tB: 1520294400, uB: 1523923200, vB: 1527552e3, wB: 1532390400,
  xB: 1536019200, yB: 1539648e3, zB: 1543968e3, "0B": 154872e4, "1B": 1552348800, "2B": 1555977600, "3B": 1559606400, "4B": 1564444800, "5B": 1568073600,
  "6B": 1571702400, Q: 1575936e3, I: 1580860800, R: 1586304e3, S: 1589846400, T: 1594684800, U: 1598313600, V: 1601942400, W: 1605571200, X: 1611014400,
  Y: 1614556800, Z: 1618272e3, a: 1621987200, b: 1626739200, c: 1630368e3, d: 1632268800, e: 1634601600, f: 1637020800, g: 1641340800, h: 1643673600,
  i: 1646092800, j: 1648512e3, k: 1650931200, l: 1653350400, m: 1655769600, n: 1659398400, o: 1661817600, p: 1664236800, q: 1666656e3, r: 166968e4,
  s: 1673308800, t: 1675728e3, u: 1678147200, AB: 1705968e3, BB: 1708387200, CB: 1710806400, DB: 1713225600, EB: 1715644800, FB: 1718064e3, D: 1721174400,
  HC: null, IC: null, JC: null } }, E: { A: { J: 0, GB: 0, K: 0, E: 0, F: 0, G: 3611e-6, A: 0, B: 0, C: 0, L: 7222e-6, M: 0.032499, H: 7222e-6,
  gC: 0, KC: 0, hC: 0, iC: 0, jC: 0, kC: 0, LC: 0, "7B": 7222e-6, "8B": 0.010833, lC: 0.061387, mC: 0.086664, nC: 0.025277, MC: 0.010833, NC: 0.021666,
  "9B": 0.032499, oC: 0.227493, AC: 0.028888, OC: 0.043332, PC: 0.03611, QC: 0.10833, RC: 0.025277, SC: 0.043332, pC: 0.299713, BC: 0.021666,
  TC: 0.043332, UC: 0.043332, VC: 0.050554, WC: 0.133607, XC: 1.76578, YC: 0.010833, CC: 0.010833, qC: 0 }, B: "webkit", C: ["", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "gC", "KC", "J", "GB", "hC", "K", "iC", "E", "jC", "F", "G", "kC", "A", "LC", "B",
  "7B", "C", "8B", "L", "lC", "M", "mC", "H", "nC", "MC", "NC", "9B", "oC", "AC", "OC", "PC", "QC", "RC", "SC", "pC", "BC", "TC", "UC", "VC",
  "WC", "XC", "YC", "CC", "qC"], E: "Safari", F: { gC: 1205798400, KC: 1226534400, J: 1244419200, GB: 1275868800, hC: 131112e4, K: 1343174400,
  iC: 13824e5, E: 13824e5, jC: 1410998400, F: 1413417600, G: 1443657600, kC: 1458518400, A: 1474329600, LC: 1490572800, B: 1505779200, "7B": 1522281600,
  C: 1537142400, "8B": 1553472e3, L: 1568851200, lC: 1585008e3, M: 1600214400, mC: 1619395200, H: 1632096e3, nC: 1635292800, MC: 1639353600,
  NC: 1647216e3, "9B": 1652745600, oC: 1658275200, AC: 1662940800, OC: 1666569600, PC: 1670889600, QC: 1674432e3, RC: 1679875200, SC: 1684368e3,
  pC: 1690156800, BC: 1695686400, TC: 1698192e3, UC: 1702252800, VC: 1705881600, WC: 1709596800, XC: 1715558400, YC: null, CC: null, qC: null } },
  F: { A: { 0: 0, G: 0, B: 0, C: 0, H: 0, N: 0, O: 0, P: 0, HB: 0, v: 0, w: 0, x: 0, y: 0, z: 0, IB: 0, JB: 0, KB: 0, LB: 0, MB: 0, NB: 0, OB: 0,
  PB: 0, QB: 0, RB: 0, SB: 3611e-6, TB: 0, UB: 0, VB: 0, WB: 3611e-6, XB: 0, YB: 0, ZB: 0, aB: 0, bB: 0, cB: 0.018055, dB: 0, eB: 0, fB: 0, gB: 0,
  hB: 0, iB: 0, jB: 0, kB: 0, lB: 0, mB: 0, nB: 0, oB: 0, pB: 0, qB: 0, rB: 0, sB: 0, tB: 0, uB: 0, vB: 0, wB: 0, xB: 0, yB: 0, zB: 0, "0B": 0,
  "1B": 0, "2B": 0, "3B": 0, "4B": 0, "5B": 0, "6B": 0, Q: 0, I: 0, R: 0, GC: 0, S: 0.028888, T: 0, U: 0, V: 0, W: 0, X: 0, Y: 0, Z: 0, a: 0,
  b: 0, c: 0, d: 0, e: 0.039721, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0.028888, m: 0, n: 0, o: 0, p: 0, q: 0, r: 0, s: 0.285269, t: 0.010833,
  u: 0.310546, rC: 0, sC: 0, tC: 0, uC: 0, "7B": 0, ZC: 0, vC: 0, "8B": 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "G", "rC", "sC", "tC", "uC", "B", "7B", "ZC", "vC", "C", "8B", "H", "N", "O", "P", "HB", "v", "\
w", "x", "y", "z", "0", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "b\
B", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "pB", "qB", "rB", "sB", "tB", "uB", "vB", "wB", "xB", "yB",
  "zB", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "Q", "I", "R", "GC", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f",
  "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "", "", ""], E: "Opera", F: { 0: 1413331200, G: 1150761600, rC: 1223424e3,
  sC: 1251763200, tC: 1267488e3, uC: 1277942400, B: 1292457600, "7B": 1302566400, ZC: 1309219200, vC: 1323129600, C: 1323129600, "8B": 1352073600,
  H: 1372723200, N: 1377561600, O: 1381104e3, P: 1386288e3, HB: 1390867200, v: 1393891200, w: 1399334400, x: 1401753600, y: 1405987200, z: 1409616e3,
  IB: 1417132800, JB: 1422316800, KB: 1425945600, LB: 1430179200, MB: 1433808e3, NB: 1438646400, OB: 1442448e3, PB: 1445904e3, QB: 1449100800,
  RB: 1454371200, SB: 1457308800, TB: 146232e4, UB: 1465344e3, VB: 1470096e3, WB: 1474329600, XB: 1477267200, YB: 1481587200, ZB: 1486425600,
  aB: 1490054400, bB: 1494374400, cB: 1498003200, dB: 1502236800, eB: 1506470400, fB: 1510099200, gB: 1515024e3, hB: 1517961600, iB: 1521676800,
  jB: 1525910400, kB: 1530144e3, lB: 1534982400, mB: 1537833600, nB: 1543363200, oB: 1548201600, pB: 1554768e3, qB: 1561593600, rB: 1566259200,
  sB: 1570406400, tB: 1573689600, uB: 1578441600, vB: 1583971200, wB: 1587513600, xB: 1592956800, yB: 1595894400, zB: 1600128e3, "0B": 1603238400,
  "1B": 161352e4, "2B": 1612224e3, "3B": 1616544e3, "4B": 1619568e3, "5B": 1623715200, "6B": 1627948800, Q: 1631577600, I: 1633392e3, R: 1635984e3,
  GC: 1638403200, S: 1642550400, T: 1644969600, U: 1647993600, V: 1650412800, W: 1652745600, X: 1654646400, Y: 1657152e3, Z: 1660780800, a: 1663113600,
  b: 1668816e3, c: 1668643200, d: 1671062400, e: 1675209600, f: 1677024e3, g: 1679529600, h: 1681948800, i: 1684195200, j: 1687219200, k: 1690329600,
  l: 1692748800, m: 1696204800, n: 169992e4, o: 169992e4, p: 1702944e3, q: 1707264e3, r: 1710115200, s: 1711497600, t: 1716336e3, u: 1719273600 },
  D: { G: "o", B: "o", C: "o", rC: "o", sC: "o", tC: "o", uC: "o", "7B": "o", ZC: "o", vC: "o", "8B": "o" } }, G: { A: { F: 0, KC: 0, wC: 0,
  aC: 441539e-8, xC: 14718e-7, yC: 883077e-8, zC: 883077e-8, "0C": 0, "1C": 735898e-8, "2C": 0.0294359, "3C": 588718e-8, "4C": 0.0515128, "5\
C": 0.135405, "6C": 0.014718, "7C": 0.0103026, "8C": 0.189862, "9C": 294359e-8, AD: 0.0323795, BD: 0.0103026, CD: 0.0441539, DD: 0.13099, ED: 0.1148,
  FD: 0.0574, MC: 0.0618154, NC: 0.0706462, "9B": 0.0853641, GD: 0.780051, AC: 0.15601, OC: 0.334098, PC: 0.166313, QC: 0.279641, RC: 0.0662308,
  SC: 0.117744, HD: 0.974328, BC: 0.0883077, TC: 0.142764, UC: 0.139821, VC: 0.207523, WC: 0.518072, XC: 9.49014, YC: 0.0735898, CC: 0.0971385 },
  B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "KC", "wC", "aC", "xC", "yC", "zC", "F", "0C",
  "1C", "2C", "3C", "4C", "5C", "6C", "7C", "8C", "9C", "AD", "BD", "CD", "DD", "ED", "FD", "MC", "NC", "9B", "GD", "AC", "OC", "PC", "QC", "\
RC", "SC", "HD", "BC", "TC", "UC", "VC", "WC", "XC", "YC", "CC", ""], E: "Safari on iOS", F: { KC: 1270252800, wC: 1283904e3, aC: 1299628800,
  xC: 1331078400, yC: 1359331200, zC: 1394409600, F: 1410912e3, "0C": 1413763200, "1C": 1442361600, "2C": 1458518400, "3C": 1473724800, "4C": 1490572800,
  "5C": 1505779200, "6C": 1522281600, "7C": 1537142400, "8C": 1553472e3, "9C": 1568851200, AD: 1572220800, BD: 1580169600, CD: 1585008e3, DD: 1600214400,
  ED: 1619395200, FD: 1632096e3, MC: 1639353600, NC: 1647216e3, "9B": 1652659200, GD: 1658275200, AC: 1662940800, OC: 1666569600, PC: 1670889600,
  QC: 1674432e3, RC: 1679875200, SC: 1684368e3, HD: 1690156800, BC: 1694995200, TC: 1698192e3, UC: 1702252800, VC: 1705881600, WC: 1709596800,
  XC: 1715558400, YC: null, CC: null } }, H: { A: { ID: 0.05 }, B: "o", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "ID", "", "", ""], E: "Opera Mini", F: { ID: 1426464e3 } }, I: { A: { DC: 0, J: 811276e-10, D: 0.808599, JD: 0, KD: 162255e-9,
  LD: 0, MD: 486766e-9, aC: 32451e-8, ND: 0, OD: 129804e-8 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "JD", "\
KD", "LD", "DC", "J", "MD", "aC", "ND", "OD", "D", "", "", ""], E: "Android Browser", F: { JD: 1256515200, KD: 1274313600, LD: 1291593600, DC: 1298332800,
  J: 1318896e3, MD: 1341792e3, aC: 1374624e3, ND: 1386547200, OD: 1401667200, D: 1721692800 } }, J: { A: { E: 0, A: 0 }, B: "webkit", C: ["",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "E", "A", "", "", ""], E: "Blackberry Browser", F: { E: 1325376e3,
  A: 1359504e3 } }, K: { A: { A: 0, B: 0, C: 0, I: 1.119, "7B": 0, ZC: 0, "8B": 0 }, B: "o", C: ["", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "A", "B", "7B", "ZC", "C", "8B", "I", "", "", ""], E: "Opera Mobile", F: { A: 1287100800, B: 1300752e3, "7B": 1314835200,
  ZC: 1318291200, C: 1330300800, "8B": 1349740800, I: 1709769600 }, D: { I: "webkit" } }, L: { A: { D: 44.0982 }, B: "webkit", C: ["", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "D", "", "", ""], E: "Chrome for Android", F: { D: 1721692800 } },
  M: { A: { D: 0.35134 }, B: "moz", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "D", "", "",
  ""], E: "Firefox for Android", F: { D: 1718064e3 } }, N: { A: { A: 0, B: 0 }, B: "ms", C: ["", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "A", "B", "", "", ""], E: "IE Mobile", F: { A: 1340150400, B: 1353456e3 } }, O: { A: { "9B": 1.05402 },
  B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "9B", "", "", ""], E: "UC Brow\
ser for Android", F: { "9B": 1710115200 }, D: { "9B": "webkit" } }, P: { A: { 0: 1.65553, J: 0.0973844, v: 0.021641, w: 0.043282, x: 0.0649229,
  y: 0.0757434, z: 0.0757434, PD: 0.0108205, QD: 0.0108205, RD: 0.0324615, SD: 0, TD: 0, LC: 0, UD: 0, VD: 0, WD: 0.0108205, XD: 0, YD: 0, AC: 0,
  BC: 0.021641, CC: 0.0108205, ZD: 0.021641 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "J", "PD", "QD", "RD", "SD", "TD", "LC", "UD", "VD", "WD", "XD", "YD",
  "AC", "BC", "CC", "ZD", "v", "w", "x", "y", "z", "0", "", "", ""], E: "Samsung Internet", F: { 0: 1715126400, J: 1461024e3, PD: 1481846400,
  QD: 1509408e3, RD: 1528329600, SD: 1546128e3, TD: 1554163200, LC: 1567900800, UD: 1582588800, VD: 1593475200, WD: 1605657600, XD: 1618531200,
  YD: 1629072e3, AC: 1640736e3, BC: 1651708800, CC: 1659657600, ZD: 1667260800, v: 1677369600, w: 1684454400, x: 1689292800, y: 1697587200, z: 1711497600 } },
  Q: { A: { aD: 0.338564 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "a\
D", "", "", ""], E: "QQ Browser", F: { aD: 1710288e3 } }, R: { A: { bD: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "bD", "", "", ""], E: "Baidu Browser", F: { bD: 1710201600 } }, S: { A: { cD: 0.070268, dD: 0 },
  B: "moz", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "cD", "dD", "", "", ""], E: "KaiOS Bro\
wser", F: { cD: 1527811200, dD: 1631664e3 } } };
});

// ../node_modules/caniuse-lite/dist/unpacker/agents.js
var A2 = T((Nwe, P2) => {
  "use strict";
  var xfe = xc().browsers, D0 = w0().browserVersions, x2 = T2();
  function S2(e) {
    return Object.keys(e).reduce((t, r) => (t[D0[r]] = e[r], t), {});
  }
  s(S2, "unpackBrowserVersions");
  P2.exports.agents = Object.keys(x2).reduce((e, t) => {
    let r = x2[t];
    return e[xfe[t]] = Object.keys(r).reduce((n, i) => (i === "A" ? n.usage_global = S2(r[i]) : i === "C" ? n.versions = r[i].reduce((a, o) => (o ===
    "" ? a.push(null) : a.push(D0[o]), a), []) : i === "D" ? n.prefix_exceptions = S2(r[i]) : i === "E" ? n.browser = r[i] : i === "F" ? n.release_date =
    Object.keys(r[i]).reduce(
      (a, o) => (a[D0[o]] = r[i][o], a),
      {}
    ) : n.prefix = r[i], n), {}), e;
  }, {});
});

// ../node_modules/node-releases/data/release-schedule/release-schedule.json
var C2 = T((kwe, Sfe) => {
  Sfe.exports = { "v0.8": { start: "2012-06-25", end: "2014-07-31" }, "v0.10": { start: "2013-03-11", end: "2016-10-31" }, "v0.12": { start: "\
2015-02-06", end: "2016-12-31" }, v4: { start: "2015-09-08", lts: "2015-10-12", maintenance: "2017-04-01", end: "2018-04-30", codename: "Arg\
on" }, v5: { start: "2015-10-29", maintenance: "2016-04-30", end: "2016-06-30" }, v6: { start: "2016-04-26", lts: "2016-10-18", maintenance: "\
2018-04-30", end: "2019-04-30", codename: "Boron" }, v7: { start: "2016-10-25", maintenance: "2017-04-30", end: "2017-06-30" }, v8: { start: "\
2017-05-30", lts: "2017-10-31", maintenance: "2019-01-01", end: "2019-12-31", codename: "Carbon" }, v9: { start: "2017-10-01", maintenance: "\
2018-04-01", end: "2018-06-30" }, v10: { start: "2018-04-24", lts: "2018-10-30", maintenance: "2020-05-19", end: "2021-04-30", codename: "Du\
bnium" }, v11: { start: "2018-10-23", maintenance: "2019-04-22", end: "2019-06-01" }, v12: { start: "2019-04-23", lts: "2019-10-21", maintenance: "\
2020-11-30", end: "2022-04-30", codename: "Erbium" }, v13: { start: "2019-10-22", maintenance: "2020-04-01", end: "2020-06-01" }, v14: { start: "\
2020-04-21", lts: "2020-10-27", maintenance: "2021-10-19", end: "2023-04-30", codename: "Fermium" }, v15: { start: "2020-10-20", maintenance: "\
2021-04-01", end: "2021-06-01" }, v16: { start: "2021-04-20", lts: "2021-10-26", maintenance: "2022-10-18", end: "2023-09-11", codename: "Ga\
llium" }, v17: { start: "2021-10-19", maintenance: "2022-04-01", end: "2022-06-01" }, v18: { start: "2022-04-19", lts: "2022-10-25", maintenance: "\
2023-10-18", end: "2025-04-30", codename: "Hydrogen" }, v19: { start: "2022-10-18", maintenance: "2023-04-01", end: "2023-06-01" }, v20: { start: "\
2023-04-18", lts: "2023-10-24", maintenance: "2024-10-22", end: "2026-04-30", codename: "Iron" }, v21: { start: "2023-10-17", maintenance: "\
2024-04-01", end: "2024-06-01" }, v22: { start: "2024-04-24", lts: "2024-10-29", maintenance: "2025-10-21", end: "2027-04-30", codename: "" },
  v23: { start: "2024-10-15", maintenance: "2025-04-01", end: "2025-06-01" }, v24: { start: "2025-04-22", lts: "2025-10-28", maintenance: "2\
026-10-20", end: "2028-04-30", codename: "" } };
});

// ../node_modules/electron-to-chromium/versions.js
var D2 = T((Fwe, w2) => {
  w2.exports = {
    "0.20": "39",
    "0.21": "41",
    "0.22": "41",
    "0.23": "41",
    "0.24": "41",
    "0.25": "42",
    "0.26": "42",
    "0.27": "43",
    "0.28": "43",
    "0.29": "43",
    "0.30": "44",
    "0.31": "45",
    "0.32": "45",
    "0.33": "45",
    "0.34": "45",
    "0.35": "45",
    "0.36": "47",
    "0.37": "49",
    "1.0": "49",
    "1.1": "50",
    "1.2": "51",
    "1.3": "52",
    "1.4": "53",
    "1.5": "54",
    "1.6": "56",
    "1.7": "58",
    "1.8": "59",
    "2.0": "61",
    "2.1": "61",
    "3.0": "66",
    "3.1": "66",
    "4.0": "69",
    "4.1": "69",
    "4.2": "69",
    "5.0": "73",
    "6.0": "76",
    "6.1": "76",
    "7.0": "78",
    "7.1": "78",
    "7.2": "78",
    "7.3": "78",
    "8.0": "80",
    "8.1": "80",
    "8.2": "80",
    "8.3": "80",
    "8.4": "80",
    "8.5": "80",
    "9.0": "83",
    "9.1": "83",
    "9.2": "83",
    "9.3": "83",
    "9.4": "83",
    "10.0": "85",
    "10.1": "85",
    "10.2": "85",
    "10.3": "85",
    "10.4": "85",
    "11.0": "87",
    "11.1": "87",
    "11.2": "87",
    "11.3": "87",
    "11.4": "87",
    "11.5": "87",
    "12.0": "89",
    "12.1": "89",
    "12.2": "89",
    "13.0": "91",
    "13.1": "91",
    "13.2": "91",
    "13.3": "91",
    "13.4": "91",
    "13.5": "91",
    "13.6": "91",
    "14.0": "93",
    "14.1": "93",
    "14.2": "93",
    "15.0": "94",
    "15.1": "94",
    "15.2": "94",
    "15.3": "94",
    "15.4": "94",
    "15.5": "94",
    "16.0": "96",
    "16.1": "96",
    "16.2": "96",
    "17.0": "98",
    "17.1": "98",
    "17.2": "98",
    "17.3": "98",
    "17.4": "98",
    "18.0": "100",
    "18.1": "100",
    "18.2": "100",
    "18.3": "100",
    "19.0": "102",
    "19.1": "102",
    "20.0": "104",
    "20.1": "104",
    "20.2": "104",
    "20.3": "104",
    "21.0": "106",
    "21.1": "106",
    "21.2": "106",
    "21.3": "106",
    "21.4": "106",
    "22.0": "108",
    "22.1": "108",
    "22.2": "108",
    "22.3": "108",
    "23.0": "110",
    "23.1": "110",
    "23.2": "110",
    "23.3": "110",
    "24.0": "112",
    "24.1": "112",
    "24.2": "112",
    "24.3": "112",
    "24.4": "112",
    "24.5": "112",
    "24.6": "112",
    "24.7": "112",
    "24.8": "112",
    "25.0": "114",
    "25.1": "114",
    "25.2": "114",
    "25.3": "114",
    "25.4": "114",
    "25.5": "114",
    "25.6": "114",
    "25.7": "114",
    "25.8": "114",
    "25.9": "114",
    "26.0": "116",
    "26.1": "116",
    "26.2": "116",
    "26.3": "116",
    "26.4": "116",
    "26.5": "116",
    "26.6": "116",
    "27.0": "118",
    "27.1": "118",
    "27.2": "118",
    "27.3": "118",
    "28.0": "120",
    "28.1": "120",
    "28.2": "120",
    "28.3": "120",
    "29.0": "122",
    "29.1": "122",
    "29.2": "122",
    "29.3": "122",
    "29.4": "122",
    "30.0": "124",
    "30.1": "124",
    "30.2": "124",
    "30.3": "124",
    "31.0": "126",
    "31.1": "126",
    "31.2": "126",
    "31.3": "126",
    "32.0": "128"
  };
});

// ../node_modules/browserslist/error.js
var _0 = T((jwe, I2) => {
  function I0(e) {
    this.name = "BrowserslistError", this.message = e, this.browserslist = !0, Error.captureStackTrace && Error.captureStackTrace(this, I0);
  }
  s(I0, "BrowserslistError");
  I0.prototype = Error.prototype;
  I2.exports = I0;
});

// ../node_modules/browserslist/parse.js
var k2 = T((Mwe, B2) => {
  var _2 = /^\s+and\s+(.*)/i, O2 = /^(?:,\s*|\s+or\s+)(.*)/i;
  function N2(e) {
    return Array.isArray(e) ? e.reduce(function(t, r) {
      return t.concat(N2(r));
    }, []) : [e];
  }
  s(N2, "flatten");
  function Pfe(e, t) {
    for (var r = 1, n = e.length; r <= n; r++) {
      var i = e.substr(-r, r);
      if (t(i, r, n))
        return e.slice(0, -r);
    }
    return "";
  }
  s(Pfe, "find");
  function O0(e, t) {
    var r = { query: t };
    t.indexOf("not ") === 0 && (r.not = !0, t = t.slice(4));
    for (var n in e) {
      var i = e[n], a = t.match(i.regexp);
      if (a) {
        r.type = n;
        for (var o = 0; o < i.matches.length; o++)
          r[i.matches[o]] = a[o + 1];
        return r;
      }
    }
    return r.type = "unknown", r;
  }
  s(O0, "matchQuery");
  function Afe(e, t, r) {
    var n;
    return Pfe(t, function(i, a, o) {
      return _2.test(i) ? (n = O0(e, i.match(_2)[1]), n.compose = "and", r.unshift(n), !0) : O2.test(i) ? (n = O0(e, i.match(O2)[1]), n.compose =
      "or", r.unshift(n), !0) : a === o ? (n = O0(e, i.trim()), n.compose = "or", r.unshift(n), !0) : !1;
    });
  }
  s(Afe, "matchBlock");
  B2.exports = /* @__PURE__ */ s(function(t, r) {
    return Array.isArray(r) || (r = [r]), N2(
      r.map(function(n) {
        var i = [];
        do
          n = Afe(t, n, i);
        while (n);
        return i;
      })
    );
  }, "parse");
});

// ../node_modules/caniuse-lite/dist/lib/statuses.js
var j2 = T((qwe, F2) => {
  F2.exports = {
    1: "ls",
    // WHATWG Living Standard
    2: "rec",
    // W3C Recommendation
    3: "pr",
    // W3C Proposed Recommendation
    4: "cr",
    // W3C Candidate Recommendation
    5: "wd",
    // W3C Working Draft
    6: "other",
    // Non-W3C, but reputable
    7: "unoff"
    // Unofficial, Editor's Draft or W3C "Note"
  };
});

// ../node_modules/caniuse-lite/dist/lib/supported.js
var M2 = T((Uwe, L2) => {
  L2.exports = {
    y: 1,
    n: 2,
    a: 4,
    p: 8,
    u: 16,
    x: 32,
    d: 64
  };
});

// ../node_modules/caniuse-lite/dist/unpacker/feature.js
var U2 = T((Vwe, N0) => {
  "use strict";
  var Cfe = j2(), R2 = M2(), wfe = xc().browsers, Dfe = w0().browserVersions, Ife = Math.log(2);
  function _fe(e) {
    let t = Object.keys(R2).reduce((i, a) => (e & R2[a] && i.push(a), i), []), r = e >> 7, n = [];
    for (; r; ) {
      let i = Math.floor(Math.log(r) / Ife) + 1;
      n.unshift(`#${i}`), r -= Math.pow(2, i - 1);
    }
    return t.concat(n).join(" ");
  }
  s(_fe, "unpackSupport");
  function q2(e) {
    let t = {
      status: Cfe[e.B],
      title: e.C,
      shown: e.D
    };
    return t.stats = Object.keys(e.A).reduce((r, n) => {
      let i = e.A[n];
      return r[wfe[n]] = Object.keys(i).reduce(
        (a, o) => {
          let l = i[o].split(" "), u = _fe(o);
          return l.forEach((c) => a[Dfe[c]] = u), a;
        },
        {}
      ), r;
    }, {}), t;
  }
  s(q2, "unpackFeature");
  N0.exports = q2;
  N0.exports.default = q2;
});

// ../node_modules/caniuse-lite/dist/unpacker/region.js
var $2 = T((Wwe, B0) => {
  "use strict";
  var Ofe = xc().browsers;
  function V2(e) {
    return Object.keys(e).reduce((t, r) => {
      let n = e[r];
      return t[Ofe[r]] = Object.keys(n).reduce((i, a) => {
        let o = n[a];
        return a === "_" ? o.split(" ").forEach((l) => i[l] = null) : i[a] = o, i;
      }, {}), t;
    }, {});
  }
  s(V2, "unpackRegion");
  B0.exports = V2;
  B0.exports.default = V2;
});

// ../node_modules/browserslist/node.js
var J2 = T((Gwe, si) => {
  var Nfe = U2().default, Bfe = $2().default, vr = require("path"), Xi = require("fs"), Yt = _0(), W2 = /^\s*\[(.+)]\s*$/, kfe = /^browserslist-config-/,
  Ffe = /@[^/]+(?:\/[^/]+)?\/browserslist-config(?:-|$|\/)/, jfe = 6 * 30 * 24 * 60 * 60 * 1e3, K2 = "Browserslist config should be a string\
 or an array of strings with browser queries", k0 = !1, Ac = {}, Sc = {};
  function G2(e) {
    var t = " Use `dangerousExtend` option to disable.";
    if (!kfe.test(e) && !Ffe.test(e))
      throw new Yt(
        "Browserslist config needs `browserslist-config-` prefix. " + t
      );
    if (e.replace(/^@[^/]+\//, "").indexOf(".") !== -1)
      throw new Yt(
        "`.` not allowed in Browserslist config name. " + t
      );
    if (e.indexOf("node_modules") !== -1)
      throw new Yt(
        "`node_modules` not allowed in Browserslist config." + t
      );
  }
  s(G2, "checkExtend");
  function yn(e) {
    if (e in Ac)
      return Ac[e];
    var t = Xi.existsSync(e) && Xi.statSync(e).isFile();
    return process.env.BROWSERSLIST_DISABLE_CACHE || (Ac[e] = t), t;
  }
  s(yn, "isFile");
  function H2(e, t) {
    var r = yn(e) ? vr.dirname(e) : e, n = vr.resolve(r);
    do {
      if (!Lfe(n)) break;
      var i = t(n);
      if (typeof i < "u") return i;
    } while (n !== (n = vr.dirname(n)));
  }
  s(H2, "eachParent");
  function Lfe(e) {
    if (!process.env.BROWSERSLIST_ROOT_PATH) return !0;
    var t = vr.resolve(process.env.BROWSERSLIST_ROOT_PATH);
    return vr.relative(t, e).substring(0, 2) !== "..";
  }
  s(Lfe, "pathInRoot");
  function Mfe(e) {
    if (Array.isArray(e)) {
      for (var t = 0; t < e.length; t++)
        if (typeof e[t] != "string")
          throw new Yt(K2);
    } else if (typeof e != "string")
      throw new Yt(K2);
  }
  s(Mfe, "check");
  function Pc(e, t) {
    if (typeof e != "object") return e;
    var r;
    if (typeof t.env == "string" ? r = t.env : process.env.BROWSERSLIST_ENV ? r = process.env.BROWSERSLIST_ENV : process.env.NODE_ENV ? r = process.
    env.NODE_ENV : r = "production", t.throwOnMissing && r && r !== "defaults" && !e[r])
      throw new Yt(
        "Missing config for Browserslist environment `" + r + "`"
      );
    return e[r] || e.defaults;
  }
  s(Pc, "pickEnv");
  function Y2(e) {
    var t = JSON.parse(
      Xi.readFileSync(e).toString().replace(/^\uFEFF/m, "")
    );
    if (t.browserlist && !t.browserslist)
      throw new Yt(
        "`browserlist` key instead of `browserslist` in " + e
      );
    var r = t.browserslist;
    (Array.isArray(r) || typeof r == "string") && (r = { defaults: r });
    for (var n in r)
      Mfe(r[n]);
    return r;
  }
  s(Y2, "parsePackage");
  function Rfe(e) {
    var t = 0;
    for (var r in e) {
      var n = e[r].releaseDate || {};
      for (var i in n)
        t < n[i] && (t = n[i]);
    }
    return t * 1e3;
  }
  s(Rfe, "latestReleaseTime");
  function z2(e, t) {
    if (e || (e = {}), t && "dataByBrowser" in t && (t = t.dataByBrowser), typeof t == "object") {
      var r = {};
      for (var n in t) {
        var i = Object.keys(t[n]);
        if (i.length === 1 && e[n] && e[n].versions.length === 1) {
          var a = e[n].versions[0];
          r[n] = {}, r[n][a] = t[n][i[0]];
        } else
          r[n] = t[n];
      }
      return r;
    }
  }
  s(z2, "normalizeStats");
  function qfe(e, t) {
    for (var r in e) {
      var n = e[r];
      if ("0" in n) {
        var i = t[r].versions;
        n[i[i.length - 1]] = n[0], delete n[0];
      }
    }
  }
  s(qfe, "normalizeUsageData");
  si.exports = {
    loadQueries: /* @__PURE__ */ s(function(t, r) {
      !t.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND && G2(r);
      var n = require(require.resolve(r, { paths: [".", t.path] }));
      if (n) {
        if (Array.isArray(n))
          return n;
        if (typeof n == "object")
          return n.defaults || (n.defaults = []), Pc(n, t, r);
      }
      throw new Yt(
        "`" + r + "` config exports not an array of queries or an object of envs"
      );
    }, "loadQueries"),
    loadStat: /* @__PURE__ */ s(function(t, r, n) {
      !t.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND && G2(r);
      var i = require(require.resolve(
        vr.join(r, "browserslist-stats.json"),
        { paths: ["."] }
      ));
      return z2(n, i);
    }, "loadStat"),
    getStat: /* @__PURE__ */ s(function(t, r) {
      var n;
      if (t.stats ? n = t.stats : process.env.BROWSERSLIST_STATS ? n = process.env.BROWSERSLIST_STATS : t.path && vr.resolve && Xi.existsSync &&
      (n = H2(t.path, function(i) {
        var a = vr.join(i, "browserslist-stats.json");
        return yn(a) ? a : void 0;
      })), typeof n == "string")
        try {
          n = JSON.parse(Xi.readFileSync(n));
        } catch {
          throw new Yt("Can't read " + n);
        }
      return z2(r, n);
    }, "getStat"),
    loadConfig: /* @__PURE__ */ s(function(t) {
      if (process.env.BROWSERSLIST)
        return process.env.BROWSERSLIST;
      if (t.config || process.env.BROWSERSLIST_CONFIG) {
        var r = t.config || process.env.BROWSERSLIST_CONFIG;
        return vr.basename(r) === "package.json" ? Pc(Y2(r), t) : Pc(si.exports.readConfig(r), t);
      } else return t.path ? Pc(si.exports.findConfig(t.path), t) : void 0;
    }, "loadConfig"),
    loadCountry: /* @__PURE__ */ s(function(t, r, n) {
      var i = r.replace(/[^\w-]/g, "");
      if (!t[i]) {
        var a;
        try {
          a = require("caniuse-lite/data/regions/" + i + ".js");
        } catch {
          throw new Yt("Unknown region name `" + i + "`.");
        }
        var o = Bfe(a);
        qfe(o, n), t[r] = {};
        for (var l in o)
          for (var u in o[l])
            t[r][l + " " + u] = o[l][u];
      }
    }, "loadCountry"),
    loadFeature: /* @__PURE__ */ s(function(t, r) {
      if (r = r.replace(/[^\w-]/g, ""), !t[r]) {
        var n;
        try {
          n = require("caniuse-lite/data/features/" + r + ".js");
        } catch {
          throw new Yt("Unknown feature name `" + r + "`.");
        }
        var i = Nfe(n).stats;
        t[r] = {};
        for (var a in i) {
          t[r][a] = {};
          for (var o in i[a])
            t[r][a][o] = i[a][o];
        }
      }
    }, "loadFeature"),
    parseConfig: /* @__PURE__ */ s(function(t) {
      var r = { defaults: [] }, n = ["defaults"];
      return t.toString().replace(/#[^\n]*/g, "").split(/\n|,/).map(function(i) {
        return i.trim();
      }).filter(function(i) {
        return i !== "";
      }).forEach(function(i) {
        W2.test(i) ? (n = i.match(W2)[1].trim().split(" "), n.forEach(function(a) {
          if (r[a])
            throw new Yt(
              "Duplicate section " + a + " in Browserslist config"
            );
          r[a] = [];
        })) : n.forEach(function(a) {
          r[a].push(i);
        });
      }), r;
    }, "parseConfig"),
    readConfig: /* @__PURE__ */ s(function(t) {
      if (!yn(t))
        throw new Yt("Can't read " + t + " config");
      return si.exports.parseConfig(Xi.readFileSync(t));
    }, "readConfig"),
    findConfig: /* @__PURE__ */ s(function(t) {
      t = vr.resolve(t);
      var r = [], n = H2(t, function(i) {
        if (i in Sc)
          return Sc[i];
        r.push(i);
        var a = vr.join(i, "browserslist"), o = vr.join(i, "package.json"), l = vr.join(i, ".browserslistrc"), u;
        if (yn(o))
          try {
            u = Y2(o);
          } catch (c) {
            if (c.name === "BrowserslistError") throw c;
            console.warn(
              "[Browserslist] Could not parse " + o + ". Ignoring it."
            );
          }
        if (yn(a) && u)
          throw new Yt(
            i + " contains both browserslist and package.json with browsers"
          );
        if (yn(l) && u)
          throw new Yt(
            i + " contains both .browserslistrc and package.json with browsers"
          );
        if (yn(a) && yn(l))
          throw new Yt(
            i + " contains both .browserslistrc and browserslist"
          );
        return yn(a) ? si.exports.readConfig(a) : yn(l) ? si.exports.readConfig(l) : u;
      });
      return process.env.BROWSERSLIST_DISABLE_CACHE || r.forEach(function(i) {
        Sc[i] = n;
      }), n;
    }, "findConfig"),
    clearCaches: /* @__PURE__ */ s(function() {
      k0 = !1, Ac = {}, Sc = {}, this.cache = {};
    }, "clearCaches"),
    oldDataWarning: /* @__PURE__ */ s(function(t) {
      if (!k0 && (k0 = !0, !process.env.BROWSERSLIST_IGNORE_OLD_DATA)) {
        var r = Rfe(t), n = Date.now() - jfe;
        r !== 0 && r < n && console.warn(
          `Browserslist: caniuse-lite is outdated. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme`
        );
      }
    }, "oldDataWarning"),
    currentNode: /* @__PURE__ */ s(function() {
      return "node " + process.versions.node;
    }, "currentNode"),
    env: process.env
  };
});

// ../node_modules/browserslist/index.js
var hw = T((Ywe, dw) => {
  var Ufe = d2(), Rn = A2().agents, F0 = C2(), Oc = require("path"), Jr = D2(), mr = _0(), iw = k2(), zt = J2(), Vfe = 365.259641 * 24 * 60 *
  60 * 1e3, aw = "37", $fe = 14;
  function ow(e, t) {
    return (e + ".").indexOf(t + ".") === 0;
  }
  s(ow, "isVersionsMatch");
  function Wfe(e) {
    var t = e.slice(1);
    return Ee.nodeVersions.some(function(r) {
      return ow(r, t);
    });
  }
  s(Wfe, "isEolReleased");
  function X2(e) {
    return e.filter(function(t) {
      return typeof t == "string";
    });
  }
  s(X2, "normalize");
  function Cc(e) {
    var t = e;
    return e.split(".").length === 3 && (t = e.split(".").slice(0, -1).join(".")), t;
  }
  s(Cc, "normalizeElectron");
  function gs(e) {
    return /* @__PURE__ */ s(function(r) {
      return e + " " + r;
    }, "mapName");
  }
  s(gs, "nameMapper");
  function R0(e) {
    return parseInt(e.split(".")[0]);
  }
  s(R0, "getMajor");
  function wc(e, t) {
    if (e.length === 0) return [];
    var r = lw(e.map(R0)), n = r[r.length - t];
    if (!n)
      return e;
    for (var i = [], a = e.length - 1; a >= 0 && !(n > R0(e[a])); a--)
      i.unshift(e[a]);
    return i;
  }
  s(wc, "getMajorVersions");
  function lw(e) {
    for (var t = [], r = 0; r < e.length; r++)
      t.indexOf(e[r]) === -1 && t.push(e[r]);
    return t;
  }
  s(lw, "uniq");
  function Nc(e, t, r) {
    for (var n in r)
      e[t + " " + n] = r[n];
  }
  s(Nc, "fillUsage");
  function Q2(e, t) {
    if (t = parseFloat(t), e === ">")
      return function(n) {
        return r(n) > t;
      };
    return e === ">=" ? function(n) {
      return r(n) >= t;
    } : e === "<" ? function(n) {
      return parseFloat(n) < t;
    } : function(n) {
      return parseFloat(n) <= t;
    };
    function r(n) {
      return parseFloat(n.split("-")[1] || n);
    }
  }
  s(Q2, "generateFilter");
  function Kfe(e, t) {
    return t = t.split(".").map(bs), t[1] = t[1] || 0, t[2] = t[2] || 0, e === ">" ? function(r) {
      return r = r.split(".").map(bs), _o(r, t) > 0;
    } : e === ">=" ? function(r) {
      return r = r.split(".").map(bs), _o(r, t) >= 0;
    } : e === "<" ? function(r) {
      return r = r.split(".").map(bs), _o(t, r) > 0;
    } : function(r) {
      return r = r.split(".").map(bs), _o(t, r) >= 0;
    };
  }
  s(Kfe, "generateSemverFilter");
  function bs(e) {
    return parseInt(e);
  }
  s(bs, "parseSimpleInt");
  function _c(e, t) {
    return e < t ? -1 : e > t ? 1 : 0;
  }
  s(_c, "compare");
  function _o(e, t) {
    return _c(parseInt(e[0]), parseInt(t[0])) || _c(parseInt(e[1] || "0"), parseInt(t[1] || "0")) || _c(parseInt(e[2] || "0"), parseInt(t[2] ||
    "0"));
  }
  s(_o, "compareSemver");
  function Z2(e, t) {
    switch (t = t.split(".").map(bs), typeof t[1] > "u" && (t[1] = "x"), e) {
      case "<=":
        return function(r) {
          return r = r.split(".").map(bs), ew(r, t) <= 0;
        };
      case ">=":
      default:
        return function(r) {
          return r = r.split(".").map(bs), ew(r, t) >= 0;
        };
    }
  }
  s(Z2, "semverFilterLoose");
  function ew(e, t) {
    return e[0] !== t[0] ? e[0] < t[0] ? -1 : 1 : t[1] === "x" ? 0 : e[1] !== t[1] ? e[1] < t[1] ? -1 : 1 : 0;
  }
  s(ew, "compareSemverLoose");
  function Gfe(e, t) {
    return e.versions.indexOf(t) !== -1 ? t : Ee.versionAliases[e.name][t] ? Ee.versionAliases[e.name][t] : !1;
  }
  s(Gfe, "resolveVersion");
  function Dc(e, t) {
    var r = Gfe(e, t);
    return r || (e.versions.length === 1 ? e.versions[0] : !1);
  }
  s(Dc, "normalizeVersion");
  function uw(e, t) {
    return e = e / 1e3, Object.keys(Rn).reduce(function(r, n) {
      var i = Es(n, t);
      if (!i) return r;
      var a = Object.keys(i.releaseDate).filter(function(o) {
        var l = i.releaseDate[o];
        return l !== null && l >= e;
      });
      return r.concat(a.map(gs(i.name)));
    }, []);
  }
  s(uw, "filterByYear");
  function tw(e) {
    return {
      name: e.name,
      versions: e.versions,
      released: e.released,
      releaseDate: e.releaseDate
    };
  }
  s(tw, "cloneData");
  function Es(e, t) {
    if (e = e.toLowerCase(), e = Ee.aliases[e] || e, t.mobileToDesktop && Ee.desktopNames[e]) {
      var r = Ee.data[Ee.desktopNames[e]];
      if (e === "android")
        return Yfe(tw(Ee.data[e]), r);
      var n = tw(r);
      return n.name = e, n;
    }
    return Ee.data[e];
  }
  s(Es, "byName");
  function rw(e, t) {
    var r = t.indexOf(aw);
    return e.filter(function(n) {
      return /^(?:[2-4]\.|[34]$)/.test(n);
    }).concat(t.slice(r));
  }
  s(rw, "normalizeAndroidVersions");
  function Hfe(e) {
    var t = {};
    for (var r in e)
      t[r] = e[r];
    return t;
  }
  s(Hfe, "copyObject");
  function Yfe(e, t) {
    return e.released = rw(e.released, t.released), e.versions = rw(e.versions, t.versions), e.releaseDate = Hfe(e.releaseDate), e.released.
    forEach(function(r) {
      e.releaseDate[r] === void 0 && (e.releaseDate[r] = t.releaseDate[r]);
    }), e;
  }
  s(Yfe, "normalizeAndroidData");
  function Qi(e, t) {
    var r = Es(e, t);
    if (!r) throw new mr("Unknown browser " + e);
    return r;
  }
  s(Qi, "checkName");
  function zfe(e) {
    return new mr(
      "Unknown browser query `" + e + "`. Maybe you are using old Browserslist or made typo in query."
    );
  }
  s(zfe, "unknownQuery");
  function Ic(e, t, r, n) {
    var i = 1;
    switch (t) {
      case "android":
        if (n.mobileToDesktop) return e;
        var a = Ee.data.chrome.released;
        i = a.length - a.indexOf(aw);
        break;
      case "op_mob":
        var o = Ee.data.op_mob.released.slice(-1)[0];
        i = R0(o) - $fe + 1;
        break;
      default:
        return e;
    }
    return r <= i ? e.slice(-1) : e.slice(i - 1 - r);
  }
  s(Ic, "filterJumps");
  function nw(e, t) {
    return typeof e == "string" && (e.indexOf("y") >= 0 || t && e.indexOf("a") >= 0);
  }
  s(nw, "isSupported");
  function Zi(e, t) {
    return iw(q0, e).reduce(function(r, n, i) {
      if (n.not && i === 0)
        throw new mr(
          "Write any browsers query (for instance, `defaults`) before `" + n.query + "`"
        );
      var a = q0[n.type], o = a.select.call(Ee, t, n).map(function(u) {
        var c = u.split(" ");
        return c[1] === "0" ? c[0] + " " + Es(c[0], t).versions[0] : u;
      });
      if (n.compose === "and")
        return n.not ? r.filter(function(u) {
          return o.indexOf(u) === -1;
        }) : r.filter(function(u) {
          return o.indexOf(u) !== -1;
        });
      if (n.not) {
        var l = {};
        return o.forEach(function(u) {
          l[u] = !0;
        }), r.filter(function(u) {
          return !l[u];
        });
      }
      return r.concat(o);
    }, []);
  }
  s(Zi, "resolve");
  function cw(e) {
    return typeof e > "u" && (e = {}), typeof e.path > "u" && (e.path = Oc.resolve ? Oc.resolve(".") : "."), e;
  }
  s(cw, "prepareOpts");
  function fw(e, t) {
    if (typeof e > "u" || e === null) {
      var r = Ee.loadConfig(t);
      r ? e = r : e = Ee.defaults;
    }
    return e;
  }
  s(fw, "prepareQueries");
  function pw(e) {
    if (!(typeof e == "string" || Array.isArray(e)))
      throw new mr(
        "Browser queries must be an array or string. Got " + typeof e + "."
      );
  }
  s(pw, "checkQueries");
  var j0 = {};
  function Ee(e, t) {
    t = cw(t), e = fw(e, t), pw(e);
    var r = {
      ignoreUnknownVersions: t.ignoreUnknownVersions,
      dangerousExtend: t.dangerousExtend,
      mobileToDesktop: t.mobileToDesktop,
      path: t.path,
      env: t.env
    };
    zt.oldDataWarning(Ee.data);
    var n = zt.getStat(t, Ee.data);
    if (n) {
      r.customUsage = {};
      for (var i in n)
        Nc(r.customUsage, i, n[i]);
    }
    var a = JSON.stringify([e, r]);
    if (j0[a]) return j0[a];
    var o = lw(Zi(e, r)).sort(function(l, u) {
      if (l = l.split(" "), u = u.split(" "), l[0] === u[0]) {
        var c = l[1].split("-")[0], f = u[1].split("-")[0];
        return _o(f.split("."), c.split("."));
      } else
        return _c(l[0], u[0]);
    });
    return zt.env.BROWSERSLIST_DISABLE_CACHE || (j0[a] = o), o;
  }
  s(Ee, "browserslist");
  Ee.parse = function(e, t) {
    return t = cw(t), e = fw(e, t), pw(e), iw(q0, e);
  };
  Ee.cache = {};
  Ee.data = {};
  Ee.usage = {
    global: {},
    custom: null
  };
  Ee.defaults = ["> 0.5%", "last 2 versions", "Firefox ESR", "not dead"];
  Ee.aliases = {
    fx: "firefox",
    ff: "firefox",
    ios: "ios_saf",
    explorer: "ie",
    blackberry: "bb",
    explorermobile: "ie_mob",
    operamini: "op_mini",
    operamobile: "op_mob",
    chromeandroid: "and_chr",
    firefoxandroid: "and_ff",
    ucandroid: "and_uc",
    qqandroid: "and_qq"
  };
  Ee.desktopNames = {
    and_chr: "chrome",
    and_ff: "firefox",
    ie_mob: "ie",
    android: "chrome"
    // has extra processing logic
  };
  Ee.versionAliases = {};
  Ee.clearCaches = zt.clearCaches;
  Ee.parseConfig = zt.parseConfig;
  Ee.readConfig = zt.readConfig;
  Ee.findConfig = zt.findConfig;
  Ee.loadConfig = zt.loadConfig;
  Ee.coverage = function(e, t) {
    var r;
    if (typeof t > "u")
      r = Ee.usage.global;
    else if (t === "my stats") {
      var n = {};
      n.path = Oc.resolve ? Oc.resolve(".") : ".";
      var i = zt.getStat(n);
      if (!i)
        throw new mr("Custom usage statistics was not provided");
      r = {};
      for (var a in i)
        Nc(r, a, i[a]);
    } else if (typeof t == "string")
      t.length > 2 ? t = t.toLowerCase() : t = t.toUpperCase(), zt.loadCountry(Ee.usage, t, Ee.data), r = Ee.usage[t];
    else {
      "dataByBrowser" in t && (t = t.dataByBrowser), r = {};
      for (var o in t)
        for (var l in t[o])
          r[o + " " + l] = t[o][l];
    }
    return e.reduce(function(u, c) {
      var f = r[c];
      return f === void 0 && (f = r[c.replace(/ \S+$/, " 0")]), u + (f || 0);
    }, 0);
  };
  function L0(e, t) {
    var r = Ee.nodeVersions.filter(function(n) {
      return ow(n, t.version);
    });
    if (r.length === 0) {
      if (e.ignoreUnknownVersions)
        return [];
      throw new mr(
        "Unknown version " + t.version + " of Node.js"
      );
    }
    return ["node " + r[r.length - 1]];
  }
  s(L0, "nodeQuery");
  function M0(e, t) {
    var r = parseInt(t.year), n = parseInt(t.month || "01") - 1, i = parseInt(t.day || "01");
    return uw(Date.UTC(r, n, i, 0, 0, 0), e);
  }
  s(M0, "sinceQuery");
  function sw(e, t) {
    var r = parseFloat(t.coverage), n = Ee.usage.global;
    if (t.place)
      if (t.place.match(/^my\s+stats$/i)) {
        if (!e.customUsage)
          throw new mr("Custom usage statistics was not provided");
        n = e.customUsage;
      } else {
        var i;
        t.place.length === 2 ? i = t.place.toUpperCase() : i = t.place.toLowerCase(), zt.loadCountry(Ee.usage, i, Ee.data), n = Ee.usage[i];
      }
    for (var a = Object.keys(n).sort(function(f, p) {
      return n[p] - n[f];
    }), o = 0, l = [], u, c = 0; c < a.length && (u = a[c], !(n[u] === 0 || (o += n[u], l.push(u), o >= r))); c++)
      ;
    return l;
  }
  s(sw, "coverQuery");
  var q0 = {
    last_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        return Object.keys(Rn).reduce(function(r, n) {
          var i = Es(n, e);
          if (!i) return r;
          var a = wc(i.released, t.versions);
          return a = a.map(gs(i.name)), a = Ic(a, i.name, t.versions, e), r.concat(a);
        }, []);
      }, "select")
    },
    last_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+versions?$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        return Object.keys(Rn).reduce(function(r, n) {
          var i = Es(n, e);
          if (!i) return r;
          var a = i.released.slice(-t.versions);
          return a = a.map(gs(i.name)), a = Ic(a, i.name, t.versions, e), r.concat(a);
        }, []);
      }, "select")
    },
    last_electron_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = wc(Object.keys(Jr), t.versions);
        return r.map(function(n) {
          return "chrome " + Jr[n];
        });
      }, "select")
    },
    last_node_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        return wc(Ee.nodeVersions, t.versions).map(
          function(r) {
            return "node " + r;
          }
        );
      }, "select")
    },
    last_browser_major_versions: {
      matches: ["versions", "browser"],
      regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = Qi(t.browser, e), n = wc(r.released, t.versions), i = n.map(gs(r.name));
        return i = Ic(i, r.name, t.versions, e), i;
      }, "select")
    },
    last_electron_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        return Object.keys(Jr).slice(-t.versions).map(function(r) {
          return "chrome " + Jr[r];
        });
      }, "select")
    },
    last_node_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        return Ee.nodeVersions.slice(-t.versions).map(function(r) {
          return "node " + r;
        });
      }, "select")
    },
    last_browser_versions: {
      matches: ["versions", "browser"],
      regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = Qi(t.browser, e), n = r.released.slice(-t.versions).map(gs(r.name));
        return n = Ic(n, r.name, t.versions, e), n;
      }, "select")
    },
    unreleased_versions: {
      matches: [],
      regexp: /^unreleased\s+versions$/i,
      select: /* @__PURE__ */ s(function(e) {
        return Object.keys(Rn).reduce(function(t, r) {
          var n = Es(r, e);
          if (!n) return t;
          var i = n.versions.filter(function(a) {
            return n.released.indexOf(a) === -1;
          });
          return i = i.map(gs(n.name)), t.concat(i);
        }, []);
      }, "select")
    },
    unreleased_electron_versions: {
      matches: [],
      regexp: /^unreleased\s+electron\s+versions?$/i,
      select: /* @__PURE__ */ s(function() {
        return [];
      }, "select")
    },
    unreleased_browser_versions: {
      matches: ["browser"],
      regexp: /^unreleased\s+(\w+)\s+versions?$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = Qi(t.browser, e);
        return r.versions.filter(function(n) {
          return r.released.indexOf(n) === -1;
        }).map(gs(r.name));
      }, "select")
    },
    last_years: {
      matches: ["years"],
      regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        return uw(Date.now() - Vfe * t.years, e);
      }, "select")
    },
    since_y: {
      matches: ["year"],
      regexp: /^since (\d+)$/i,
      select: M0
    },
    since_y_m: {
      matches: ["year", "month"],
      regexp: /^since (\d+)-(\d+)$/i,
      select: M0
    },
    since_y_m_d: {
      matches: ["year", "month", "day"],
      regexp: /^since (\d+)-(\d+)-(\d+)$/i,
      select: M0
    },
    popularity: {
      matches: ["sign", "popularity"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = parseFloat(t.popularity), n = Ee.usage.global;
        return Object.keys(n).reduce(function(i, a) {
          return t.sign === ">" ? n[a] > r && i.push(a) : t.sign === "<" ? n[a] < r && i.push(a) : t.sign === "<=" ? n[a] <= r && i.push(a) :
          n[a] >= r && i.push(a), i;
        }, []);
      }, "select")
    },
    popularity_in_my_stats: {
      matches: ["sign", "popularity"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = parseFloat(t.popularity);
        if (!e.customUsage)
          throw new mr("Custom usage statistics was not provided");
        var n = e.customUsage;
        return Object.keys(n).reduce(function(i, a) {
          var o = n[a];
          return o == null || (t.sign === ">" ? o > r && i.push(a) : t.sign === "<" ? o < r && i.push(a) : t.sign === "<=" ? o <= r && i.push(
          a) : o >= r && i.push(a)), i;
        }, []);
      }, "select")
    },
    popularity_in_config_stats: {
      matches: ["sign", "popularity", "config"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = parseFloat(t.popularity), n = zt.loadStat(e, t.config, Ee.data);
        if (n) {
          e.customUsage = {};
          for (var i in n)
            Nc(e.customUsage, i, n[i]);
        }
        if (!e.customUsage)
          throw new mr("Custom usage statistics was not provided");
        var a = e.customUsage;
        return Object.keys(a).reduce(function(o, l) {
          var u = a[l];
          return u == null || (t.sign === ">" ? u > r && o.push(l) : t.sign === "<" ? u < r && o.push(l) : t.sign === "<=" ? u <= r && o.push(
          l) : u >= r && o.push(l)), o;
        }, []);
      }, "select")
    },
    popularity_in_place: {
      matches: ["sign", "popularity", "place"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = parseFloat(t.popularity), n = t.place;
        n.length === 2 ? n = n.toUpperCase() : n = n.toLowerCase(), zt.loadCountry(Ee.usage, n, Ee.data);
        var i = Ee.usage[n];
        return Object.keys(i).reduce(function(a, o) {
          var l = i[o];
          return l == null || (t.sign === ">" ? l > r && a.push(o) : t.sign === "<" ? l < r && a.push(o) : t.sign === "<=" ? l <= r && a.push(
          o) : l >= r && a.push(o)), a;
        }, []);
      }, "select")
    },
    cover: {
      matches: ["coverage"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
      select: sw
    },
    cover_in: {
      matches: ["coverage", "place"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
      select: sw
    },
    supports: {
      matches: ["supportType", "feature"],
      regexp: /^(?:(fully|partially)\s+)?supports\s+([\w-]+)$/,
      select: /* @__PURE__ */ s(function(e, t) {
        zt.loadFeature(Ee.cache, t.feature);
        var r = t.supportType !== "fully", n = Ee.cache[t.feature], i = [];
        for (var a in n) {
          for (var o = Es(a, e), l = o.released.length - 1; l >= 0 && !(o.released[l] in n[a]); )
            l--;
          var u = e.mobileToDesktop && a in Ee.desktopNames && nw(n[a][o.released[l]], r);
          o.versions.forEach(function(c) {
            var f = n[a][c];
            f === void 0 && u && (f = n[Ee.desktopNames[a]][c]), nw(f, r) && i.push(a + " " + c);
          });
        }
        return i;
      }, "select")
    },
    electron_range: {
      matches: ["from", "to"],
      regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = Cc(t.from), n = Cc(t.to), i = parseFloat(t.from), a = parseFloat(t.to);
        if (!Jr[r])
          throw new mr("Unknown version " + i + " of electron");
        if (!Jr[n])
          throw new mr("Unknown version " + a + " of electron");
        return Object.keys(Jr).filter(function(o) {
          var l = parseFloat(o);
          return l >= i && l <= a;
        }).map(function(o) {
          return "chrome " + Jr[o];
        });
      }, "select")
    },
    node_range: {
      matches: ["from", "to"],
      regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        return Ee.nodeVersions.filter(Z2(">=", t.from)).filter(Z2("<=", t.to)).map(function(r) {
          return "node " + r;
        });
      }, "select")
    },
    browser_range: {
      matches: ["browser", "from", "to"],
      regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = Qi(t.browser, e), n = parseFloat(Dc(r, t.from) || t.from), i = parseFloat(Dc(r, t.to) || t.to);
        function a(o) {
          var l = parseFloat(o);
          return l >= n && l <= i;
        }
        return s(a, "filter"), r.released.filter(a).map(gs(r.name));
      }, "select")
    },
    electron_ray: {
      matches: ["sign", "version"],
      regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = Cc(t.version);
        return Object.keys(Jr).filter(Q2(t.sign, r)).map(function(n) {
          return "chrome " + Jr[n];
        });
      }, "select")
    },
    node_ray: {
      matches: ["sign", "version"],
      regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        return Ee.nodeVersions.filter(Kfe(t.sign, t.version)).map(function(r) {
          return "node " + r;
        });
      }, "select")
    },
    browser_ray: {
      matches: ["browser", "sign", "version"],
      regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = t.version, n = Qi(t.browser, e), i = Ee.versionAliases[n.name][r];
        return i && (r = i), n.released.filter(Q2(t.sign, r)).map(function(a) {
          return n.name + " " + a;
        });
      }, "select")
    },
    firefox_esr: {
      matches: [],
      regexp: /^(firefox|ff|fx)\s+esr$/i,
      select: /* @__PURE__ */ s(function() {
        return ["firefox 115", "firefox 128"];
      }, "select")
    },
    opera_mini_all: {
      matches: [],
      regexp: /(operamini|op_mini)\s+all/i,
      select: /* @__PURE__ */ s(function() {
        return ["op_mini all"];
      }, "select")
    },
    electron_version: {
      matches: ["version"],
      regexp: /^electron\s+([\d.]+)$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = Cc(t.version), n = Jr[r];
        if (!n)
          throw new mr(
            "Unknown version " + t.version + " of electron"
          );
        return ["chrome " + n];
      }, "select")
    },
    node_major_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+)$/i,
      select: L0
    },
    node_minor_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+\.\d+)$/i,
      select: L0
    },
    node_patch_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
      select: L0
    },
    current_node: {
      matches: [],
      regexp: /^current\s+node$/i,
      select: /* @__PURE__ */ s(function(e) {
        return [zt.currentNode(Zi, e)];
      }, "select")
    },
    maintained_node: {
      matches: [],
      regexp: /^maintained\s+node\s+versions$/i,
      select: /* @__PURE__ */ s(function(e) {
        var t = Date.now(), r = Object.keys(F0).filter(function(n) {
          return t < Date.parse(F0[n].end) && t > Date.parse(F0[n].start) && Wfe(n);
        }).map(function(n) {
          return "node " + n.slice(1);
        });
        return Zi(r, e);
      }, "select")
    },
    phantomjs_1_9: {
      matches: [],
      regexp: /^phantomjs\s+1.9$/i,
      select: /* @__PURE__ */ s(function() {
        return ["safari 5"];
      }, "select")
    },
    phantomjs_2_1: {
      matches: [],
      regexp: /^phantomjs\s+2.1$/i,
      select: /* @__PURE__ */ s(function() {
        return ["safari 6"];
      }, "select")
    },
    browser_version: {
      matches: ["browser", "version"],
      regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        var r = t.version;
        /^tp$/i.test(r) && (r = "TP");
        var n = Qi(t.browser, e), i = Dc(n, r);
        if (i)
          r = i;
        else if (r.indexOf(".") === -1 ? i = r + ".0" : i = r.replace(/\.0$/, ""), i = Dc(n, i), i)
          r = i;
        else {
          if (e.ignoreUnknownVersions)
            return [];
          throw new mr(
            "Unknown version " + r + " of " + t.browser
          );
        }
        return [n.name + " " + r];
      }, "select")
    },
    browserslist_config: {
      matches: [],
      regexp: /^browserslist config$/i,
      select: /* @__PURE__ */ s(function(e) {
        return Ee(void 0, e);
      }, "select")
    },
    extends: {
      matches: ["config"],
      regexp: /^extends (.+)$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        return Zi(zt.loadQueries(e, t.config), e);
      }, "select")
    },
    defaults: {
      matches: [],
      regexp: /^defaults$/i,
      select: /* @__PURE__ */ s(function(e) {
        return Zi(Ee.defaults, e);
      }, "select")
    },
    dead: {
      matches: [],
      regexp: /^dead$/i,
      select: /* @__PURE__ */ s(function(e) {
        var t = [
          "Baidu >= 0",
          "ie <= 11",
          "ie_mob <= 11",
          "bb <= 10",
          "op_mob <= 12.1",
          "samsung 4"
        ];
        return Zi(t, e);
      }, "select")
    },
    unknown: {
      matches: [],
      regexp: /^(\w+)$/i,
      select: /* @__PURE__ */ s(function(e, t) {
        throw Es(t.query, e) ? new mr(
          "Specify versions in Browserslist query for browser " + t.query
        ) : zfe(t.query);
      }, "select")
    }
  };
  (function() {
    for (var e in Rn) {
      var t = Rn[e];
      Ee.data[e] = {
        name: e,
        versions: X2(Rn[e].versions),
        released: X2(Rn[e].versions.slice(0, -3)),
        releaseDate: Rn[e].release_date
      }, Nc(Ee.usage.global, e, t.usage_global), Ee.versionAliases[e] = {};
      for (var r = 0; r < t.versions.length; r++) {
        var n = t.versions[r];
        if (n && n.indexOf("-") !== -1)
          for (var i = n.split("-"), a = 0; a < i.length; a++)
            Ee.versionAliases[e][i[a]] = n;
      }
    }
    Ee.nodeVersions = Ufe.map(function(o) {
      return o.version;
    });
  })();
  dw.exports = Ee;
});

// ../node_modules/@babel/helper-validator-option/lib/find-suggestion.js
var V0 = T((U0) => {
  "use strict";
  Object.defineProperty(U0, "__esModule", {
    value: !0
  });
  U0.findSuggestion = Xfe;
  var {
    min: mw
  } = Math;
  function Jfe(e, t) {
    let r = [], n = [], i, a, o = e.length, l = t.length;
    if (!o)
      return l;
    if (!l)
      return o;
    for (a = 0; a <= l; a++)
      r[a] = a;
    for (i = 1; i <= o; i++) {
      for (n = [i], a = 1; a <= l; a++)
        n[a] = e[i - 1] === t[a - 1] ? r[a - 1] : mw(r[a - 1], r[a], n[a - 1]) + 1;
      r = n;
    }
    return n[l];
  }
  s(Jfe, "levenshtein");
  function Xfe(e, t) {
    let r = t.map((n) => Jfe(n, e));
    return t[r.indexOf(mw(...r))];
  }
  s(Xfe, "findSuggestion");
});

// ../node_modules/@babel/helper-validator-option/lib/validator.js
var yw = T((Bc) => {
  "use strict";
  Object.defineProperty(Bc, "__esModule", {
    value: !0
  });
  Bc.OptionValidator = void 0;
  var Qfe = V0(), $0 = class {
    static {
      s(this, "OptionValidator");
    }
    constructor(t) {
      this.descriptor = t;
    }
    validateTopLevelOptions(t, r) {
      let n = Object.keys(r);
      for (let i of Object.keys(t))
        if (!n.includes(i))
          throw new Error(this.formatMessage(`'${i}' is not a valid top-level option.
- Did you mean '${(0, Qfe.findSuggestion)(i, n)}'?`));
    }
    validateBooleanOption(t, r, n) {
      return r === void 0 ? n : (this.invariant(typeof r == "boolean", `'${t}' option must be a boolean.`), r);
    }
    validateStringOption(t, r, n) {
      return r === void 0 ? n : (this.invariant(typeof r == "string", `'${t}' option must be a string.`), r);
    }
    invariant(t, r) {
      if (!t)
        throw new Error(this.formatMessage(r));
    }
    formatMessage(t) {
      return `${this.descriptor}: ${t}`;
    }
  };
  Bc.OptionValidator = $0;
});

// ../node_modules/@babel/helper-validator-option/lib/index.js
var Fc = T((kc) => {
  "use strict";
  Object.defineProperty(kc, "__esModule", {
    value: !0
  });
  Object.defineProperty(kc, "OptionValidator", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Zfe.OptionValidator;
    }, "get")
  });
  Object.defineProperty(kc, "findSuggestion", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return epe.findSuggestion;
    }, "get")
  });
  var Zfe = yw(), epe = V0();
});

// ../node_modules/@babel/compat-data/data/native-modules.json
var gw = T((rDe, tpe) => {
  tpe.exports = {
    "es6.module": {
      chrome: "61",
      and_chr: "61",
      edge: "16",
      firefox: "60",
      and_ff: "60",
      node: "13.2.0",
      opera: "48",
      op_mob: "45",
      safari: "10.1",
      ios: "10.3",
      samsung: "8.2",
      android: "61",
      electron: "2.0",
      ios_saf: "10.3"
    }
  };
});

// ../node_modules/@babel/compat-data/native-modules.js
var Ew = T((nDe, bw) => {
  bw.exports = gw();
});

// ../node_modules/@babel/helper-compilation-targets/node_modules/yallist/iterator.js
var Tw = T((sDe, vw) => {
  "use strict";
  vw.exports = function(e) {
    e.prototype[Symbol.iterator] = function* () {
      for (let t = this.head; t; t = t.next)
        yield t.value;
    };
  };
});

// ../node_modules/@babel/helper-compilation-targets/node_modules/yallist/yallist.js
var Sw = T((iDe, xw) => {
  "use strict";
  xw.exports = nt;
  nt.Node = ii;
  nt.create = nt;
  function nt(e) {
    var t = this;
    if (t instanceof nt || (t = new nt()), t.tail = null, t.head = null, t.length = 0, e && typeof e.forEach == "function")
      e.forEach(function(i) {
        t.push(i);
      });
    else if (arguments.length > 0)
      for (var r = 0, n = arguments.length; r < n; r++)
        t.push(arguments[r]);
    return t;
  }
  s(nt, "Yallist");
  nt.prototype.removeNode = function(e) {
    if (e.list !== this)
      throw new Error("removing node which does not belong to this list");
    var t = e.next, r = e.prev;
    return t && (t.prev = r), r && (r.next = t), e === this.head && (this.head = t), e === this.tail && (this.tail = r), e.list.length--, e.
    next = null, e.prev = null, e.list = null, t;
  };
  nt.prototype.unshiftNode = function(e) {
    if (e !== this.head) {
      e.list && e.list.removeNode(e);
      var t = this.head;
      e.list = this, e.next = t, t && (t.prev = e), this.head = e, this.tail || (this.tail = e), this.length++;
    }
  };
  nt.prototype.pushNode = function(e) {
    if (e !== this.tail) {
      e.list && e.list.removeNode(e);
      var t = this.tail;
      e.list = this, e.prev = t, t && (t.next = e), this.tail = e, this.head || (this.head = e), this.length++;
    }
  };
  nt.prototype.push = function() {
    for (var e = 0, t = arguments.length; e < t; e++)
      npe(this, arguments[e]);
    return this.length;
  };
  nt.prototype.unshift = function() {
    for (var e = 0, t = arguments.length; e < t; e++)
      spe(this, arguments[e]);
    return this.length;
  };
  nt.prototype.pop = function() {
    if (this.tail) {
      var e = this.tail.value;
      return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, e;
    }
  };
  nt.prototype.shift = function() {
    if (this.head) {
      var e = this.head.value;
      return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, e;
    }
  };
  nt.prototype.forEach = function(e, t) {
    t = t || this;
    for (var r = this.head, n = 0; r !== null; n++)
      e.call(t, r.value, n, this), r = r.next;
  };
  nt.prototype.forEachReverse = function(e, t) {
    t = t || this;
    for (var r = this.tail, n = this.length - 1; r !== null; n--)
      e.call(t, r.value, n, this), r = r.prev;
  };
  nt.prototype.get = function(e) {
    for (var t = 0, r = this.head; r !== null && t < e; t++)
      r = r.next;
    if (t === e && r !== null)
      return r.value;
  };
  nt.prototype.getReverse = function(e) {
    for (var t = 0, r = this.tail; r !== null && t < e; t++)
      r = r.prev;
    if (t === e && r !== null)
      return r.value;
  };
  nt.prototype.map = function(e, t) {
    t = t || this;
    for (var r = new nt(), n = this.head; n !== null; )
      r.push(e.call(t, n.value, this)), n = n.next;
    return r;
  };
  nt.prototype.mapReverse = function(e, t) {
    t = t || this;
    for (var r = new nt(), n = this.tail; n !== null; )
      r.push(e.call(t, n.value, this)), n = n.prev;
    return r;
  };
  nt.prototype.reduce = function(e, t) {
    var r, n = this.head;
    if (arguments.length > 1)
      r = t;
    else if (this.head)
      n = this.head.next, r = this.head.value;
    else
      throw new TypeError("Reduce of empty list with no initial value");
    for (var i = 0; n !== null; i++)
      r = e(r, n.value, i), n = n.next;
    return r;
  };
  nt.prototype.reduceReverse = function(e, t) {
    var r, n = this.tail;
    if (arguments.length > 1)
      r = t;
    else if (this.tail)
      n = this.tail.prev, r = this.tail.value;
    else
      throw new TypeError("Reduce of empty list with no initial value");
    for (var i = this.length - 1; n !== null; i--)
      r = e(r, n.value, i), n = n.prev;
    return r;
  };
  nt.prototype.toArray = function() {
    for (var e = new Array(this.length), t = 0, r = this.head; r !== null; t++)
      e[t] = r.value, r = r.next;
    return e;
  };
  nt.prototype.toArrayReverse = function() {
    for (var e = new Array(this.length), t = 0, r = this.tail; r !== null; t++)
      e[t] = r.value, r = r.prev;
    return e;
  };
  nt.prototype.slice = function(e, t) {
    t = t || this.length, t < 0 && (t += this.length), e = e || 0, e < 0 && (e += this.length);
    var r = new nt();
    if (t < e || t < 0)
      return r;
    e < 0 && (e = 0), t > this.length && (t = this.length);
    for (var n = 0, i = this.head; i !== null && n < e; n++)
      i = i.next;
    for (; i !== null && n < t; n++, i = i.next)
      r.push(i.value);
    return r;
  };
  nt.prototype.sliceReverse = function(e, t) {
    t = t || this.length, t < 0 && (t += this.length), e = e || 0, e < 0 && (e += this.length);
    var r = new nt();
    if (t < e || t < 0)
      return r;
    e < 0 && (e = 0), t > this.length && (t = this.length);
    for (var n = this.length, i = this.tail; i !== null && n > t; n--)
      i = i.prev;
    for (; i !== null && n > e; n--, i = i.prev)
      r.push(i.value);
    return r;
  };
  nt.prototype.splice = function(e, t) {
    e > this.length && (e = this.length - 1), e < 0 && (e = this.length + e);
    for (var r = 0, n = this.head; n !== null && r < e; r++)
      n = n.next;
    for (var i = [], r = 0; n && r < t; r++)
      i.push(n.value), n = this.removeNode(n);
    n === null && (n = this.tail), n !== this.head && n !== this.tail && (n = n.prev);
    for (var r = 2; r < arguments.length; r++)
      n = rpe(this, n, arguments[r]);
    return i;
  };
  nt.prototype.reverse = function() {
    for (var e = this.head, t = this.tail, r = e; r !== null; r = r.prev) {
      var n = r.prev;
      r.prev = r.next, r.next = n;
    }
    return this.head = t, this.tail = e, this;
  };
  function rpe(e, t, r) {
    var n = t === e.head ? new ii(r, null, t, e) : new ii(r, t, t.next, e);
    return n.next === null && (e.tail = n), n.prev === null && (e.head = n), e.length++, n;
  }
  s(rpe, "insert");
  function npe(e, t) {
    e.tail = new ii(t, e.tail, null, e), e.head || (e.head = e.tail), e.length++;
  }
  s(npe, "push");
  function spe(e, t) {
    e.head = new ii(t, null, e.head, e), e.tail || (e.tail = e.head), e.length++;
  }
  s(spe, "unshift");
  function ii(e, t, r, n) {
    if (!(this instanceof ii))
      return new ii(e, t, r, n);
    this.list = n, this.value = e, t ? (t.next = this, this.prev = t) : this.prev = null, r ? (r.prev = this, this.next = r) : this.next = null;
  }
  s(ii, "Node");
  try {
    Tw()(nt);
  } catch {
  }
});

// ../node_modules/@babel/helper-compilation-targets/node_modules/lru-cache/index.js
var Dw = T((oDe, ww) => {
  "use strict";
  var ipe = Sw(), ai = Symbol("max"), Un = Symbol("length"), ea = Symbol("lengthCalculator"), No = Symbol("allowStale"), oi = Symbol("maxAge"),
  qn = Symbol("dispose"), Pw = Symbol("noDisposeOnSet"), Rt = Symbol("lruList"), Xr = Symbol("cache"), Cw = Symbol("updateAgeOnGet"), W0 = /* @__PURE__ */ s(
  () => 1, "naiveLength"), G0 = class {
    static {
      s(this, "LRUCache");
    }
    constructor(t) {
      if (typeof t == "number" && (t = { max: t }), t || (t = {}), t.max && (typeof t.max != "number" || t.max < 0))
        throw new TypeError("max must be a non-negative number");
      let r = this[ai] = t.max || 1 / 0, n = t.length || W0;
      if (this[ea] = typeof n != "function" ? W0 : n, this[No] = t.stale || !1, t.maxAge && typeof t.maxAge != "number")
        throw new TypeError("maxAge must be a number");
      this[oi] = t.maxAge || 0, this[qn] = t.dispose, this[Pw] = t.noDisposeOnSet || !1, this[Cw] = t.updateAgeOnGet || !1, this.reset();
    }
    // resize the cache when the max changes.
    set max(t) {
      if (typeof t != "number" || t < 0)
        throw new TypeError("max must be a non-negative number");
      this[ai] = t || 1 / 0, Oo(this);
    }
    get max() {
      return this[ai];
    }
    set allowStale(t) {
      this[No] = !!t;
    }
    get allowStale() {
      return this[No];
    }
    set maxAge(t) {
      if (typeof t != "number")
        throw new TypeError("maxAge must be a non-negative number");
      this[oi] = t, Oo(this);
    }
    get maxAge() {
      return this[oi];
    }
    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(t) {
      typeof t != "function" && (t = W0), t !== this[ea] && (this[ea] = t, this[Un] = 0, this[Rt].forEach((r) => {
        r.length = this[ea](r.value, r.key), this[Un] += r.length;
      })), Oo(this);
    }
    get lengthCalculator() {
      return this[ea];
    }
    get length() {
      return this[Un];
    }
    get itemCount() {
      return this[Rt].length;
    }
    rforEach(t, r) {
      r = r || this;
      for (let n = this[Rt].tail; n !== null; ) {
        let i = n.prev;
        Aw(this, t, n, r), n = i;
      }
    }
    forEach(t, r) {
      r = r || this;
      for (let n = this[Rt].head; n !== null; ) {
        let i = n.next;
        Aw(this, t, n, r), n = i;
      }
    }
    keys() {
      return this[Rt].toArray().map((t) => t.key);
    }
    values() {
      return this[Rt].toArray().map((t) => t.value);
    }
    reset() {
      this[qn] && this[Rt] && this[Rt].length && this[Rt].forEach((t) => this[qn](t.key, t.value)), this[Xr] = /* @__PURE__ */ new Map(), this[Rt] =
      new ipe(), this[Un] = 0;
    }
    dump() {
      return this[Rt].map((t) => jc(this, t) ? !1 : {
        k: t.key,
        v: t.value,
        e: t.now + (t.maxAge || 0)
      }).toArray().filter((t) => t);
    }
    dumpLru() {
      return this[Rt];
    }
    set(t, r, n) {
      if (n = n || this[oi], n && typeof n != "number")
        throw new TypeError("maxAge must be a number");
      let i = n ? Date.now() : 0, a = this[ea](r, t);
      if (this[Xr].has(t)) {
        if (a > this[ai])
          return ta(this, this[Xr].get(t)), !1;
        let u = this[Xr].get(t).value;
        return this[qn] && (this[Pw] || this[qn](t, u.value)), u.now = i, u.maxAge = n, u.value = r, this[Un] += a - u.length, u.length = a,
        this.get(t), Oo(this), !0;
      }
      let o = new H0(t, r, a, i, n);
      return o.length > this[ai] ? (this[qn] && this[qn](t, r), !1) : (this[Un] += o.length, this[Rt].unshift(o), this[Xr].set(t, this[Rt].head),
      Oo(this), !0);
    }
    has(t) {
      if (!this[Xr].has(t)) return !1;
      let r = this[Xr].get(t).value;
      return !jc(this, r);
    }
    get(t) {
      return K0(this, t, !0);
    }
    peek(t) {
      return K0(this, t, !1);
    }
    pop() {
      let t = this[Rt].tail;
      return t ? (ta(this, t), t.value) : null;
    }
    del(t) {
      ta(this, this[Xr].get(t));
    }
    load(t) {
      this.reset();
      let r = Date.now();
      for (let n = t.length - 1; n >= 0; n--) {
        let i = t[n], a = i.e || 0;
        if (a === 0)
          this.set(i.k, i.v);
        else {
          let o = a - r;
          o > 0 && this.set(i.k, i.v, o);
        }
      }
    }
    prune() {
      this[Xr].forEach((t, r) => K0(this, r, !1));
    }
  }, K0 = /* @__PURE__ */ s((e, t, r) => {
    let n = e[Xr].get(t);
    if (n) {
      let i = n.value;
      if (jc(e, i)) {
        if (ta(e, n), !e[No])
          return;
      } else
        r && (e[Cw] && (n.value.now = Date.now()), e[Rt].unshiftNode(n));
      return i.value;
    }
  }, "get"), jc = /* @__PURE__ */ s((e, t) => {
    if (!t || !t.maxAge && !e[oi])
      return !1;
    let r = Date.now() - t.now;
    return t.maxAge ? r > t.maxAge : e[oi] && r > e[oi];
  }, "isStale"), Oo = /* @__PURE__ */ s((e) => {
    if (e[Un] > e[ai])
      for (let t = e[Rt].tail; e[Un] > e[ai] && t !== null; ) {
        let r = t.prev;
        ta(e, t), t = r;
      }
  }, "trim"), ta = /* @__PURE__ */ s((e, t) => {
    if (t) {
      let r = t.value;
      e[qn] && e[qn](r.key, r.value), e[Un] -= r.length, e[Xr].delete(r.key), e[Rt].removeNode(t);
    }
  }, "del"), H0 = class {
    static {
      s(this, "Entry");
    }
    constructor(t, r, n, i, a) {
      this.key = t, this.value = r, this.length = n, this.now = i, this.maxAge = a || 0;
    }
  }, Aw = /* @__PURE__ */ s((e, t, r, n) => {
    let i = r.value;
    jc(e, i) && (ta(e, r), e[No] || (i = void 0)), i && t.call(n, i.value, i.key, e);
  }, "forEachStep");
  ww.exports = G0;
});

// ../node_modules/@babel/helper-compilation-targets/lib/targets.js
var Lc = T((ra) => {
  "use strict";
  Object.defineProperty(ra, "__esModule", {
    value: !0
  });
  ra.unreleasedLabels = ra.browserNameMap = void 0;
  var uDe = ra.unreleasedLabels = {
    safari: "tp"
  }, cDe = ra.browserNameMap = {
    and_chr: "chrome",
    and_ff: "firefox",
    android: "android",
    chrome: "chrome",
    edge: "edge",
    firefox: "firefox",
    ie: "ie",
    ie_mob: "ie",
    ios_saf: "ios",
    node: "node",
    deno: "deno",
    op_mob: "opera_mobile",
    opera: "opera",
    safari: "safari",
    samsung: "samsung"
  };
});

// ../node_modules/@babel/helper-compilation-targets/lib/utils.js
var Mc = T((vs) => {
  "use strict";
  Object.defineProperty(vs, "__esModule", {
    value: !0
  });
  vs.getHighestUnreleased = fpe;
  vs.getLowestImplementedVersion = ppe;
  vs.getLowestUnreleased = Nw;
  vs.isUnreleasedVersion = cpe;
  vs.semverMin = Ow;
  vs.semverify = upe;
  var Iw = require("semver"), ape = Fc(), _w = Lc(), ope = /^(?:\d+|\d(?:\d?[^\d\n\r\u2028\u2029]\d+|\d{2,}(?:[^\d\n\r\u2028\u2029]\d+)?))$/,
  lpe = new ape.OptionValidator("@babel/helper-compilation-targets");
  function Ow(e, t) {
    return e && Iw.lt(e, t) ? e : t;
  }
  s(Ow, "semverMin");
  function upe(e) {
    if (typeof e == "string" && Iw.valid(e))
      return e;
    lpe.invariant(typeof e == "number" || typeof e == "string" && ope.test(e), `'${e}' is not a valid version`), e = e.toString();
    let t = 0, r = 0;
    for (; (t = e.indexOf(".", t + 1)) > 0; )
      r++;
    return e + ".0".repeat(2 - r);
  }
  s(upe, "semverify");
  function cpe(e, t) {
    let r = _w.unreleasedLabels[t];
    return !!r && r === e.toString().toLowerCase();
  }
  s(cpe, "isUnreleasedVersion");
  function Nw(e, t, r) {
    let n = _w.unreleasedLabels[r];
    return e === n ? t : t === n ? e : Ow(e, t);
  }
  s(Nw, "getLowestUnreleased");
  function fpe(e, t, r) {
    return Nw(e, t, r) === e ? t : e;
  }
  s(fpe, "getHighestUnreleased");
  function ppe(e, t) {
    let r = e[t];
    return !r && t === "android" ? e.chrome : r;
  }
  s(ppe, "getLowestImplementedVersion");
});

// ../node_modules/@babel/helper-compilation-targets/lib/options.js
var Bw = T((Rc) => {
  "use strict";
  Object.defineProperty(Rc, "__esModule", {
    value: !0
  });
  Rc.TargetNames = void 0;
  var hDe = Rc.TargetNames = {
    node: "node",
    deno: "deno",
    chrome: "chrome",
    opera: "opera",
    edge: "edge",
    firefox: "firefox",
    safari: "safari",
    ie: "ie",
    ios: "ios",
    android: "android",
    electron: "electron",
    samsung: "samsung",
    rhino: "rhino",
    opera_mobile: "opera_mobile"
  };
});

// ../node_modules/@babel/helper-compilation-targets/lib/pretty.js
var Y0 = T((qc) => {
  "use strict";
  Object.defineProperty(qc, "__esModule", {
    value: !0
  });
  qc.prettifyTargets = mpe;
  qc.prettifyVersion = kw;
  var dpe = require("semver"), hpe = Lc();
  function kw(e) {
    if (typeof e != "string")
      return e;
    let {
      major: t,
      minor: r,
      patch: n
    } = dpe.parse(e), i = [t];
    return (r || n) && i.push(r), n && i.push(n), i.join(".");
  }
  s(kw, "prettifyVersion");
  function mpe(e) {
    return Object.keys(e).reduce((t, r) => {
      let n = e[r], i = hpe.unreleasedLabels[r];
      return typeof n == "string" && i !== n && (n = kw(n)), t[r] = n, t;
    }, {});
  }
  s(mpe, "prettifyTargets");
});

// ../node_modules/@babel/helper-compilation-targets/lib/debug.js
var jw = T((z0) => {
  "use strict";
  Object.defineProperty(z0, "__esModule", {
    value: !0
  });
  z0.getInclusionReasons = gpe;
  var ype = require("semver"), Fw = Y0(), Uc = Mc();
  function gpe(e, t, r) {
    let n = r[e] || {};
    return Object.keys(t).reduce((i, a) => {
      let o = (0, Uc.getLowestImplementedVersion)(n, a), l = t[a];
      if (!o)
        i[a] = (0, Fw.prettifyVersion)(l);
      else {
        let u = (0, Uc.isUnreleasedVersion)(o, a);
        !(0, Uc.isUnreleasedVersion)(l, a) && (u || ype.lt(l.toString(), (0, Uc.semverify)(o))) && (i[a] = (0, Fw.prettifyVersion)(l));
      }
      return i;
    }, {});
  }
  s(gpe, "getInclusionReasons");
});

// ../node_modules/@babel/compat-data/data/plugins.json
var Lw = T((vDe, bpe) => {
  bpe.exports = {
    "transform-duplicate-named-capturing-groups-regex": {
      chrome: "126",
      edge: "126",
      firefox: "129",
      safari: "17.4",
      electron: "31.0"
    },
    "transform-unicode-sets-regex": {
      chrome: "112",
      opera: "98",
      edge: "112",
      firefox: "116",
      safari: "17",
      node: "20",
      deno: "1.32",
      ios: "17",
      opera_mobile: "75",
      electron: "24.0"
    },
    "bugfix/transform-v8-static-class-fields-redefine-readonly": {
      chrome: "98",
      opera: "84",
      edge: "98",
      firefox: "95",
      safari: "15",
      node: "12",
      deno: "1.18",
      ios: "15",
      samsung: "11",
      opera_mobile: "52",
      electron: "17.0"
    },
    "bugfix/transform-firefox-class-in-computed-class-key": {
      chrome: "74",
      opera: "62",
      edge: "79",
      safari: "16",
      node: "12",
      deno: "1",
      ios: "16",
      samsung: "11",
      opera_mobile: "53",
      electron: "6.0"
    },
    "bugfix/transform-safari-class-field-initializer-scope": {
      chrome: "74",
      opera: "62",
      edge: "79",
      firefox: "69",
      safari: "16",
      node: "12",
      deno: "1",
      ios: "16",
      samsung: "11",
      opera_mobile: "53",
      electron: "6.0"
    },
    "transform-class-static-block": {
      chrome: "94",
      opera: "80",
      edge: "94",
      firefox: "93",
      safari: "16.4",
      node: "16.11",
      deno: "1.14",
      ios: "16.4",
      samsung: "17",
      opera_mobile: "66",
      electron: "15.0"
    },
    "proposal-class-static-block": {
      chrome: "94",
      opera: "80",
      edge: "94",
      firefox: "93",
      safari: "16.4",
      node: "16.11",
      deno: "1.14",
      ios: "16.4",
      samsung: "17",
      opera_mobile: "66",
      electron: "15.0"
    },
    "transform-private-property-in-object": {
      chrome: "91",
      opera: "77",
      edge: "91",
      firefox: "90",
      safari: "15",
      node: "16.9",
      deno: "1.9",
      ios: "15",
      samsung: "16",
      opera_mobile: "64",
      electron: "13.0"
    },
    "proposal-private-property-in-object": {
      chrome: "91",
      opera: "77",
      edge: "91",
      firefox: "90",
      safari: "15",
      node: "16.9",
      deno: "1.9",
      ios: "15",
      samsung: "16",
      opera_mobile: "64",
      electron: "13.0"
    },
    "transform-class-properties": {
      chrome: "74",
      opera: "62",
      edge: "79",
      firefox: "90",
      safari: "14.1",
      node: "12",
      deno: "1",
      ios: "14.5",
      samsung: "11",
      opera_mobile: "53",
      electron: "6.0"
    },
    "proposal-class-properties": {
      chrome: "74",
      opera: "62",
      edge: "79",
      firefox: "90",
      safari: "14.1",
      node: "12",
      deno: "1",
      ios: "14.5",
      samsung: "11",
      opera_mobile: "53",
      electron: "6.0"
    },
    "transform-private-methods": {
      chrome: "84",
      opera: "70",
      edge: "84",
      firefox: "90",
      safari: "15",
      node: "14.6",
      deno: "1",
      ios: "15",
      samsung: "14",
      opera_mobile: "60",
      electron: "10.0"
    },
    "proposal-private-methods": {
      chrome: "84",
      opera: "70",
      edge: "84",
      firefox: "90",
      safari: "15",
      node: "14.6",
      deno: "1",
      ios: "15",
      samsung: "14",
      opera_mobile: "60",
      electron: "10.0"
    },
    "transform-numeric-separator": {
      chrome: "75",
      opera: "62",
      edge: "79",
      firefox: "70",
      safari: "13",
      node: "12.5",
      deno: "1",
      ios: "13",
      samsung: "11",
      rhino: "1.7.14",
      opera_mobile: "54",
      electron: "6.0"
    },
    "proposal-numeric-separator": {
      chrome: "75",
      opera: "62",
      edge: "79",
      firefox: "70",
      safari: "13",
      node: "12.5",
      deno: "1",
      ios: "13",
      samsung: "11",
      rhino: "1.7.14",
      opera_mobile: "54",
      electron: "6.0"
    },
    "transform-logical-assignment-operators": {
      chrome: "85",
      opera: "71",
      edge: "85",
      firefox: "79",
      safari: "14",
      node: "15",
      deno: "1.2",
      ios: "14",
      samsung: "14",
      opera_mobile: "60",
      electron: "10.0"
    },
    "proposal-logical-assignment-operators": {
      chrome: "85",
      opera: "71",
      edge: "85",
      firefox: "79",
      safari: "14",
      node: "15",
      deno: "1.2",
      ios: "14",
      samsung: "14",
      opera_mobile: "60",
      electron: "10.0"
    },
    "transform-nullish-coalescing-operator": {
      chrome: "80",
      opera: "67",
      edge: "80",
      firefox: "72",
      safari: "13.1",
      node: "14",
      deno: "1",
      ios: "13.4",
      samsung: "13",
      opera_mobile: "57",
      electron: "8.0"
    },
    "proposal-nullish-coalescing-operator": {
      chrome: "80",
      opera: "67",
      edge: "80",
      firefox: "72",
      safari: "13.1",
      node: "14",
      deno: "1",
      ios: "13.4",
      samsung: "13",
      opera_mobile: "57",
      electron: "8.0"
    },
    "transform-optional-chaining": {
      chrome: "91",
      opera: "77",
      edge: "91",
      firefox: "74",
      safari: "13.1",
      node: "16.9",
      deno: "1.9",
      ios: "13.4",
      samsung: "16",
      opera_mobile: "64",
      electron: "13.0"
    },
    "proposal-optional-chaining": {
      chrome: "91",
      opera: "77",
      edge: "91",
      firefox: "74",
      safari: "13.1",
      node: "16.9",
      deno: "1.9",
      ios: "13.4",
      samsung: "16",
      opera_mobile: "64",
      electron: "13.0"
    },
    "transform-json-strings": {
      chrome: "66",
      opera: "53",
      edge: "79",
      firefox: "62",
      safari: "12",
      node: "10",
      deno: "1",
      ios: "12",
      samsung: "9",
      rhino: "1.7.14",
      opera_mobile: "47",
      electron: "3.0"
    },
    "proposal-json-strings": {
      chrome: "66",
      opera: "53",
      edge: "79",
      firefox: "62",
      safari: "12",
      node: "10",
      deno: "1",
      ios: "12",
      samsung: "9",
      rhino: "1.7.14",
      opera_mobile: "47",
      electron: "3.0"
    },
    "transform-optional-catch-binding": {
      chrome: "66",
      opera: "53",
      edge: "79",
      firefox: "58",
      safari: "11.1",
      node: "10",
      deno: "1",
      ios: "11.3",
      samsung: "9",
      opera_mobile: "47",
      electron: "3.0"
    },
    "proposal-optional-catch-binding": {
      chrome: "66",
      opera: "53",
      edge: "79",
      firefox: "58",
      safari: "11.1",
      node: "10",
      deno: "1",
      ios: "11.3",
      samsung: "9",
      opera_mobile: "47",
      electron: "3.0"
    },
    "transform-parameters": {
      chrome: "49",
      opera: "36",
      edge: "18",
      firefox: "53",
      safari: "16.3",
      node: "6",
      deno: "1",
      ios: "16.3",
      samsung: "5",
      opera_mobile: "36",
      electron: "0.37"
    },
    "transform-async-generator-functions": {
      chrome: "63",
      opera: "50",
      edge: "79",
      firefox: "57",
      safari: "12",
      node: "10",
      deno: "1",
      ios: "12",
      samsung: "8",
      opera_mobile: "46",
      electron: "3.0"
    },
    "proposal-async-generator-functions": {
      chrome: "63",
      opera: "50",
      edge: "79",
      firefox: "57",
      safari: "12",
      node: "10",
      deno: "1",
      ios: "12",
      samsung: "8",
      opera_mobile: "46",
      electron: "3.0"
    },
    "transform-object-rest-spread": {
      chrome: "60",
      opera: "47",
      edge: "79",
      firefox: "55",
      safari: "11.1",
      node: "8.3",
      deno: "1",
      ios: "11.3",
      samsung: "8",
      opera_mobile: "44",
      electron: "2.0"
    },
    "proposal-object-rest-spread": {
      chrome: "60",
      opera: "47",
      edge: "79",
      firefox: "55",
      safari: "11.1",
      node: "8.3",
      deno: "1",
      ios: "11.3",
      samsung: "8",
      opera_mobile: "44",
      electron: "2.0"
    },
    "transform-dotall-regex": {
      chrome: "62",
      opera: "49",
      edge: "79",
      firefox: "78",
      safari: "11.1",
      node: "8.10",
      deno: "1",
      ios: "11.3",
      samsung: "8",
      rhino: "1.7.15",
      opera_mobile: "46",
      electron: "3.0"
    },
    "transform-unicode-property-regex": {
      chrome: "64",
      opera: "51",
      edge: "79",
      firefox: "78",
      safari: "11.1",
      node: "10",
      deno: "1",
      ios: "11.3",
      samsung: "9",
      opera_mobile: "47",
      electron: "3.0"
    },
    "proposal-unicode-property-regex": {
      chrome: "64",
      opera: "51",
      edge: "79",
      firefox: "78",
      safari: "11.1",
      node: "10",
      deno: "1",
      ios: "11.3",
      samsung: "9",
      opera_mobile: "47",
      electron: "3.0"
    },
    "transform-named-capturing-groups-regex": {
      chrome: "64",
      opera: "51",
      edge: "79",
      firefox: "78",
      safari: "11.1",
      node: "10",
      deno: "1",
      ios: "11.3",
      samsung: "9",
      opera_mobile: "47",
      electron: "3.0"
    },
    "transform-async-to-generator": {
      chrome: "55",
      opera: "42",
      edge: "15",
      firefox: "52",
      safari: "11",
      node: "7.6",
      deno: "1",
      ios: "11",
      samsung: "6",
      opera_mobile: "42",
      electron: "1.6"
    },
    "transform-exponentiation-operator": {
      chrome: "52",
      opera: "39",
      edge: "14",
      firefox: "52",
      safari: "10.1",
      node: "7",
      deno: "1",
      ios: "10.3",
      samsung: "6",
      rhino: "1.7.14",
      opera_mobile: "41",
      electron: "1.3"
    },
    "transform-template-literals": {
      chrome: "41",
      opera: "28",
      edge: "13",
      firefox: "34",
      safari: "13",
      node: "4",
      deno: "1",
      ios: "13",
      samsung: "3.4",
      opera_mobile: "28",
      electron: "0.21"
    },
    "transform-literals": {
      chrome: "44",
      opera: "31",
      edge: "12",
      firefox: "53",
      safari: "9",
      node: "4",
      deno: "1",
      ios: "9",
      samsung: "4",
      rhino: "1.7.15",
      opera_mobile: "32",
      electron: "0.30"
    },
    "transform-function-name": {
      chrome: "51",
      opera: "38",
      edge: "79",
      firefox: "53",
      safari: "10",
      node: "6.5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "41",
      electron: "1.2"
    },
    "transform-arrow-functions": {
      chrome: "47",
      opera: "34",
      edge: "13",
      firefox: "43",
      safari: "10",
      node: "6",
      deno: "1",
      ios: "10",
      samsung: "5",
      rhino: "1.7.13",
      opera_mobile: "34",
      electron: "0.36"
    },
    "transform-block-scoped-functions": {
      chrome: "41",
      opera: "28",
      edge: "12",
      firefox: "46",
      safari: "10",
      node: "4",
      deno: "1",
      ie: "11",
      ios: "10",
      samsung: "3.4",
      opera_mobile: "28",
      electron: "0.21"
    },
    "transform-classes": {
      chrome: "46",
      opera: "33",
      edge: "13",
      firefox: "45",
      safari: "10",
      node: "5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "33",
      electron: "0.36"
    },
    "transform-object-super": {
      chrome: "46",
      opera: "33",
      edge: "13",
      firefox: "45",
      safari: "10",
      node: "5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "33",
      electron: "0.36"
    },
    "transform-shorthand-properties": {
      chrome: "43",
      opera: "30",
      edge: "12",
      firefox: "33",
      safari: "9",
      node: "4",
      deno: "1",
      ios: "9",
      samsung: "4",
      rhino: "1.7.14",
      opera_mobile: "30",
      electron: "0.27"
    },
    "transform-duplicate-keys": {
      chrome: "42",
      opera: "29",
      edge: "12",
      firefox: "34",
      safari: "9",
      node: "4",
      deno: "1",
      ios: "9",
      samsung: "3.4",
      opera_mobile: "29",
      electron: "0.25"
    },
    "transform-computed-properties": {
      chrome: "44",
      opera: "31",
      edge: "12",
      firefox: "34",
      safari: "7.1",
      node: "4",
      deno: "1",
      ios: "8",
      samsung: "4",
      opera_mobile: "32",
      electron: "0.30"
    },
    "transform-for-of": {
      chrome: "51",
      opera: "38",
      edge: "15",
      firefox: "53",
      safari: "10",
      node: "6.5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "41",
      electron: "1.2"
    },
    "transform-sticky-regex": {
      chrome: "49",
      opera: "36",
      edge: "13",
      firefox: "3",
      safari: "10",
      node: "6",
      deno: "1",
      ios: "10",
      samsung: "5",
      rhino: "1.7.15",
      opera_mobile: "36",
      electron: "0.37"
    },
    "transform-unicode-escapes": {
      chrome: "44",
      opera: "31",
      edge: "12",
      firefox: "53",
      safari: "9",
      node: "4",
      deno: "1",
      ios: "9",
      samsung: "4",
      rhino: "1.7.15",
      opera_mobile: "32",
      electron: "0.30"
    },
    "transform-unicode-regex": {
      chrome: "50",
      opera: "37",
      edge: "13",
      firefox: "46",
      safari: "12",
      node: "6",
      deno: "1",
      ios: "12",
      samsung: "5",
      opera_mobile: "37",
      electron: "1.1"
    },
    "transform-spread": {
      chrome: "46",
      opera: "33",
      edge: "13",
      firefox: "45",
      safari: "10",
      node: "5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "33",
      electron: "0.36"
    },
    "transform-destructuring": {
      chrome: "51",
      opera: "38",
      edge: "15",
      firefox: "53",
      safari: "10",
      node: "6.5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "41",
      electron: "1.2"
    },
    "transform-block-scoping": {
      chrome: "50",
      opera: "37",
      edge: "14",
      firefox: "53",
      safari: "11",
      node: "6",
      deno: "1",
      ios: "11",
      samsung: "5",
      opera_mobile: "37",
      electron: "1.1"
    },
    "transform-typeof-symbol": {
      chrome: "38",
      opera: "25",
      edge: "12",
      firefox: "36",
      safari: "9",
      node: "0.12",
      deno: "1",
      ios: "9",
      samsung: "3",
      rhino: "1.7.13",
      opera_mobile: "25",
      electron: "0.20"
    },
    "transform-new-target": {
      chrome: "46",
      opera: "33",
      edge: "14",
      firefox: "41",
      safari: "10",
      node: "5",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "33",
      electron: "0.36"
    },
    "transform-regenerator": {
      chrome: "50",
      opera: "37",
      edge: "13",
      firefox: "53",
      safari: "10",
      node: "6",
      deno: "1",
      ios: "10",
      samsung: "5",
      opera_mobile: "37",
      electron: "1.1"
    },
    "transform-member-expression-literals": {
      chrome: "7",
      opera: "12",
      edge: "12",
      firefox: "2",
      safari: "5.1",
      node: "0.4",
      deno: "1",
      ie: "9",
      android: "4",
      ios: "6",
      phantom: "1.9",
      samsung: "1",
      rhino: "1.7.13",
      opera_mobile: "12",
      electron: "0.20"
    },
    "transform-property-literals": {
      chrome: "7",
      opera: "12",
      edge: "12",
      firefox: "2",
      safari: "5.1",
      node: "0.4",
      deno: "1",
      ie: "9",
      android: "4",
      ios: "6",
      phantom: "1.9",
      samsung: "1",
      rhino: "1.7.13",
      opera_mobile: "12",
      electron: "0.20"
    },
    "transform-reserved-words": {
      chrome: "13",
      opera: "10.50",
      edge: "12",
      firefox: "2",
      safari: "3.1",
      node: "0.6",
      deno: "1",
      ie: "9",
      android: "4.4",
      ios: "6",
      phantom: "1.9",
      samsung: "1",
      rhino: "1.7.13",
      opera_mobile: "10.1",
      electron: "0.20"
    },
    "transform-export-namespace-from": {
      chrome: "72",
      deno: "1.0",
      edge: "79",
      firefox: "80",
      node: "13.2",
      opera: "60",
      opera_mobile: "51",
      safari: "14.1",
      ios: "14.5",
      samsung: "11.0",
      android: "72",
      electron: "5.0"
    },
    "proposal-export-namespace-from": {
      chrome: "72",
      deno: "1.0",
      edge: "79",
      firefox: "80",
      node: "13.2",
      opera: "60",
      opera_mobile: "51",
      safari: "14.1",
      ios: "14.5",
      samsung: "11.0",
      android: "72",
      electron: "5.0"
    }
  };
});

// ../node_modules/@babel/compat-data/plugins.js
var Rw = T((TDe, Mw) => {
  Mw.exports = Lw();
});

// ../node_modules/@babel/helper-compilation-targets/lib/filter-items.js
var $w = T((Bo) => {
  "use strict";
  Object.defineProperty(Bo, "__esModule", {
    value: !0
  });
  Bo.default = vpe;
  Bo.isRequired = Vw;
  Bo.targetsSupported = Uw;
  var qw = require("semver"), Epe = Rw(), Vc = Mc();
  function Uw(e, t) {
    let r = Object.keys(e);
    return r.length === 0 ? !1 : r.filter((i) => {
      let a = (0, Vc.getLowestImplementedVersion)(t, i);
      if (!a)
        return !0;
      let o = e[i];
      if ((0, Vc.isUnreleasedVersion)(o, i))
        return !1;
      if ((0, Vc.isUnreleasedVersion)(a, i))
        return !0;
      if (!qw.valid(o.toString()))
        throw new Error(`Invalid version passed for target "${i}": "${o}". Versions must be in semver format (major.minor.patch)`);
      return qw.gt((0, Vc.semverify)(a), o.toString());
    }).length === 0;
  }
  s(Uw, "targetsSupported");
  function Vw(e, t, {
    compatData: r = Epe,
    includes: n,
    excludes: i
  } = {}) {
    return i != null && i.has(e) ? !1 : n != null && n.has(e) ? !0 : !Uw(t, r[e]);
  }
  s(Vw, "isRequired");
  function vpe(e, t, r, n, i, a, o) {
    let l = /* @__PURE__ */ new Set(), u = {
      compatData: e,
      includes: t,
      excludes: r
    };
    for (let c in e)
      if (Vw(c, n, u))
        l.add(c);
      else if (o) {
        let f = o.get(c);
        f && l.add(f);
      }
    return i?.forEach((c) => !r.has(c) && l.add(c)), a?.forEach((c) => !t.has(c) && l.delete(c)), l;
  }
  s(vpe, "filterItems");
});

// ../node_modules/@babel/helper-compilation-targets/lib/index.js
var Z0 = T((gn) => {
  "use strict";
  Object.defineProperty(gn, "__esModule", {
    value: !0
  });
  Object.defineProperty(gn, "TargetNames", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return X0.TargetNames;
    }, "get")
  });
  gn.default = kpe;
  Object.defineProperty(gn, "filterItems", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Yw.default;
    }, "get")
  });
  Object.defineProperty(gn, "getInclusionReasons", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Ppe.getInclusionReasons;
    }, "get")
  });
  gn.isBrowsersQueryValid = zw;
  Object.defineProperty(gn, "isRequired", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Yw.isRequired;
    }, "get")
  });
  Object.defineProperty(gn, "prettifyTargets", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Spe.prettifyTargets;
    }, "get")
  });
  Object.defineProperty(gn, "unreleasedLabels", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Hw.unreleasedLabels;
    }, "get")
  });
  var Kw = hw(), Gw = Fc(), Tpe = Ew(), xpe = Dw(), Qr = Mc(), Hw = Lc(), X0 = Bw(), Spe = Y0(), Ppe = jw(), Yw = $w(), J0 = Tpe["es6.module"],
  Q0 = new Gw.OptionValidator("@babel/helper-compilation-targets");
  function Ape(e) {
    let t = Object.keys(X0.TargetNames);
    for (let r of Object.keys(e))
      if (!(r in X0.TargetNames))
        throw new Error(Q0.formatMessage(`'${r}' is not a valid target
- Did you mean '${(0, Gw.findSuggestion)(r, t)}'?`));
    return e;
  }
  s(Ape, "validateTargetNames");
  function zw(e) {
    return typeof e == "string" || Array.isArray(e) && e.every((t) => typeof t == "string");
  }
  s(zw, "isBrowsersQueryValid");
  function Cpe(e) {
    return Q0.invariant(e === void 0 || zw(e), `'${String(e)}' is not a valid browserslist query`), e;
  }
  s(Cpe, "validateBrowsers");
  function wpe(e) {
    return e.reduce((t, r) => {
      let [n, i] = r.split(" "), a = Hw.browserNameMap[n];
      if (!a)
        return t;
      try {
        let o = i.split("-")[0].toLowerCase(), l = (0, Qr.isUnreleasedVersion)(o, a);
        if (!t[a])
          return t[a] = l ? o : (0, Qr.semverify)(o), t;
        let u = t[a], c = (0, Qr.isUnreleasedVersion)(u, a);
        if (c && l)
          t[a] = (0, Qr.getLowestUnreleased)(u, o, a);
        else if (c)
          t[a] = (0, Qr.semverify)(o);
        else if (!c && !l) {
          let f = (0, Qr.semverify)(o);
          t[a] = (0, Qr.semverMin)(u, f);
        }
      } catch {
      }
      return t;
    }, {});
  }
  s(wpe, "getLowestVersions");
  function Dpe(e) {
    e.length && (console.warn(`Warning, the following targets are using a decimal version:
`), e.forEach(({
      target: t,
      value: r
    }) => console.warn(`  ${t}: ${r}`)), console.warn(`
We recommend using a string for minor/patch versions to avoid numbers like 6.10
getting parsed as 6.1, which can lead to unexpected behavior.
`));
  }
  s(Dpe, "outputDecimalWarning");
  function Jw(e, t) {
    try {
      return (0, Qr.semverify)(t);
    } catch {
      throw new Error(Q0.formatMessage(`'${t}' is not a valid value for 'targets.${e}'.`));
    }
  }
  s(Jw, "semverifyTarget");
  function Ipe(e) {
    return ["node", e === !0 || e === "current" ? process.versions.node : Jw("node", e)];
  }
  s(Ipe, "nodeTargetParser");
  function _pe(e, t) {
    let r = (0, Qr.isUnreleasedVersion)(t, e) ? t.toLowerCase() : Jw(e, t);
    return [e, r];
  }
  s(_pe, "defaultTargetParser");
  function Ope(e) {
    let t = Object.assign({}, e);
    return delete t.esmodules, delete t.browsers, t;
  }
  s(Ope, "generateTargets");
  function Npe(e, t) {
    let r = Kw(e, {
      mobileToDesktop: !0,
      env: t
    });
    return wpe(r);
  }
  s(Npe, "resolveTargets");
  var Ww = new xpe({
    max: 64
  });
  function Bpe(e, t) {
    let r = typeof e == "string" ? e : e.join() + t, n = Ww.get(r);
    return n || (n = Npe(e, t), Ww.set(r, n)), Object.assign({}, n);
  }
  s(Bpe, "resolveTargetsCached");
  function kpe(e = {}, t = {}) {
    var r, n;
    let {
      browsers: i,
      esmodules: a
    } = e, {
      configPath: o = "."
    } = t;
    Cpe(i);
    let l = Ope(e), u = Ape(l), f = !!i || Object.keys(u).length > 0, p = !t.ignoreBrowserslistConfig && !f;
    if (!i && p && (i = Kw.loadConfig({
      config: t.configFile,
      path: o,
      env: t.browserslistEnv
    }), i == null && (i = [])), a && (a !== "intersect" || !((r = i) != null && r.length)) && (i = Object.keys(J0).map((v) => `${v} >= ${J0[v]}`).
    join(", "), a = !1), (n = i) != null && n.length) {
      let v = Bpe(i, t.browserslistEnv);
      if (a === "intersect")
        for (let d of Object.keys(v))
          if (d !== "deno" && d !== "ie") {
            let b = J0[d === "opera_mobile" ? "op_mob" : d];
            if (b) {
              let E = v[d];
              v[d] = (0, Qr.getHighestUnreleased)(E, (0, Qr.semverify)(b), d);
            } else
              delete v[d];
          } else
            delete v[d];
      u = Object.assign(v, u);
    }
    let h = {}, y = [];
    for (let v of Object.keys(u).sort()) {
      let d = u[v];
      typeof d == "number" && d % 1 !== 0 && y.push({
        target: v,
        value: d
      });
      let [b, E] = v === "node" ? Ipe(d) : _pe(v, d);
      E && (h[b] = E);
    }
    return Dpe(y), h;
  }
  s(kpe, "getTargets");
});

// ../node_modules/@babel/core/lib/config/resolve-targets.js
var eg = T(($c) => {
  "use strict";
  Object.defineProperty($c, "__esModule", {
    value: !0
  });
  $c.resolveBrowserslistConfigFile = Fpe;
  $c.resolveTargets = jpe;
  function Xw() {
    let e = require("path");
    return Xw = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(Xw, "_path");
  function Qw() {
    let e = Z0();
    return Qw = /* @__PURE__ */ s(function() {
      return e;
    }, "_helperCompilationTargets"), e;
  }
  s(Qw, "_helperCompilationTargets");
  function Fpe(e, t) {
    return Xw().resolve(t, e);
  }
  s(Fpe, "resolveBrowserslistConfigFile");
  function jpe(e, t) {
    let r = e.targets, n;
    typeof r == "string" || Array.isArray(r) ? n = {
      browsers: r
    } : r && ("esmodules" in r ? n = Object.assign({}, r, {
      esmodules: "intersect"
    }) : n = r);
    let {
      browserslistConfigFile: i
    } = e, a, o = !1;
    return typeof i == "string" ? a = i : o = i === !1, (0, Qw().default)(n, {
      ignoreBrowserslistConfig: o,
      configFile: a,
      configPath: t,
      browserslistEnv: e.browserslistEnv
    });
  }
  s(jpe, "resolveTargets");
});

// ../node_modules/@babel/core/lib/config/config-descriptors.js
var tg = T((Fo) => {
  "use strict";
  Object.defineProperty(Fo, "__esModule", {
    value: !0
  });
  Fo.createCachedDescriptors = qpe;
  Fo.createDescriptor = lD;
  Fo.createUncachedDescriptors = Upe;
  function rD() {
    let e = Er();
    return rD = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(rD, "_gensync");
  var Zw = p2(), eD = Lo(), Lpe = jo(), ko = ei(), Mpe = eg();
  function Rpe(e, t) {
    var r, n, i, a;
    return e.name === t.name && e.value === t.value && e.options === t.options && e.dirname === t.dirname && e.alias === t.alias && e.ownPass ===
    t.ownPass && ((r = e.file) == null ? void 0 : r.request) === ((n = t.file) == null ? void 0 : n.request) && ((i = e.file) == null ? void 0 :
    i.resolved) === ((a = t.file) == null ? void 0 : a.resolved);
  }
  s(Rpe, "isEqualDescriptor");
  function* tD(e) {
    return e;
  }
  s(tD, "handlerOf");
  function nD(e, t) {
    return typeof e.browserslistConfigFile == "string" && (e.browserslistConfigFile = (0, Mpe.resolveBrowserslistConfigFile)(e.browserslistConfigFile,
    t)), e;
  }
  s(nD, "optionsWithResolvedBrowserslistConfigFile");
  function qpe(e, t, r) {
    let {
      plugins: n,
      presets: i,
      passPerPreset: a
    } = t;
    return {
      options: nD(t, e),
      plugins: n ? () => Kpe(n, e)(r) : () => tD([]),
      presets: i ? () => $pe(i, e)(r)(!!a) : () => tD([])
    };
  }
  s(qpe, "createCachedDescriptors");
  function Upe(e, t, r) {
    return {
      options: nD(t, e),
      plugins: (0, Zw.once)(() => aD(t.plugins || [], e, r)),
      presets: (0, Zw.once)(() => iD(t.presets || [], e, r, !!t.passPerPreset))
    };
  }
  s(Upe, "createUncachedDescriptors");
  var Vpe = /* @__PURE__ */ new WeakMap(), $pe = (0, ko.makeWeakCacheSync)((e, t) => {
    let r = t.using((n) => n);
    return (0, ko.makeStrongCacheSync)((n) => (0, ko.makeStrongCache)(function* (i) {
      return (yield* iD(e, r, n, i)).map((o) => sD(Vpe, o));
    }));
  }), Wpe = /* @__PURE__ */ new WeakMap(), Kpe = (0, ko.makeWeakCacheSync)((e, t) => {
    let r = t.using((n) => n);
    return (0, ko.makeStrongCache)(function* (n) {
      return (yield* aD(e, r, n)).map((a) => sD(Wpe, a));
    });
  }), Gpe = {};
  function sD(e, t) {
    let {
      value: r,
      options: n = Gpe
    } = t;
    if (n === !1) return t;
    let i = e.get(r);
    i || (i = /* @__PURE__ */ new WeakMap(), e.set(r, i));
    let a = i.get(n);
    if (a || (a = [], i.set(n, a)), !a.includes(t)) {
      let o = a.filter((l) => Rpe(l, t));
      if (o.length > 0)
        return o[0];
      a.push(t);
    }
    return t;
  }
  s(sD, "loadCachedDescriptor");
  function* iD(e, t, r, n) {
    return yield* oD("preset", e, t, r, n);
  }
  s(iD, "createPresetDescriptors");
  function* aD(e, t, r) {
    return yield* oD("plugin", e, t, r);
  }
  s(aD, "createPluginDescriptors");
  function* oD(e, t, r, n, i) {
    let a = yield* rD().all(t.map((o, l) => lD(o, r, {
      type: e,
      alias: `${n}$${l}`,
      ownPass: !!i
    })));
    return Hpe(a), a;
  }
  s(oD, "createDescriptors");
  function* lD(e, t, {
    type: r,
    alias: n,
    ownPass: i
  }) {
    let a = (0, Lpe.getItemDescriptor)(e);
    if (a)
      return a;
    let o, l, u = e;
    Array.isArray(u) && (u.length === 3 ? [u, l, o] = u : [u, l] = u);
    let c, f = null;
    if (typeof u == "string") {
      if (typeof r != "string")
        throw new Error("To resolve a string-based item, the type of item must be given");
      let p = r === "plugin" ? eD.loadPlugin : eD.loadPreset, h = u;
      ({
        filepath: f,
        value: u
      } = yield* p(u, t)), c = {
        request: h,
        resolved: f
      };
    }
    if (!u)
      throw new Error(`Unexpected falsy value: ${String(u)}`);
    if (typeof u == "object" && u.__esModule)
      if (u.default)
        u = u.default;
      else
        throw new Error("Must export a default export when using ES6 modules.");
    if (typeof u != "object" && typeof u != "function")
      throw new Error(`Unsupported format: ${typeof u}. Expected an object or a function.`);
    if (f !== null && typeof u == "object" && u)
      throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${f}`);
    return {
      name: o,
      alias: f || n,
      value: u,
      options: l,
      dirname: t,
      ownPass: i,
      file: c
    };
  }
  s(lD, "createDescriptor");
  function Hpe(e) {
    let t = /* @__PURE__ */ new Map();
    for (let r of e) {
      if (typeof r.value != "function") continue;
      let n = t.get(r.value);
      if (n || (n = /* @__PURE__ */ new Set(), t.set(r.value, n)), n.has(r.name)) {
        let i = e.filter((a) => a.value === r.value);
        throw new Error(["Duplicate plugin/preset detected.", "If you'd like to use two separate instances of a plugin,", "they need separat\
e names, e.g.", "", "  plugins: [", "    ['some-plugin', {}],", "    ['some-plugin', {}, 'some unique name'],", "  ]", "", "Duplicates detec\
ted are:", `${JSON.stringify(i, null, 2)}`].join(`
`));
      }
      n.add(r.name);
    }
  }
  s(Hpe, "assertNoDuplicates");
});

// ../node_modules/@babel/core/lib/config/item.js
var jo = T((Mo) => {
  "use strict";
  Object.defineProperty(Mo, "__esModule", {
    value: !0
  });
  Mo.createConfigItem = zpe;
  Mo.createItemFromDescriptor = cD;
  Mo.getItemDescriptor = Jpe;
  function uD() {
    let e = require("path");
    return uD = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(uD, "_path");
  var Ype = tg();
  function cD(e) {
    return new Wc(e);
  }
  s(cD, "createItemFromDescriptor");
  function* zpe(e, {
    dirname: t = ".",
    type: r
  } = {}) {
    let n = yield* (0, Ype.createDescriptor)(e, uD().resolve(t), {
      type: r,
      alias: "programmatic item"
    });
    return cD(n);
  }
  s(zpe, "createConfigItem");
  var rg = Symbol.for("@babel/core@7 - ConfigItem");
  function Jpe(e) {
    if (e != null && e[rg])
      return e._descriptor;
  }
  s(Jpe, "getItemDescriptor");
  var Wc = class {
    static {
      s(this, "ConfigItem");
    }
    constructor(t) {
      this._descriptor = void 0, this[rg] = !0, this.value = void 0, this.options = void 0, this.dirname = void 0, this.name = void 0, this.
      file = void 0, this._descriptor = t, Object.defineProperty(this, "_descriptor", {
        enumerable: !1
      }), Object.defineProperty(this, rg, {
        enumerable: !1
      }), this.value = this._descriptor.value, this.options = this._descriptor.options, this.dirname = this._descriptor.dirname, this.name =
      this._descriptor.name, this.file = this._descriptor.file ? {
        request: this._descriptor.file.request,
        resolved: this._descriptor.file.resolved
      } : void 0, Object.freeze(this);
    }
  };
  Object.freeze(Wc.prototype);
});

// ../node_modules/@babel/core/lib/config/validation/removed.js
var fD = T((Kc) => {
  "use strict";
  Object.defineProperty(Kc, "__esModule", {
    value: !0
  });
  Kc.default = void 0;
  var NDe = Kc.default = {
    auxiliaryComment: {
      message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
    },
    blacklist: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    breakConfig: {
      message: "This is not a necessary option in Babel 6"
    },
    experimental: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    externalHelpers: {
      message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/"
    },
    extra: {
      message: ""
    },
    jsxPragma: {
      message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
    },
    loose: {
      message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option."
    },
    metadataUsedHelpers: {
      message: "Not required anymore as this is enabled by default"
    },
    modules: {
      message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules"
    },
    nonStandard: {
      message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.i\
o/docs/plugins/preset-react/"
    },
    optional: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    sourceMapName: {
      message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file\
` themselves."
    },
    stage: {
      message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
    },
    whitelist: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    resolveModuleSource: {
      version: 6,
      message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"
    },
    metadata: {
      version: 6,
      message: "Generated plugin metadata is always included in the output result"
    },
    sourceMapTarget: {
      version: 6,
      message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.fi\
le` themselves."
    }
  };
});

// ../node_modules/@babel/core/lib/config/validation/option-assertions.js
var ig = T((St) => {
  "use strict";
  Object.defineProperty(St, "__esModule", {
    value: !0
  });
  St.access = Tr;
  St.assertArray = sg;
  St.assertAssumptions = mde;
  St.assertBabelrcSearch = cde;
  St.assertBoolean = ng;
  St.assertCallerMetadata = rde;
  St.assertCompact = ede;
  St.assertConfigApplicableTest = lde;
  St.assertConfigFileSearch = ude;
  St.assertFunction = ide;
  St.assertIgnoreList = ade;
  St.assertInputSourceMap = nde;
  St.assertObject = hD;
  St.assertPluginList = fde;
  St.assertRootMode = Qpe;
  St.assertSourceMaps = Zpe;
  St.assertSourceType = tde;
  St.assertString = sde;
  St.assertTargets = dde;
  St.msg = Ge;
  function Ro() {
    let e = Z0();
    return Ro = /* @__PURE__ */ s(function() {
      return e;
    }, "_helperCompilationTargets"), e;
  }
  s(Ro, "_helperCompilationTargets");
  var Xpe = qo();
  function Ge(e) {
    switch (e.type) {
      case "root":
        return "";
      case "env":
        return `${Ge(e.parent)}.env["${e.name}"]`;
      case "overrides":
        return `${Ge(e.parent)}.overrides[${e.index}]`;
      case "option":
        return `${Ge(e.parent)}.${e.name}`;
      case "access":
        return `${Ge(e.parent)}[${JSON.stringify(e.name)}]`;
      default:
        throw new Error(`Assertion failure: Unknown type ${e.type}`);
    }
  }
  s(Ge, "msg");
  function Tr(e, t) {
    return {
      type: "access",
      name: t,
      parent: e
    };
  }
  s(Tr, "access");
  function Qpe(e, t) {
    if (t !== void 0 && t !== "root" && t !== "upward" && t !== "upward-optional")
      throw new Error(`${Ge(e)} must be a "root", "upward", "upward-optional" or undefined`);
    return t;
  }
  s(Qpe, "assertRootMode");
  function Zpe(e, t) {
    if (t !== void 0 && typeof t != "boolean" && t !== "inline" && t !== "both")
      throw new Error(`${Ge(e)} must be a boolean, "inline", "both", or undefined`);
    return t;
  }
  s(Zpe, "assertSourceMaps");
  function ede(e, t) {
    if (t !== void 0 && typeof t != "boolean" && t !== "auto")
      throw new Error(`${Ge(e)} must be a boolean, "auto", or undefined`);
    return t;
  }
  s(ede, "assertCompact");
  function tde(e, t) {
    if (t !== void 0 && t !== "module" && t !== "script" && t !== "unambiguous")
      throw new Error(`${Ge(e)} must be "module", "script", "unambiguous", or undefined`);
    return t;
  }
  s(tde, "assertSourceType");
  function rde(e, t) {
    let r = hD(e, t);
    if (r) {
      if (typeof r.name != "string")
        throw new Error(`${Ge(e)} set but does not contain "name" property string`);
      for (let n of Object.keys(r)) {
        let i = Tr(e, n), a = r[n];
        if (a != null && typeof a != "boolean" && typeof a != "string" && typeof a != "number")
          throw new Error(`${Ge(i)} must be null, undefined, a boolean, a string, or a number.`);
      }
    }
    return t;
  }
  s(rde, "assertCallerMetadata");
  function nde(e, t) {
    if (t !== void 0 && typeof t != "boolean" && (typeof t != "object" || !t))
      throw new Error(`${Ge(e)} must be a boolean, object, or undefined`);
    return t;
  }
  s(nde, "assertInputSourceMap");
  function sde(e, t) {
    if (t !== void 0 && typeof t != "string")
      throw new Error(`${Ge(e)} must be a string, or undefined`);
    return t;
  }
  s(sde, "assertString");
  function ide(e, t) {
    if (t !== void 0 && typeof t != "function")
      throw new Error(`${Ge(e)} must be a function, or undefined`);
    return t;
  }
  s(ide, "assertFunction");
  function ng(e, t) {
    if (t !== void 0 && typeof t != "boolean")
      throw new Error(`${Ge(e)} must be a boolean, or undefined`);
    return t;
  }
  s(ng, "assertBoolean");
  function hD(e, t) {
    if (t !== void 0 && (typeof t != "object" || Array.isArray(t) || !t))
      throw new Error(`${Ge(e)} must be an object, or undefined`);
    return t;
  }
  s(hD, "assertObject");
  function sg(e, t) {
    if (t != null && !Array.isArray(t))
      throw new Error(`${Ge(e)} must be an array, or undefined`);
    return t;
  }
  s(sg, "assertArray");
  function ade(e, t) {
    let r = sg(e, t);
    return r?.forEach((n, i) => ode(Tr(e, i), n)), r;
  }
  s(ade, "assertIgnoreList");
  function ode(e, t) {
    if (typeof t != "string" && typeof t != "function" && !(t instanceof RegExp))
      throw new Error(`${Ge(e)} must be an array of string/Function/RegExp values, or undefined`);
    return t;
  }
  s(ode, "assertIgnoreItem");
  function lde(e, t) {
    if (t === void 0)
      return t;
    if (Array.isArray(t))
      t.forEach((r, n) => {
        if (!Gc(r))
          throw new Error(`${Ge(Tr(e, n))} must be a string/Function/RegExp.`);
      });
    else if (!Gc(t))
      throw new Error(`${Ge(e)} must be a string/Function/RegExp, or an array of those`);
    return t;
  }
  s(lde, "assertConfigApplicableTest");
  function Gc(e) {
    return typeof e == "string" || typeof e == "function" || e instanceof RegExp;
  }
  s(Gc, "checkValidTest");
  function ude(e, t) {
    if (t !== void 0 && typeof t != "boolean" && typeof t != "string")
      throw new Error(`${Ge(e)} must be a undefined, a boolean, a string, got ${JSON.stringify(t)}`);
    return t;
  }
  s(ude, "assertConfigFileSearch");
  function cde(e, t) {
    if (t === void 0 || typeof t == "boolean")
      return t;
    if (Array.isArray(t))
      t.forEach((r, n) => {
        if (!Gc(r))
          throw new Error(`${Ge(Tr(e, n))} must be a string/Function/RegExp.`);
      });
    else if (!Gc(t))
      throw new Error(`${Ge(e)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(t)}`);
    return t;
  }
  s(cde, "assertBabelrcSearch");
  function fde(e, t) {
    let r = sg(e, t);
    return r && r.forEach((n, i) => pde(Tr(e, i), n)), r;
  }
  s(fde, "assertPluginList");
  function pde(e, t) {
    if (Array.isArray(t)) {
      if (t.length === 0)
        throw new Error(`${Ge(e)} must include an object`);
      if (t.length > 3)
        throw new Error(`${Ge(e)} may only be a two-tuple or three-tuple`);
      if (pD(Tr(e, 0), t[0]), t.length > 1) {
        let r = t[1];
        if (r !== void 0 && r !== !1 && (typeof r != "object" || Array.isArray(r) || r === null))
          throw new Error(`${Ge(Tr(e, 1))} must be an object, false, or undefined`);
      }
      if (t.length === 3) {
        let r = t[2];
        if (r !== void 0 && typeof r != "string")
          throw new Error(`${Ge(Tr(e, 2))} must be a string, or undefined`);
      }
    } else
      pD(e, t);
    return t;
  }
  s(pde, "assertPluginItem");
  function pD(e, t) {
    if ((typeof t != "object" || !t) && typeof t != "string" && typeof t != "function")
      throw new Error(`${Ge(e)} must be a string, object, function`);
    return t;
  }
  s(pD, "assertPluginTarget");
  function dde(e, t) {
    if ((0, Ro().isBrowsersQueryValid)(t)) return t;
    if (typeof t != "object" || !t || Array.isArray(t))
      throw new Error(`${Ge(e)} must be a string, an array of strings or an object`);
    let r = Tr(e, "browsers"), n = Tr(e, "esmodules");
    dD(r, t.browsers), ng(n, t.esmodules);
    for (let i of Object.keys(t)) {
      let a = t[i], o = Tr(e, i);
      if (i === "esmodules") ng(o, a);
      else if (i === "browsers") dD(o, a);
      else if (hasOwnProperty.call(Ro().TargetNames, i))
        hde(o, a);
      else {
        let l = Object.keys(Ro().TargetNames).join(", ");
        throw new Error(`${Ge(o)} is not a valid target. Supported targets are ${l}`);
      }
    }
    return t;
  }
  s(dde, "assertTargets");
  function dD(e, t) {
    if (t !== void 0 && !(0, Ro().isBrowsersQueryValid)(t))
      throw new Error(`${Ge(e)} must be undefined, a string or an array of strings`);
  }
  s(dD, "assertBrowsersList");
  function hde(e, t) {
    if (!(typeof t == "number" && Math.round(t) === t) && typeof t != "string")
      throw new Error(`${Ge(e)} must be a string or an integer number`);
  }
  s(hde, "assertBrowserVersion");
  function mde(e, t) {
    if (t === void 0) return;
    if (typeof t != "object" || t === null)
      throw new Error(`${Ge(e)} must be an object or undefined.`);
    let r = e;
    do
      r = r.parent;
    while (r.type !== "root");
    let n = r.source === "preset";
    for (let i of Object.keys(t)) {
      let a = Tr(e, i);
      if (!Xpe.assumptionsNames.has(i))
        throw new Error(`${Ge(a)} is not a supported assumption.`);
      if (typeof t[i] != "boolean")
        throw new Error(`${Ge(a)} must be a boolean.`);
      if (n && t[i] === !1)
        throw new Error(`${Ge(a)} cannot be set to 'false' inside presets.`);
    }
    return t;
  }
  s(mde, "assertAssumptions");
});

// ../node_modules/@babel/core/lib/config/validation/options.js
var qo = T((na) => {
  "use strict";
  Object.defineProperty(na, "__esModule", {
    value: !0
  });
  na.assumptionsNames = void 0;
  na.checkNoUnwrappedItemOptionPairs = Sde;
  na.validate = bde;
  var mD = fD(), ye = ig(), yde = ti(), yD = {
    cwd: ye.assertString,
    root: ye.assertString,
    rootMode: ye.assertRootMode,
    configFile: ye.assertConfigFileSearch,
    caller: ye.assertCallerMetadata,
    filename: ye.assertString,
    filenameRelative: ye.assertString,
    code: ye.assertBoolean,
    ast: ye.assertBoolean,
    cloneInputAst: ye.assertBoolean,
    envName: ye.assertString
  }, gD = {
    babelrc: ye.assertBoolean,
    babelrcRoots: ye.assertBabelrcSearch
  }, bD = {
    extends: ye.assertString,
    ignore: ye.assertIgnoreList,
    only: ye.assertIgnoreList,
    targets: ye.assertTargets,
    browserslistConfigFile: ye.assertConfigFileSearch,
    browserslistEnv: ye.assertString
  }, ED = {
    inputSourceMap: ye.assertInputSourceMap,
    presets: ye.assertPluginList,
    plugins: ye.assertPluginList,
    passPerPreset: ye.assertBoolean,
    assumptions: ye.assertAssumptions,
    env: Tde,
    overrides: xde,
    test: ye.assertConfigApplicableTest,
    include: ye.assertConfigApplicableTest,
    exclude: ye.assertConfigApplicableTest,
    retainLines: ye.assertBoolean,
    comments: ye.assertBoolean,
    shouldPrintComment: ye.assertFunction,
    compact: ye.assertCompact,
    minified: ye.assertBoolean,
    auxiliaryCommentBefore: ye.assertString,
    auxiliaryCommentAfter: ye.assertString,
    sourceType: ye.assertSourceType,
    wrapPluginVisitorMethod: ye.assertFunction,
    highlightCode: ye.assertBoolean,
    sourceMaps: ye.assertSourceMaps,
    sourceMap: ye.assertSourceMaps,
    sourceFileName: ye.assertString,
    sourceRoot: ye.assertString,
    parserOpts: ye.assertObject,
    generatorOpts: ye.assertObject
  };
  Object.assign(ED, {
    getModuleId: ye.assertFunction,
    moduleRoot: ye.assertString,
    moduleIds: ye.assertBoolean,
    moduleId: ye.assertString
  });
  var gde = ["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitive\
Hint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "noUnini\
tializedPrivateFieldAccess", "objectRestNoSymbols", "privateFieldsAsSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods",
  "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"], jDe = na.
  assumptionsNames = new Set(gde);
  function vD(e) {
    return e.type === "root" ? e.source : vD(e.parent);
  }
  s(vD, "getSource");
  function bde(e, t, r) {
    try {
      return ag({
        type: "root",
        source: e
      }, t);
    } catch (n) {
      let i = new yde.default(n.message, r);
      throw n.code && (i.code = n.code), i;
    }
  }
  s(bde, "validate");
  function ag(e, t) {
    let r = vD(e);
    return vde(t), Object.keys(t).forEach((n) => {
      let i = {
        type: "option",
        name: n,
        parent: e
      };
      if (r === "preset" && bD[n])
        throw new Error(`${(0, ye.msg)(i)} is not allowed in preset options`);
      if (r !== "arguments" && yD[n])
        throw new Error(`${(0, ye.msg)(i)} is only allowed in root programmatic options`);
      if (r !== "arguments" && r !== "configfile" && gD[n])
        throw r === "babelrcfile" || r === "extendsfile" ? new Error(`${(0, ye.msg)(i)} is not allowed in .babelrc or "extends"ed files, onl\
y in root programmatic options, or babel.config.js/config file options`) : new Error(`${(0, ye.msg)(i)} is only allowed in root programmatic\
 options, or babel.config.js/config file options`);
      (ED[n] || bD[n] || gD[n] || yD[n] || Ede)(i, t[n]);
    }), t;
  }
  s(ag, "validateNested");
  function Ede(e) {
    let t = e.name;
    if (mD.default[t]) {
      let {
        message: r,
        version: n = 5
      } = mD.default[t];
      throw new Error(`Using removed Babel ${n} option: ${(0, ye.msg)(e)} - ${r}`);
    } else {
      let r = new Error(`Unknown option: ${(0, ye.msg)(e)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information ab\
out options.`);
      throw r.code = "BABEL_UNKNOWN_OPTION", r;
    }
  }
  s(Ede, "throwUnknownError");
  function vde(e) {
    if (hasOwnProperty.call(e, "sourceMap") && hasOwnProperty.call(e, "sourceMaps"))
      throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
  }
  s(vde, "assertNoDuplicateSourcemap");
  function Tde(e, t) {
    if (e.parent.type === "env")
      throw new Error(`${(0, ye.msg)(e)} is not allowed inside of another .env block`);
    let r = e.parent, n = (0, ye.assertObject)(e, t);
    if (n)
      for (let i of Object.keys(n)) {
        let a = (0, ye.assertObject)((0, ye.access)(e, i), n[i]);
        if (!a) continue;
        ag({
          type: "env",
          name: i,
          parent: r
        }, a);
      }
    return n;
  }
  s(Tde, "assertEnvSet");
  function xde(e, t) {
    if (e.parent.type === "env")
      throw new Error(`${(0, ye.msg)(e)} is not allowed inside an .env block`);
    if (e.parent.type === "overrides")
      throw new Error(`${(0, ye.msg)(e)} is not allowed inside an .overrides block`);
    let r = e.parent, n = (0, ye.assertArray)(e, t);
    if (n)
      for (let [i, a] of n.entries()) {
        let o = (0, ye.access)(e, i), l = (0, ye.assertObject)(o, a);
        if (!l) throw new Error(`${(0, ye.msg)(o)} must be an object`);
        ag({
          type: "overrides",
          index: i,
          parent: r
        }, l);
      }
    return n;
  }
  s(xde, "assertOverridesList");
  function Sde(e, t, r, n) {
    if (t === 0) return;
    let i = e[t - 1], a = e[t];
    i.file && i.options === void 0 && typeof a.value == "object" && (n.message += `
- Maybe you meant to use
"${r}s": [
  ["${i.file.request}", ${JSON.stringify(a.value, void 0, 2)}]
]
To be a valid ${r}, its name and options should be wrapped in a pair of brackets`);
  }
  s(Sde, "checkNoUnwrappedItemOptionPairs");
});

// ../node_modules/@babel/core/lib/config/pattern-to-regex.js
var fg = T((cg) => {
  "use strict";
  Object.defineProperty(cg, "__esModule", {
    value: !0
  });
  cg.default = Cde;
  function Hc() {
    let e = require("path");
    return Hc = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(Hc, "_path");
  var Uo = `\\${Hc().sep}`, og = `(?:${Uo}|$)`, lg = `[^${Uo}]+`, ug = `(?:${lg}${Uo})`, xD = `(?:${lg}${og})`, Pde = `${ug}*?`, Ade = `${ug}\
*?${xD}?`;
  function TD(e) {
    return e.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
  }
  s(TD, "escapeRegExp");
  function Cde(e, t) {
    let r = Hc().resolve(t, e).split(Hc().sep);
    return new RegExp(["^", ...r.map((n, i) => {
      let a = i === r.length - 1;
      return n === "**" ? a ? Ade : Pde : n === "*" ? a ? xD : ug : n.indexOf("*.") === 0 ? lg + TD(n.slice(1)) + (a ? og : Uo) : TD(n) + (a ?
      og : Uo);
    })].join(""));
  }
  s(Cde, "pathToPattern");
});

// ../node_modules/@babel/core/lib/config/printer.js
var AD = T((sa) => {
  "use strict";
  Object.defineProperty(sa, "__esModule", {
    value: !0
  });
  sa.ConfigPrinter = sa.ChainFormatter = void 0;
  function PD() {
    let e = Er();
    return PD = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(PD, "_gensync");
  var wde = sa.ChainFormatter = {
    Programmatic: 0,
    Config: 1
  }, pg = {
    title(e, t, r) {
      let n = "";
      return e === wde.Programmatic ? (n = "programmatic options", t && (n += " from " + t)) : n = "config " + r, n;
    },
    loc(e, t) {
      let r = "";
      return e != null && (r += `.overrides[${e}]`), t != null && (r += `.env["${t}"]`), r;
    },
    *optionsAndDescriptors(e) {
      let t = Object.assign({}, e.options);
      delete t.overrides, delete t.env;
      let r = [...yield* e.plugins()];
      r.length && (t.plugins = r.map((i) => SD(i)));
      let n = [...yield* e.presets()];
      return n.length && (t.presets = [...n].map((i) => SD(i))), JSON.stringify(t, void 0, 2);
    }
  };
  function SD(e) {
    var t;
    let r = (t = e.file) == null ? void 0 : t.request;
    return r == null && (typeof e.value == "object" ? r = e.value : typeof e.value == "function" && (r = `[Function: ${e.value.toString().slice(
    0, 50)} ... ]`)), r == null && (r = "[Unknown]"), e.options === void 0 ? r : e.name == null ? [r, e.options] : [r, e.options, e.name];
  }
  s(SD, "descriptorToConfig");
  var dg = class e {
    static {
      s(this, "ConfigPrinter");
    }
    constructor() {
      this._stack = [];
    }
    configure(t, r, {
      callerName: n,
      filepath: i
    }) {
      return t ? (a, o, l) => {
        this._stack.push({
          type: r,
          callerName: n,
          filepath: i,
          content: a,
          index: o,
          envName: l
        });
      } : () => {
      };
    }
    static *format(t) {
      let r = pg.title(t.type, t.callerName, t.filepath), n = pg.loc(t.index, t.envName);
      n && (r += ` ${n}`);
      let i = yield* pg.optionsAndDescriptors(t.content);
      return `${r}
${i}`;
    }
    *output() {
      return this._stack.length === 0 ? "" : (yield* PD().all(this._stack.map((r) => e.format(r)))).join(`

`);
    }
  };
  sa.ConfigPrinter = dg;
});

// ../node_modules/@babel/core/lib/config/config-chain.js
var Sg = T((aa) => {
  "use strict";
  Object.defineProperty(aa, "__esModule", {
    value: !0
  });
  aa.buildPresetChain = _de;
  aa.buildPresetChainWalker = void 0;
  aa.buildRootChain = jde;
  function DD() {
    let e = require("path");
    return DD = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(DD, "_path");
  function ID() {
    let e = Rs();
    return ID = /* @__PURE__ */ s(function() {
      return e;
    }, "_debug"), e;
  }
  s(ID, "_debug");
  var gg = qo(), _D = fg(), $o = AD(), Dde = Fn(), Ide = ti(), Vo = Lo(), _t = ei(), Fr = tg(), CD = ID()("babel:config:config-chain");
  function* _de(e, t) {
    let r = yield* Ode(e, t);
    return r ? {
      plugins: Jc(r.plugins),
      presets: Jc(r.presets),
      options: r.options.map((n) => OD(n)),
      files: /* @__PURE__ */ new Set()
    } : null;
  }
  s(_de, "buildPresetChain");
  var Ode = aa.buildPresetChainWalker = xg({
    root: /* @__PURE__ */ s((e) => Nde(e), "root"),
    env: /* @__PURE__ */ s((e, t) => Bde(e)(t), "env"),
    overrides: /* @__PURE__ */ s((e, t) => kde(e)(t), "overrides"),
    overridesEnv: /* @__PURE__ */ s((e, t, r) => Fde(e)(t)(r), "overridesEnv"),
    createLogger: /* @__PURE__ */ s(() => () => {
    }, "createLogger")
  }), Nde = (0, _t.makeWeakCacheSync)((e) => bg(e, e.alias, Fr.createUncachedDescriptors)), Bde = (0, _t.makeWeakCacheSync)((e) => (0, _t.makeStrongCacheSync)(
  (t) => Eg(e, e.alias, Fr.createUncachedDescriptors, t))), kde = (0, _t.makeWeakCacheSync)((e) => (0, _t.makeStrongCacheSync)((t) => vg(e, e.
  alias, Fr.createUncachedDescriptors, t))), Fde = (0, _t.makeWeakCacheSync)((e) => (0, _t.makeStrongCacheSync)((t) => (0, _t.makeStrongCacheSync)(
  (r) => Tg(e, e.alias, Fr.createUncachedDescriptors, t, r))));
  function* jde(e, t) {
    let r, n, i = new $o.ConfigPrinter(), a = yield* Ude({
      options: e,
      dirname: t.cwd
    }, t, void 0, i);
    if (!a) return null;
    let o = yield* i.output(), l;
    typeof e.configFile == "string" ? l = yield* (0, Vo.loadConfig)(e.configFile, t.cwd, t.envName, t.caller) : e.configFile !== !1 && (l = yield* (0, Vo.
    findRootConfig)(t.root, t.envName, t.caller));
    let {
      babelrc: u,
      babelrcRoots: c
    } = e, f = t.cwd, p = zc(), h = new $o.ConfigPrinter();
    if (l) {
      let I = Mde(l), O = yield* mg(I, t, void 0, h);
      if (!O) return null;
      r = yield* h.output(), u === void 0 && (u = I.options.babelrc), c === void 0 && (f = I.dirname, c = I.options.babelrcRoots), ia(p, O);
    }
    let y, v, d = !1, b = zc();
    if ((u === !0 || u === void 0) && typeof t.filename == "string") {
      let I = yield* (0, Vo.findPackageData)(t.filename);
      if (I && Lde(t, I, c, f)) {
        if ({
          ignore: y,
          config: v
        } = yield* (0, Vo.findRelativeConfig)(I, t.envName, t.caller), y && b.files.add(y.filepath), y && ND(t, y.ignore, null, y.dirname) &&
        (d = !0), v && !d) {
          let O = Rde(v), k = new $o.ConfigPrinter(), j = yield* mg(O, t, void 0, k);
          j ? (n = yield* k.output(), ia(b, j)) : d = !0;
        }
        v && d && b.files.add(v.filepath);
      }
    }
    t.showConfig && console.log(`Babel configs on "${t.filename}" (ascending priority):
` + [r, n, o].filter((I) => !!I).join(`

`) + `
-----End Babel configs-----`);
    let E = ia(ia(ia(zc(), p), b), a);
    return {
      plugins: d ? [] : Jc(E.plugins),
      presets: d ? [] : Jc(E.presets),
      options: d ? [] : E.options.map((I) => OD(I)),
      fileHandling: d ? "ignored" : "transpile",
      ignore: y || void 0,
      babelrc: v || void 0,
      config: l || void 0,
      files: E.files
    };
  }
  s(jde, "buildRootChain");
  function Lde(e, t, r, n) {
    if (typeof r == "boolean") return r;
    let i = e.root;
    if (r === void 0)
      return t.directories.includes(i);
    let a = r;
    return Array.isArray(a) || (a = [a]), a = a.map((o) => typeof o == "string" ? DD().resolve(n, o) : o), a.length === 1 && a[0] === i ? t.
    directories.includes(i) : a.some((o) => (typeof o == "string" && (o = (0, _D.default)(o, n)), t.directories.some((l) => BD(o, n, l, e))));
  }
  s(Lde, "babelrcLoadEnabled");
  var Mde = (0, _t.makeWeakCacheSync)((e) => ({
    filepath: e.filepath,
    dirname: e.dirname,
    options: (0, gg.validate)("configfile", e.options, e.filepath)
  })), Rde = (0, _t.makeWeakCacheSync)((e) => ({
    filepath: e.filepath,
    dirname: e.dirname,
    options: (0, gg.validate)("babelrcfile", e.options, e.filepath)
  })), qde = (0, _t.makeWeakCacheSync)((e) => ({
    filepath: e.filepath,
    dirname: e.dirname,
    options: (0, gg.validate)("extendsfile", e.options, e.filepath)
  })), Ude = xg({
    root: /* @__PURE__ */ s((e) => bg(e, "base", Fr.createCachedDescriptors), "root"),
    env: /* @__PURE__ */ s((e, t) => Eg(e, "base", Fr.createCachedDescriptors, t), "env"),
    overrides: /* @__PURE__ */ s((e, t) => vg(e, "base", Fr.createCachedDescriptors, t), "overrides"),
    overridesEnv: /* @__PURE__ */ s((e, t, r) => Tg(e, "base", Fr.createCachedDescriptors, t, r), "overridesEnv"),
    createLogger: /* @__PURE__ */ s((e, t, r) => Yde(e, t, r), "createLogger")
  }), Vde = xg({
    root: /* @__PURE__ */ s((e) => $de(e), "root"),
    env: /* @__PURE__ */ s((e, t) => Wde(e)(t), "env"),
    overrides: /* @__PURE__ */ s((e, t) => Kde(e)(t), "overrides"),
    overridesEnv: /* @__PURE__ */ s((e, t, r) => Gde(e)(t)(r), "overridesEnv"),
    createLogger: /* @__PURE__ */ s((e, t, r) => Hde(e.filepath, t, r), "createLogger")
  });
  function* mg(e, t, r, n) {
    let i = yield* Vde(e, t, r, n);
    return i?.files.add(e.filepath), i;
  }
  s(mg, "loadFileChain");
  var $de = (0, _t.makeWeakCacheSync)((e) => bg(e, e.filepath, Fr.createUncachedDescriptors)), Wde = (0, _t.makeWeakCacheSync)((e) => (0, _t.
  makeStrongCacheSync)((t) => Eg(e, e.filepath, Fr.createUncachedDescriptors, t))), Kde = (0, _t.makeWeakCacheSync)((e) => (0, _t.makeStrongCacheSync)(
  (t) => vg(e, e.filepath, Fr.createUncachedDescriptors, t))), Gde = (0, _t.makeWeakCacheSync)((e) => (0, _t.makeStrongCacheSync)((t) => (0, _t.
  makeStrongCacheSync)((r) => Tg(e, e.filepath, Fr.createUncachedDescriptors, t, r))));
  function Hde(e, t, r) {
    return r ? r.configure(t.showConfig, $o.ChainFormatter.Config, {
      filepath: e
    }) : () => {
    };
  }
  s(Hde, "buildFileLogger");
  function bg({
    dirname: e,
    options: t
  }, r, n) {
    return n(e, t, r);
  }
  s(bg, "buildRootDescriptors");
  function Yde(e, t, r) {
    var n;
    return r ? r.configure(t.showConfig, $o.ChainFormatter.Programmatic, {
      callerName: (n = t.caller) == null ? void 0 : n.name
    }) : () => {
    };
  }
  s(Yde, "buildProgrammaticLogger");
  function Eg({
    dirname: e,
    options: t
  }, r, n, i) {
    var a;
    let o = (a = t.env) == null ? void 0 : a[i];
    return o ? n(e, o, `${r}.env["${i}"]`) : null;
  }
  s(Eg, "buildEnvDescriptors");
  function vg({
    dirname: e,
    options: t
  }, r, n, i) {
    var a;
    let o = (a = t.overrides) == null ? void 0 : a[i];
    if (!o) throw new Error("Assertion failure - missing override");
    return n(e, o, `${r}.overrides[${i}]`);
  }
  s(vg, "buildOverrideDescriptors");
  function Tg({
    dirname: e,
    options: t
  }, r, n, i, a) {
    var o, l;
    let u = (o = t.overrides) == null ? void 0 : o[i];
    if (!u) throw new Error("Assertion failure - missing override");
    let c = (l = u.env) == null ? void 0 : l[a];
    return c ? n(e, c, `${r}.overrides[${i}].env["${a}"]`) : null;
  }
  s(Tg, "buildOverrideEnvDescriptors");
  function xg({
    root: e,
    env: t,
    overrides: r,
    overridesEnv: n,
    createLogger: i
  }) {
    return /* @__PURE__ */ s(function* (o, l, u = /* @__PURE__ */ new Set(), c) {
      let {
        dirname: f
      } = o, p = [], h = e(o);
      if (Yc(h, f, l, o.filepath)) {
        p.push({
          config: h,
          envName: void 0,
          index: void 0
        });
        let d = t(o, l.envName);
        d && Yc(d, f, l, o.filepath) && p.push({
          config: d,
          envName: l.envName,
          index: void 0
        }), (h.options.overrides || []).forEach((b, E) => {
          let I = r(o, E);
          if (Yc(I, f, l, o.filepath)) {
            p.push({
              config: I,
              index: E,
              envName: void 0
            });
            let O = n(o, E, l.envName);
            O && Yc(O, f, l, o.filepath) && p.push({
              config: O,
              index: E,
              envName: l.envName
            });
          }
        });
      }
      if (p.some(({
        config: {
          options: {
            ignore: d,
            only: b
          }
        }
      }) => ND(l, d, b, f)))
        return null;
      let y = zc(), v = i(o, l, c);
      for (let {
        config: d,
        index: b,
        envName: E
      } of p) {
        if (!(yield* zde(y, d.options, f, l, u, c)))
          return null;
        v(d, b, E), yield* Jde(y, d);
      }
      return y;
    }, "chainWalker");
  }
  s(xg, "makeChainWalker");
  function* zde(e, t, r, n, i, a) {
    if (t.extends === void 0) return !0;
    let o = yield* (0, Vo.loadConfig)(t.extends, r, n.envName, n.caller);
    if (i.has(o))
      throw new Error(`Configuration cycle detected loading ${o.filepath}.
File already loaded following the config chain:
` + Array.from(i, (u) => ` - ${u.filepath}`).join(`
`));
    i.add(o);
    let l = yield* mg(qde(o), n, i, a);
    return i.delete(o), l ? (ia(e, l), !0) : !1;
  }
  s(zde, "mergeExtendsChain");
  function ia(e, t) {
    e.options.push(...t.options), e.plugins.push(...t.plugins), e.presets.push(...t.presets);
    for (let r of t.files)
      e.files.add(r);
    return e;
  }
  s(ia, "mergeChain");
  function* Jde(e, {
    options: t,
    plugins: r,
    presets: n
  }) {
    return e.options.push(t), e.plugins.push(...yield* r()), e.presets.push(...yield* n()), e;
  }
  s(Jde, "mergeChainOpts");
  function zc() {
    return {
      options: [],
      presets: [],
      plugins: [],
      files: /* @__PURE__ */ new Set()
    };
  }
  s(zc, "emptyChain");
  function OD(e) {
    let t = Object.assign({}, e);
    return delete t.extends, delete t.env, delete t.overrides, delete t.plugins, delete t.presets, delete t.passPerPreset, delete t.ignore, delete t.
    only, delete t.test, delete t.include, delete t.exclude, hasOwnProperty.call(t, "sourceMap") && (t.sourceMaps = t.sourceMap, delete t.sourceMap),
    t;
  }
  s(OD, "normalizeOptions");
  function Jc(e) {
    let t = /* @__PURE__ */ new Map(), r = [];
    for (let n of e)
      if (typeof n.value == "function") {
        let i = n.value, a = t.get(i);
        a || (a = /* @__PURE__ */ new Map(), t.set(i, a));
        let o = a.get(n.name);
        o ? o.value = n : (o = {
          value: n
        }, r.push(o), n.ownPass || a.set(n.name, o));
      } else
        r.push({
          value: n
        });
    return r.reduce((n, i) => (n.push(i.value), n), []);
  }
  s(Jc, "dedupDescriptors");
  function Yc({
    options: e
  }, t, r, n) {
    return (e.test === void 0 || hg(r, e.test, t, n)) && (e.include === void 0 || hg(r, e.include, t, n)) && (e.exclude === void 0 || !hg(r,
    e.exclude, t, n));
  }
  s(Yc, "configIsApplicable");
  function hg(e, t, r, n) {
    let i = Array.isArray(t) ? t : [t];
    return yg(e, i, r, n);
  }
  s(hg, "configFieldIsApplicable");
  function wD(e, t) {
    return t instanceof RegExp ? String(t) : t;
  }
  s(wD, "ignoreListReplacer");
  function ND(e, t, r, n) {
    if (t && yg(e, t, n)) {
      var i;
      let o = `No config is applied to "${(i = e.filename) != null ? i : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(
      t, wD)}\` from "${n}"`;
      return CD(o), e.showConfig && console.log(o), !0;
    }
    if (r && !yg(e, r, n)) {
      var a;
      let o = `No config is applied to "${(a = e.filename) != null ? a : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(
      r, wD)}\` from "${n}"`;
      return CD(o), e.showConfig && console.log(o), !0;
    }
    return !1;
  }
  s(ND, "shouldIgnore");
  function yg(e, t, r, n) {
    return t.some((i) => BD(i, r, e.filename, e, n));
  }
  s(yg, "matchesPatterns");
  function BD(e, t, r, n, i) {
    if (typeof e == "function")
      return !!(0, Dde.endHiddenCallStack)(e)(r, {
        dirname: t,
        envName: n.envName,
        caller: n.caller
      });
    if (typeof r != "string")
      throw new Ide.default("Configuration contains string/RegExp pattern, but no filename was passed to Babel", i);
    return typeof e == "string" && (e = (0, _D.default)(e, t)), e.test(r);
  }
  s(BD, "matchPattern");
});

// ../node_modules/@babel/core/lib/config/validation/plugins.js
var kD = T((Pg) => {
  "use strict";
  Object.defineProperty(Pg, "__esModule", {
    value: !0
  });
  Pg.validatePluginObject = ehe;
  var Vn = ig(), Xde = {
    name: Vn.assertString,
    manipulateOptions: Vn.assertFunction,
    pre: Vn.assertFunction,
    post: Vn.assertFunction,
    inherits: Vn.assertFunction,
    visitor: Qde,
    parserOverride: Vn.assertFunction,
    generatorOverride: Vn.assertFunction
  };
  function Qde(e, t) {
    let r = (0, Vn.assertObject)(e, t);
    if (r && (Object.keys(r).forEach((n) => {
      n !== "_exploded" && n !== "_verified" && Zde(n, r[n]);
    }), r.enter || r.exit))
      throw new Error(`${(0, Vn.msg)(e)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
    return r;
  }
  s(Qde, "assertVisitorMap");
  function Zde(e, t) {
    if (t && typeof t == "object")
      Object.keys(t).forEach((r) => {
        if (r !== "enter" && r !== "exit")
          throw new Error(`.visitor["${e}"] may only have .enter and/or .exit handlers.`);
      });
    else if (typeof t != "function")
      throw new Error(`.visitor["${e}"] must be a function`);
  }
  s(Zde, "assertVisitorHandler");
  function ehe(e) {
    let t = {
      type: "root",
      source: "plugin"
    };
    return Object.keys(e).forEach((r) => {
      let n = Xde[r];
      if (n)
        n({
          type: "option",
          name: r,
          parent: t
        }, e[r]);
      else {
        let i = new Error(`.${r} is not a valid Plugin property`);
        throw i.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY", i;
      }
    }), e;
  }
  s(ehe, "validatePluginObject");
});

// ../node_modules/@babel/core/lib/config/helpers/environment.js
var Cg = T((Ag) => {
  "use strict";
  Object.defineProperty(Ag, "__esModule", {
    value: !0
  });
  Ag.getEnv = the;
  function the(e = "development") {
    return process.env.BABEL_ENV || process.env.NODE_ENV || e;
  }
  s(the, "getEnv");
});

// ../node_modules/@babel/core/lib/config/partial.js
var wg = T((ef) => {
  "use strict";
  Object.defineProperty(ef, "__esModule", {
    value: !0
  });
  ef.default = jD;
  ef.loadPartialConfig = fhe;
  function Xc() {
    let e = require("path");
    return Xc = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(Xc, "_path");
  var rhe = Tc(), nhe = oc(), FD = jo(), she = Sg(), ihe = Cg(), ahe = qo(), Qc = Lo(), ohe = eg(), lhe = ["showIgnoredFiles"];
  function uhe(e, t) {
    if (e == null) return {};
    var r = {}, n = Object.keys(e), i, a;
    for (a = 0; a < n.length; a++)
      i = n[a], !(t.indexOf(i) >= 0) && (r[i] = e[i]);
    return r;
  }
  s(uhe, "_objectWithoutPropertiesLoose");
  function che(e, t) {
    switch (t) {
      case "root":
        return e;
      case "upward-optional": {
        let r = (0, Qc.findConfigUpwards)(e);
        return r === null ? e : r;
      }
      case "upward": {
        let r = (0, Qc.findConfigUpwards)(e);
        if (r !== null) return r;
        throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${e}".\

One of the following config files must be in the directory tree: "${Qc.ROOT_CONFIG_FILENAMES.join(", ")}".`), {
          code: "BABEL_ROOT_NOT_FOUND",
          dirname: e
        });
      }
      default:
        throw new Error("Assertion failure - unknown rootMode value.");
    }
  }
  s(che, "resolveRootMode");
  function* jD(e) {
    if (e != null && (typeof e != "object" || Array.isArray(e)))
      throw new Error("Babel options must be an object, null, or undefined");
    let t = e ? (0, ahe.validate)("arguments", e) : {}, {
      envName: r = (0, ihe.getEnv)(),
      cwd: n = ".",
      root: i = ".",
      rootMode: a = "root",
      caller: o,
      cloneInputAst: l = !0
    } = t, u = Xc().resolve(n), c = che(Xc().resolve(u, i), a), f = typeof t.filename == "string" ? Xc().resolve(n, t.filename) : void 0, p = yield* (0, Qc.
    resolveShowConfigPath)(u), h = {
      filename: f,
      cwd: u,
      root: c,
      envName: r,
      caller: o,
      showConfig: p === f
    }, y = yield* (0, she.buildRootChain)(t, h);
    if (!y) return null;
    let v = {
      assumptions: {}
    };
    return y.options.forEach((b) => {
      (0, nhe.mergeOptions)(v, b);
    }), {
      options: Object.assign({}, v, {
        targets: (0, ohe.resolveTargets)(v, c),
        cloneInputAst: l,
        babelrc: !1,
        configFile: !1,
        browserslistConfigFile: !1,
        passPerPreset: !1,
        envName: h.envName,
        cwd: h.cwd,
        root: h.root,
        rootMode: "root",
        filename: typeof h.filename == "string" ? h.filename : void 0,
        plugins: y.plugins.map((b) => (0, FD.createItemFromDescriptor)(b)),
        presets: y.presets.map((b) => (0, FD.createItemFromDescriptor)(b))
      }),
      context: h,
      fileHandling: y.fileHandling,
      ignore: y.ignore,
      babelrc: y.babelrc,
      config: y.config,
      files: y.files
    };
  }
  s(jD, "loadPrivatePartialConfig");
  function* fhe(e) {
    let t = !1;
    if (typeof e == "object" && e !== null && !Array.isArray(e)) {
      var r = e;
      ({
        showIgnoredFiles: t
      } = r), e = uhe(r, lhe);
    }
    let n = yield* jD(e);
    if (!n) return null;
    let {
      options: i,
      babelrc: a,
      ignore: o,
      config: l,
      fileHandling: u,
      files: c
    } = n;
    return u === "ignored" && !t ? null : ((i.plugins || []).forEach((f) => {
      if (f.value instanceof rhe.default)
        throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
    }), new Zc(i, a ? a.filepath : void 0, o ? o.filepath : void 0, l ? l.filepath : void 0, u, c));
  }
  s(fhe, "loadPartialConfig");
  var Zc = class {
    static {
      s(this, "PartialConfig");
    }
    constructor(t, r, n, i, a, o) {
      this.options = void 0, this.babelrc = void 0, this.babelignore = void 0, this.config = void 0, this.fileHandling = void 0, this.files =
      void 0, this.options = t, this.babelignore = n, this.babelrc = r, this.config = i, this.fileHandling = a, this.files = o, Object.freeze(
      this);
    }
    hasFilesystemConfig() {
      return this.babelrc !== void 0 || this.config !== void 0;
    }
  };
  Object.freeze(Zc.prototype);
});

// ../node_modules/@babel/core/lib/config/full.js
var KD = T((tf) => {
  "use strict";
  Object.defineProperty(tf, "__esModule", {
    value: !0
  });
  tf.default = void 0;
  function qD() {
    let e = Er();
    return qD = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(qD, "_gensync");
  var _g = Gi(), LD = oc(), phe = gt(), UD = Tc(), dhe = jo(), hhe = Sg(), Bg = Ec();
  function Og() {
    let e = Ir();
    return Og = /* @__PURE__ */ s(function() {
      return e;
    }, "_traverse"), e;
  }
  s(Og, "_traverse");
  var kg = ei(), Ng = qo(), mhe = kD(), VD = P0(), yhe = wg(), ghe = ti(), XDe = tf.default = qD()(/* @__PURE__ */ s(function* (t) {
    var r;
    let n = yield* (0, yhe.default)(t);
    if (!n)
      return null;
    let {
      options: i,
      context: a,
      fileHandling: o
    } = n;
    if (o === "ignored")
      return null;
    let l = {}, {
      plugins: u,
      presets: c
    } = i;
    if (!u || !c)
      throw new Error("Assertion failure - plugins and presets exist");
    let f = Object.assign({}, a, {
      targets: i.targets
    }), p = /* @__PURE__ */ s((k) => {
      let j = (0, dhe.getItemDescriptor)(k);
      if (!j)
        throw new Error("Assertion failure - must be config item");
      return j;
    }, "toDescriptor"), h = c.map(p), y = u.map(p), v = [[]], d = [], b = [];
    if (yield* MD(a, /* @__PURE__ */ s(function* k(j, R) {
      let U = [];
      for (let W = 0; W < j.length; W++) {
        let q = j[W];
        if (q.options !== !1) {
          try {
            var Q = yield* She(q, f);
          } catch (M) {
            throw M.code === "BABEL_UNKNOWN_OPTION" && (0, Ng.checkNoUnwrappedItemOptionPairs)(j, W, "preset", M), M;
          }
          b.push(Q.externalDependencies), q.ownPass ? U.push({
            preset: Q.chain,
            pass: []
          }) : U.unshift({
            preset: Q.chain,
            pass: R
          });
        }
      }
      if (U.length > 0) {
        v.splice(1, 0, ...U.map((W) => W.pass).filter((W) => W !== R));
        for (let {
          preset: W,
          pass: q
        } of U) {
          if (!W || (q.push(...W.plugins), yield* k(W.presets, q))) return !0;
          W.options.forEach((K) => {
            (0, LD.mergeOptions)(l, K);
          });
        }
      }
    }, "recursePresetDescriptors"))(h, v[0])) return null;
    let I = l;
    (0, LD.mergeOptions)(I, i);
    let O = Object.assign({}, f, {
      assumptions: (r = I.assumptions) != null ? r : {}
    });
    return yield* MD(a, /* @__PURE__ */ s(function* () {
      v[0].unshift(...y);
      for (let R of v) {
        let U = [];
        d.push(U);
        for (let Q = 0; Q < R.length; Q++) {
          let W = R[Q];
          if (W.options !== !1) {
            try {
              var j = yield* WD(W, O);
            } catch (q) {
              throw q.code === "BABEL_UNKNOWN_PLUGIN_PROPERTY" && (0, Ng.checkNoUnwrappedItemOptionPairs)(R, Q, "plugin", q), q;
            }
            U.push(j), b.push(j.externalDependencies);
          }
        }
      }
    }, "loadPluginDescriptors"))(), I.plugins = d[0], I.presets = d.slice(1).filter((k) => k.length > 0).map((k) => ({
      plugins: k
    })), I.passPerPreset = I.presets.length > 0, {
      options: I,
      passes: d,
      externalDependencies: (0, Bg.finalize)(b)
    };
  }, "loadFullConfig"));
  function MD(e, t) {
    return function* (r, n) {
      try {
        return yield* t(r, n);
      } catch (a) {
        if (!/^\[BABEL\]/.test(a.message)) {
          var i;
          a.message = `[BABEL] ${(i = e.filename) != null ? i : "unknown file"}: ${a.message}`;
        }
        throw a;
      }
    };
  }
  s(MD, "enhanceError");
  var $D = /* @__PURE__ */ s((e) => (0, kg.makeWeakCache)(function* ({
    value: t,
    options: r,
    dirname: n,
    alias: i
  }, a) {
    if (r === !1) throw new Error("Assertion failure");
    r = r || {};
    let o = [], l = t;
    if (typeof t == "function") {
      let u = (0, _g.maybeAsync)(t, "You appear to be using an async plugin/preset, but Babel has been called synchronously"), c = Object.assign(
      {}, phe, e(a, o));
      try {
        l = yield* u(c, r, n);
      } catch (f) {
        throw i && (f.message += ` (While processing: ${JSON.stringify(i)})`), f;
      }
    }
    if (!l || typeof l != "object")
      throw new Error("Plugin/Preset did not return an object.");
    if ((0, _g.isThenable)(l))
      throw yield* [], new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you\
're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". \
(While processing: ${JSON.stringify(i)})`);
    if (o.length > 0 && (!a.configured() || a.mode() === "forever")) {
      let u = `A plugin/preset has external untracked dependencies (${o[0]}), but the cache `;
      throw a.configured() ? u += " has been configured to never be invalidated. " : u += "has not been configured to be invalidated when th\
e external dependencies change. ", u += `Plugins/presets should configure their cache to be invalidated when the external dependencies chang\
e, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`
(While processing: ${JSON.stringify(i)})`, new Error(u);
    }
    return {
      value: l,
      options: r,
      dirname: n,
      alias: i,
      externalDependencies: (0, Bg.finalize)(o)
    };
  }), "makeDescriptorLoader"), bhe = $D(VD.makePluginAPI), Ehe = $D(VD.makePresetAPI), vhe = (0, kg.makeWeakCache)(function* ({
    value: e,
    options: t,
    dirname: r,
    alias: n,
    externalDependencies: i
  }, a) {
    let o = (0, mhe.validatePluginObject)(e), l = Object.assign({}, o);
    if (l.visitor && (l.visitor = Og().default.explode(Object.assign({}, l.visitor))), l.inherits) {
      let u = {
        name: void 0,
        alias: `${n}$inherits`,
        value: l.inherits,
        options: t,
        dirname: r
      }, c = yield* (0, _g.forwardAsync)(WD, (f) => a.invalidate((p) => f(u, p)));
      l.pre = Ig(c.pre, l.pre), l.post = Ig(c.post, l.post), l.manipulateOptions = Ig(c.manipulateOptions, l.manipulateOptions), l.visitor =
      Og().default.visitors.merge([c.visitor || {}, l.visitor || {}]), c.externalDependencies.length > 0 && (i.length === 0 ? i = c.externalDependencies :
      i = (0, Bg.finalize)([i, c.externalDependencies]));
    }
    return new UD.default(l, t, n, i);
  });
  function* WD(e, t) {
    if (e.value instanceof UD.default) {
      if (e.options)
        throw new Error("Passed options to an existing Plugin instance will not work.");
      return e.value;
    }
    return yield* vhe(yield* bhe(e, t), t);
  }
  s(WD, "loadPluginDescriptor");
  var Dg = /* @__PURE__ */ s((e) => e && typeof e != "function", "needsFilename"), RD = /* @__PURE__ */ s((e, t) => {
    if (Dg(e.test) || Dg(e.include) || Dg(e.exclude)) {
      let r = t.name ? `"${t.name}"` : "/* your preset */";
      throw new ghe.default([`Preset ${r} requires a filename to be set when babel is called directly,`, "```", `babel.transformSync(code, {\
 filename: 'file.ts', presets: [${r}] });`, "```", "See https://babeljs.io/docs/en/options#filename for more information."].join(`
`));
    }
  }, "validateIfOptionNeedsFilename"), The = /* @__PURE__ */ s((e, t, r) => {
    if (!t.filename) {
      var n;
      let {
        options: i
      } = e;
      RD(i, r), (n = i.overrides) == null || n.forEach((a) => RD(a, r));
    }
  }, "validatePreset"), xhe = (0, kg.makeWeakCacheSync)(({
    value: e,
    dirname: t,
    alias: r,
    externalDependencies: n
  }) => ({
    options: (0, Ng.validate)("preset", e),
    alias: r,
    dirname: t,
    externalDependencies: n
  }));
  function* She(e, t) {
    let r = xhe(yield* Ehe(e, t));
    return The(r, t, e), {
      chain: yield* (0, hhe.buildPresetChain)(r, t),
      externalDependencies: r.externalDependencies
    };
  }
  s(She, "loadPresetDescriptor");
  function Ig(e, t) {
    let r = [e, t].filter(Boolean);
    return r.length <= 1 ? r[0] : function(...n) {
      for (let i of r)
        i.apply(this, n);
    };
  }
  s(Ig, "chain");
});

// ../node_modules/@babel/core/lib/config/index.js
var oa = T((Lr) => {
  "use strict";
  Object.defineProperty(Lr, "__esModule", {
    value: !0
  });
  Lr.createConfigItem = Nhe;
  Lr.createConfigItemAsync = Ohe;
  Lr.createConfigItemSync = zD;
  Object.defineProperty(Lr, "default", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return GD.default;
    }, "get")
  });
  Lr.loadOptions = _he;
  Lr.loadOptionsAsync = Ihe;
  Lr.loadOptionsSync = YD;
  Lr.loadPartialConfig = whe;
  Lr.loadPartialConfigAsync = Che;
  Lr.loadPartialConfigSync = HD;
  function af() {
    let e = Er();
    return af = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(af, "_gensync");
  var GD = KD(), Phe = wg(), Ahe = jo(), jr = Fn(), rf = af()(Phe.loadPartialConfig);
  function Che(...e) {
    return (0, jr.beginHiddenCallStack)(rf.async)(...e);
  }
  s(Che, "loadPartialConfigAsync");
  function HD(...e) {
    return (0, jr.beginHiddenCallStack)(rf.sync)(...e);
  }
  s(HD, "loadPartialConfigSync");
  function whe(e, t) {
    if (t !== void 0)
      (0, jr.beginHiddenCallStack)(rf.errback)(e, t);
    else if (typeof e == "function")
      (0, jr.beginHiddenCallStack)(rf.errback)(void 0, e);
    else
      return HD(e);
  }
  s(whe, "loadPartialConfig");
  function* Dhe(e) {
    var t;
    let r = yield* (0, GD.default)(e);
    return (t = r?.options) != null ? t : null;
  }
  s(Dhe, "loadOptionsImpl");
  var nf = af()(Dhe);
  function Ihe(...e) {
    return (0, jr.beginHiddenCallStack)(nf.async)(...e);
  }
  s(Ihe, "loadOptionsAsync");
  function YD(...e) {
    return (0, jr.beginHiddenCallStack)(nf.sync)(...e);
  }
  s(YD, "loadOptionsSync");
  function _he(e, t) {
    if (t !== void 0)
      (0, jr.beginHiddenCallStack)(nf.errback)(e, t);
    else if (typeof e == "function")
      (0, jr.beginHiddenCallStack)(nf.errback)(void 0, e);
    else
      return YD(e);
  }
  s(_he, "loadOptions");
  var sf = af()(Ahe.createConfigItem);
  function Ohe(...e) {
    return (0, jr.beginHiddenCallStack)(sf.async)(...e);
  }
  s(Ohe, "createConfigItemAsync");
  function zD(...e) {
    return (0, jr.beginHiddenCallStack)(sf.sync)(...e);
  }
  s(zD, "createConfigItemSync");
  function Nhe(e, t, r) {
    if (r !== void 0)
      (0, jr.beginHiddenCallStack)(sf.errback)(e, t, r);
    else if (typeof t == "function")
      (0, jr.beginHiddenCallStack)(sf.errback)(e, void 0, r);
    else
      return zD(e, t);
  }
  s(Nhe, "createConfigItem");
});

// ../node_modules/@babel/core/lib/transformation/plugin-pass.js
var JD = T((of) => {
  "use strict";
  Object.defineProperty(of, "__esModule", {
    value: !0
  });
  of.default = void 0;
  var Wo = class {
    static {
      s(this, "PluginPass");
    }
    constructor(t, r, n) {
      this._map = /* @__PURE__ */ new Map(), this.key = void 0, this.file = void 0, this.opts = void 0, this.cwd = void 0, this.filename = void 0,
      this.key = r, this.file = t, this.opts = n || {}, this.cwd = t.opts.cwd, this.filename = t.opts.filename;
    }
    set(t, r) {
      this._map.set(t, r);
    }
    get(t) {
      return this._map.get(t);
    }
    availableHelper(t, r) {
      return this.file.availableHelper(t, r);
    }
    addHelper(t) {
      return this.file.addHelper(t);
    }
    buildCodeFrameError(t, r, n) {
      return this.file.buildCodeFrameError(t, r, n);
    }
  };
  of.default = Wo;
  Wo.prototype.getModuleName = /* @__PURE__ */ s(function() {
    return this.file.getModuleName();
  }, "getModuleName"), Wo.prototype.addImport = /* @__PURE__ */ s(function() {
    this.file.addImport();
  }, "addImport");
});

// ../node_modules/@babel/core/lib/transformation/block-hoist-plugin.js
var tI = T((jg) => {
  "use strict";
  Object.defineProperty(jg, "__esModule", {
    value: !0
  });
  jg.default = khe;
  function ZD() {
    let e = Ir();
    return ZD = /* @__PURE__ */ s(function() {
      return e;
    }, "_traverse"), e;
  }
  s(ZD, "_traverse");
  var Bhe = Tc(), Fg, XD = {
    name: "internal.blockHoist",
    visitor: {
      Block: {
        exit({
          node: e
        }) {
          e.body = QD(e.body);
        }
      },
      SwitchCase: {
        exit({
          node: e
        }) {
          e.consequent = QD(e.consequent);
        }
      }
    }
  };
  function QD(e) {
    let t = Math.pow(2, 30) - 1, r = !1;
    for (let n = 0; n < e.length; n++) {
      let i = e[n], a = eI(i);
      if (a > t) {
        r = !0;
        break;
      }
      t = a;
    }
    return r ? Fhe(e.slice()) : e;
  }
  s(QD, "performHoisting");
  function khe() {
    return Fg || (Fg = new Bhe.default(Object.assign({}, XD, {
      visitor: ZD().default.explode(XD.visitor)
    }), {})), Fg;
  }
  s(khe, "loadBlockHoistPlugin");
  function eI(e) {
    let t = e?._blockHoist;
    return t == null ? 1 : t === !0 ? 2 : t;
  }
  s(eI, "priority");
  function Fhe(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let i = 0; i < e.length; i++) {
      let a = e[i], o = eI(a);
      (t[o] || (t[o] = [])).push(a);
    }
    let r = Object.keys(t).map((i) => +i).sort((i, a) => a - i), n = 0;
    for (let i of r) {
      let a = t[i];
      for (let o of a)
        e[n++] = o;
    }
    return e;
  }
  s(Fhe, "stableSort");
});

// ../node_modules/@babel/core/lib/transformation/normalize-opts.js
var Mg = T((Lg) => {
  "use strict";
  Object.defineProperty(Lg, "__esModule", {
    value: !0
  });
  Lg.default = jhe;
  function lf() {
    let e = require("path");
    return lf = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(lf, "_path");
  function jhe(e) {
    let {
      filename: t,
      cwd: r,
      filenameRelative: n = typeof t == "string" ? lf().relative(r, t) : "unknown",
      sourceType: i = "module",
      inputSourceMap: a,
      sourceMaps: o = !!a,
      sourceRoot: l = e.options.moduleRoot,
      sourceFileName: u = lf().basename(n),
      comments: c = !0,
      compact: f = "auto"
    } = e.options, p = e.options, h = Object.assign({}, p, {
      parserOpts: Object.assign({
        sourceType: lf().extname(n) === ".mjs" ? "module" : i,
        sourceFileName: t,
        plugins: []
      }, p.parserOpts),
      generatorOpts: Object.assign({
        filename: t,
        auxiliaryCommentBefore: p.auxiliaryCommentBefore,
        auxiliaryCommentAfter: p.auxiliaryCommentAfter,
        retainLines: p.retainLines,
        comments: c,
        shouldPrintComment: p.shouldPrintComment,
        compact: f,
        minified: p.minified,
        sourceMaps: o,
        sourceRoot: l,
        sourceFileName: u
      }, p.generatorOpts)
    });
    for (let y of e.passes)
      for (let v of y)
        v.manipulateOptions && v.manipulateOptions(h, h.parserOpts);
    return h;
  }
  s(jhe, "normalizeOptions");
});

// ../node_modules/convert-source-map/index.js
var Rg = T((Pt) => {
  "use strict";
  Object.defineProperty(Pt, "commentRegex", {
    get: /* @__PURE__ */ s(function() {
      return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;
    }, "getCommentRegex")
  });
  Object.defineProperty(Pt, "mapFileCommentRegex", {
    get: /* @__PURE__ */ s(function() {
      return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/mg;
    }, "getMapFileCommentRegex")
  });
  var uf;
  typeof Buffer < "u" ? typeof Buffer.from == "function" ? uf = Lhe : uf = Mhe : uf = Rhe;
  function Lhe(e) {
    return Buffer.from(e, "base64").toString();
  }
  s(Lhe, "decodeBase64WithBufferFrom");
  function Mhe(e) {
    if (typeof value == "number")
      throw new TypeError("The value to decode must not be of type number.");
    return new Buffer(e, "base64").toString();
  }
  s(Mhe, "decodeBase64WithNewBuffer");
  function Rhe(e) {
    return decodeURIComponent(escape(atob(e)));
  }
  s(Rhe, "decodeBase64WithAtob");
  function qhe(e) {
    return e.split(",").pop();
  }
  s(qhe, "stripComment");
  function Uhe(e, t) {
    var r = Pt.mapFileCommentRegex.exec(e), n = r[1] || r[2];
    try {
      var e = t(n);
      return e != null && typeof e.catch == "function" ? e.catch(i) : e;
    } catch (a) {
      i(a);
    }
    function i(a) {
      throw new Error("An error occurred while trying to read the map file at " + n + `
` + a.stack);
    }
    s(i, "throwError");
  }
  s(Uhe, "readFromFileMap");
  function Jt(e, t) {
    t = t || {}, t.hasComment && (e = qhe(e)), t.encoding === "base64" ? e = uf(e) : t.encoding === "uri" && (e = decodeURIComponent(e)), (t.
    isJSON || t.encoding) && (e = JSON.parse(e)), this.sourcemap = e;
  }
  s(Jt, "Converter");
  Jt.prototype.toJSON = function(e) {
    return JSON.stringify(this.sourcemap, null, e);
  };
  typeof Buffer < "u" ? typeof Buffer.from == "function" ? Jt.prototype.toBase64 = Vhe : Jt.prototype.toBase64 = $he : Jt.prototype.toBase64 =
  Whe;
  function Vhe() {
    var e = this.toJSON();
    return Buffer.from(e, "utf8").toString("base64");
  }
  s(Vhe, "encodeBase64WithBufferFrom");
  function $he() {
    var e = this.toJSON();
    if (typeof e == "number")
      throw new TypeError("The json to encode must not be of type number.");
    return new Buffer(e, "utf8").toString("base64");
  }
  s($he, "encodeBase64WithNewBuffer");
  function Whe() {
    var e = this.toJSON();
    return btoa(unescape(encodeURIComponent(e)));
  }
  s(Whe, "encodeBase64WithBtoa");
  Jt.prototype.toURI = function() {
    var e = this.toJSON();
    return encodeURIComponent(e);
  };
  Jt.prototype.toComment = function(e) {
    var t, r, n;
    return e != null && e.encoding === "uri" ? (t = "", r = this.toURI()) : (t = ";base64", r = this.toBase64()), n = "sourceMappingURL=data\
:application/json;charset=utf-8" + t + "," + r, e != null && e.multiline ? "/*# " + n + " */" : "//# " + n;
  };
  Jt.prototype.toObject = function() {
    return JSON.parse(this.toJSON());
  };
  Jt.prototype.addProperty = function(e, t) {
    if (this.sourcemap.hasOwnProperty(e)) throw new Error('property "' + e + '" already exists on the sourcemap, use set property instead');
    return this.setProperty(e, t);
  };
  Jt.prototype.setProperty = function(e, t) {
    return this.sourcemap[e] = t, this;
  };
  Jt.prototype.getProperty = function(e) {
    return this.sourcemap[e];
  };
  Pt.fromObject = function(e) {
    return new Jt(e);
  };
  Pt.fromJSON = function(e) {
    return new Jt(e, { isJSON: !0 });
  };
  Pt.fromURI = function(e) {
    return new Jt(e, { encoding: "uri" });
  };
  Pt.fromBase64 = function(e) {
    return new Jt(e, { encoding: "base64" });
  };
  Pt.fromComment = function(e) {
    var t, r;
    return e = e.replace(/^\/\*/g, "//").replace(/\*\/$/g, ""), t = Pt.commentRegex.exec(e), r = t && t[4] || "uri", new Jt(e, { encoding: r,
    hasComment: !0 });
  };
  function rI(e) {
    return new Jt(e, { isJSON: !0 });
  }
  s(rI, "makeConverter");
  Pt.fromMapFileComment = function(e, t) {
    if (typeof t == "string")
      throw new Error(
        "String directory paths are no longer supported with `fromMapFileComment`\nPlease review the Upgrading documentation at https://githu\
b.com/thlorenz/convert-source-map#upgrading"
      );
    var r = Uhe(e, t);
    return r != null && typeof r.then == "function" ? r.then(rI) : rI(r);
  };
  Pt.fromSource = function(e) {
    var t = e.match(Pt.commentRegex);
    return t ? Pt.fromComment(t.pop()) : null;
  };
  Pt.fromMapFileSource = function(e, t) {
    if (typeof t == "string")
      throw new Error(
        "String directory paths are no longer supported with `fromMapFileSource`\nPlease review the Upgrading documentation at https://github\
.com/thlorenz/convert-source-map#upgrading"
      );
    var r = e.match(Pt.mapFileCommentRegex);
    return r ? Pt.fromMapFileComment(r.pop(), t) : null;
  };
  Pt.removeComments = function(e) {
    return e.replace(Pt.commentRegex, "");
  };
  Pt.removeMapFileComments = function(e) {
    return e.replace(Pt.mapFileCommentRegex, "");
  };
  Pt.generateMapFileComment = function(e, t) {
    var r = "sourceMappingURL=" + e;
    return t && t.multiline ? "/*# " + r + " */" : "//# " + r;
  };
});

// ../node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js
var iI = T((qg) => {
  "use strict";
  Object.defineProperty(qg, "__esModule", {
    value: !0
  });
  qg.default = Khe;
  var sI = {
    asyncDoExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-async-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions"
      }
    },
    decimal: {
      syntax: {
        name: "@babel/plugin-syntax-decimal",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal"
      }
    },
    decorators: {
      syntax: {
        name: "@babel/plugin-syntax-decorators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators"
      },
      transform: {
        name: "@babel/plugin-proposal-decorators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators"
      }
    },
    doExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions"
      },
      transform: {
        name: "@babel/plugin-proposal-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions"
      }
    },
    exportDefaultFrom: {
      syntax: {
        name: "@babel/plugin-syntax-export-default-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from"
      },
      transform: {
        name: "@babel/plugin-proposal-export-default-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from"
      }
    },
    flow: {
      syntax: {
        name: "@babel/plugin-syntax-flow",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow"
      },
      transform: {
        name: "@babel/preset-flow",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow"
      }
    },
    functionBind: {
      syntax: {
        name: "@babel/plugin-syntax-function-bind",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind"
      },
      transform: {
        name: "@babel/plugin-proposal-function-bind",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind"
      }
    },
    functionSent: {
      syntax: {
        name: "@babel/plugin-syntax-function-sent",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent"
      },
      transform: {
        name: "@babel/plugin-proposal-function-sent",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent"
      }
    },
    jsx: {
      syntax: {
        name: "@babel/plugin-syntax-jsx",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx"
      },
      transform: {
        name: "@babel/preset-react",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react"
      }
    },
    importAttributes: {
      syntax: {
        name: "@babel/plugin-syntax-import-attributes",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes"
      }
    },
    pipelineOperator: {
      syntax: {
        name: "@babel/plugin-syntax-pipeline-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator"
      },
      transform: {
        name: "@babel/plugin-proposal-pipeline-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator"
      }
    },
    recordAndTuple: {
      syntax: {
        name: "@babel/plugin-syntax-record-and-tuple",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple"
      }
    },
    throwExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-throw-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions"
      },
      transform: {
        name: "@babel/plugin-proposal-throw-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions"
      }
    },
    typescript: {
      syntax: {
        name: "@babel/plugin-syntax-typescript",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript"
      },
      transform: {
        name: "@babel/preset-typescript",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript"
      }
    }
  };
  Object.assign(sI, {
    asyncGenerators: {
      syntax: {
        name: "@babel/plugin-syntax-async-generators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators"
      },
      transform: {
        name: "@babel/plugin-transform-async-generator-functions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions"
      }
    },
    classProperties: {
      syntax: {
        name: "@babel/plugin-syntax-class-properties",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
      },
      transform: {
        name: "@babel/plugin-transform-class-properties",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
      }
    },
    classPrivateProperties: {
      syntax: {
        name: "@babel/plugin-syntax-class-properties",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
      },
      transform: {
        name: "@babel/plugin-transform-class-properties",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
      }
    },
    classPrivateMethods: {
      syntax: {
        name: "@babel/plugin-syntax-class-properties",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
      },
      transform: {
        name: "@babel/plugin-transform-private-methods",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods"
      }
    },
    classStaticBlock: {
      syntax: {
        name: "@babel/plugin-syntax-class-static-block",
        url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block"
      },
      transform: {
        name: "@babel/plugin-transform-class-static-block",
        url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block"
      }
    },
    dynamicImport: {
      syntax: {
        name: "@babel/plugin-syntax-dynamic-import",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import"
      }
    },
    exportNamespaceFrom: {
      syntax: {
        name: "@babel/plugin-syntax-export-namespace-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from"
      },
      transform: {
        name: "@babel/plugin-transform-export-namespace-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from"
      }
    },
    importAssertions: {
      syntax: {
        name: "@babel/plugin-syntax-import-assertions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions"
      }
    },
    importMeta: {
      syntax: {
        name: "@babel/plugin-syntax-import-meta",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta"
      }
    },
    logicalAssignment: {
      syntax: {
        name: "@babel/plugin-syntax-logical-assignment-operators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators"
      },
      transform: {
        name: "@babel/plugin-transform-logical-assignment-operators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators"
      }
    },
    moduleStringNames: {
      syntax: {
        name: "@babel/plugin-syntax-module-string-names",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names"
      }
    },
    numericSeparator: {
      syntax: {
        name: "@babel/plugin-syntax-numeric-separator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator"
      },
      transform: {
        name: "@babel/plugin-transform-numeric-separator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator"
      }
    },
    nullishCoalescingOperator: {
      syntax: {
        name: "@babel/plugin-syntax-nullish-coalescing-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator"
      },
      transform: {
        name: "@babel/plugin-transform-nullish-coalescing-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator"
      }
    },
    objectRestSpread: {
      syntax: {
        name: "@babel/plugin-syntax-object-rest-spread",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread"
      },
      transform: {
        name: "@babel/plugin-transform-object-rest-spread",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread"
      }
    },
    optionalCatchBinding: {
      syntax: {
        name: "@babel/plugin-syntax-optional-catch-binding",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding"
      },
      transform: {
        name: "@babel/plugin-transform-optional-catch-binding",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding"
      }
    },
    optionalChaining: {
      syntax: {
        name: "@babel/plugin-syntax-optional-chaining",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining"
      },
      transform: {
        name: "@babel/plugin-transform-optional-chaining",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining"
      }
    },
    privateIn: {
      syntax: {
        name: "@babel/plugin-syntax-private-property-in-object",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object"
      },
      transform: {
        name: "@babel/plugin-transform-private-property-in-object",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object"
      }
    },
    regexpUnicodeSets: {
      syntax: {
        name: "@babel/plugin-syntax-unicode-sets-regex",
        url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md"
      },
      transform: {
        name: "@babel/plugin-transform-unicode-sets-regex",
        url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md"
      }
    }
  });
  var nI = /* @__PURE__ */ s(({
    name: e,
    url: t
  }) => `${e} (${t})`, "getNameURLCombination");
  function Khe(e, t, r, n) {
    let i = `Support for the experimental syntax '${e}' isn't currently enabled (${t.line}:${t.column + 1}):

` + r, a = sI[e];
    if (a) {
      let {
        syntax: l,
        transform: u
      } = a;
      if (l) {
        let c = nI(l);
        if (u) {
          let f = nI(u), p = u.name.startsWith("@babel/plugin") ? "plugins" : "presets";
          i += `

Add ${f} to the '${p}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${c} to the 'plugins' section to enable parsing.`;
        } else
          i += `

Add ${c} to the 'plugins' section of your Babel config to enable parsing.`;
      }
    }
    return i += `

If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${n === "unknown" ? "<name of the input file>" : n} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.
`, i;
  }
  s(Khe, "generateMissingPluginMessage");
});

// ../node_modules/@babel/core/lib/parser/index.js
var $g = T((Vg) => {
  "use strict";
  Object.defineProperty(Vg, "__esModule", {
    value: !0
  });
  Vg.default = Hhe;
  function Ug() {
    let e = js();
    return Ug = /* @__PURE__ */ s(function() {
      return e;
    }, "_parser"), e;
  }
  s(Ug, "_parser");
  function aI() {
    let e = to();
    return aI = /* @__PURE__ */ s(function() {
      return e;
    }, "_codeFrame"), e;
  }
  s(aI, "_codeFrame");
  var Ghe = iI();
  function* Hhe(e, {
    parserOpts: t,
    highlightCode: r = !0,
    filename: n = "unknown"
  }, i) {
    try {
      let a = [];
      for (let o of e)
        for (let l of o) {
          let {
            parserOverride: u
          } = l;
          if (u) {
            let c = u(i, t, Ug().parse);
            c !== void 0 && a.push(c);
          }
        }
      if (a.length === 0)
        return (0, Ug().parse)(i, t);
      if (a.length === 1) {
        if (yield* [], typeof a[0].then == "function")
          throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're us\
ing a published plugin, you may need to upgrade your @babel/core version.");
        return a[0];
      }
      throw new Error("More than one plugin attempted to override parsing.");
    } catch (a) {
      a.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" && (a.message += `
Consider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.`);
      let {
        loc: o,
        missingPlugin: l
      } = a;
      if (o) {
        let u = (0, aI().codeFrameColumns)(i, {
          start: {
            line: o.line,
            column: o.column + 1
          }
        }, {
          highlightCode: r
        });
        l ? a.message = `${n}: ` + (0, Ghe.default)(l[0], o, u, n) : a.message = `${n}: ${a.message}

` + u, a.code = "BABEL_PARSE_ERROR";
      }
      throw a;
    }
  }
  s(Hhe, "parser");
});

// ../node_modules/@babel/core/lib/transformation/util/clone-deep.js
var oI = T((Kg) => {
  "use strict";
  Object.defineProperty(Kg, "__esModule", {
    value: !0
  });
  Kg.default = Yhe;
  function Wg(e, t) {
    if (e !== null) {
      if (t.has(e)) return t.get(e);
      let r;
      if (Array.isArray(e)) {
        r = new Array(e.length), t.set(e, r);
        for (let n = 0; n < e.length; n++)
          r[n] = typeof e[n] != "object" ? e[n] : Wg(e[n], t);
      } else {
        r = {}, t.set(e, r);
        let n = Object.keys(e);
        for (let i = 0; i < n.length; i++) {
          let a = n[i];
          r[a] = typeof e[a] != "object" ? e[a] : Wg(e[a], t);
        }
      }
      return r;
    }
    return e;
  }
  s(Wg, "deepClone");
  function Yhe(e) {
    return typeof e != "object" ? e : Wg(e, /* @__PURE__ */ new Map());
  }
  s(Yhe, "_default");
});

// ../node_modules/@babel/core/lib/transformation/normalize-file.js
var dI = T((zg) => {
  "use strict";
  Object.defineProperty(zg, "__esModule", {
    value: !0
  });
  zg.default = tme;
  function cI() {
    let e = require("fs");
    return cI = /* @__PURE__ */ s(function() {
      return e;
    }, "_fs"), e;
  }
  s(cI, "_fs");
  function Yg() {
    let e = require("path");
    return Yg = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(Yg, "_path");
  function fI() {
    let e = Rs();
    return fI = /* @__PURE__ */ s(function() {
      return e;
    }, "_debug"), e;
  }
  s(fI, "_debug");
  function pI() {
    let e = Se();
    return pI = /* @__PURE__ */ s(function() {
      return e;
    }, "_t"), e;
  }
  s(pI, "_t");
  function cf() {
    let e = Rg();
    return cf = /* @__PURE__ */ s(function() {
      return e;
    }, "_convertSourceMap"), e;
  }
  s(cf, "_convertSourceMap");
  var zhe = Xy(), Jhe = $g(), Xhe = oI(), {
    file: Qhe,
    traverseFast: Zhe
  } = pI(), Gg = fI()("babel:transform:file"), eme = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,.*$/,
  lI = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
  function* tme(e, t, r, n) {
    if (r = `${r || ""}`, n) {
      if (n.type === "Program")
        n = Qhe(n, [], []);
      else if (n.type !== "File")
        throw new Error("AST root must be a Program or File node");
      t.cloneInputAst && (n = (0, Xhe.default)(n));
    } else
      n = yield* (0, Jhe.default)(e, t, r);
    let i = null;
    if (t.inputSourceMap !== !1) {
      if (typeof t.inputSourceMap == "object" && (i = cf().fromObject(t.inputSourceMap)), !i) {
        let a = uI(eme, n);
        if (a)
          try {
            i = cf().fromComment("//" + a);
          } catch {
            Gg("discarding unknown inline input sourcemap");
          }
      }
      if (!i) {
        let a = uI(lI, n);
        if (typeof t.filename == "string" && a)
          try {
            let o = lI.exec(a), l = cI().readFileSync(Yg().resolve(Yg().dirname(t.filename), o[1]), "utf8");
            i = cf().fromJSON(l);
          } catch (o) {
            Gg("discarding unknown file input sourcemap", o);
          }
        else a && Gg("discarding un-loadable file input sourcemap");
      }
    }
    return new zhe.default(t, {
      code: r,
      ast: n,
      inputMap: i
    });
  }
  s(tme, "normalizeFile");
  function Hg(e, t, r) {
    return t && (t = t.filter(({
      value: n
    }) => e.test(n) ? (r = n, !1) : !0)), [t, r];
  }
  s(Hg, "extractCommentsFromList");
  function uI(e, t) {
    let r = null;
    return Zhe(t, (n) => {
      [n.leadingComments, r] = Hg(e, n.leadingComments, r), [n.innerComments, r] = Hg(e, n.innerComments, r), [n.trailingComments, r] = Hg(e,
      n.trailingComments, r);
    }), r;
  }
  s(uI, "extractComments");
});

// ../node_modules/@ampproject/remapping/dist/remapping.umd.js
var hI = T((Jg, Xg) => {
  (function(e, t) {
    typeof Jg == "object" && typeof Xg < "u" ? Xg.exports = t(bu(), Pm()) : typeof define == "function" && define.amd ? define(["@jridgewell\
/trace-mapping", "@jridgewell/gen-mapping"], t) : (e = typeof globalThis < "u" ? globalThis : e || self, e.remapping = t(e.traceMapping, e.genMapping));
  })(Jg, function(e, t) {
    "use strict";
    let r = /* @__PURE__ */ i("", -1, -1, "", null, !1), n = [];
    function i(d, b, E, I, O, k) {
      return { source: d, line: b, column: E, name: I, content: O, ignore: k };
    }
    s(i, "SegmentObject");
    function a(d, b, E, I, O) {
      return {
        map: d,
        sources: b,
        source: E,
        content: I,
        ignore: O
      };
    }
    s(a, "Source");
    function o(d, b) {
      return a(d, b, "", null, !1);
    }
    s(o, "MapSource");
    function l(d, b, E) {
      return a(null, n, d, b, E);
    }
    s(l, "OriginalSource");
    function u(d) {
      let b = new t.GenMapping({ file: d.map.file }), { sources: E, map: I } = d, O = I.names, k = e.decodedMappings(I);
      for (let j = 0; j < k.length; j++) {
        let R = k[j];
        for (let U = 0; U < R.length; U++) {
          let Q = R[U], W = Q[0], q = r;
          if (Q.length !== 1) {
            let ne = E[Q[1]];
            if (q = c(ne, Q[2], Q[3], Q.length === 5 ? O[Q[4]] : ""), q == null)
              continue;
          }
          let { column: M, line: K, name: fe, content: ie, source: X, ignore: J } = q;
          t.maybeAddSegment(b, j, W, X, K, M, fe), X && ie != null && t.setSourceContent(b, X, ie), J && t.setIgnore(b, X, !0);
        }
      }
      return b;
    }
    s(u, "traceMappings");
    function c(d, b, E, I) {
      if (!d.map)
        return i(d.source, b, E, I, d.content, d.ignore);
      let O = e.traceSegment(d.map, b, E);
      return O == null ? null : O.length === 1 ? r : c(d.sources[O[1]], O[2], O[3], O.length === 5 ? d.map.names[O[4]] : I);
    }
    s(c, "originalPositionFor");
    function f(d) {
      return Array.isArray(d) ? d : [d];
    }
    s(f, "asArray");
    function p(d, b) {
      let E = f(d).map((k) => new e.TraceMap(k, "")), I = E.pop();
      for (let k = 0; k < E.length; k++)
        if (E[k].sources.length > 1)
          throw new Error(`Transformation map ${k} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
      let O = h(I, b, "", 0);
      for (let k = E.length - 1; k >= 0; k--)
        O = o(E[k], [O]);
      return O;
    }
    s(p, "buildSourceMapTree");
    function h(d, b, E, I) {
      let { resolvedSources: O, sourcesContent: k, ignoreList: j } = d, R = I + 1, U = O.map((Q, W) => {
        let q = {
          importer: E,
          depth: R,
          source: Q || "",
          content: void 0,
          ignore: void 0
        }, M = b(q.source, q), { source: K, content: fe, ignore: ie } = q;
        if (M)
          return h(new e.TraceMap(M, K), b, K, R);
        let X = fe !== void 0 ? fe : k ? k[W] : null, J = ie !== void 0 ? ie : j ? j.includes(W) : !1;
        return l(K, X, J);
      });
      return o(d, U);
    }
    s(h, "build");
    class y {
      static {
        s(this, "SourceMap");
      }
      constructor(b, E) {
        let I = E.decodedMappings ? t.toDecodedMap(b) : t.toEncodedMap(b);
        this.version = I.version, this.file = I.file, this.mappings = I.mappings, this.names = I.names, this.ignoreList = I.ignoreList, this.
        sourceRoot = I.sourceRoot, this.sources = I.sources, E.excludeContent || (this.sourcesContent = I.sourcesContent);
      }
      toString() {
        return JSON.stringify(this);
      }
    }
    function v(d, b, E) {
      let I = typeof E == "object" ? E : { excludeContent: !!E, decodedMappings: !1 }, O = p(d, b);
      return new y(u(O), I);
    }
    return s(v, "remapping"), v;
  });
});

// ../node_modules/@babel/core/lib/transformation/file/merge-map.js
var gI = T((Qg) => {
  "use strict";
  Object.defineProperty(Qg, "__esModule", {
    value: !0
  });
  Qg.default = rme;
  function yI() {
    let e = hI();
    return yI = /* @__PURE__ */ s(function() {
      return e;
    }, "_remapping"), e;
  }
  s(yI, "_remapping");
  function rme(e, t, r) {
    let n = r.replace(/\\/g, "/"), i = !1, a = yI()(mI(t), (o, l) => o === n && !i ? (i = !0, l.source = "", mI(e)) : null);
    return typeof e.sourceRoot == "string" && (a.sourceRoot = e.sourceRoot), Object.assign({}, a);
  }
  s(rme, "mergeSourceMap");
  function mI(e) {
    return Object.assign({}, e, {
      sourceRoot: null
    });
  }
  s(mI, "rootless");
});

// ../node_modules/@babel/core/lib/transformation/file/generate.js
var EI = T((eb) => {
  "use strict";
  Object.defineProperty(eb, "__esModule", {
    value: !0
  });
  eb.default = sme;
  function bI() {
    let e = Rg();
    return bI = /* @__PURE__ */ s(function() {
      return e;
    }, "_convertSourceMap"), e;
  }
  s(bI, "_convertSourceMap");
  function Zg() {
    let e = fo();
    return Zg = /* @__PURE__ */ s(function() {
      return e;
    }, "_generator"), e;
  }
  s(Zg, "_generator");
  var nme = gI();
  function sme(e, t) {
    let {
      opts: r,
      ast: n,
      code: i,
      inputMap: a
    } = t, {
      generatorOpts: o
    } = r;
    o.inputSourceMap = a?.toObject();
    let l = [];
    for (let p of e)
      for (let h of p) {
        let {
          generatorOverride: y
        } = h;
        if (y) {
          let v = y(n, o, i, Zg().default);
          v !== void 0 && l.push(v);
        }
      }
    let u;
    if (l.length === 0)
      u = (0, Zg().default)(n, o, i);
    else if (l.length === 1) {
      if (u = l[0], typeof u.then == "function")
        throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're usi\
ng a published plugin, you may need to upgrade your @babel/core version.");
    } else
      throw new Error("More than one plugin attempted to override codegen.");
    let {
      code: c,
      decodedMap: f = u.map
    } = u;
    return u.__mergedMap ? f = Object.assign({}, u.map) : f && (a ? f = (0, nme.default)(a.toObject(), f, o.sourceFileName) : f = u.map), (r.
    sourceMaps === "inline" || r.sourceMaps === "both") && (c += `
` + bI().fromObject(f).toComment()), r.sourceMaps === "inline" && (f = null), {
      outputCode: c,
      outputMap: f
    };
  }
  s(sme, "generateCode");
});

// ../node_modules/@babel/core/lib/transformation/index.js
var ff = T((rb) => {
  "use strict";
  Object.defineProperty(rb, "__esModule", {
    value: !0
  });
  rb.run = fme;
  function tb() {
    let e = Ir();
    return tb = /* @__PURE__ */ s(function() {
      return e;
    }, "_traverse"), e;
  }
  s(tb, "_traverse");
  var ime = JD(), ame = tI(), ome = Mg(), lme = dI(), ume = EI(), cme = Ec();
  function* fme(e, t, r) {
    let n = yield* (0, lme.default)(e.passes, (0, ome.default)(e), t, r), i = n.opts;
    try {
      yield* pme(n, e.passes);
    } catch (c) {
      var a;
      throw c.message = `${(a = i.filename) != null ? a : "unknown file"}: ${c.message}`, c.code || (c.code = "BABEL_TRANSFORM_ERROR"), c;
    }
    let o, l;
    try {
      i.code !== !1 && ({
        outputCode: o,
        outputMap: l
      } = (0, ume.default)(e.passes, n));
    } catch (c) {
      var u;
      throw c.message = `${(u = i.filename) != null ? u : "unknown file"}: ${c.message}`, c.code || (c.code = "BABEL_GENERATE_ERROR"), c;
    }
    return {
      metadata: n.metadata,
      options: i,
      ast: i.ast === !0 ? n.ast : null,
      code: o === void 0 ? null : o,
      map: l === void 0 ? null : l,
      sourceType: n.ast.program.sourceType,
      externalDependencies: (0, cme.flattenToSet)(e.externalDependencies)
    };
  }
  s(fme, "run");
  function* pme(e, t) {
    for (let r of t) {
      let n = [], i = [], a = [];
      for (let l of r.concat([(0, ame.default)()])) {
        let u = new ime.default(e, l.key, l.options);
        n.push([l, u]), i.push(u), a.push(l.visitor);
      }
      for (let [l, u] of n) {
        let c = l.pre;
        if (c) {
          let f = c.call(u, e);
          if (yield* [], vI(f))
            throw new Error("You appear to be using an plugin with an async .pre, which your current version of Babel does not support. If y\
ou're using a published plugin, you may need to upgrade your @babel/core version.");
        }
      }
      let o = tb().default.visitors.merge(a, i, e.opts.wrapPluginVisitorMethod);
      (0, tb().default)(e.ast, o, e.scope);
      for (let [l, u] of n) {
        let c = l.post;
        if (c) {
          let f = c.call(u, e);
          if (yield* [], vI(f))
            throw new Error("You appear to be using an plugin with an async .post, which your current version of Babel does not support. If \
you're using a published plugin, you may need to upgrade your @babel/core version.");
        }
      }
    }
  }
  s(pme, "transformFile");
  function vI(e) {
    return !!e && (typeof e == "object" || typeof e == "function") && !!e.then && typeof e.then == "function";
  }
  s(vI, "isThenable");
});

// ../node_modules/@babel/core/lib/transform-file.js
var sb = T((Ko) => {
  "use strict";
  Object.defineProperty(Ko, "__esModule", {
    value: !0
  });
  Ko.transformFile = yme;
  Ko.transformFileAsync = bme;
  Ko.transformFileSync = gme;
  function TI() {
    let e = Er();
    return TI = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(TI, "_gensync");
  var dme = oa(), hme = ff(), mme = uc(), nb = TI()(function* (e, t) {
    let r = Object.assign({}, t, {
      filename: e
    }), n = yield* (0, dme.default)(r);
    if (n === null) return null;
    let i = yield* mme.readFile(e, "utf8");
    return yield* (0, hme.run)(n, i);
  });
  function yme(...e) {
    nb.errback(...e);
  }
  s(yme, "transformFile");
  function gme(...e) {
    return nb.sync(...e);
  }
  s(gme, "transformFileSync");
  function bme(...e) {
    return nb.async(...e);
  }
  s(bme, "transformFileAsync");
});

// ../node_modules/@babel/core/lib/config/files/import.cjs
var SI = T((wIe, xI) => {
  xI.exports = /* @__PURE__ */ s(function(t) {
    return import(t);
  }, "import_");
});

// ../node_modules/@babel/preset-typescript/package.json
var PI = T((IIe, Eme) => {
  Eme.exports = {
    name: "@babel/preset-typescript",
    version: "7.24.1",
    description: "Babel preset for TypeScript.",
    repository: {
      type: "git",
      url: "https://github.com/babel/babel.git",
      directory: "packages/babel-preset-typescript"
    },
    license: "MIT",
    publishConfig: {
      access: "public"
    },
    main: "./lib/index.js",
    keywords: [
      "babel-preset",
      "typescript"
    ],
    dependencies: {
      "@babel/helper-plugin-utils": "^7.24.0",
      "@babel/helper-validator-option": "^7.23.5",
      "@babel/plugin-syntax-jsx": "^7.24.1",
      "@babel/plugin-transform-modules-commonjs": "^7.24.1",
      "@babel/plugin-transform-typescript": "^7.24.1"
    },
    peerDependencies: {
      "@babel/core": "^7.0.0-0"
    },
    devDependencies: {
      "@babel/core": "^7.24.1",
      "@babel/helper-plugin-test-runner": "^7.24.1"
    },
    homepage: "https://babel.dev/docs/en/next/babel-preset-typescript",
    bugs: "https://github.com/babel/babel/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3A%22area%3A%20typescript%22+is%3Aopen",
    engines: {
      node: ">=6.9.0"
    },
    author: "The Babel Team (https://babel.dev/team)",
    type: "commonjs"
  };
});

// ../node_modules/@babel/helper-plugin-utils/lib/index.js
var la = T((Go) => {
  "use strict";
  Object.defineProperty(Go, "__esModule", {
    value: !0
  });
  Go.declare = AI;
  Go.declarePreset = void 0;
  var ib = {
    assertVersion: /* @__PURE__ */ s((e) => (t) => {
      Tme(t, e.version);
    }, "assertVersion")
  };
  Object.assign(ib, {
    targets: /* @__PURE__ */ s(() => () => ({}), "targets"),
    assumption: /* @__PURE__ */ s(() => () => {
    }, "assumption")
  });
  function AI(e) {
    return (t, r, n) => {
      var i;
      let a;
      for (let l of Object.keys(ib)) {
        var o;
        t[l] || ((o = a) != null || (a = vme(t)), a[l] = ib[l](a));
      }
      return e((i = a) != null ? i : t, r || {}, n);
    };
  }
  s(AI, "declare");
  var _Ie = Go.declarePreset = AI;
  function vme(e) {
    let t = null;
    return typeof e.version == "string" && /^7\./.test(e.version) && (t = Object.getPrototypeOf(e), t && (!hasOwnProperty.call(t, "version") ||
    !hasOwnProperty.call(t, "transform") || !hasOwnProperty.call(t, "template") || !hasOwnProperty.call(t, "types")) && (t = null)), Object.
    assign({}, t, e);
  }
  s(vme, "copyApiObject");
  function Tme(e, t) {
    if (typeof e == "number") {
      if (!Number.isInteger(e))
        throw new Error("Expected string or integer value.");
      e = `^${e}.0.0-0`;
    }
    if (typeof e != "string")
      throw new Error("Expected string or integer value.");
    let r = Error.stackTraceLimit;
    typeof r == "number" && r < 25 && (Error.stackTraceLimit = 25);
    let n;
    throw t.slice(0, 2) === "7." ? n = new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${t}". You'll need to update your @b\
abel/core version.`) : n = new Error(`Requires Babel "${e}", but was loaded with "${t}". If you are sure you have a compatible version of @b\
abel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for\
 the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`), typeof r == "number" && (Error.stackTraceLimit =
    r), Object.assign(n, {
      code: "BABEL_VERSION_UNSUPPORTED",
      version: t,
      range: e
    });
  }
  s(Tme, "throwVersionError");
});

// ../node_modules/@babel/plugin-syntax-typescript/lib/index.js
var CI = T((pf) => {
  "use strict";
  Object.defineProperty(pf, "__esModule", {
    value: !0
  });
  pf.default = void 0;
  var xme = la();
  ab = /* @__PURE__ */ s(function(e, t) {
    let r = [];
    e.forEach((n, i) => {
      (Array.isArray(n) ? n[0] : n) === t && r.unshift(i);
    });
    for (let n of r)
      e.splice(n, 1);
  }, "removePlugin");
  var ab, BIe = pf.default = (0, xme.declare)((e, t) => {
    e.assertVersion(7);
    let {
      disallowAmbiguousJSXLike: r,
      dts: n
    } = t;
    var {
      isTSX: i
    } = t;
    return {
      name: "syntax-typescript",
      manipulateOptions(a, o) {
        {
          let {
            plugins: l
          } = o;
          ab(l, "flow"), ab(l, "jsx"), l.push("objectRestSpread", "classProperties"), i && l.push("jsx");
        }
        o.plugins.push(["typescript", {
          disallowAmbiguousJSXLike: r,
          dts: n
        }]);
      }
    };
  });
});

// ../node_modules/@babel/helper-function-name/lib/index.js
var lb = T((ob) => {
  "use strict";
  Object.defineProperty(ob, "__esModule", {
    value: !0
  });
  ob.default = $me;
  var _I = Oi(), Sme = Se(), {
    NOT_LOCAL_BINDING: wI,
    cloneNode: Pme,
    identifier: Ame,
    isAssignmentExpression: Cme,
    isAssignmentPattern: wme,
    isFunction: OI,
    isIdentifier: DI,
    isLiteral: II,
    isNullLiteral: Dme,
    isObjectMethod: Ime,
    isObjectProperty: _me,
    isRegExpLiteral: Ome,
    isRestElement: Nme,
    isTemplateLiteral: Bme,
    isVariableDeclarator: kme,
    toBindingIdentifierName: Fme
  } = Sme;
  function jme(e) {
    let t = e.params.findIndex((r) => wme(r) || Nme(r));
    return t === -1 ? e.params.length : t;
  }
  s(jme, "getFunctionArity");
  var Lme = _I.default.statement(`
  (function (FUNCTION_KEY) {
    function FUNCTION_ID() {
      return FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    }

    return FUNCTION_ID;
  })(FUNCTION)
`), Mme = _I.default.statement(`
  (function (FUNCTION_KEY) {
    function* FUNCTION_ID() {
      return yield* FUNCTION_KEY.apply(this, arguments);
    }

    FUNCTION_ID.toString = function () {
      return FUNCTION_KEY.toString();
    };

    return FUNCTION_ID;
  })(FUNCTION)
`), Rme = {
    "ReferencedIdentifier|BindingIdentifier"(e, t) {
      e.node.name !== t.name || e.scope.getBindingIdentifier(t.name) !== t.outerDeclar || (t.selfReference = !0, e.stop());
    }
  };
  function qme(e) {
    return Dme(e) ? "null" : Ome(e) ? `_${e.pattern}_${e.flags}` : Bme(e) ? e.quasis.map((t) => t.value.raw).join("") : e.value !== void 0 ?
    e.value + "" : "";
  }
  s(qme, "getNameFromLiteralId");
  function Ume(e, t, r, n) {
    if (e.selfReference)
      if (n.hasBinding(r.name) && !n.hasGlobal(r.name))
        n.rename(r.name);
      else {
        if (!OI(t)) return;
        let i = Lme;
        t.generator && (i = Mme);
        let a = i({
          FUNCTION: t,
          FUNCTION_ID: r,
          FUNCTION_KEY: n.generateUidIdentifier(r.name)
        }).expression, o = a.callee.body.body[0].params;
        for (let l = 0, u = jme(t); l < u; l++)
          o.push(n.generateUidIdentifier("x"));
        return a;
      }
    t.id = r, n.getProgramParent().references[r.name] = !0;
  }
  s(Ume, "wrap");
  function Vme(e, t, r) {
    let n = {
      selfAssignment: !1,
      selfReference: !1,
      outerDeclar: r.getBindingIdentifier(t),
      name: t
    }, i = r.getOwnBinding(t);
    return i ? i.kind === "param" && (n.selfReference = !0) : (n.outerDeclar || r.hasGlobal(t)) && r.traverse(e, Rme, n), n;
  }
  s(Vme, "visit");
  function $me({
    node: e,
    parent: t,
    scope: r,
    id: n
  }, i = !1, a = !1) {
    if (e.id) return;
    if ((_me(t) || Ime(t, {
      kind: "method"
    })) && (!t.computed || II(t.key)))
      n = t.key;
    else if (kme(t)) {
      if (n = t.id, DI(n) && !i) {
        let c = r.parent.getBinding(n.name);
        if (c && c.constant && r.getBinding(n.name) === c) {
          e.id = Pme(n), e.id[wI] = !0;
          return;
        }
      }
    } else if (Cme(t, {
      operator: "="
    }))
      n = t.left;
    else if (!n)
      return;
    let o;
    if (n && II(n) ? o = qme(n) : n && DI(n) && (o = n.name), o === void 0 || !a && OI(e) && /[\uD800-\uDFFF]/.test(o))
      return;
    o = Fme(o);
    let l = Ame(o);
    l[wI] = !0;
    let u = Vme(e, o, r);
    return Ume(u, e, l, r) || e;
  }
  s($me, "_default");
});

// ../node_modules/@babel/helper-split-export-declaration/lib/index.js
var pb = T((fb) => {
  "use strict";
  Object.defineProperty(fb, "__esModule", {
    value: !0
  });
  fb.default = Hme;
  var Wme = Se(), {
    cloneNode: ub,
    exportNamedDeclaration: NI,
    exportSpecifier: BI,
    identifier: cb,
    variableDeclaration: Kme,
    variableDeclarator: Gme
  } = Wme;
  function Hme(e) {
    if (!e.isExportDeclaration() || e.isExportAllDeclaration())
      throw new Error("Only default and named export declarations can be split.");
    if (e.isExportDefaultDeclaration()) {
      let a = e.get("declaration"), o = a.isFunctionDeclaration() || a.isClassDeclaration(), l = a.isFunctionExpression() || a.isClassExpression(),
      u = a.isScope() ? a.scope.parent : a.scope, c = a.node.id, f = !1;
      c ? l && u.hasBinding(c.name) && (f = !0, c = u.generateUidIdentifier(c.name)) : (f = !0, c = u.generateUidIdentifier("default"), (o ||
      l) && (a.node.id = ub(c)));
      let p = o ? a.node : Kme("var", [Gme(ub(c), a.node)]), h = NI(null, [BI(ub(c), cb("default"))]);
      return e.insertAfter(h), e.replaceWith(p), f && u.registerDeclaration(e), e;
    } else if (e.get("specifiers").length > 0)
      throw new Error("It doesn't make sense to split exported specifiers.");
    let t = e.get("declaration"), r = t.getOuterBindingIdentifiers(), n = Object.keys(r).map((a) => BI(cb(a), cb(a))), i = NI(null, n);
    return e.insertAfter(i), e.replaceWith(t.node), e;
  }
  s(Hme, "splitExportDeclaration");
});

// ../node_modules/@babel/helper-environment-visitor/lib/index.js
var Ho = T((ua) => {
  "use strict";
  Object.defineProperty(ua, "__esModule", {
    value: !0
  });
  ua.default = void 0;
  ua.requeueComputedKeyAndDecorators = db;
  ua.skipAllButComputedKey = /* @__PURE__ */ s(function(t) {
    t.skip(), t.node.computed && t.context.maybeQueue(t.get("key"));
  }, "skipAllButComputedKey");
  function db(e) {
    let {
      context: t,
      node: r
    } = e;
    if (r.computed && t.maybeQueue(e.get("key")), r.decorators)
      for (let n of e.get("decorators"))
        t.maybeQueue(n);
  }
  s(db, "requeueComputedKeyAndDecorators");
  var Yme = {
    FunctionParent(e) {
      e.isArrowFunctionExpression() || (e.skip(), e.isMethod() && db(e));
    },
    Property(e) {
      e.isObjectProperty() || (e.skip(), db(e));
    }
  }, qIe = ua.default = Yme;
});

// ../node_modules/@babel/helper-member-expression-to-functions/lib/index.js
var bb = T((gb) => {
  "use strict";
  Object.defineProperty(gb, "__esModule", { value: !0 });
  var zme = Se();
  function Jme(e) {
    if (e && e.__esModule) return e;
    var t = /* @__PURE__ */ Object.create(null);
    return e && Object.keys(e).forEach(function(r) {
      if (r !== "default") {
        var n = Object.getOwnPropertyDescriptor(e, r);
        Object.defineProperty(t, r, n.get ? n : {
          enumerable: !0,
          get: /* @__PURE__ */ s(function() {
            return e[r];
          }, "get")
        });
      }
    }), t.default = e, Object.freeze(t);
  }
  s(Jme, "_interopNamespace");
  var Xme = /* @__PURE__ */ Jme(zme);
  function mb(e) {
    let t = e, {
      node: r,
      parentPath: n
    } = t;
    if (n.isLogicalExpression()) {
      let {
        operator: i,
        right: a
      } = n.node;
      if (i === "&&" || i === "||" || i === "??" && r === a)
        return mb(n);
    }
    if (n.isSequenceExpression()) {
      let {
        expressions: i
      } = n.node;
      return i[i.length - 1] === r ? mb(n) : !0;
    }
    return n.isConditional({
      test: r
    }) || n.isUnaryExpression({
      operator: "!"
    }) || n.isLoop({
      test: r
    });
  }
  s(mb, "willPathCastToBoolean");
  var {
    LOGICAL_OPERATORS: Qme,
    arrowFunctionExpression: kI,
    assignmentExpression: ca,
    binaryExpression: li,
    booleanLiteral: Zme,
    callExpression: mf,
    cloneNode: Mr,
    conditionalExpression: eye,
    identifier: RI,
    isMemberExpression: tye,
    isOptionalCallExpression: rye,
    isOptionalMemberExpression: qI,
    isUpdateExpression: nye,
    logicalExpression: hf,
    memberExpression: FI,
    nullLiteral: df,
    optionalCallExpression: sye,
    optionalMemberExpression: iye,
    sequenceExpression: hb,
    updateExpression: jI
  } = Xme, yb = class {
    static {
      s(this, "AssignmentMemoiser");
    }
    constructor() {
      this._map = void 0, this._map = /* @__PURE__ */ new WeakMap();
    }
    has(t) {
      return this._map.has(t);
    }
    get(t) {
      if (!this.has(t)) return;
      let r = this._map.get(t), {
        value: n
      } = r;
      return r.count--, r.count === 0 ? ca("=", n, t) : n;
    }
    set(t, r, n) {
      return this._map.set(t, {
        count: n,
        value: r
      });
    }
  };
  function LI(e, t) {
    let {
      node: r
    } = e;
    if (qI(r))
      return FI(t, r.property, r.computed);
    if (e.isOptionalCallExpression()) {
      let n = e.get("callee");
      if (e.node.optional && n.isOptionalMemberExpression()) {
        let i = n.node.object, a = e.scope.maybeGenerateMemoised(i);
        return n.get("object").replaceWith(ca("=", a, i)), mf(FI(t, RI("call")), [a, ...e.node.arguments]);
      }
      return mf(t, e.node.arguments);
    }
    return e.node;
  }
  s(LI, "toNonOptional");
  function aye(e) {
    for (; e && !e.isProgram(); ) {
      let {
        parentPath: t,
        container: r,
        listKey: n
      } = e, i = t.node;
      if (n) {
        if (r !== i[n])
          return !0;
      } else if (r !== i) return !0;
      e = t;
    }
    return !1;
  }
  s(aye, "isInDetachedTree");
  var oye = {
    memoise() {
    },
    handle(e, t) {
      let {
        node: r,
        parent: n,
        parentPath: i,
        scope: a
      } = e;
      if (e.isOptionalMemberExpression()) {
        if (aye(e)) return;
        let o = e.find(({
          node: U,
          parent: Q
        }) => qI(Q) ? Q.optional || Q.object !== U : rye(Q) ? U !== e.node && Q.optional || Q.callee !== U : !0);
        if (a.path.isPattern()) {
          o.replaceWith(mf(kI([], o.node), []));
          return;
        }
        let l = mb(o), u = o.parentPath;
        if (u.isUpdateExpression({
          argument: r
        }))
          throw e.buildCodeFrameError("can't handle update expression");
        let c = u.isAssignmentExpression({
          left: o.node
        }), f = u.isUnaryExpression({
          operator: "delete"
        });
        if (f && o.isOptionalMemberExpression() && o.get("property").isPrivateName())
          throw e.buildCodeFrameError("can't delete a private class element");
        let p = e;
        for (; ; ) {
          if (p.isOptionalMemberExpression()) {
            if (p.node.optional) break;
            p = p.get("object");
            continue;
          } else if (p.isOptionalCallExpression()) {
            if (p.node.optional) break;
            p = p.get("callee");
            continue;
          }
          throw new Error(`Internal error: unexpected ${p.node.type}`);
        }
        let h = p.isOptionalMemberExpression() ? p.node.object : p.node.callee, y = a.maybeGenerateMemoised(h), v = y ?? h, d = i.isOptionalCallExpression(
        {
          callee: r
        }), b = /* @__PURE__ */ s((U) => d, "isOptionalCall"), E = i.isCallExpression({
          callee: r
        });
        p.replaceWith(LI(p, v)), b() ? n.optional ? i.replaceWith(this.optionalCall(e, n.arguments)) : i.replaceWith(this.call(e, n.arguments)) :
        E ? e.replaceWith(this.boundGet(e)) : this.delete && i.isUnaryExpression({
          operator: "delete"
        }) ? i.replaceWith(this.delete(e)) : i.isAssignmentExpression() ? MI(this, e, i) : e.replaceWith(this.get(e));
        let I = e.node;
        for (let U = e; U !== o; ) {
          let Q = U.parentPath;
          if (Q === o && b() && n.optional) {
            I = Q.node;
            break;
          }
          I = LI(Q, I), U = Q;
        }
        let O, k = o.parentPath;
        if (tye(I) && k.isOptionalCallExpression({
          callee: o.node,
          optional: !0
        })) {
          let {
            object: U
          } = I;
          O = e.scope.maybeGenerateMemoised(U), O && (I.object = ca("=", O, U));
        }
        let j = o;
        (f || c) && (j = k, I = k.node);
        let R = y ? ca("=", Mr(v), Mr(h)) : Mr(v);
        if (l) {
          let U;
          t ? U = li("!=", R, df()) : U = hf("&&", li("!==", R, df()), li("!==", Mr(v), a.buildUndefinedNode())), j.replaceWith(hf("&&", U, I));
        } else {
          let U;
          t ? U = li("==", R, df()) : U = hf("||", li("===", R, df()), li("===", Mr(v), a.buildUndefinedNode())), j.replaceWith(eye(U, f ? Zme(
          !0) : a.buildUndefinedNode(), I));
        }
        if (O) {
          let U = k.node;
          k.replaceWith(sye(iye(U.callee, RI("call"), !1, !0), [Mr(O), ...U.arguments], !1));
        }
        return;
      }
      if (nye(n, {
        argument: r
      })) {
        if (this.simpleSet) {
          e.replaceWith(this.simpleSet(e));
          return;
        }
        let {
          operator: o,
          prefix: l
        } = n;
        this.memoise(e, 2);
        let u = a.generateUidIdentifierBasedOnNode(r);
        a.push({
          id: u
        });
        let c = [ca("=", Mr(u), this.get(e))];
        if (l) {
          c.push(jI(o, Mr(u), l));
          let f = hb(c);
          i.replaceWith(this.set(e, f));
          return;
        } else {
          let f = a.generateUidIdentifierBasedOnNode(r);
          a.push({
            id: f
          }), c.push(ca("=", Mr(f), jI(o, Mr(u), l)), Mr(u));
          let p = hb(c);
          i.replaceWith(hb([this.set(e, p), Mr(f)]));
          return;
        }
      }
      if (i.isAssignmentExpression({
        left: r
      })) {
        MI(this, e, i);
        return;
      }
      if (i.isCallExpression({
        callee: r
      })) {
        i.replaceWith(this.call(e, i.node.arguments));
        return;
      }
      if (i.isOptionalCallExpression({
        callee: r
      })) {
        if (a.path.isPattern()) {
          i.replaceWith(mf(kI([], i.node), []));
          return;
        }
        i.replaceWith(this.optionalCall(e, i.node.arguments));
        return;
      }
      if (this.delete && i.isUnaryExpression({
        operator: "delete"
      })) {
        i.replaceWith(this.delete(e));
        return;
      }
      if (i.isForXStatement({
        left: r
      }) || i.isObjectProperty({
        value: r
      }) && i.parentPath.isObjectPattern() || i.isAssignmentPattern({
        left: r
      }) && i.parentPath.isObjectProperty({
        value: n
      }) && i.parentPath.parentPath.isObjectPattern() || i.isArrayPattern() || i.isAssignmentPattern({
        left: r
      }) && i.parentPath.isArrayPattern() || i.isRestElement()) {
        e.replaceWith(this.destructureSet(e));
        return;
      }
      i.isTaggedTemplateExpression() ? e.replaceWith(this.boundGet(e)) : e.replaceWith(this.get(e));
    }
  };
  function MI(e, t, r) {
    if (e.simpleSet) {
      t.replaceWith(e.simpleSet(t));
      return;
    }
    let {
      operator: n,
      right: i
    } = r.node;
    if (n === "=")
      r.replaceWith(e.set(t, i));
    else {
      let a = n.slice(0, -1);
      Qme.includes(a) ? (e.memoise(t, 1), r.replaceWith(hf(a, e.get(t), e.set(t, i)))) : (e.memoise(t, 2), r.replaceWith(e.set(t, li(a, e.get(
      t), i))));
    }
  }
  s(MI, "handleAssignment");
  function lye(e, t, r) {
    e.traverse(t, Object.assign({}, oye, r, {
      memoiser: new yb()
    }));
  }
  s(lye, "memberExpressionToFunctions");
  gb.default = lye;
});

// ../node_modules/@babel/helper-optimise-call-expression/lib/index.js
var vb = T((Eb) => {
  "use strict";
  Object.defineProperty(Eb, "__esModule", {
    value: !0
  });
  Eb.default = pye;
  var uye = Se(), {
    callExpression: UI,
    identifier: yf,
    isIdentifier: cye,
    isSpreadElement: fye,
    memberExpression: VI,
    optionalCallExpression: $I,
    optionalMemberExpression: WI
  } = uye;
  function pye(e, t, r, n) {
    return r.length === 1 && fye(r[0]) && cye(r[0].argument, {
      name: "arguments"
    }) ? n ? $I(WI(e, yf("apply"), !1, !0), [t, r[0].argument], !1) : UI(VI(e, yf("apply")), [t, r[0].argument]) : n ? $I(WI(e, yf("call"), !1,
    !0), [t, ...r], !1) : UI(VI(e, yf("call")), [t, ...r]);
  }
  s(pye, "optimiseCallExpression");
});

// ../node_modules/@babel/helper-replace-supers/lib/index.js
var Ef = T((pa) => {
  "use strict";
  Object.defineProperty(pa, "__esModule", {
    value: !0
  });
  pa.default = void 0;
  var HI = Ho(), dye = bb(), bf = vb(), Jo = gt(), {
    assignmentExpression: hye,
    booleanLiteral: mye,
    callExpression: gf,
    cloneNode: Zr,
    identifier: Yo,
    memberExpression: fa,
    sequenceExpression: Tb,
    stringLiteral: yye,
    thisExpression: zo
  } = Jo.types;
  {
    let e = Ho();
    pa.environmentVisitor = e.default, pa.skipAllButComputedKey = e.skipAllButComputedKey;
  }
  function KI(e, t, r, n) {
    e = Zr(e);
    let i = t || n ? e : fa(e, Yo("prototype"));
    return gf(r.addHelper("getPrototypeOf"), [i]);
  }
  s(KI, "getPrototypeOfExpression");
  var GI = Jo.traverse.visitors.merge([HI.default, {
    Super(e, t) {
      let {
        node: r,
        parentPath: n
      } = e;
      n.isMemberExpression({
        object: r
      }) && t.handle(n);
    }
  }]), gye = Jo.traverse.visitors.merge([HI.default, {
    Scopable(e, {
      refName: t
    }) {
      let r = e.scope.getOwnBinding(t);
      r && r.identifier.name === t && e.scope.rename(t);
    }
  }]), YI = {
    memoise(e, t) {
      let {
        scope: r,
        node: n
      } = e, {
        computed: i,
        property: a
      } = n;
      if (!i)
        return;
      let o = r.maybeGenerateMemoised(a);
      o && this.memoiser.set(a, o, t);
    },
    prop(e) {
      let {
        computed: t,
        property: r
      } = e.node;
      return this.memoiser.has(r) ? Zr(this.memoiser.get(r)) : t ? Zr(r) : yye(r.name);
    },
    get(e) {
      return this._get(e, this._getThisRefs());
    },
    _get(e, t) {
      let r = KI(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
      return gf(this.file.addHelper("get"), [t.needAccessFirst ? Tb([t.this, r]) : r, this.prop(e), t.this]);
    },
    _getThisRefs() {
      return {
        needAccessFirst: this.isDerivedConstructor,
        this: zo()
      };
    },
    set(e, t) {
      let r = this._getThisRefs(), n = KI(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
      return gf(this.file.addHelper("set"), [r.needAccessFirst ? Tb([r.this, n]) : n, this.prop(e), t, r.this, mye(e.isInStrictMode())]);
    },
    destructureSet(e) {
      throw e.buildCodeFrameError("Destructuring to a super field is not supported yet.");
    },
    call(e, t) {
      let r = this._getThisRefs();
      return (0, bf.default)(this._get(e, r), Zr(r.this), t, !1);
    },
    optionalCall(e, t) {
      let r = this._getThisRefs();
      return (0, bf.default)(this._get(e, r), Zr(r.this), t, !0);
    },
    delete(e) {
      return e.node.computed ? Tb([gf(this.file.addHelper("toPropertyKey"), [Zr(e.node.property)]), Jo.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : Jo.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
    }
  }, bye = Object.assign({}, YI, {
    prop(e) {
      let {
        property: t
      } = e.node;
      return this.memoiser.has(t) ? Zr(this.memoiser.get(t)) : Zr(t);
    },
    get(e) {
      let {
        isStatic: t,
        getSuperRef: r
      } = this, {
        computed: n
      } = e.node, i = this.prop(e), a;
      if (t) {
        var o;
        a = (o = r()) != null ? o : fa(Yo("Function"), Yo("prototype"));
      } else {
        var l;
        a = fa((l = r()) != null ? l : Yo("Object"), Yo("prototype"));
      }
      return fa(a, i, n);
    },
    set(e, t) {
      let {
        computed: r
      } = e.node, n = this.prop(e);
      return hye("=", fa(zo(), n, r), t);
    },
    destructureSet(e) {
      let {
        computed: t
      } = e.node, r = this.prop(e);
      return fa(zo(), r, t);
    },
    call(e, t) {
      return (0, bf.default)(this.get(e), zo(), t, !1);
    },
    optionalCall(e, t) {
      return (0, bf.default)(this.get(e), zo(), t, !0);
    }
  }), xb = class {
    static {
      s(this, "ReplaceSupers");
    }
    constructor(t) {
      var r;
      let n = t.methodPath;
      this.methodPath = n, this.isDerivedConstructor = n.isClassMethod({
        kind: "constructor"
      }) && !!t.superRef, this.isStatic = n.isObjectMethod() || n.node.static || (n.isStaticBlock == null ? void 0 : n.isStaticBlock()), this.
      isPrivateMethod = n.isPrivate() && n.isMethod(), this.file = t.file, this.constantSuper = (r = t.constantSuper) != null ? r : t.isLoose,
      this.opts = t;
    }
    getObjectRef() {
      return Zr(this.opts.objectRef || this.opts.getObjectRef());
    }
    getSuperRef() {
      if (this.opts.superRef) return Zr(this.opts.superRef);
      if (this.opts.getSuperRef)
        return Zr(this.opts.getSuperRef());
    }
    replace() {
      let {
        methodPath: t
      } = this;
      this.opts.refToPreserve && t.traverse(gye, {
        refName: this.opts.refToPreserve.name
      });
      let r = this.constantSuper ? bye : YI;
      GI.shouldSkip = (n) => {
        if (n.parentPath === t && (n.parentKey === "decorators" || n.parentKey === "key"))
          return !0;
      }, (0, dye.default)(t, GI, Object.assign({
        file: this.file,
        scope: this.methodPath.scope,
        isDerivedConstructor: this.isDerivedConstructor,
        isStatic: this.isStatic,
        isPrivateMethod: this.isPrivateMethod,
        getObjectRef: this.getObjectRef.bind(this),
        getSuperRef: this.getSuperRef.bind(this),
        boundGet: r.get
      }, r));
    }
  };
  pa.default = xb;
});

// ../node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js
var Pb = T((Xo) => {
  "use strict";
  Object.defineProperty(Xo, "__esModule", {
    value: !0
  });
  Xo.isTransparentExprWrapper = Sb;
  Xo.skipTransparentExprWrapperNodes = wye;
  Xo.skipTransparentExprWrappers = Cye;
  var Eye = Se(), {
    isParenthesizedExpression: vye,
    isTSAsExpression: Tye,
    isTSNonNullExpression: xye,
    isTSSatisfiesExpression: Sye,
    isTSTypeAssertion: Pye,
    isTypeCastExpression: Aye
  } = Eye;
  function Sb(e) {
    return Tye(e) || Sye(e) || Pye(e) || xye(e) || Aye(e) || vye(e);
  }
  s(Sb, "isTransparentExprWrapper");
  function Cye(e) {
    for (; Sb(e.node); )
      e = e.get("expression");
    return e;
  }
  s(Cye, "skipTransparentExprWrappers");
  function wye(e) {
    for (; Sb(e); )
      e = e.expression;
    return e;
  }
  s(wye, "skipTransparentExprWrapperNodes");
});

// ../node_modules/@babel/helper-annotate-as-pure/lib/index.js
var Cb = T((Ab) => {
  "use strict";
  Object.defineProperty(Ab, "__esModule", {
    value: !0
  });
  Ab.default = Nye;
  var Dye = Se(), {
    addComment: Iye
  } = Dye, _ye = "#__PURE__", Oye = /* @__PURE__ */ s(({
    leadingComments: e
  }) => !!e && e.some((t) => /[@#]__PURE__/.test(t.value)), "isPureAnnotated");
  function Nye(e) {
    let t = e.node || e;
    Oye(t) || Iye(t, "leading", _ye);
  }
  s(Nye, "annotateAsPure");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js
var Db = T((wb) => {
  "use strict";
  Object.defineProperty(wb, "__esModule", {
    value: !0
  });
  wb.assertFieldTransformed = Bye;
  function Bye(e) {
    if (e.node.declare)
      throw e.buildCodeFrameError(`TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.
If you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional clas\
s features:
 - @babel/plugin-transform-class-properties
 - @babel/plugin-transform-private-methods
 - @babel/plugin-proposal-decorators`);
  }
  s(Bye, "assertFieldTransformed");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/fields.js
var Bb = T((Ts) => {
  "use strict";
  Object.defineProperty(Ts, "__esModule", {
    value: !0
  });
  Ts.buildCheckInRHS = xf;
  Ts.buildFieldsInitNodes = n0e;
  Ts.buildPrivateNamesMap = Rye;
  Ts.buildPrivateNamesNodes = qye;
  Ts.privateNameVisitorFactory = Nb;
  Ts.transformPrivateNamesUsage = Gye;
  var B = gt(), kye = Ef(), e_ = Ho(), Fye = bb(), zI = vb(), jye = Cb(), Lye = Pb(), Mye = Db();
  Xt = /* @__PURE__ */ s((e) => e.availableHelper("classPrivateFieldGet2"), "newHelpers");
  var Xt;
  function Rye(e, t, r, n) {
    let i = /* @__PURE__ */ new Map(), a;
    for (let l of r)
      if (l.isPrivate()) {
        let {
          name: u
        } = l.node.key.id, c = i.get(u);
        if (!c) {
          let f = !l.isProperty(), p = l.node.static, h = !1, y;
          if (!t && Xt(n) && f && !p) {
            var o;
            h = !!a, (o = a) != null || (a = l.scope.generateUidIdentifier(`${e}_brand`)), y = a;
          } else
            y = l.scope.generateUidIdentifier(u);
          c = {
            id: y,
            static: p,
            method: f,
            initAdded: h
          }, i.set(u, c);
        }
        if (l.isClassPrivateMethod())
          if (l.node.kind === "get") {
            let {
              body: f
            } = l.node.body, p;
            f.length === 1 && B.types.isReturnStatement(p = f[0]) && B.types.isCallExpression(p = p.argument) && p.arguments.length === 1 &&
            B.types.isThisExpression(p.arguments[0]) && B.types.isIdentifier(p = p.callee) ? (c.getId = B.types.cloneNode(p), c.getterDeclared =
            !0) : c.getId = l.scope.generateUidIdentifier(`get_${u}`);
          } else if (l.node.kind === "set") {
            let {
              params: f
            } = l.node, {
              body: p
            } = l.node.body, h;
            p.length === 1 && B.types.isExpressionStatement(h = p[0]) && B.types.isCallExpression(h = h.expression) && h.arguments.length ===
            2 && B.types.isThisExpression(h.arguments[0]) && B.types.isIdentifier(h.arguments[1], {
              name: f[0].name
            }) && B.types.isIdentifier(h = h.callee) ? (c.setId = B.types.cloneNode(h), c.setterDeclared = !0) : c.setId = l.scope.generateUidIdentifier(
            `set_${u}`);
          } else l.node.kind === "method" && (c.methodId = l.scope.generateUidIdentifier(u));
        i.set(u, c);
      }
    return i;
  }
  s(Rye, "buildPrivateNamesMap");
  function qye(e, t, r, n) {
    let i = [], a = /* @__PURE__ */ new Set();
    for (let [o, l] of e) {
      let {
        static: u,
        method: c,
        getId: f,
        setId: p
      } = l, h = f || p, y = B.types.cloneNode(l.id), v;
      if (t)
        v = B.types.callExpression(n.addHelper("classPrivateFieldLooseKey"), [B.types.stringLiteral(o)]);
      else if (r)
        v = B.types.callExpression(B.types.identifier("Symbol"), [B.types.stringLiteral(o)]);
      else if (!u) {
        if (a.has(y.name)) continue;
        a.add(y.name), v = B.types.newExpression(B.types.identifier(c && (!h || Xt(n)) ? "WeakSet" : "WeakMap"), []);
      }
      v && (r || (0, jye.default)(v), i.push(B.template.statement.ast`var ${y} = ${v}`));
    }
    return i;
  }
  s(qye, "buildPrivateNamesNodes");
  function Nb(e) {
    let t = B.traverse.visitors.merge([Object.assign({}, e), e_.default]), r = Object.assign({}, e, {
      Class(n) {
        let {
          privateNamesMap: i
        } = this, a = n.get("body.body"), o = new Map(i), l = [];
        for (let u of a) {
          if (!u.isPrivate()) continue;
          let {
            name: c
          } = u.node.key.id;
          o.delete(c), l.push(c);
        }
        l.length && (n.get("body").traverse(t, Object.assign({}, this, {
          redeclared: l
        })), n.traverse(r, Object.assign({}, this, {
          privateNamesMap: o
        })), n.skipKey("body"));
      }
    });
    return r;
  }
  s(Nb, "privateNameVisitorFactory");
  var Uye = Nb({
    PrivateName(e, {
      noDocumentAll: t
    }) {
      let {
        privateNamesMap: r,
        redeclared: n
      } = this, {
        node: i,
        parentPath: a
      } = e;
      if (!a.isMemberExpression({
        property: i
      }) && !a.isOptionalMemberExpression({
        property: i
      }))
        return;
      let {
        name: o
      } = i.id;
      r.has(o) && (n != null && n.includes(o) || this.handle(a, t));
    }
  });
  function t_(e, t, r) {
    for (; (n = t) != null && n.hasBinding(e) && !t.bindingIdentifierEquals(e, r); ) {
      var n;
      t.rename(e), t = t.parent;
    }
  }
  s(t_, "unshadow");
  function xf(e, t, r) {
    return r || !(t.availableHelper != null && t.availableHelper("checkInRHS")) ? e : B.types.callExpression(t.addHelper("checkInRHS"), [e]);
  }
  s(xf, "buildCheckInRHS");
  var Vye = Nb({
    BinaryExpression(e, {
      file: t
    }) {
      let {
        operator: r,
        left: n,
        right: i
      } = e.node;
      if (r !== "in" || !B.types.isPrivateName(n)) return;
      let {
        privateFieldsAsProperties: a,
        privateNamesMap: o,
        redeclared: l
      } = this, {
        name: u
      } = n.id;
      if (!o.has(u) || l != null && l.includes(u)) return;
      if (t_(this.classRef.name, e.scope, this.innerBinding), a) {
        let {
          id: p
        } = o.get(u);
        e.replaceWith(B.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${xf(i, t)}, ${B.types.cloneNode(p)})
      `);
        return;
      }
      let {
        id: c,
        static: f
      } = o.get(u);
      if (f) {
        e.replaceWith(B.template.expression.ast`${xf(i, t)} === ${B.types.cloneNode(this.classRef)}`);
        return;
      }
      e.replaceWith(B.template.expression.ast`${B.types.cloneNode(c)}.has(${xf(i, t)})`);
    }
  });
  function vf(e, t) {
    return B.types.callExpression(e.addHelper("readOnlyError"), [B.types.stringLiteral(`#${t}`)]);
  }
  s(vf, "readOnlyError");
  function $ye(e, t) {
    return e.availableHelper("writeOnlyError") ? B.types.callExpression(e.addHelper("writeOnlyError"), [B.types.stringLiteral(`#${t}`)]) : (console.
    warn("@babel/helpers is outdated, update it to silence this warning."), B.types.buildUndefinedNode());
  }
  s($ye, "writeOnlyError");
  function Ib(e, t) {
    return t ? e : B.types.memberExpression(e, B.types.identifier("_"));
  }
  s(Ib, "buildStaticPrivateFieldAccess");
  function JI(e) {
    return function(t) {
      return B.types.inherits(e.apply(this, arguments), t.node);
    };
  }
  s(JI, "autoInherits");
  var Wye = {
    memoise(e, t) {
      let {
        scope: r
      } = e, {
        object: n
      } = e.node, i = r.maybeGenerateMemoised(n);
      i && this.memoiser.set(n, i, t);
    },
    receiver(e) {
      let {
        object: t
      } = e.node;
      return this.memoiser.has(t) ? B.types.cloneNode(this.memoiser.get(t)) : B.types.cloneNode(t);
    },
    get: JI(function(e) {
      let {
        classRef: t,
        privateNamesMap: r,
        file: n,
        innerBinding: i,
        noUninitializedPrivateFieldAccess: a
      } = this, o = e.node.property, {
        name: l
      } = o.id, {
        id: u,
        static: c,
        method: f,
        methodId: p,
        getId: h,
        setId: y
      } = r.get(l), v = h || y, d = /* @__PURE__ */ s((b) => B.types.inherits(B.types.cloneNode(b), o), "cloneId");
      if (c) {
        if (t_(t.name, e.scope, i), !Xt(n)) {
          let I = f && !v ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
          return B.types.callExpression(n.addHelper(I), [this.receiver(e), B.types.cloneNode(t), d(u)]);
        }
        let b = this.receiver(e), E = B.types.isIdentifier(b) && b.name === t.name;
        if (!f)
          return Ib(E ? d(u) : B.types.callExpression(n.addHelper("assertClassBrand"), [B.types.cloneNode(t), b, d(u)]), a);
        if (h)
          return E ? B.types.callExpression(d(h), [b]) : B.types.callExpression(n.addHelper("classPrivateGetter"), [B.types.cloneNode(t), b,
          d(h)]);
        if (y) {
          let I = B.types.buildUndefinedNode();
          return E ? I : B.types.sequenceExpression([B.types.callExpression(n.addHelper("assertClassBrand"), [B.types.cloneNode(t), b]), I]);
        }
        return E ? d(u) : B.types.callExpression(n.addHelper("assertClassBrand"), [B.types.cloneNode(t), b, d(u)]);
      }
      return f ? v ? h ? Xt(n) ? B.types.callExpression(n.addHelper("classPrivateGetter"), [B.types.cloneNode(u), this.receiver(e), d(h)]) :
      B.types.callExpression(n.addHelper("classPrivateFieldGet"), [this.receiver(e), d(u)]) : B.types.sequenceExpression([this.receiver(e), $ye(
      n, l)]) : Xt(n) ? B.types.callExpression(n.addHelper("assertClassBrand"), [B.types.cloneNode(u), this.receiver(e), d(p)]) : B.types.callExpression(
      n.addHelper("classPrivateMethodGet"), [this.receiver(e), B.types.cloneNode(u), d(p)]) : Xt(n) ? B.types.callExpression(n.addHelper("cl\
assPrivateFieldGet2"), [d(u), this.receiver(e)]) : B.types.callExpression(n.addHelper("classPrivateFieldGet"), [this.receiver(e), d(u)]);
    }),
    boundGet(e) {
      return this.memoise(e, 1), B.types.callExpression(B.types.memberExpression(this.get(e), B.types.identifier("bind")), [this.receiver(e)]);
    },
    set: JI(function(e, t) {
      let {
        classRef: r,
        privateNamesMap: n,
        file: i,
        noUninitializedPrivateFieldAccess: a
      } = this, o = e.node.property, {
        name: l
      } = o.id, {
        id: u,
        static: c,
        method: f,
        setId: p,
        getId: h
      } = n.get(l), y = h || p, v = /* @__PURE__ */ s((d) => B.types.inherits(B.types.cloneNode(d), o), "cloneId");
      if (c) {
        if (!Xt(i)) {
          let E = f && !y ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
          return B.types.callExpression(i.addHelper(E), [this.receiver(e), B.types.cloneNode(r), v(u), t]);
        }
        let d = this.receiver(e), b = B.types.isIdentifier(d) && d.name === r.name;
        if (f && !p) {
          let E = vf(i, l);
          return b ? B.types.sequenceExpression([t, E]) : B.types.sequenceExpression([t, B.types.callExpression(i.addHelper("assertClassBran\
d"), [B.types.cloneNode(r), d]), vf(i, l)]);
        }
        return p ? b ? B.types.callExpression(B.types.cloneNode(p), [d, t]) : B.types.callExpression(i.addHelper("classPrivateSetter"), [B.types.
        cloneNode(r), v(p), d, t]) : B.types.assignmentExpression("=", Ib(v(u), a), b ? t : B.types.callExpression(i.addHelper("assertClassB\
rand"), [B.types.cloneNode(r), d, t]));
      }
      return f ? p ? Xt(i) ? B.types.callExpression(i.addHelper("classPrivateSetter"), [B.types.cloneNode(u), v(p), this.receiver(e), t]) : B.
      types.callExpression(i.addHelper("classPrivateFieldSet"), [this.receiver(e), v(u), t]) : B.types.sequenceExpression([this.receiver(e),
      t, vf(i, l)]) : Xt(i) ? B.types.callExpression(i.addHelper("classPrivateFieldSet2"), [v(u), this.receiver(e), t]) : B.types.callExpression(
      i.addHelper("classPrivateFieldSet"), [this.receiver(e), v(u), t]);
    }),
    destructureSet(e) {
      let {
        classRef: t,
        privateNamesMap: r,
        file: n,
        noUninitializedPrivateFieldAccess: i
      } = this, a = e.node.property, {
        name: o
      } = a.id, {
        id: l,
        static: u,
        method: c,
        setId: f
      } = r.get(o), p = /* @__PURE__ */ s((d) => B.types.inherits(B.types.cloneNode(d), a), "cloneId");
      if (!Xt(n)) {
        if (u) {
          try {
            var h = n.addHelper("classStaticPrivateFieldDestructureSet");
          } catch {
            throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the late\
st version.");
          }
          return B.types.memberExpression(B.types.callExpression(h, [this.receiver(e), B.types.cloneNode(t), p(l)]), B.types.identifier("val\
ue"));
        }
        return B.types.memberExpression(B.types.callExpression(n.addHelper("classPrivateFieldDestructureSet"), [this.receiver(e), p(l)]), B.
        types.identifier("value"));
      }
      if (c && !f)
        return B.types.memberExpression(B.types.sequenceExpression([e.node.object, vf(n, o)]), B.types.identifier("_"));
      if (u && !c) {
        let d = this.get(e);
        if (!i || !B.types.isCallExpression(d))
          return d;
        let b = d.arguments.pop();
        return d.arguments.push(B.template.expression.ast`(_) => ${b} = _`), B.types.memberExpression(B.types.callExpression(n.addHelper("to\
Setter"), [d]), B.types.identifier("_"));
      }
      let y = this.set(e, B.types.identifier("_"));
      if (!B.types.isCallExpression(y) || !B.types.isIdentifier(y.arguments[y.arguments.length - 1], {
        name: "_"
      }))
        throw e.buildCodeFrameError("Internal Babel error while compiling this code. This is a Babel bug. Please report it at https://github\
.com/babel/babel/issues.");
      let v;
      return B.types.isMemberExpression(y.callee, {
        computed: !1
      }) && B.types.isIdentifier(y.callee.property) && y.callee.property.name === "call" ? v = [y.callee.object, B.types.arrayExpression(y.arguments.
      slice(1, -1)), y.arguments[0]] : v = [y.callee, B.types.arrayExpression(y.arguments.slice(0, -1))], B.types.memberExpression(B.types.callExpression(
      n.addHelper("toSetter"), v), B.types.identifier("_"));
    },
    call(e, t) {
      return this.memoise(e, 1), (0, zI.default)(this.get(e), this.receiver(e), t, !1);
    },
    optionalCall(e, t) {
      return this.memoise(e, 1), (0, zI.default)(this.get(e), this.receiver(e), t, !0);
    },
    delete() {
      throw new Error("Internal Babel error: deleting private elements is a parsing error.");
    }
  }, Kye = {
    get(e) {
      let {
        privateNamesMap: t,
        file: r
      } = this, {
        object: n
      } = e.node, {
        name: i
      } = e.node.property.id;
      return B.template.expression`BASE(REF, PROP)[PROP]`({
        BASE: r.addHelper("classPrivateFieldLooseBase"),
        REF: B.types.cloneNode(n),
        PROP: B.types.cloneNode(t.get(i).id)
      });
    },
    set() {
      throw new Error("private name handler with loose = true don't need set()");
    },
    boundGet(e) {
      return B.types.callExpression(B.types.memberExpression(this.get(e), B.types.identifier("bind")), [B.types.cloneNode(e.node.object)]);
    },
    simpleSet(e) {
      return this.get(e);
    },
    destructureSet(e) {
      return this.get(e);
    },
    call(e, t) {
      return B.types.callExpression(this.get(e), t);
    },
    optionalCall(e, t) {
      return B.types.optionalCallExpression(this.get(e), t, !0);
    },
    delete() {
      throw new Error("Internal Babel error: deleting private elements is a parsing error.");
    }
  };
  function Gye(e, t, r, {
    privateFieldsAsProperties: n,
    noUninitializedPrivateFieldAccess: i,
    noDocumentAll: a,
    innerBinding: o
  }, l) {
    if (!r.size) return;
    let u = t.get("body"), c = n ? Kye : Wye;
    (0, Fye.default)(u, Uye, Object.assign({
      privateNamesMap: r,
      classRef: e,
      file: l
    }, c, {
      noDocumentAll: a,
      noUninitializedPrivateFieldAccess: i,
      innerBinding: o
    })), u.traverse(Vye, {
      privateNamesMap: r,
      classRef: e,
      file: l,
      privateFieldsAsProperties: n,
      innerBinding: o
    });
  }
  s(Gye, "transformPrivateNamesUsage");
  function XI(e, t, r) {
    let {
      id: n
    } = r.get(t.node.key.id.name), i = t.node.value || t.scope.buildUndefinedNode();
    return qt(B.template.statement.ast`
      Object.defineProperty(${e}, ${B.types.cloneNode(n)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${i}
      });
    `, t);
  }
  s(XI, "buildPrivateFieldInitLoose");
  function Hye(e, t, r, n) {
    let {
      id: i
    } = r.get(t.node.key.id.name), a = t.node.value || t.scope.buildUndefinedNode();
    if (!n.availableHelper("classPrivateFieldInitSpec"))
      return qt(B.template.statement.ast`${B.types.cloneNode(i)}.set(${e}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${a},
        })`, t);
    let o = n.addHelper("classPrivateFieldInitSpec");
    return Ob(qt(B.types.expressionStatement(B.types.callExpression(o, [B.types.thisExpression(), Ob(B.types.cloneNode(i), t.node.key), Xt(n) ?
    a : B.template.expression.ast`{ writable: true, value: ${a} }`])), t), t.node);
  }
  s(Hye, "buildPrivateInstanceFieldInitSpec");
  function Yye(e, t, r) {
    let n = t.get(e.node.key.id.name), i = r ? e.node.value : B.template.expression.ast`{
        _: ${e.node.value || B.types.buildUndefinedNode()}
      }`;
    return qt(B.types.variableDeclaration("var", [B.types.variableDeclarator(B.types.cloneNode(n.id), i)]), e);
  }
  s(Yye, "buildPrivateStaticFieldInitSpec");
  _b = /* @__PURE__ */ s(function(e, t) {
    let r = t.get(e.node.key.id.name), {
      id: n,
      getId: i,
      setId: a,
      initAdded: o
    } = r, l = i || a;
    if (!e.isProperty() && (o || !l)) return;
    if (l)
      return t.set(e.node.key.id.name, Object.assign({}, r, {
        initAdded: !0
      })), qt(B.template.statement.ast`
          var ${B.types.cloneNode(n)} = {
            // configurable is false by default
            // enumerable is false by default
            // writable is false by default
            get: ${i ? i.name : e.scope.buildUndefinedNode()},
            set: ${a ? a.name : e.scope.buildUndefinedNode()}
          }
        `, e);
    let u = e.node.value || e.scope.buildUndefinedNode();
    return qt(B.template.statement.ast`
        var ${B.types.cloneNode(n)} = {
          // configurable is false by default
          // enumerable is false by default
          writable: true,
          value: ${u}
        };
      `, e);
  }, "buildPrivateStaticFieldInitSpecOld");
  var _b;
  function zye(e, t, r) {
    let n = r.get(t.node.key.id.name), {
      methodId: i,
      id: a,
      getId: o,
      setId: l,
      initAdded: u
    } = n;
    if (u) return;
    if (i)
      return qt(B.template.statement.ast`
        Object.defineProperty(${e}, ${a}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${i.name}
        });
      `, t);
    if (o || l)
      return r.set(t.node.key.id.name, Object.assign({}, n, {
        initAdded: !0
      })), qt(B.template.statement.ast`
        Object.defineProperty(${e}, ${a}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${o ? o.name : t.scope.buildUndefinedNode()},
          set: ${l ? l.name : t.scope.buildUndefinedNode()}
        });
      `, t);
  }
  s(zye, "buildPrivateMethodInitLoose");
  function Jye(e, t, r, n) {
    let i = r.get(t.node.key.id.name);
    if (!i.initAdded)
      return !Xt(n) && (i.getId || i.setId) ? Xye(e, t, r, n) : Qye(e, t, r, n);
  }
  s(Jye, "buildPrivateInstanceMethodInitSpec");
  function Xye(e, t, r, n) {
    let i = r.get(t.node.key.id.name), {
      id: a,
      getId: o,
      setId: l
    } = i;
    if (r.set(t.node.key.id.name, Object.assign({}, i, {
      initAdded: !0
    })), !n.availableHelper("classPrivateFieldInitSpec"))
      return qt(B.template.statement.ast`
          ${a}.set(${e}, {
            get: ${o ? o.name : t.scope.buildUndefinedNode()},
            set: ${l ? l.name : t.scope.buildUndefinedNode()}
          });
        `, t);
    let u = n.addHelper("classPrivateFieldInitSpec");
    return Ob(qt(B.template.statement.ast`${u}(
      ${B.types.thisExpression()},
      ${B.types.cloneNode(a)},
      {
        get: ${o ? o.name : t.scope.buildUndefinedNode()},
        set: ${l ? l.name : t.scope.buildUndefinedNode()}
      },
    )`, t), t.node);
  }
  s(Xye, "buildPrivateAccessorInitialization");
  function Qye(e, t, r, n) {
    let i = r.get(t.node.key.id.name), {
      id: a
    } = i;
    if (!n.availableHelper("classPrivateMethodInitSpec"))
      return qt(B.template.statement.ast`${a}.add(${e})`, t);
    let o = n.addHelper("classPrivateMethodInitSpec");
    return qt(B.template.statement.ast`${o}(
      ${B.types.thisExpression()},
      ${B.types.cloneNode(a)}
    )`, t);
  }
  s(Qye, "buildPrivateInstanceMethodInitialization");
  function QI(e, t) {
    let {
      key: r,
      computed: n
    } = t.node, i = t.node.value || t.scope.buildUndefinedNode();
    return qt(B.types.expressionStatement(B.types.assignmentExpression("=", B.types.memberExpression(e, r, n || B.types.isLiteral(r)), i)), t);
  }
  s(QI, "buildPublicFieldInitLoose");
  function ZI(e, t, r) {
    let {
      key: n,
      computed: i
    } = t.node, a = t.node.value || t.scope.buildUndefinedNode();
    return qt(B.types.expressionStatement(B.types.callExpression(r.addHelper("defineProperty"), [e, i || B.types.isLiteral(n) ? n : B.types.
    stringLiteral(n.name), a])), t);
  }
  s(ZI, "buildPublicFieldInitSpec");
  function Zye(e, t, r, n) {
    let i = n.get(t.node.key.id.name), {
      id: a,
      methodId: o,
      getId: l,
      setId: u,
      initAdded: c
    } = i;
    return c ? void 0 : l || u ? (n.set(t.node.key.id.name, Object.assign({}, i, {
      initAdded: !0
    })), qt(B.template.statement.ast`
        Object.defineProperty(${e}, ${a}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${l ? l.name : t.scope.buildUndefinedNode()},
          set: ${u ? u.name : t.scope.buildUndefinedNode()}
        })
      `, t)) : qt(B.template.statement.ast`
      Object.defineProperty(${e}, ${a}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${o.name}
      });
    `, t);
  }
  s(Zye, "buildPrivateStaticMethodInitLoose");
  function Tf(e, t, r, n = !1) {
    let i = r.get(t.node.key.id.name), {
      id: a,
      methodId: o,
      getId: l,
      setId: u,
      getterDeclared: c,
      setterDeclared: f,
      static: p
    } = i, {
      params: h,
      body: y,
      generator: v,
      async: d
    } = t.node, b = l && h.length === 0, E = u && h.length > 0;
    if (b && c || E && f)
      return r.set(t.node.key.id.name, Object.assign({}, i, {
        initAdded: !0
      })), null;
    if (Xt(e) && (b || E) && !n) {
      let O = t.get("body").scope, k = O.generateUidIdentifier("this"), j = {
        thisRef: k,
        argumentsPath: []
      };
      if (t.traverse(r_, j), j.argumentsPath.length) {
        let R = O.generateUidIdentifier("arguments");
        O.push({
          id: R,
          init: B.template.expression.ast`[].slice.call(arguments, 1)`
        });
        for (let U of j.argumentsPath)
          U.replaceWith(B.types.cloneNode(R));
      }
      h.unshift(B.types.cloneNode(k));
    }
    let I = o;
    return b ? (r.set(t.node.key.id.name, Object.assign({}, i, {
      getterDeclared: !0,
      initAdded: !0
    })), I = l) : E ? (r.set(t.node.key.id.name, Object.assign({}, i, {
      setterDeclared: !0,
      initAdded: !0
    })), I = u) : p && !n && (I = a), qt(B.types.functionDeclaration(B.types.cloneNode(I), h, y, v, d), t);
  }
  s(Tf, "buildPrivateMethodDeclaration");
  var r_ = B.traverse.visitors.merge([{
    Identifier(e, t) {
      t.argumentsPath && e.node.name === "arguments" && t.argumentsPath.push(e);
    },
    UnaryExpression(e) {
      let {
        node: t
      } = e;
      if (t.operator === "delete") {
        let r = (0, Lye.skipTransparentExprWrapperNodes)(t.argument);
        B.types.isThisExpression(r) && e.replaceWith(B.types.booleanLiteral(!0));
      }
    },
    ThisExpression(e, t) {
      t.needsClassRef = !0, e.replaceWith(B.types.cloneNode(t.thisRef));
    },
    MetaProperty(e) {
      let {
        node: t,
        scope: r
      } = e;
      t.meta.name === "new" && t.property.name === "target" && e.replaceWith(r.buildUndefinedNode());
    }
  }, e_.default]), e0e = {
    ReferencedIdentifier(e, t) {
      e.scope.bindingIdentifierEquals(e.node.name, t.innerBinding) && (t.needsClassRef = !0, e.node.name = t.thisRef.name);
    }
  };
  function t0e(e, t, r) {
    var n;
    let i = {
      thisRef: t,
      needsClassRef: !1,
      innerBinding: r
    };
    return e.isMethod() || e.traverse(r_, i), r != null && (n = i.thisRef) != null && n.name && i.thisRef.name !== r.name && e.traverse(e0e,
    i), i.needsClassRef;
  }
  s(t0e, "replaceThisContext");
  function r0e({
    key: e,
    computed: t
  }) {
    return e.type === "Identifier" ? !t && (e.name === "name" || e.name === "length") : e.type === "StringLiteral" ? e.value === "name" || e.
    value === "length" : !1;
  }
  s(r0e, "isNameOrLength");
  function qt(e, t) {
    return B.types.inheritLeadingComments(e, t.node), B.types.inheritInnerComments(e, t.node), e;
  }
  s(qt, "inheritPropComments");
  function Ob(e, t) {
    return e.start = t.start, e.end = t.end, e.loc = t.loc, e;
  }
  s(Ob, "inheritLoc");
  function n0e(e, t, r, n, i, a, o, l, u, c) {
    var f, p;
    let h = 0, y, v = [], d = [], b = !1, E = [], I = null, O = B.types.isIdentifier(t) ? () => t : () => {
      var j;
      return (j = y) != null || (y = r[0].scope.generateUidIdentifierBasedOnNode(t)), y;
    }, k = (f = e) != null ? f : r[0].scope.generateUidIdentifier(c?.name || "Class");
    (p = e) != null || (e = B.types.cloneNode(c));
    for (let j of r) {
      j.isClassProperty() && Mye.assertFieldTransformed(j);
      let R = !(B.types.isStaticBlock != null && B.types.isStaticBlock(j.node)) && j.node.static, U = !R, Q = j.isPrivate(), W = !Q, q = j.isProperty(),
      M = !q, K = j.isStaticBlock == null ? void 0 : j.isStaticBlock();
      switch (R && (h |= 1), (R || M && Q || K) && (new kye.default({
        methodPath: j,
        constantSuper: u,
        file: i,
        refToPreserve: c,
        getSuperRef: O,
        getObjectRef() {
          return h |= 2, R || K ? k : B.types.memberExpression(k, B.types.identifier("prototype"));
        }
      }).replace(), t0e(j, k, c) && (h |= 2)), b = !1, !0) {
        case K: {
          let fe = j.node.body;
          fe.length === 1 && B.types.isExpressionStatement(fe[0]) ? v.push(qt(fe[0], j)) : v.push(B.types.inheritsComments(B.template.statement.
          ast`(() => { ${fe} })()`, j.node));
          break;
        }
        case (R && Q && q && o):
          v.push(XI(B.types.cloneNode(e), j, n));
          break;
        case (R && Q && q && !o):
          Xt(i) ? v.push(Yye(j, n, l)) : v.push(_b(j, n));
          break;
        case (R && W && q && a):
          if (!r0e(j.node)) {
            v.push(QI(B.types.cloneNode(e), j));
            break;
          }
        case (R && W && q && !a):
          v.push(ZI(B.types.cloneNode(e), j, i));
          break;
        case (U && Q && q && o):
          d.push(XI(B.types.thisExpression(), j, n));
          break;
        case (U && Q && q && !o):
          d.push(Hye(B.types.thisExpression(), j, n, i));
          break;
        case (U && Q && M && o):
          d.unshift(zye(B.types.thisExpression(), j, n)), E.push(Tf(i, j, n, o));
          break;
        case (U && Q && M && !o):
          d.unshift(Jye(B.types.thisExpression(), j, n, i)), E.push(Tf(i, j, n, o));
          break;
        case (R && Q && M && !o):
          Xt(i) || v.unshift(_b(j, n)), E.push(Tf(i, j, n, o));
          break;
        case (R && Q && M && o):
          v.unshift(Zye(B.types.cloneNode(e), j, i, n)), E.push(Tf(i, j, n, o));
          break;
        case (U && W && q && a):
          d.push(QI(B.types.thisExpression(), j));
          break;
        case (U && W && q && !a):
          b = !0, d.push(ZI(B.types.thisExpression(), j, i));
          break;
        default:
          throw new Error("Unreachable.");
      }
    }
    return h & 2 && c != null && (I = B.types.expressionStatement(B.types.assignmentExpression("=", B.types.cloneNode(k), B.types.cloneNode(
    c)))), {
      staticNodes: v.filter(Boolean),
      instanceNodes: d.filter(Boolean),
      lastInstanceNodeReturnsThis: b,
      pureStaticNodes: E.filter(Boolean),
      classBindingNode: I,
      wrapClass(j) {
        for (let R of r)
          R.node.leadingComments = null, R.remove();
        return y && (j.scope.push({
          id: B.types.cloneNode(y)
        }), j.set("superClass", B.types.assignmentExpression("=", y, j.node.superClass))), h !== 0 && (j.isClassExpression() ? (j.scope.push(
        {
          id: e
        }), j.replaceWith(B.types.assignmentExpression("=", B.types.cloneNode(e), j.node))) : (c == null && (j.node.id = e), I != null && j.
        scope.push({
          id: k
        }))), j;
      }
    };
  }
  s(n0e, "buildFieldsInitNodes");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/misc.js
var kb = T((Qo) => {
  "use strict";
  Object.defineProperty(Qo, "__esModule", {
    value: !0
  });
  Qo.extractComputedKeys = u0e;
  Qo.injectInitialization = l0e;
  Qo.memoiseComputedKey = s_;
  var bt = gt(), s0e = Ho(), i0e = bt.traverse.visitors.merge([{
    Super(e) {
      let {
        node: t,
        parentPath: r
      } = e;
      r.isCallExpression({
        callee: t
      }) && this.push(r);
    }
  }, s0e.default]), a0e = {
    "TSTypeAnnotation|TypeAnnotation"(e) {
      e.skip();
    },
    ReferencedIdentifier(e, {
      scope: t
    }) {
      t.hasOwnBinding(e.node.name) && (t.rename(e.node.name), e.skip());
    }
  };
  function n_(e, t) {
    if (t.classBinding && t.classBinding === e.scope.getBinding(e.node.name)) {
      let r = t.file.addHelper("classNameTDZError"), n = bt.types.callExpression(r, [bt.types.stringLiteral(e.node.name)]);
      e.replaceWith(bt.types.sequenceExpression([n, e.node])), e.skip();
    }
  }
  s(n_, "handleClassTDZ");
  var o0e = {
    ReferencedIdentifier: n_
  };
  function l0e(e, t, r, n, i) {
    if (!r.length) return;
    let a = !!e.node.superClass;
    if (!t) {
      let o = bt.types.classMethod("constructor", bt.types.identifier("constructor"), [], bt.types.blockStatement([]));
      a && (o.params = [bt.types.restElement(bt.types.identifier("args"))], o.body.body.push(bt.template.statement.ast`super(...args)`)), [t] =
      e.get("body").unshiftContainer("body", o);
    }
    if (n && n(a0e, {
      scope: t.scope
    }), a) {
      let o = [];
      t.traverse(i0e, o);
      let l = !0;
      for (let u of o)
        if (l ? l = !1 : r = r.map((c) => bt.types.cloneNode(c)), u.parentPath.isExpressionStatement())
          u.insertAfter(r);
        else {
          let c = [u.node, ...r.map((f) => bt.types.toExpression(f))];
          i || c.push(bt.types.thisExpression()), u.replaceWith(bt.types.sequenceExpression(c));
        }
    } else
      t.get("body").unshiftContainer("body", r);
  }
  s(l0e, "injectInitialization");
  function s_(e, t, r) {
    if (bt.types.isIdentifier(e) && t.hasUid(e.name))
      return;
    if (bt.types.isAssignmentExpression(e, {
      operator: "="
    }) && bt.types.isIdentifier(e.left) && t.hasUid(e.left.name))
      return bt.types.cloneNode(e);
    {
      let a = bt.types.identifier(r);
      return t.push({
        id: a,
        kind: "let"
      }), bt.types.assignmentExpression("=", bt.types.cloneNode(a), e);
    }
  }
  s(s_, "memoiseComputedKey");
  function u0e(e, t, r) {
    let {
      scope: n
    } = e, i = [], a = {
      classBinding: e.node.id && n.getBinding(e.node.id.name),
      file: r
    };
    for (let o of t) {
      let l = o.get("key");
      l.isReferencedIdentifier() ? n_(l, a) : l.traverse(o0e, a);
      let u = o.node;
      if (!l.isConstantExpression()) {
        let c = s_(l.node, n, n.generateUidBasedOnNode(l.node));
        c && (i.push(bt.types.expressionStatement(c)), u.key = bt.types.cloneNode(c.left));
      }
    }
    return i;
  }
  s(u0e, "extractComputedKeys");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js
var v_ = T((Ub) => {
  "use strict";
  Object.defineProperty(Ub, "__esModule", {
    value: !0
  });
  Ub.default = V0e;
  var C = gt(), i_ = Ef(), a_ = pb(), xs = Pb(), y_ = Bb(), Sf = kb();
  function g_(e, t = e.length - 1) {
    if (t === -1) {
      e.unshift(65);
      return;
    }
    let r = e[t];
    r === 90 ? e[t] = 97 : r === 122 ? (e[t] = 65, g_(e, t - 1)) : e[t] = r + 1;
  }
  s(g_, "incrementId");
  function c0e(e) {
    let t = [], r = /* @__PURE__ */ new Set();
    return e.traverse({
      PrivateName(n) {
        r.add(n.node.id.name);
      }
    }), () => {
      let n;
      do
        g_(t), n = String.fromCharCode(...t);
      while (r.has(n));
      return C.types.privateName(C.types.identifier(n));
    };
  }
  s(c0e, "createPrivateUidGeneratorForClass");
  function f0e(e) {
    let t;
    return () => (t || (t = c0e(e)), t());
  }
  s(f0e, "createLazyPrivateUidGeneratorForClass");
  function p0e(e, t) {
    let r = e.node.id, n = e.scope;
    if (e.type === "ClassDeclaration") {
      let i = r.name, a = n.generateUidIdentifierBasedOnNode(r), o = C.types.identifier(i);
      return n.rename(i, a.name), e.get("id").replaceWith(o), {
        id: C.types.cloneNode(a),
        path: e
      };
    } else {
      let i;
      r ? (t = r.name, i = xr(n.parent, t), n.rename(t, i.name)) : i = xr(n.parent, typeof t == "string" ? t : "decorated_class");
      let a = C.types.classExpression(typeof t == "string" ? C.types.identifier(t) : null, e.node.superClass, e.node.body), [o] = e.replaceWith(
      C.types.sequenceExpression([a, i]));
      return {
        id: C.types.cloneNode(i),
        path: o.get("expressions.0")
      };
    }
  }
  s(p0e, "replaceClassWithVar");
  function o_(e, t, r) {
    return e.type === "PrivateName" ? C.types.classPrivateProperty(e, t, void 0, r) : C.types.classProperty(e, t, void 0, void 0, r);
  }
  s(o_, "generateClassProperty");
  function Fb(e, t) {
    e.node.id || (e.node.id = typeof t == "string" ? C.types.identifier(t) : e.scope.generateUidIdentifier("Class"));
  }
  s(Fb, "assignIdForAnonymousClass");
  function l_(e, t, r, n, i, a, o, l) {
    let u = (l === "2023-11" || l === "2023-05") && o ? e : C.types.thisExpression(), c = C.types.blockStatement([C.types.returnStatement(C.
    types.memberExpression(C.types.cloneNode(u), C.types.cloneNode(i)))]), f = C.types.blockStatement([C.types.expressionStatement(C.types.assignmentExpression(
    "=", C.types.memberExpression(C.types.cloneNode(u), C.types.cloneNode(i)), C.types.identifier("v")))]), p, h;
    r.type === "PrivateName" ? (p = C.types.classPrivateMethod("get", r, [], c, o), h = C.types.classPrivateMethod("set", n, [C.types.identifier(
    "v")], f, o)) : (p = C.types.classMethod("get", r, [], c, a, o), h = C.types.classMethod("set", n, [C.types.identifier("v")], f, a, o)),
    t.insertAfter(h), t.insertAfter(p);
  }
  s(l_, "addProxyAccessorsFor");
  function u_(e, t) {
    return t !== "2023-11" && t !== "2023-05" && t !== "2023-01" ? [C.template.expression.ast`
        function () {
          return this.${C.types.cloneNode(e)};
        }
      `, C.template.expression.ast`
        function (value) {
          this.${C.types.cloneNode(e)} = value;
        }
      `] : [C.template.expression.ast`
      o => o.${C.types.cloneNode(e)}
    `, C.template.expression.ast`
      (o, v) => o.${C.types.cloneNode(e)} = v
    `];
  }
  s(u_, "extractProxyAccessorsFor");
  function qb(e) {
    if (e = (0, xs.skipTransparentExprWrappers)(e), e.isSequenceExpression()) {
      let t = e.get("expressions");
      return qb(t[t.length - 1]);
    }
    return e;
  }
  s(qb, "getComputedKeyLastElement");
  function d0e(e) {
    let t = qb(e);
    if (t.isConstantExpression())
      return C.types.cloneNode(e.node);
    if (t.isIdentifier() && e.scope.hasUid(t.node.name))
      return C.types.cloneNode(e.node);
    if (t.isAssignmentExpression() && t.get("left").isIdentifier())
      return C.types.cloneNode(t.node.left);
    throw new Error(`Internal Error: the computed key ${e.toString()} has not yet been memoised.`);
  }
  s(d0e, "getComputedKeyMemoiser");
  function Zo(e, t) {
    let r = t.get("key");
    r.isSequenceExpression() ? e.push(...r.node.expressions) : e.push(r.node), r.replaceWith(Ps(e));
  }
  s(Zo, "prependExpressionsToComputedKey");
  function h0e(e, t) {
    let r = t.get("key"), n = qb(r);
    if (n.isConstantExpression())
      Zo(e, t);
    else {
      let i = r.scope.parent, a = (0, Sf.memoiseComputedKey)(n.node, i, i.generateUid("computedKey"));
      if (!a)
        Zo(e, t);
      else {
        let o = [...e, C.types.cloneNode(a.left)], l = n.parentPath;
        l.isSequenceExpression() ? l.pushContainer("expressions", o) : n.replaceWith(Ps([C.types.cloneNode(a), ...o]));
      }
    }
  }
  s(h0e, "appendExpressionsToComputedKey");
  function jb(e, t) {
    let r = t.get("value");
    r.node ? e.push(r.node) : e.length > 0 && (e[e.length - 1] = C.types.unaryExpression("void", e[e.length - 1])), r.replaceWith(Ps(e));
  }
  s(jb, "prependExpressionsToFieldInitializer");
  function m0e(e, t) {
    t.unshiftContainer("body", C.types.expressionStatement(Ps(e)));
  }
  s(m0e, "prependExpressionsToStaticBlock");
  function y0e(e, t) {
    t.node.body.body.unshift(C.types.expressionStatement(Ps(e)));
  }
  s(y0e, "prependExpressionsToConstructor");
  function c_(e, t) {
    return C.types.isCallExpression(e) && C.types.isIdentifier(e.callee, {
      name: t.name
    });
  }
  s(c_, "isProtoInitCallExpression");
  function g0e(e, t) {
    if (t) {
      if (e.length >= 2 && c_(e[1], t)) {
        let r = C.types.callExpression(C.types.cloneNode(t), [e[0]]);
        e.splice(0, 2, r);
      }
      e.length >= 2 && C.types.isThisExpression(e[e.length - 1]) && c_(e[e.length - 2], t) && e.splice(e.length - 1, 1);
    }
    return Ps(e);
  }
  s(g0e, "optimizeSuperCallAndExpressions");
  function b0e(e, t, r) {
    t.traverse({
      CallExpression: {
        exit(n) {
          if (!n.get("callee").isSuper()) return;
          let i = [n.node, ...e.map((a) => C.types.cloneNode(a))];
          n.isCompletionRecord() && i.push(C.types.thisExpression()), n.replaceWith(g0e(i, r)), n.skip();
        }
      },
      ClassMethod(n) {
        n.node.kind === "constructor" && n.skip();
      }
    });
  }
  s(b0e, "insertExpressionsAfterSuperCallAndOptimize");
  function f_(e, t) {
    let r = [C.types.expressionStatement(Ps(e))];
    return t && r.unshift(C.types.expressionStatement(C.types.callExpression(C.types.super(), [C.types.spreadElement(C.types.identifier("arg\
s"))]))), C.types.classMethod("constructor", C.types.identifier("constructor"), t ? [C.types.restElement(C.types.identifier("args"))] : [], C.
    types.blockStatement(r));
  }
  s(f_, "createConstructorFromExpressions");
  function p_(e) {
    return C.types.staticBlock([C.types.expressionStatement(Ps(e))]);
  }
  s(p_, "createStaticBlockFromExpressions");
  var ui = 0, Ss = 1, E0e = 2, b_ = 3, Pf = 4, v0e = 5, T0e = 8, x0e = 16;
  function S0e(e) {
    switch (e.node.type) {
      case "ClassProperty":
      case "ClassPrivateProperty":
        return ui;
      case "ClassAccessorProperty":
        return Ss;
      case "ClassMethod":
      case "ClassPrivateMethod":
        return e.node.kind === "get" ? b_ : e.node.kind === "set" ? Pf : E0e;
    }
  }
  s(S0e, "getElementKind");
  function P0e(e) {
    return [...e.filter((t) => t.isStatic && t.kind >= Ss && t.kind <= Pf), ...e.filter((t) => !t.isStatic && t.kind >= Ss && t.kind <= Pf),
    ...e.filter((t) => t.isStatic && t.kind === ui), ...e.filter((t) => !t.isStatic && t.kind === ui)];
  }
  s(P0e, "toSortedDecoratorInfo");
  function d_(e, t, r) {
    let n = e.length, i = t.some(Boolean), a = [];
    for (let o = 0; o < n; o++)
      (r === "2023-11" || r === "2023-05") && i && a.push(t[o] || C.types.unaryExpression("void", C.types.numericLiteral(0))), a.push(e[o].expression);
    return {
      haveThis: i,
      decs: a
    };
  }
  s(d_, "generateDecorationList");
  function A0e(e, t) {
    return C.types.arrayExpression(e.map((r) => {
      let n = r.kind;
      return r.isStatic && (n += t === "2023-11" || t === "2023-05" ? T0e : v0e), r.decoratorsHaveThis && (n += x0e), C.types.arrayExpression(
      [r.decoratorsArray, C.types.numericLiteral(n), r.name, ...r.privateMethods || []]);
    }));
  }
  s(A0e, "generateDecorationExprs");
  function C0e(e) {
    let t = [];
    for (let r of e) {
      let {
        locals: n
      } = r;
      Array.isArray(n) ? t.push(...n) : n !== void 0 && t.push(n);
    }
    return t;
  }
  s(C0e, "extractElementLocalAssignments");
  function w0e(e, t, r, n, i, a) {
    t.insertAfter(C.types.classPrivateMethod("get", C.types.cloneNode(r), [], C.types.blockStatement([C.types.returnStatement(C.types.callExpression(
    C.types.cloneNode(n), e === "2023-11" && a ? [] : [C.types.thisExpression()]))]), a)), t.insertAfter(C.types.classPrivateMethod("set", C.
    types.cloneNode(r), [C.types.identifier("v")], C.types.blockStatement([C.types.expressionStatement(C.types.callExpression(C.types.cloneNode(
    i), e === "2023-11" && a ? [C.types.identifier("v")] : [C.types.thisExpression(), C.types.identifier("v")]))]), a));
  }
  s(w0e, "addCallAccessorsFor");
  function D0e(e, t, r, n) {
    let i, a;
    e.node.kind === "set" ? (i = [C.types.identifier("v")], a = [C.types.expressionStatement(C.types.callExpression(r, [C.types.thisExpression(),
    C.types.identifier("v")]))]) : (i = [], a = [C.types.returnStatement(C.types.callExpression(r, [C.types.thisExpression()]))]), e.replaceWith(
    C.types.classPrivateMethod(e.node.kind, C.types.cloneNode(t), i, C.types.blockStatement(a), n));
  }
  s(D0e, "movePrivateAccessor");
  function h_(e) {
    let {
      type: t
    } = e;
    return t !== "TSDeclareMethod" && t !== "TSIndexSignature" && t !== "StaticBlock";
  }
  s(h_, "isClassDecoratableElementPath");
  function I0e(e) {
    return C.types.callExpression(C.types.arrowFunctionExpression([], C.types.blockStatement(e.body)), []);
  }
  s(I0e, "staticBlockToIIFE");
  function _0e(e) {
    return C.types.functionExpression(null, [], C.types.blockStatement(e.body));
  }
  s(_0e, "staticBlockToFunctionClosure");
  function O0e(e) {
    return C.types.functionExpression(null, [], C.types.blockStatement([C.types.returnStatement(e)]));
  }
  s(O0e, "fieldInitializerToClosure");
  function Ps(e) {
    return e.length === 0 ? C.types.unaryExpression("void", C.types.numericLiteral(0)) : e.length === 1 ? e[0] : C.types.sequenceExpression(
    e);
  }
  s(Ps, "maybeSequenceExpression");
  function m_(e) {
    let {
      params: t,
      body: r,
      generator: n,
      async: i
    } = e;
    return C.types.functionExpression(void 0, t, r, n, i);
  }
  s(m_, "createFunctionExpressionFromPrivateMethod");
  function E_(e, t) {
    return C.types.callExpression(e.addHelper("setFunctionName"), [C.types.thisExpression(), t]);
  }
  s(E_, "createSetFunctionNameCall");
  function Rb(e, t) {
    return C.types.callExpression(e.addHelper("toPropertyKey"), [t]);
  }
  s(Rb, "createToPropertyKeyCall");
  function Lb(e) {
    return C.types.arrowFunctionExpression([C.types.identifier("_")], C.types.binaryExpression("in", C.types.cloneNode(e), C.types.identifier(
    "_")));
  }
  s(Lb, "createPrivateBrandCheckClosure");
  function N0e(e) {
    try {
      return C.types.traverseFast(e, (t) => {
        if (C.types.isPrivateName(t))
          throw null;
      }), !1;
    } catch {
      return !0;
    }
  }
  s(N0e, "usesPrivateField");
  function B0e(e) {
    let {
      node: t
    } = e;
    t.computed = !0, C.types.isIdentifier(t.key) && (t.key = C.types.stringLiteral(t.key.name));
  }
  s(B0e, "convertToComputedKey");
  function Mb(e, t) {
    let r = !1;
    if (t.length > 0) {
      let n = (0, y_.privateNameVisitorFactory)({
        PrivateName(a, o) {
          o.privateNamesMap.has(a.node.id.name) && (r = !0, a.stop());
        }
      }), i = /* @__PURE__ */ new Map();
      for (let a of t)
        i.set(a, null);
      e.traverse(n, {
        privateNamesMap: i
      });
    }
    return r;
  }
  s(Mb, "hasInstancePrivateAccess");
  function k0e(e, t) {
    let r = (0, y_.privateNameVisitorFactory)({
      PrivateName(i, a) {
        if (!a.privateNamesMap.has(i.node.id.name)) return;
        let o = i.parentPath, l = o.parentPath;
        if (l.node.type === "AssignmentExpression" && l.node.left === o.node || l.node.type === "UpdateExpression" || l.node.type === "RestE\
lement" || l.node.type === "ArrayPattern" || l.node.type === "ObjectProperty" && l.node.value === o.node && l.parentPath.type === "ObjectPat\
tern" || l.node.type === "ForOfStatement" && l.node.left === o.node)
          throw i.buildCodeFrameError(`Decorated private methods are read-only, but "#${i.node.id.name}" is updated via this expression.`);
      }
    }), n = /* @__PURE__ */ new Map();
    for (let i of t)
      n.set(i, null);
    e.traverse(r, {
      privateNamesMap: n
    });
  }
  s(k0e, "checkPrivateMethodUpdateError");
  function F0e(e, t, r, n, i, a, o) {
    var l, u;
    let c = e.get("body.body"), f = e.node.decorators, p = !1, h = !1, y = !1, v = f0e(e), d = [], b = e.scope.parent, E = /* @__PURE__ */ s(
    (le, re, F) => {
      let V = xr(b, re);
      return F.push(C.types.assignmentExpression("=", V, le)), C.types.cloneNode(V);
    }, "memoiseExpression"), I, O, k = (l = e.node.id) == null ? void 0 : l.name, j = typeof i == "object" ? i : void 0, R = /* @__PURE__ */ s(
    (le) => {
      try {
        return C.types.traverseFast(le, (re) => {
          if (C.types.isThisExpression(re) || C.types.isSuper(re) || C.types.isYieldExpression(re) || C.types.isAwaitExpression(re) || C.types.
          isIdentifier(re, {
            name: "arguments"
          }) || k && C.types.isIdentifier(re, {
            name: k
          }) || C.types.isMetaProperty(re) && re.meta.name !== "import")
            throw null;
        }), !1;
      } catch {
        return !0;
      }
    }, "usesFunctionContextOrYieldAwait"), U = [];
    for (let le of c) {
      if (!h_(le))
        continue;
      let re = le.node;
      if (!re.static && C.types.isPrivateName(re.key) && U.push(re.key.id.name), el(re)) {
        switch (re.type) {
          case "ClassProperty":
            a.ClassProperty(le, t);
            break;
          case "ClassPrivateProperty":
            a.ClassPrivateProperty(le, t);
            break;
          case "ClassAccessorProperty":
            if (a.ClassAccessorProperty(le, t), o === "2023-11")
              break;
          default:
            if (re.static) {
              var Q;
              (Q = O) != null || (O = xr(b, "initStatic"));
            } else {
              var W;
              (W = I) != null || (I = xr(b, "initProto"));
            }
            break;
        }
        p = !0, y || (y = re.decorators.some(R));
      } else if (re.type === "ClassAccessorProperty") {
        a.ClassAccessorProperty(le, t);
        let {
          key: F,
          value: V,
          static: H,
          computed: Z
        } = re, pe = v(), ue = o_(pe, V, H), Ae = le.get("key"), [ke] = le.replaceWith(ue), De, Fe;
        Z && !Ae.isConstantExpression() ? (De = (0, Sf.memoiseComputedKey)(Rb(t, F), b, b.generateUid("computedKey")), Fe = C.types.cloneNode(
        De.left)) : (De = C.types.cloneNode(F), Fe = C.types.cloneNode(F)), Fb(e, i), l_(e.node.id, ke, De, Fe, pe, Z, H, o);
      }
      "computed" in le.node && le.node.computed && (h || (h = !b.isStatic(le.node.key)));
    }
    if (!f && !p) {
      !e.node.id && typeof i == "string" && (e.node.id = C.types.identifier(i)), j && e.node.body.body.unshift(p_([E_(t, j)]));
      return;
    }
    let q = [], M, K = /* @__PURE__ */ new Set(), fe, ie, X = null;
    function J(le) {
      let re = !1, F = !1, V = [];
      for (let Z of le) {
        let {
          expression: pe
        } = Z, ue;
        if ((o === "2023-11" || o === "2023-05") && C.types.isMemberExpression(pe))
          if (C.types.isSuper(pe.object))
            ue = C.types.thisExpression();
          else if (b.isStatic(pe.object))
            ue = C.types.cloneNode(pe.object);
          else {
            var H;
            (H = X) != null || (X = xr(b, "obj")), ue = C.types.assignmentExpression("=", C.types.cloneNode(X), pe.object), pe.object = C.types.
            cloneNode(X);
          }
        V.push(ue), re || (re = !b.isStatic(pe)), F || (F = R(Z));
      }
      return {
        hasSideEffects: re,
        usesFnContext: F,
        decoratorsThis: V
      };
    }
    s(J, "handleDecorators");
    let ne = h || y || o !== "2023-11", ae = !1, ge = 0, xe = [], we, de = [];
    if (f) {
      fe = xr(b, "initClass"), ae = e.isClassDeclaration(), {
        id: ie,
        path: e
      } = p0e(e, i), e.node.decorators = null;
      let le = f.some(N0e), {
        hasSideEffects: re,
        usesFnContext: F,
        decoratorsThis: V
      } = J(f), {
        haveThis: H,
        decs: Z
      } = d_(f, V, o);
      if (ge = H ? 1 : 0, xe = Z, (F || re && ne || le) && (we = E(C.types.arrayExpression(xe), "classDecs", d)), !p)
        for (let pe of e.get("body.body")) {
          let {
            node: ue
          } = pe;
          if ("computed" in ue && ue.computed)
            if (pe.isClassProperty({
              static: !0
            })) {
              if (!pe.get("key").isConstantExpression()) {
                let ke = ue.key, De = (0, Sf.memoiseComputedKey)(ke, b, b.generateUid("computedKey"));
                De != null && (ue.key = C.types.cloneNode(De.left), de.push(De));
              }
            } else de.length > 0 && (Zo(de, pe), de = []);
        }
    } else
      Fb(e, i), ie = C.types.cloneNode(e.node.id);
    let Oe, ht = !1, _e = [], Be = [];
    if (p) {
      if (I) {
        let le = C.types.callExpression(C.types.cloneNode(I), [C.types.thisExpression()]);
        _e.push(le);
      }
      for (let le of c) {
        if (!h_(le)) {
          Be.length > 0 && le.isStaticBlock() && (m0e(Be, le), Be = []);
          continue;
        }
        let {
          node: re
        } = le, F = re.decorators, V = !!(F != null && F.length), H = "computed" in re && re.computed, Z = "computedKey";
        re.key.type === "PrivateName" ? Z = re.key.id.name : !H && re.key.type === "Identifier" && (Z = re.key.name);
        let pe, ue;
        if (V) {
          let {
            hasSideEffects: ze,
            usesFnContext: Ve,
            decoratorsThis: lt
          } = J(F), {
            decs: Et,
            haveThis: Bt
          } = d_(F, lt, o);
          ue = Bt, pe = Et.length === 1 ? Et[0] : C.types.arrayExpression(Et), (Ve || ze && ne) && (pe = E(pe, Z + "Decs", de));
        }
        if (H && !le.get("key").isConstantExpression()) {
          let ze = re.key, Ve = (0, Sf.memoiseComputedKey)(V ? Rb(t, ze) : ze, b, b.generateUid("computedKey"));
          Ve != null && (f && le.isClassProperty({
            static: !0
          }) ? (re.key = C.types.cloneNode(Ve.left), de.push(Ve)) : re.key = Ve);
        }
        let {
          key: Ae,
          static: ke
        } = re, De = Ae.type === "PrivateName", Fe = S0e(le);
        De && !ke && (V && (ht = !0), (C.types.isClassPrivateProperty(re) || !Oe) && (Oe = Ae)), le.isClassMethod({
          kind: "constructor"
        }) && (M = le);
        let At;
        if (V) {
          let ze, Ve;
          if (H ? Ve = d0e(le.get("key")) : Ae.type === "PrivateName" ? Ve = C.types.stringLiteral(Ae.id.name) : Ae.type === "Identifier" ? Ve =
          C.types.stringLiteral(Ae.name) : Ve = C.types.cloneNode(Ae), Fe === Ss) {
            let {
              value: lt
            } = le.node, Et = o === "2023-11" && ke ? [] : [C.types.thisExpression()];
            lt && Et.push(C.types.cloneNode(lt));
            let Bt = v(), sn = xr(b, `init_${Z}`), zn = C.types.callExpression(C.types.cloneNode(sn), Et), xa = o_(Bt, zn, ke), [Zt] = le.replaceWith(
            xa);
            if (De) {
              ze = u_(Bt, o);
              let hi = xr(b, `get_${Z}`), Sa = xr(b, `set_${Z}`);
              w0e(o, Zt, Ae, hi, Sa, ke), At = [sn, hi, Sa];
            } else
              Fb(e, i), l_(e.node.id, Zt, C.types.cloneNode(Ae), C.types.isAssignmentExpression(Ae) ? C.types.cloneNode(Ae.left) : C.types.cloneNode(
              Ae), Bt, H, ke, o), At = [sn];
          } else if (Fe === ui) {
            let lt = xr(b, `init_${Z}`), Et = le.get("value"), Bt = o === "2023-11" && ke ? [] : [C.types.thisExpression()];
            Et.node && Bt.push(Et.node), Et.replaceWith(C.types.callExpression(C.types.cloneNode(lt), Bt)), At = [lt], De && (ze = u_(Ae, o));
          } else if (De) {
            let lt = xr(b, `call_${Z}`);
            if (At = [lt], new i_.default({
              constantSuper: r,
              methodPath: le,
              objectRef: ie,
              superRef: e.node.superClass,
              file: t.file,
              refToPreserve: ie
            }).replace(), ze = [m_(le.node)], Fe === b_ || Fe === Pf)
              D0e(le, C.types.cloneNode(Ae), C.types.cloneNode(lt), ke);
            else {
              let Bt = le.node;
              e.node.body.body.unshift(C.types.classPrivateProperty(Ae, C.types.cloneNode(lt), [], Bt.static)), K.add(Ae.id.name), le.remove();
            }
          }
          q.push({
            kind: Fe,
            decoratorsArray: pe,
            decoratorsHaveThis: ue,
            name: Ve,
            isStatic: ke,
            privateMethods: ze,
            locals: At
          }), le.node && (le.node.decorators = null);
        }
        if (H && de.length > 0 && (f && le.isClassProperty({
          static: !0
        }) || (Zo(de, Fe === Ss ? le.getNextSibling() : le), de = [])), _e.length > 0 && !ke && (Fe === ui || Fe === Ss) && (jb(_e, le), _e =
        []), Be.length > 0 && ke && (Fe === ui || Fe === Ss) && (jb(Be, le), Be = []), V && o === "2023-11" && (Fe === ui || Fe === Ss)) {
          let ze = xr(b, `init_extra_${Z}`);
          At.push(ze);
          let Ve = C.types.callExpression(C.types.cloneNode(ze), ke ? [] : [C.types.thisExpression()]);
          ke ? Be.push(Ve) : _e.push(Ve);
        }
      }
    }
    if (de.length > 0) {
      let le = e.get("body.body"), re;
      for (let F = le.length - 1; F >= 0; F--) {
        let V = le[F], H = V.node;
        if (H.computed) {
          if (f && C.types.isClassProperty(H, {
            static: !0
          }))
            continue;
          re = V;
          break;
        }
      }
      re != null && (h0e(de, re), de = []);
    }
    if (_e.length > 0) {
      let le = !!e.node.superClass;
      M ? le ? b0e(_e, M, I) : y0e(_e, M) : e.node.body.body.unshift(f_(_e, le)), _e = [];
    }
    Be.length > 0 && (e.node.body.body.push(p_(Be)), Be = []);
    let ct = P0e(q), Ot = A0e(o === "2023-11" ? q : ct, o), Qt = C0e(ct);
    I && Qt.push(I), O && Qt.push(O);
    let Nt = [], wt = !1, fr = fe && C.types.callExpression(C.types.cloneNode(fe), []), rn = e, vn = e.node, Ur = [];
    if (f) {
      Nt.push(ie, fe);
      let le = [];
      if (e.get("body.body").forEach((re) => {
        if (re.isStaticBlock()) {
          if (Mb(re, U)) {
            let F = E(_0e(re.node), "staticBlock", Ur);
            Be.push(C.types.callExpression(C.types.memberExpression(F, C.types.identifier("call")), [C.types.thisExpression()]));
          } else
            Be.push(I0e(re.node));
          re.remove();
          return;
        }
        if ((re.isClassProperty() || re.isClassPrivateProperty()) && re.node.static) {
          let F = re.get("value");
          if (Mb(F, U)) {
            let V = E(O0e(F.node), "fieldValue", Ur);
            F.replaceWith(C.types.callExpression(C.types.memberExpression(V, C.types.identifier("call")), [C.types.thisExpression()]));
          }
          Be.length > 0 && (jb(Be, re), Be = []), re.node.static = !1, le.push(re.node), re.remove();
        } else if (re.isClassPrivateMethod({
          static: !0
        })) {
          if (Mb(re, U)) {
            new i_.default({
              constantSuper: r,
              methodPath: re,
              objectRef: ie,
              superRef: e.node.superClass,
              file: t.file,
              refToPreserve: ie
            }).replace();
            let V = E(m_(re.node), re.get("key.id").node.name, Ur);
            n ? (re.node.params = [C.types.restElement(C.types.identifier("arg"))], re.node.body = C.types.blockStatement([C.types.returnStatement(
            C.types.callExpression(C.types.memberExpression(V, C.types.identifier("apply")), [C.types.thisExpression(), C.types.identifier("\
arg")]))])) : (re.node.params = re.node.params.map((H, Z) => C.types.isRestElement(H) ? C.types.restElement(C.types.identifier("arg")) : C.types.
            identifier("_" + Z)), re.node.body = C.types.blockStatement([C.types.returnStatement(C.types.callExpression(C.types.memberExpression(
            V, C.types.identifier("apply")), [C.types.thisExpression(), C.types.identifier("arguments")]))]));
          }
          re.node.static = !1, le.push(re.node), re.remove();
        }
      }), le.length > 0 || Be.length > 0) {
        let re = C.template.expression.ast`
        class extends ${t.addHelper("identity")} {}
      `;
        re.body.body = [C.types.classProperty(C.types.toExpression(vn), void 0, void 0, void 0, !0, !0), ...le];
        let F = [], V = C.types.newExpression(re, []);
        Be.length > 0 && F.push(...Be), fr && (wt = !0, F.push(fr)), F.length > 0 ? (F.unshift(C.types.callExpression(C.types.super(), [C.types.
        cloneNode(ie)])), re.body.body.push(f_(F, !1))) : V.arguments.push(C.types.cloneNode(ie));
        let [H] = e.replaceWith(V);
        rn = H.get("callee").get("body").get("body.0.key");
      }
    }
    !wt && fr && e.node.body.body.push(C.types.staticBlock([C.types.expressionStatement(fr)]));
    let {
      superClass: nn
    } = vn;
    if (nn && (o === "2023-11" || o === "2023-05")) {
      let le = e.scope.maybeGenerateMemoised(nn);
      le && (vn.superClass = C.types.assignmentExpression("=", le, nn), nn = le);
    }
    let Yn = C.types.staticBlock([]);
    vn.body.body.unshift(Yn);
    let Tn = Yn.body;
    if (de.length > 0) {
      let le = rn.get("body.body"), re;
      for (let F of le)
        if ((F.isClassProperty() || F.isClassMethod()) && F.node.kind !== "constructor") {
          re = F;
          break;
        }
      re != null ? (B0e(re), Zo(de, re)) : (vn.body.body.unshift(C.types.classProperty(C.types.sequenceExpression([...de, C.types.stringLiteral(
      "_")]), void 0, void 0, void 0, !0, !0)), Tn.push(C.types.expressionStatement(C.types.unaryExpression("delete", C.types.memberExpression(
      C.types.thisExpression(), C.types.identifier("_")))))), de = [];
    }
    if (Tn.push(C.types.expressionStatement(j0e(Qt, Nt, Ot, (u = we) != null ? u : C.types.arrayExpression(xe), C.types.numericLiteral(ge), ht ?
    Oe : null, j, C.types.cloneNode(nn), t, o))), O && Tn.push(C.types.expressionStatement(C.types.callExpression(C.types.cloneNode(O), [C.types.
    thisExpression()]))), Ur.length > 0 && Tn.push(...Ur.map((le) => C.types.expressionStatement(le))), e.insertBefore(d.map((le) => C.types.
    expressionStatement(le))), ae)
      if (!b.getBinding(ie.name).constantViolations.length)
        e.insertBefore(C.types.variableDeclaration("let", [C.types.variableDeclarator(C.types.cloneNode(ie))]));
      else {
        let re = b.generateUidIdentifier("t" + ie.name), F = ie;
        e.replaceWithMultiple([C.types.variableDeclaration("let", [C.types.variableDeclarator(C.types.cloneNode(F)), C.types.variableDeclarator(
        re)]), C.types.blockStatement([C.types.variableDeclaration("let", [C.types.variableDeclarator(C.types.cloneNode(ie))]), e.node, C.types.
        expressionStatement(C.types.assignmentExpression("=", C.types.cloneNode(re), C.types.cloneNode(ie)))]), C.types.expressionStatement(
        C.types.assignmentExpression("=", C.types.cloneNode(F), C.types.cloneNode(re)))]);
      }
    return K.size > 0 && k0e(e, K), e.scope.crawl(), e;
  }
  s(F0e, "transformClass");
  function j0e(e, t, r, n, i, a, o, l, u, c) {
    let f, p, h = [o ? E_(u, o) : C.types.thisExpression(), n, r];
    {
      if (c !== "2023-11" && h.splice(1, 2, r, n), c === "2021-12" || c === "2022-03" && !u.availableHelper("applyDecs2203R"))
        return f = C.types.arrayPattern([...e, ...t]), p = C.types.callExpression(u.addHelper(c === "2021-12" ? "applyDecs" : "applyDecs2203"),
        h), C.types.assignmentExpression("=", f, p);
      c === "2022-03" ? p = C.types.callExpression(u.addHelper("applyDecs2203R"), h) : c === "2023-01" ? (a && h.push(Lb(a)), p = C.types.callExpression(
      u.addHelper("applyDecs2301"), h)) : c === "2023-05" && ((a || l || i.value !== 0) && h.push(i), a ? h.push(Lb(a)) : l && h.push(C.types.
      unaryExpression("void", C.types.numericLiteral(0))), l && h.push(l), p = C.types.callExpression(u.addHelper("applyDecs2305"), h));
    }
    return c === "2023-11" && ((a || l || i.value !== 0) && h.push(i), a ? h.push(Lb(a)) : l && h.push(C.types.unaryExpression("void", C.types.
    numericLiteral(0))), l && h.push(l), p = C.types.callExpression(u.addHelper("applyDecs2311"), h)), e.length > 0 ? t.length > 0 ? f = C.types.
    objectPattern([C.types.objectProperty(C.types.identifier("e"), C.types.arrayPattern(e)), C.types.objectProperty(C.types.identifier("c"),
    C.types.arrayPattern(t))]) : (f = C.types.arrayPattern(e), p = C.types.memberExpression(p, C.types.identifier("e"), !1, !1)) : (f = C.types.
    arrayPattern(t), p = C.types.memberExpression(p, C.types.identifier("c"), !1, !1)), C.types.assignmentExpression("=", f, p);
  }
  s(j0e, "createLocalsAssignment");
  function L0e(e) {
    return e.type === "Identifier" ? e.name === "__proto__" : e.value === "__proto__";
  }
  s(L0e, "isProtoKey");
  function el(e) {
    return e.decorators && e.decorators.length > 0;
  }
  s(el, "isDecorated");
  function M0e(e) {
    switch (e.type) {
      case "ClassAccessorProperty":
        return !0;
      case "ClassMethod":
      case "ClassProperty":
      case "ClassPrivateMethod":
      case "ClassPrivateProperty":
        return el(e);
      default:
        return !1;
    }
  }
  s(M0e, "shouldTransformElement");
  function R0e(e) {
    return el(e) || e.body.body.some(M0e);
  }
  s(R0e, "shouldTransformClass");
  function q0e(e, t) {
    function r(n, i, a) {
      switch (i.type) {
        case "StringLiteral":
          return C.types.stringLiteral(i.value);
        case "NumericLiteral":
        case "BigIntLiteral": {
          let o = i.value + "";
          return n.get("key").replaceWith(C.types.stringLiteral(o)), C.types.stringLiteral(o);
        }
        default: {
          let o = n.scope.maybeGenerateMemoised(i);
          return n.get("key").replaceWith(C.types.assignmentExpression("=", o, Rb(a, i))), C.types.cloneNode(o);
        }
      }
    }
    return s(r, "handleComputedProperty"), {
      VariableDeclarator(n, i) {
        let a = n.node.id;
        if (a.type === "Identifier") {
          let o = (0, xs.skipTransparentExprWrappers)(n.get("init"));
          if (e(o)) {
            let l = a.name;
            t(o, i, l);
          }
        }
      },
      AssignmentExpression(n, i) {
        let a = n.node.left;
        if (a.type === "Identifier") {
          let o = (0, xs.skipTransparentExprWrappers)(n.get("right"));
          if (e(o))
            switch (n.node.operator) {
              case "=":
              case "&&=":
              case "||=":
              case "??=":
                t(o, i, a.name);
            }
        }
      },
      AssignmentPattern(n, i) {
        let a = n.node.left;
        if (a.type === "Identifier") {
          let o = (0, xs.skipTransparentExprWrappers)(n.get("right"));
          if (e(o)) {
            let l = a.name;
            t(o, i, l);
          }
        }
      },
      ObjectExpression(n, i) {
        for (let a of n.get("properties")) {
          if (!a.isObjectProperty()) continue;
          let {
            node: o
          } = a, l = o.key, u = (0, xs.skipTransparentExprWrappers)(a.get("value"));
          if (e(u)) {
            if (o.computed) {
              let c = r(a, l, i);
              t(u, i, c);
            } else if (!L0e(l))
              if (l.type === "Identifier")
                t(u, i, l.name);
              else {
                let c = C.types.stringLiteral(l.value + "");
                t(u, i, c);
              }
          }
        }
      },
      ClassPrivateProperty(n, i) {
        let {
          node: a
        } = n, o = (0, xs.skipTransparentExprWrappers)(n.get("value"));
        if (e(o)) {
          let l = C.types.stringLiteral("#" + a.key.id.name);
          t(o, i, l);
        }
      },
      ClassAccessorProperty(n, i) {
        let {
          node: a
        } = n, o = a.key, l = (0, xs.skipTransparentExprWrappers)(n.get("value"));
        if (e(l))
          if (a.computed) {
            let u = r(n, o, i);
            t(l, i, u);
          } else if (o.type === "Identifier")
            t(l, i, o.name);
          else if (o.type === "PrivateName") {
            let u = C.types.stringLiteral("#" + o.id.name);
            t(l, i, u);
          } else {
            let u = C.types.stringLiteral(o.value + "");
            t(l, i, u);
          }
      },
      ClassProperty(n, i) {
        let {
          node: a
        } = n, o = a.key, l = (0, xs.skipTransparentExprWrappers)(n.get("value"));
        if (e(l))
          if (a.computed) {
            let u = r(n, o, i);
            t(l, i, u);
          } else if (o.type === "Identifier")
            t(l, i, o.name);
          else {
            let u = C.types.stringLiteral(o.value + "");
            t(l, i, u);
          }
      }
    };
  }
  s(q0e, "NamedEvaluationVisitoryFactory");
  function U0e(e) {
    return e.isClassExpression({
      id: null
    }) && R0e(e.node);
  }
  s(U0e, "isDecoratedAnonymousClassExpression");
  function xr(e, t) {
    let r = e.generateUidIdentifier(t);
    return e.push({
      id: r,
      kind: "let"
    }), C.types.cloneNode(r);
  }
  s(xr, "generateLetUidIdentifier");
  function V0e({
    assertVersion: e,
    assumption: t
  }, {
    loose: r
  }, n, i) {
    var a, o;
    e(n === "2023-11" || n === "2023-05" || n === "2023-01" ? "^7.21.0" : n === "2021-12" ? "^7.16.0" : "^7.19.0");
    let l = /* @__PURE__ */ new WeakSet(), u = (a = t("constantSuper")) != null ? a : r, c = (o = t("ignoreFunctionLength")) != null ? o : r,
    f = q0e(U0e, p);
    function p(h, y, v) {
      var d, b;
      if (l.has(h)) return;
      let {
        node: E
      } = h;
      (d = v) != null || (v = (b = E.id) == null ? void 0 : b.name);
      let I = F0e(h, y, u, c, v, f, n);
      if (I) {
        l.add(I);
        return;
      }
      l.add(h);
    }
    return s(p, "visitClass"), {
      name: "proposal-decorators",
      inherits: i,
      visitor: Object.assign({
        ExportDefaultDeclaration(h, y) {
          let {
            declaration: v
          } = h.node;
          if (v?.type === "ClassDeclaration" && el(v)) {
            let d = !v.id, b = (0, a_.default)(h);
            d && p(b, y, C.types.stringLiteral("default"));
          }
        },
        ExportNamedDeclaration(h) {
          let {
            declaration: y
          } = h.node;
          y?.type === "ClassDeclaration" && el(y) && (0, a_.default)(h);
        },
        Class(h, y) {
          p(h, y, void 0);
        }
      }, f)
    };
  }
  s(V0e, "_default");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js
var $b = T((tl) => {
  "use strict";
  Object.defineProperty(tl, "__esModule", {
    value: !0
  });
  tl.buildDecoratedClass = J0e;
  tl.hasDecorators = K0e;
  tl.hasOwnDecorators = Vb;
  var ot = gt(), $0e = Ef(), W0e = lb();
  function Vb(e) {
    var t;
    return !!((t = e.decorators) != null && t.length);
  }
  s(Vb, "hasOwnDecorators");
  function K0e(e) {
    return Vb(e) || e.body.body.some(Vb);
  }
  s(K0e, "hasDecorators");
  function da(e, t) {
    return t ? ot.types.objectProperty(ot.types.identifier(e), t) : null;
  }
  s(da, "prop");
  function G0e(e, t) {
    return ot.types.objectMethod("method", ot.types.identifier(e), [], ot.types.blockStatement(t));
  }
  s(G0e, "method");
  function T_(e) {
    let t;
    return e.decorators && e.decorators.length > 0 && (t = ot.types.arrayExpression(e.decorators.map((r) => r.expression))), e.decorators = void 0,
    t;
  }
  s(T_, "takeDecorators");
  function H0e(e) {
    return e.computed ? e.key : ot.types.isIdentifier(e.key) ? ot.types.stringLiteral(e.key.name) : ot.types.stringLiteral(String(e.key.value));
  }
  s(H0e, "getKey");
  function Y0e(e, t, r, n) {
    let i = n.isClassMethod();
    if (n.isPrivate())
      throw n.buildCodeFrameError(`Private ${i ? "methods" : "fields"} in decorated classes are not supported yet.`);
    if (n.node.type === "ClassAccessorProperty")
      throw n.buildCodeFrameError('Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-1\
2" } instead.');
    if (n.node.type === "StaticBlock")
      throw n.buildCodeFrameError('Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } i\
nstead.');
    let {
      node: a,
      scope: o
    } = n;
    n.isTSDeclareMethod() || new $0e.default({
      methodPath: n,
      objectRef: t,
      superRef: r,
      file: e,
      refToPreserve: t
    }).replace();
    let l = [da("kind", ot.types.stringLiteral(ot.types.isClassMethod(a) ? a.kind : "field")), da("decorators", T_(a)), da("static", a.static &&
    ot.types.booleanLiteral(!0)), da("key", H0e(a))].filter(Boolean);
    if (ot.types.isClassMethod(a)) {
      let u = a.computed ? null : a.key, c = ot.types.toExpression(a);
      l.push(da("value", (0, W0e.default)({
        node: c,
        id: u,
        scope: o
      }) || c));
    } else ot.types.isClassProperty(a) && a.value ? l.push(G0e("value", ot.template.statements.ast`return ${a.value}`)) : l.push(da("value",
    o.buildUndefinedNode()));
    return n.remove(), ot.types.objectExpression(l);
  }
  s(Y0e, "extractElementDescriptor");
  function z0e(e) {
    return e.addHelper("decorate");
  }
  s(z0e, "addDecorateHelper");
  function J0e(e, t, r, n) {
    let {
      node: i,
      scope: a
    } = t, o = a.generateUidIdentifier("initialize"), l = i.id && t.isDeclaration(), u = t.isInStrictMode(), {
      superClass: c
    } = i;
    i.type = "ClassDeclaration", i.id || (i.id = ot.types.cloneNode(e));
    let f;
    c && (f = a.generateUidIdentifierBasedOnNode(i.superClass, "super"), i.superClass = f);
    let p = T_(i), h = ot.types.arrayExpression(r.filter((b) => !b.node.abstract && b.node.type !== "TSIndexSignature").map((b) => Y0e(n, i.
    id, f, b))), y = ot.template.expression.ast`
    ${z0e(n)}(
      ${p || ot.types.nullLiteral()},
      function (${o}, ${c ? ot.types.cloneNode(f) : null}) {
        ${i}
        return { F: ${ot.types.cloneNode(i.id)}, d: ${h} };
      },
      ${c}
    )
  `;
    u || y.arguments[1].body.directives.push(ot.types.directive(ot.types.directiveLiteral("use strict")));
    let v = y, d = "arguments.1.body.body.0";
    return l && (v = ot.template.statement.ast`let ${e} = ${y}`, d = "declarations.0.init." + d), {
      instanceNodes: [ot.template.statement.ast`
        ${ot.types.cloneNode(o)}(this)
      `],
      wrapClass(b) {
        return b.replaceWith(v), b.get(d);
      }
    };
  }
  s(J0e, "buildDecoratedClass");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/features.js
var A_ = T((ci) => {
  "use strict";
  Object.defineProperty(ci, "__esModule", {
    value: !0
  });
  ci.FEATURES = void 0;
  ci.enableFeature = X0e;
  ci.isLoose = Gb;
  ci.shouldTransform = Q0e;
  var x_ = $b(), $n = ci.FEATURES = Object.freeze({
    fields: 2,
    privateMethods: 4,
    decorators: 8,
    privateIn: 16,
    staticBlocks: 32
  }), S_ = /* @__PURE__ */ new Map([[$n.fields, "@babel/plugin-transform-class-properties"], [$n.privateMethods, "@babel/plugin-transform-pr\
ivate-methods"], [$n.privateIn, "@babel/plugin-transform-private-property-in-object"]]), Wb = "@babel/plugin-class-features/featuresKey", rl = "\
@babel/plugin-class-features/looseKey";
  As = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing";
  var As;
  Kb = /* @__PURE__ */ s(function(e, t) {
    return !!(e.get(As) & t);
  }, "canIgnoreLoose");
  var Kb;
  function X0e(e, t, r) {
    (!Wn(e, t) || Kb(e, t)) && (e.set(Wb, e.get(Wb) | t), r === "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-\
an-error" ? (Af(e, t, !0), e.set(As, e.get(As) | t)) : r === "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-\
error" ? (Af(e, t, !1), e.set(As, e.get(As) | t)) : Af(e, t, r));
    let n;
    for (let [a, o] of S_) {
      if (!Wn(e, a) || Kb(e, a)) continue;
      let l = Gb(e, a);
      if (n === !l)
        throw new Error(`'loose' mode configuration must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-p\
rivate-methods and @babel/plugin-transform-private-property-in-object (when they are enabled).

` + P_(e));
      n = l;
      var i = o;
    }
    if (n !== void 0)
      for (let [a, o] of S_)
        Wn(e, a) && Gb(e, a) !== n && (Af(e, a, n), console.warn(`Though the "loose" option was set to "${!n}" in your @babel/preset-env con\
fig, it will not be used for ${o} since the "loose" mode option was set to "${n}" for ${i}.
The "loose" option must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-\
transform-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding
	["${o}", { "loose": ${n} }]
to the "plugins" section of your Babel config.

` + P_(e)));
  }
  s(X0e, "enableFeature");
  function P_(e) {
    let {
      filename: t
    } = e.opts;
    return (!t || t === "unknown") && (t = "[name of the input file]"), `If you already set the same 'loose' mode for these plugins in your \
config, it's possible that they are enabled multiple times with different options.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${t} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.`;
  }
  s(P_, "getBabelShowConfigForHint");
  function Wn(e, t) {
    return !!(e.get(Wb) & t);
  }
  s(Wn, "hasFeature");
  function Gb(e, t) {
    return !!(e.get(rl) & t);
  }
  s(Gb, "isLoose");
  function Af(e, t, r) {
    r ? e.set(rl, e.get(rl) | t) : e.set(rl, e.get(rl) & ~t), e.set(As, e.get(As) & ~t);
  }
  s(Af, "setLoose");
  function Q0e(e, t) {
    let r = null, n = null, i = null, a = null, o = null;
    (0, x_.hasOwnDecorators)(e.node) && (r = e.get("decorators.0"));
    for (let l of e.get("body.body"))
      !r && (0, x_.hasOwnDecorators)(l.node) && (r = l.get("decorators.0")), !n && l.isClassProperty() && (n = l), !i && l.isClassPrivateProperty() &&
      (i = l), !a && l.isClassPrivateMethod != null && l.isClassPrivateMethod() && (a = l), !o && l.isStaticBlock != null && l.isStaticBlock() &&
      (o = l);
    if (r && i)
      throw i.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
    if (r && a)
      throw a.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
    if (r && !Wn(t, $n.decorators))
      throw e.buildCodeFrameError(`Decorators are not enabled.
If you are using ["@babel/plugin-proposal-decorators", { "version": "legacy" }], make sure it comes *before* "@babel/plugin-transform-class-\
properties" and enable loose mode, like so:
	["@babel/plugin-proposal-decorators", { "version": "legacy" }]
	["@babel/plugin-transform-class-properties", { "loose": true }]`);
    if (a && !Wn(t, $n.privateMethods))
      throw a.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-transform-private-methods` to your confi\
guration.");
    if ((n || i) && !Wn(t, $n.fields) && !Wn(t, $n.privateMethods))
      throw e.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-transform-class-properties` to your configuration\
.");
    if (o && !Wn(t, $n.staticBlocks))
      throw e.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-transform-class-static-block` to your conf\
iguration.");
    return !!(r || a || o || (n || i) && Wn(t, $n.fields));
  }
  s(Q0e, "shouldTransform");
});

// ../node_modules/@babel/helper-create-class-features-plugin/lib/index.js
var C_ = T((pi) => {
  "use strict";
  Object.defineProperty(pi, "__esModule", {
    value: !0
  });
  Object.defineProperty(pi, "FEATURES", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ha.FEATURES;
    }, "get")
  });
  Object.defineProperty(pi, "buildCheckInRHS", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return nl.buildCheckInRHS;
    }, "get")
  });
  pi.createClassFeaturePlugin = sge;
  Object.defineProperty(pi, "enableFeature", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ha.enableFeature;
    }, "get")
  });
  Object.defineProperty(pi, "injectInitialization", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return zb.injectInitialization;
    }, "get")
  });
  var Hb = gt(), Z0e = lb(), ege = pb(), tge = v_(), rge = require("semver"), nl = Bb(), Yb = $b(), zb = kb(), ha = A_(), nge = Db(), fi = "\
@babel/plugin-class-features/version";
  function sge({
    name: e,
    feature: t,
    loose: r,
    manipulateOptions: n,
    api: i,
    inherits: a,
    decoratorVersion: o
  }) {
    var l;
    if (t & ha.FEATURES.decorators && (o === "2023-11" || o === "2023-05" || o === "2023-01" || o === "2022-03" || o === "2021-12"))
      return (0, tge.default)(i, {
        loose: r
      }, o, a);
    {
      var u;
      (u = i) != null || (i = {
        assumption: /* @__PURE__ */ s(() => {
        }, "assumption")
      });
    }
    let c = i.assumption("setPublicClassFields"), f = i.assumption("privateFieldsAsSymbols"), p = i.assumption("privateFieldsAsProperties"),
    h = (l = i.assumption("noUninitializedPrivateFieldAccess")) != null ? l : !1, y = i.assumption("constantSuper"), v = i.assumption("noDoc\
umentAll");
    if (p && f)
      throw new Error('Cannot enable both the "privateFieldsAsProperties" and "privateFieldsAsSymbols" assumptions as the same time.');
    let d = p || f;
    if (r === !0) {
      let b = [];
      c !== void 0 && b.push('"setPublicClassFields"'), p !== void 0 && b.push('"privateFieldsAsProperties"'), f !== void 0 && b.push('"priv\
ateFieldsAsSymbols"'), b.length !== 0 && console.warn(`[${e}]: You are using the "loose: true" option and you are explicitly setting a value\
 for the ${b.join(" and ")} assumption${b.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class featur\
es plugins, so it's recommended that you replace it with the following top-level option:
	"assumptions": {
		"setPublicClassFields": true,
		"privateFieldsAsSymbols": true
	}`);
    }
    return {
      name: e,
      manipulateOptions: n,
      inherits: a,
      pre(b) {
        if ((0, ha.enableFeature)(b, t, r), typeof b.get(fi) == "number") {
          b.set(fi, "7.24.7");
          return;
        }
        (!b.get(fi) || rge.lt(b.get(fi), "7.24.7")) && b.set(fi, "7.24.7");
      },
      visitor: {
        Class(b, {
          file: E
        }) {
          var I;
          if (E.get(fi) !== "7.24.7" || !(0, ha.shouldTransform)(b, E)) return;
          let O = b.isClassDeclaration();
          O && (0, nge.assertFieldTransformed)(b);
          let k = (0, ha.isLoose)(E, t), j, R = (0, Yb.hasDecorators)(b.node), U = [], Q = [], W = [], q = /* @__PURE__ */ new Set(), M = b.
          get("body");
          for (let _e of M.get("body")) {
            if ((_e.isClassProperty() || _e.isClassMethod()) && _e.node.computed && W.push(_e), _e.isPrivate()) {
              let {
                name: Be
              } = _e.node.key.id, ct = `get ${Be}`, Ot = `set ${Be}`;
              if (_e.isClassPrivateMethod()) {
                if (_e.node.kind === "get") {
                  if (q.has(ct) || q.has(Be) && !q.has(Ot))
                    throw _e.buildCodeFrameError("Duplicate private field");
                  q.add(ct).add(Be);
                } else if (_e.node.kind === "set") {
                  if (q.has(Ot) || q.has(Be) && !q.has(ct))
                    throw _e.buildCodeFrameError("Duplicate private field");
                  q.add(Ot).add(Be);
                }
              } else {
                if (q.has(Be) && !q.has(ct) && !q.has(Ot) || q.has(Be) && (q.has(ct) || q.has(Ot)))
                  throw _e.buildCodeFrameError("Duplicate private field");
                q.add(Be);
              }
            }
            _e.isClassMethod({
              kind: "constructor"
            }) ? j = _e : (Q.push(_e), (_e.isProperty() || _e.isPrivate() || _e.isStaticBlock != null && _e.isStaticBlock()) && U.push(_e));
          }
          if (!U.length && !R) return;
          let K = b.node.id, fe;
          (!K || !O) && ((0, Z0e.default)(b), fe = b.scope.generateUidIdentifier(K?.name || "Class"));
          let ie = (I = fe) != null ? I : Hb.types.cloneNode(K), X = (0, nl.buildPrivateNamesMap)(ie.name, d ?? k, U, E), J = (0, nl.buildPrivateNamesNodes)(
          X, p ?? k, f ?? !1, E);
          (0, nl.transformPrivateNamesUsage)(ie, b, X, {
            privateFieldsAsProperties: d ?? k,
            noUninitializedPrivateFieldAccess: h,
            noDocumentAll: v,
            innerBinding: K
          }, E);
          let ne, ae, ge, xe, we, de, Oe;
          R ? (ae = we = ne = [], {
            instanceNodes: ge,
            wrapClass: Oe
          } = (0, Yb.buildDecoratedClass)(ie, b, Q, E)) : (ne = (0, zb.extractComputedKeys)(b, W, E), {
            staticNodes: ae,
            pureStaticNodes: we,
            instanceNodes: ge,
            lastInstanceNodeReturnsThis: xe,
            classBindingNode: de,
            wrapClass: Oe
          } = (0, nl.buildFieldsInitNodes)(fe, b.node.superClass, U, X, E, c ?? k, d ?? k, h, y ?? k, K)), ge.length > 0 && (0, zb.injectInitialization)(
          b, j, ge, (_e, Be) => {
            if (!R)
              for (let ct of U)
                Hb.types.isStaticBlock != null && Hb.types.isStaticBlock(ct.node) || ct.node.static || ct.traverse(_e, Be);
          }, xe);
          let ht = Oe(b);
          ht.insertBefore([...J, ...ne]), ae.length > 0 && ht.insertAfter(ae), we.length > 0 && ht.find((_e) => _e.isStatement() || _e.isDeclaration()).
          insertAfter(we), de != null && O && ht.insertAfter(de);
        },
        ExportDefaultDeclaration(b, {
          file: E
        }) {
          {
            if (E.get(fi) !== "7.24.7") return;
            let I = b.get("declaration");
            I.isClassDeclaration() && (0, Yb.hasDecorators)(I.node) && (I.node.id ? (0, ege.default)(b) : I.node.type = "ClassExpression");
          }
        }
      }
    };
  }
  s(sge, "createClassFeaturePlugin");
});

// ../node_modules/@babel/plugin-transform-typescript/lib/enum.js
var Xb = T((Cf) => {
  "use strict";
  Object.defineProperty(Cf, "__esModule", {
    value: !0
  });
  Cf.default = lge;
  Cf.translateEnumValues = D_;
  var ma = gt(), ige = require("assert"), age = Cb(), Jb = /* @__PURE__ */ new WeakMap(), oge = ma.template.expression(`
    (function (ID) {
      ASSIGNMENTS;
      return ID;
    })(INIT)
  `);
  function lge(e, t) {
    let {
      node: r,
      parentPath: n
    } = e;
    if (r.declare) {
      e.remove();
      return;
    }
    let i = r.id.name, {
      fill: a,
      data: o,
      isPure: l
    } = pge(e, t, r.id);
    switch (n.type) {
      case "BlockStatement":
      case "ExportNamedDeclaration":
      case "Program": {
        let c = t.isProgram(e.parent), f = u(n), p = t.objectExpression([]);
        (f || c) && (p = t.logicalExpression("||", t.cloneNode(a.ID), p));
        let h = oge(Object.assign({}, a, {
          INIT: p
        }));
        l && (0, age.default)(h), f ? (n.isExportDeclaration() ? n : e).replaceWith(t.expressionStatement(t.assignmentExpression("=", t.cloneNode(
        r.id), h))) : e.scope.registerDeclaration(e.replaceWith(t.variableDeclaration(c ? "var" : "let", [t.variableDeclarator(r.id, h)]))[0]),
        Jb.set(e.scope.getBindingIdentifier(i), o);
        break;
      }
      default:
        throw new Error(`Unexpected enum parent '${e.parent.type}`);
    }
    function u(c) {
      return c.isExportDeclaration() ? u(c.parentPath) : c.getData(i) ? !0 : (c.setData(i, !0), !1);
    }
    s(u, "seen");
  }
  s(lge, "transpileEnum");
  var uge = (0, ma.template)(`
  ENUM["NAME"] = VALUE;
`), cge = (0, ma.template)(`
  ENUM[ENUM["NAME"] = VALUE] = "NAME";
`), fge = /* @__PURE__ */ s((e, t) => (e ? uge : cge)(t), "buildEnumMember");
  function pge(e, t, r) {
    let {
      enumValues: n,
      data: i,
      isPure: a
    } = D_(e, t), o = n.map(([l, u]) => fge(t.isStringLiteral(u), {
      ENUM: t.cloneNode(r),
      NAME: l,
      VALUE: u
    }));
    return {
      fill: {
        ID: t.cloneNode(r),
        ASSIGNMENTS: o
      },
      data: i,
      isPure: a
    };
  }
  s(pge, "enumFill");
  function w_(e, t) {
    let {
      seen: r,
      path: n,
      t: i
    } = t, a = e.node.name;
    r.has(a) && !e.scope.hasOwnBinding(a) && (e.replaceWith(i.memberExpression(i.cloneNode(n.node.id), i.cloneNode(e.node))), e.skip());
  }
  s(w_, "ReferencedIdentifier");
  var dge = {
    ReferencedIdentifier: w_
  };
  function D_(e, t) {
    var r;
    let n = e.scope.getBindingIdentifier(e.node.id.name), i = (r = Jb.get(n)) != null ? r : /* @__PURE__ */ new Map(), a = -1, o, l = !0, u = e.
    get("members").map((c) => {
      let f = c.node, p = t.isIdentifier(f.id) ? f.id.name : f.id.value, h = c.get("initializer"), y = f.initializer, v;
      if (y)
        a = I_(h, i), a !== void 0 ? (i.set(p, a), ige(typeof a == "number" || typeof a == "string"), a === 1 / 0 || Number.isNaN(a) ? v = t.
        identifier(String(a)) : a === -1 / 0 ? v = t.unaryExpression("-", t.identifier("Infinity")) : v = t.valueToNode(a)) : (l && (l = h.isPure()),
        h.isReferencedIdentifier() ? w_(h, {
          t,
          seen: i,
          path: e
        }) : h.traverse(dge, {
          t,
          seen: i,
          path: e
        }), v = h.node, i.set(p, void 0));
      else if (typeof a == "number")
        a += 1, v = t.numericLiteral(a), i.set(p, a);
      else {
        if (typeof a == "string")
          throw e.buildCodeFrameError("Enum member must have initializer.");
        {
          let d = t.memberExpression(t.cloneNode(e.node.id), t.stringLiteral(o), !0);
          v = t.binaryExpression("+", t.numericLiteral(1), d), i.set(p, void 0);
        }
      }
      return o = p, [p, v];
    });
    return {
      isPure: l,
      data: i,
      enumValues: u
    };
  }
  s(D_, "translateEnumValues");
  function I_(e, t, r = /* @__PURE__ */ new Set()) {
    return n(e);
    function n(l) {
      let u = l.node;
      switch (u.type) {
        case "MemberExpression":
          return i(l, t, r);
        case "StringLiteral":
          return u.value;
        case "UnaryExpression":
          return a(l);
        case "BinaryExpression":
          return o(l);
        case "NumericLiteral":
          return u.value;
        case "ParenthesizedExpression":
          return n(l.get("expression"));
        case "Identifier":
          return i(l, t, r);
        case "TemplateLiteral": {
          if (u.quasis.length === 1)
            return u.quasis[0].value.cooked;
          let c = l.get("expressions"), f = u.quasis, p = "";
          for (let h = 0; h < f.length; h++)
            if (p += f[h].value.cooked, h + 1 < f.length) {
              let y = i(c[h], t, r);
              if (y === void 0) return;
              p += y;
            }
          return p;
        }
        default:
          return;
      }
    }
    function i(l, u, c) {
      if (l.isMemberExpression()) {
        let f = l.node, p = f.object, h = f.property;
        if (!ma.types.isIdentifier(p) || (f.computed ? !ma.types.isStringLiteral(h) : !ma.types.isIdentifier(h)))
          return;
        let y = l.scope.getBindingIdentifier(p.name), v = Jb.get(y);
        return v ? v.get(h.computed ? h.value : h.name) : void 0;
      } else if (l.isIdentifier()) {
        let f = l.node.name;
        if (["Infinity", "NaN"].includes(f))
          return Number(f);
        let p = u?.get(f);
        return p !== void 0 ? p : c.has(l.node) ? void 0 : (c.add(l.node), p = I_(l.resolve(), u, c), u?.set(f, p), p);
      }
    }
    function a(l) {
      let u = n(l.get("argument"));
      if (u !== void 0)
        switch (l.node.operator) {
          case "+":
            return u;
          case "-":
            return -u;
          case "~":
            return ~u;
          default:
            return;
        }
    }
    function o(l) {
      let u = n(l.get("left"));
      if (u === void 0)
        return;
      let c = n(l.get("right"));
      if (c !== void 0)
        switch (l.node.operator) {
          case "|":
            return u | c;
          case "&":
            return u & c;
          case ">>":
            return u >> c;
          case ">>>":
            return u >>> c;
          case "<<":
            return u << c;
          case "^":
            return u ^ c;
          case "*":
            return u * c;
          case "/":
            return u / c;
          case "+":
            return u + c;
          case "-":
            return u - c;
          case "%":
            return u % c;
          case "**":
            return Math.pow(u, c);
          default:
            return;
        }
    }
  }
  s(I_, "computeConstantValue");
});

// ../node_modules/@babel/plugin-transform-typescript/lib/const-enum.js
var __ = T((Qb) => {
  "use strict";
  Object.defineProperty(Qb, "__esModule", {
    value: !0
  });
  Qb.default = mge;
  var hge = Xb();
  function mge(e, t) {
    let {
      name: r
    } = e.node.id, n = e.parentPath.isExportNamedDeclaration(), i = n;
    !i && t.isProgram(e.parent) && (i = e.parent.body.some((l) => t.isExportNamedDeclaration(l) && l.exportKind !== "type" && !l.source && l.
    specifiers.some((u) => t.isExportSpecifier(u) && u.exportKind !== "type" && u.local.name === r)));
    let {
      enumValues: a
    } = (0, hge.translateEnumValues)(e, t);
    if (i) {
      let l = t.objectExpression(a.map(([u, c]) => t.objectProperty(t.isValidIdentifier(u) ? t.identifier(u) : t.stringLiteral(u), c)));
      e.scope.hasOwnBinding(r) ? (n ? e.parentPath : e).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("\
Object"), t.identifier("assign")), [e.node.id, l]))) : (e.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(e.node.id, l)])), e.
      scope.registerDeclaration(e));
      return;
    }
    let o = new Map(a);
    e.scope.path.traverse({
      Scope(l) {
        l.scope.hasOwnBinding(r) && l.skip();
      },
      MemberExpression(l) {
        if (!t.isIdentifier(l.node.object, {
          name: r
        })) return;
        let u;
        if (l.node.computed)
          if (t.isStringLiteral(l.node.property))
            u = l.node.property.value;
          else
            return;
        else if (t.isIdentifier(l.node.property))
          u = l.node.property.name;
        else
          return;
        o.has(u) && l.replaceWith(t.cloneNode(o.get(u)));
      }
    }), e.remove();
  }
  s(mge, "transpileConstEnum");
});

// ../node_modules/@babel/plugin-transform-typescript/lib/global-types.js
var Zb = T((ya) => {
  "use strict";
  Object.defineProperty(ya, "__esModule", {
    value: !0
  });
  ya.GLOBAL_TYPES = void 0;
  ya.isGlobalType = yge;
  ya.registerGlobalType = gge;
  var O_ = ya.GLOBAL_TYPES = /* @__PURE__ */ new WeakMap();
  function yge({
    scope: e
  }, t) {
    return e.hasBinding(t) ? !1 : O_.get(e).has(t) ? !0 : (console.warn(`The exported identifier "${t}" is not declared in Babel's scope tra\
cker
as a JavaScript value binding, and "@babel/plugin-transform-typescript"
never encountered it as a TypeScript type declaration.
It will be treated as a JavaScript value.

This problem is likely caused by another plugin injecting
"${t}" without registering it in the scope tracker. If you are the author
 of that plugin, please use "scope.registerDeclaration(declarationPath)".`), !1);
  }
  s(yge, "isGlobalType");
  function gge(e, t) {
    O_.get(e).add(t);
  }
  s(gge, "registerGlobalType");
});

// ../node_modules/@babel/plugin-transform-typescript/lib/namespace.js
var B_ = T((n1) => {
  "use strict";
  Object.defineProperty(n1, "__esModule", {
    value: !0
  });
  n1.default = Ege;
  var Qe = gt(), bge = Zb();
  function Ege(e, t) {
    if (e.node.declare || e.node.id.type === "StringLiteral") {
      e.remove();
      return;
    }
    if (!t)
      throw e.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimen\
tally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
    let r = e.node.id.name, n = r1(e, Qe.types.cloneNode(e.node, !0));
    if (n === null) {
      let i = e.findParent((a) => a.isProgram());
      (0, bge.registerGlobalType)(i.scope, r), e.remove();
    } else e.scope.hasOwnBinding(r) ? e.replaceWith(n) : e.scope.registerDeclaration(e.replaceWithMultiple([e1(r), n])[0]);
  }
  s(Ege, "transpileNamespace");
  function e1(e) {
    return Qe.types.variableDeclaration("let", [Qe.types.variableDeclarator(Qe.types.identifier(e))]);
  }
  s(e1, "getDeclaration");
  function t1(e, t) {
    return Qe.types.memberExpression(Qe.types.identifier(e), Qe.types.identifier(t));
  }
  s(t1, "getMemberExpression");
  function vge(e, t, r) {
    if (e.kind !== "const")
      throw r.file.buildCodeFrameError(e, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babelj\
s.io/docs/en/babel-plugin-transform-typescript");
    let {
      declarations: n
    } = e;
    if (n.every((o) => Qe.types.isIdentifier(o.id))) {
      for (let o of n)
        o.init = Qe.types.assignmentExpression("=", t1(t, o.id.name), o.init);
      return [e];
    }
    let i = Qe.types.getBindingIdentifiers(e), a = [];
    for (let o in i)
      a.push(Qe.types.assignmentExpression("=", t1(t, o), Qe.types.cloneNode(i[o])));
    return [e, Qe.types.expressionStatement(Qe.types.sequenceExpression(a))];
  }
  s(vge, "handleVariableDeclaration");
  function N_(e, t) {
    return e.hub.buildError(t, "Ambient modules cannot be nested in other modules or namespaces.", Error);
  }
  s(N_, "buildNestedAmbientModuleError");
  function r1(e, t, r) {
    let n = /* @__PURE__ */ new Set(), i = t.id;
    Qe.types.assertIdentifier(i);
    let a = e.scope.generateUid(i.name), o = Qe.types.isTSModuleBlock(t.body) ? t.body.body : [Qe.types.exportNamedDeclaration(t.body)], l = !0;
    for (let c = 0; c < o.length; c++) {
      let f = o[c];
      switch (f.type) {
        case "TSModuleDeclaration": {
          if (!Qe.types.isIdentifier(f.id))
            throw N_(e, f);
          let p = r1(e, f);
          if (p !== null) {
            l = !1;
            let h = f.id.name;
            n.has(h) ? o[c] = p : (n.add(h), o.splice(c++, 1, e1(h), p));
          }
          continue;
        }
        case "TSEnumDeclaration":
        case "FunctionDeclaration":
        case "ClassDeclaration":
          l = !1, n.add(f.id.name);
          continue;
        case "VariableDeclaration": {
          l = !1;
          for (let p in Qe.types.getBindingIdentifiers(f))
            n.add(p);
          continue;
        }
        default:
          l && (l = Qe.types.isTypeScript(f));
          continue;
        case "ExportNamedDeclaration":
      }
      if (!("declare" in f.declaration && f.declaration.declare))
        switch (f.declaration.type) {
          case "TSEnumDeclaration":
          case "FunctionDeclaration":
          case "ClassDeclaration": {
            l = !1;
            let p = f.declaration.id.name;
            n.add(p), o.splice(c++, 1, f.declaration, Qe.types.expressionStatement(Qe.types.assignmentExpression("=", t1(a, p), Qe.types.identifier(
            p))));
            break;
          }
          case "VariableDeclaration": {
            l = !1;
            let p = vge(f.declaration, a, e.hub);
            o.splice(c, p.length, ...p), c += p.length - 1;
            break;
          }
          case "TSModuleDeclaration": {
            if (!Qe.types.isIdentifier(f.declaration.id))
              throw N_(e, f.declaration);
            let p = r1(e, f.declaration, Qe.types.identifier(a));
            if (p !== null) {
              l = !1;
              let h = f.declaration.id.name;
              n.has(h) ? o[c] = p : (n.add(h), o.splice(c++, 1, e1(h), p));
            } else
              o.splice(c, 1), c--;
          }
        }
    }
    if (l) return null;
    let u = Qe.types.objectExpression([]);
    if (r) {
      let c = Qe.types.memberExpression(r, i);
      u = Qe.template.expression.ast`
      ${Qe.types.cloneNode(c)} ||
        (${Qe.types.cloneNode(c)} = ${u})
    `;
    }
    return Qe.template.statement.ast`
    (function (${Qe.types.identifier(a)}) {
      ${o}
    })(${i} || (${Qe.types.cloneNode(i)} = ${u}));
  `;
  }
  s(r1, "handleNested");
});

// ../node_modules/@babel/plugin-transform-typescript/lib/index.js
var j_ = T((Df) => {
  "use strict";
  Object.defineProperty(Df, "__esModule", {
    value: !0
  });
  Df.default = void 0;
  var Tge = la(), xge = CI(), Sge = C_(), Pge = __(), Age = Xb(), Kn = Zb(), Cge = B_();
  function wge(e) {
    switch (e.parent.type) {
      case "TSTypeReference":
      case "TSExpressionWithTypeArguments":
      case "TSTypeQuery":
        return !0;
      case "TSQualifiedName":
        return e.parentPath.findParent((t) => t.type !== "TSQualifiedName").type !== "TSImportEqualsDeclaration";
      case "ExportSpecifier":
        return e.parent.exportKind === "type" || e.parentPath.parent.exportKind === "type";
      default:
        return !1;
    }
  }
  s(wge, "isInType");
  var Rr = /* @__PURE__ */ new WeakMap(), k_ = /* @__PURE__ */ new WeakSet();
  function wf(e) {
    let t = e.getBindingIdentifiers();
    for (let r of Object.keys(t)) {
      let n = e.scope.getBinding(r);
      n && n.identifier === t[r] && n.scope.removeBinding(r);
    }
    e.opts.noScope = !0, e.remove(), e.opts.noScope = !1;
  }
  s(wf, "safeRemove");
  function F_(e, t, r, n, i = "") {
    if (t.file.get("@babel/plugin-transform-modules-*") !== "commonjs")
      throw e.buildCodeFrameError(`\`${r}\` is only supported when compiling modules to CommonJS.
Please consider using \`${n}\`${i}, or add @babel/plugin-transform-modules-commonjs to your Babel config.`);
  }
  s(F_, "assertCjsTransformEnabled");
  var T_e = Df.default = (0, Tge.declare)((e, t) => {
    let {
      types: r,
      template: n
    } = e;
    e.assertVersion(7);
    let i = /\*?\s*@jsx((?:Frag)?)\s+([^\s]+)/, {
      allowNamespaces: a = !0,
      jsxPragma: o = "React.createElement",
      jsxPragmaFrag: l = "React.Fragment",
      onlyRemoveTypeImports: u = !1,
      optimizeConstEnums: c = !1
    } = t;
    var {
      allowDeclareFields: f = !1
    } = t;
    let p = {
      field(d) {
        let {
          node: b
        } = d;
        if (!f && b.declare)
          throw d.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transfor\
m-typescript or @babel/preset-typescript is enabled.");
        if (b.declare) {
          if (b.value)
            throw d.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");
          b.decorators || d.remove();
        } else if (b.definite) {
          if (b.value)
            throw d.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");
          !f && !b.decorators && !r.isClassPrivateProperty(b) && d.remove();
        } else (b.abstract || !f && !b.value && !b.decorators && !r.isClassPrivateProperty(b)) && d.remove();
        b.accessibility && (b.accessibility = null), b.abstract && (b.abstract = null), b.readonly && (b.readonly = null), b.optional && (b.
        optional = null), b.typeAnnotation && (b.typeAnnotation = null), b.definite && (b.definite = null), b.declare && (b.declare = null),
        b.override && (b.override = null);
      },
      method({
        node: d
      }) {
        d.accessibility && (d.accessibility = null), d.abstract && (d.abstract = null), d.optional && (d.optional = null), d.override && (d.
        override = null);
      },
      constructor(d, b) {
        d.node.accessibility && (d.node.accessibility = null);
        let E = [], {
          scope: I
        } = d;
        for (let O of d.get("params")) {
          let k = O.node;
          if (k.type === "TSParameterProperty") {
            let j = k.parameter;
            if (k_.has(j)) continue;
            k_.add(j);
            let R;
            if (r.isIdentifier(j))
              R = j;
            else if (r.isAssignmentPattern(j) && r.isIdentifier(j.left))
              R = j.left;
            else
              throw O.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
            E.push(n.statement.ast`
              this.${r.cloneNode(R)} = ${r.cloneNode(R)}
            `), O.replaceWith(O.get("parameter")), I.registerBinding("param", O);
          }
        }
        (0, Sge.injectInitialization)(b, d, E);
      }
    };
    return {
      name: "transform-typescript",
      inherits: xge.default,
      visitor: {
        Pattern: y,
        Identifier: y,
        RestElement: y,
        Program: {
          enter(d, b) {
            let {
              file: E
            } = b, I = null, O = null, k = d.scope;
            if (Kn.GLOBAL_TYPES.has(k) || Kn.GLOBAL_TYPES.set(k, /* @__PURE__ */ new Set()), E.ast.comments)
              for (let U of E.ast.comments) {
                let Q = i.exec(U.value);
                Q && (Q[1] ? O = Q[2] : I = Q[2]);
              }
            let j = I || o;
            j && ([j] = j.split("."));
            let R = O || l;
            R && ([R] = R.split("."));
            for (let U of d.get("body")) {
              if (U.isImportDeclaration()) {
                if (Rr.has(b.file.ast.program) || Rr.set(b.file.ast.program, !0), U.node.importKind === "type") {
                  for (let M of U.node.specifiers)
                    (0, Kn.registerGlobalType)(k, M.local.name);
                  U.remove();
                  continue;
                }
                let Q = /* @__PURE__ */ new Set(), W = U.node.specifiers.length, q = /* @__PURE__ */ s(() => W > 0 && W === Q.size, "isAllSp\
ecifiersElided");
                for (let M of U.node.specifiers)
                  if (M.type === "ImportSpecifier" && M.importKind === "type") {
                    (0, Kn.registerGlobalType)(k, M.local.name);
                    let K = U.scope.getBinding(M.local.name);
                    K && Q.add(K.path);
                  }
                if (u)
                  Rr.set(d.node, !1);
                else {
                  if (U.node.specifiers.length === 0) {
                    Rr.set(d.node, !1);
                    continue;
                  }
                  for (let M of U.node.specifiers) {
                    let K = U.scope.getBinding(M.local.name);
                    K && !Q.has(K.path) && (v({
                      binding: K,
                      programPath: d,
                      pragmaImportName: j,
                      pragmaFragImportName: R
                    }) ? Q.add(K.path) : Rr.set(d.node, !1));
                  }
                }
                if (q() && !u)
                  U.remove();
                else
                  for (let M of Q)
                    M.remove();
                continue;
              }
              if (U.isExportDeclaration() && (U = U.get("declaration")), U.isVariableDeclaration({
                declare: !0
              }))
                for (let Q of Object.keys(U.getBindingIdentifiers()))
                  (0, Kn.registerGlobalType)(k, Q);
              else (U.isTSTypeAliasDeclaration() || U.isTSDeclareFunction() && U.get("id").isIdentifier() || U.isTSInterfaceDeclaration() ||
              U.isClassDeclaration({
                declare: !0
              }) || U.isTSEnumDeclaration({
                declare: !0
              }) || U.isTSModuleDeclaration({
                declare: !0
              }) && U.get("id").isIdentifier()) && (0, Kn.registerGlobalType)(k, U.node.id.name);
            }
          },
          exit(d) {
            d.node.sourceType === "module" && Rr.get(d.node) && d.pushContainer("body", r.exportNamedDeclaration());
          }
        },
        ExportNamedDeclaration(d, b) {
          if (Rr.has(b.file.ast.program) || Rr.set(b.file.ast.program, !0), d.node.exportKind === "type") {
            d.remove();
            return;
          }
          if (d.node.source && d.node.specifiers.length > 0 && d.node.specifiers.every((E) => E.type === "ExportSpecifier" && E.exportKind ===
          "type")) {
            d.remove();
            return;
          }
          if (!d.node.source && d.node.specifiers.length > 0 && d.node.specifiers.every((E) => r.isExportSpecifier(E) && (0, Kn.isGlobalType)(
          d, E.local.name))) {
            d.remove();
            return;
          }
          if (r.isTSModuleDeclaration(d.node.declaration)) {
            let E = d.node.declaration, {
              id: I
            } = E;
            if (r.isIdentifier(I))
              if (d.scope.hasOwnBinding(I.name))
                d.replaceWith(E);
              else {
                let [O] = d.replaceWithMultiple([r.exportNamedDeclaration(r.variableDeclaration("let", [r.variableDeclarator(r.cloneNode(I))])),
                E]);
                d.scope.registerDeclaration(O);
              }
          }
          Rr.set(b.file.ast.program, !1);
        },
        ExportAllDeclaration(d) {
          d.node.exportKind === "type" && d.remove();
        },
        ExportSpecifier(d) {
          (!d.parent.source && (0, Kn.isGlobalType)(d, d.node.local.name) || d.node.exportKind === "type") && d.remove();
        },
        ExportDefaultDeclaration(d, b) {
          if (Rr.has(b.file.ast.program) || Rr.set(b.file.ast.program, !0), r.isIdentifier(d.node.declaration) && (0, Kn.isGlobalType)(d, d.
          node.declaration.name)) {
            d.remove();
            return;
          }
          Rr.set(b.file.ast.program, !1);
        },
        TSDeclareFunction(d) {
          wf(d);
        },
        TSDeclareMethod(d) {
          wf(d);
        },
        VariableDeclaration(d) {
          d.node.declare && wf(d);
        },
        VariableDeclarator({
          node: d
        }) {
          d.definite && (d.definite = null);
        },
        TSIndexSignature(d) {
          d.remove();
        },
        ClassDeclaration(d) {
          let {
            node: b
          } = d;
          b.declare && wf(d);
        },
        Class(d) {
          let {
            node: b
          } = d;
          b.typeParameters && (b.typeParameters = null), b.superTypeParameters && (b.superTypeParameters = null), b.implements && (b.implements =
          null), b.abstract && (b.abstract = null), d.get("body.body").forEach((E) => {
            E.isClassMethod() || E.isClassPrivateMethod() ? E.node.kind === "constructor" ? p.constructor(E, d) : p.method(E) : (E.isClassProperty() ||
            E.isClassPrivateProperty() || E.isClassAccessorProperty()) && p.field(E);
          });
        },
        Function(d) {
          let {
            node: b
          } = d;
          b.typeParameters && (b.typeParameters = null), b.returnType && (b.returnType = null);
          let E = b.params;
          E.length > 0 && r.isIdentifier(E[0], {
            name: "this"
          }) && E.shift();
        },
        TSModuleDeclaration(d) {
          (0, Cge.default)(d, a);
        },
        TSInterfaceDeclaration(d) {
          d.remove();
        },
        TSTypeAliasDeclaration(d) {
          d.remove();
        },
        TSEnumDeclaration(d) {
          c && d.node.const ? (0, Pge.default)(d, r) : (0, Age.default)(d, r);
        },
        TSImportEqualsDeclaration(d, b) {
          let {
            id: E,
            moduleReference: I
          } = d.node, O, k;
          r.isTSExternalModuleReference(I) ? (F_(d, b, `import ${E.name} = require(...);`, `import ${E.name} from '...';`, " alongside Types\
cript's --allowSyntheticDefaultImports option"), O = r.callExpression(r.identifier("require"), [I.expression]), k = "const") : (O = h(I), k =
          "var"), d.replaceWith(r.variableDeclaration(k, [r.variableDeclarator(E, O)])), d.scope.registerDeclaration(d);
        },
        TSExportAssignment(d, b) {
          F_(d, b, "export = <value>;", "export default <value>;"), d.replaceWith(n.statement.ast`module.exports = ${d.node.expression}`);
        },
        TSTypeAssertion(d) {
          d.replaceWith(d.node.expression);
        },
        [`TSAsExpression${r.tsSatisfiesExpression ? "|TSSatisfiesExpression" : ""}`](d) {
          let {
            node: b
          } = d;
          do
            b = b.expression;
          while (r.isTSAsExpression(b) || r.isTSSatisfiesExpression != null && r.isTSSatisfiesExpression(b));
          d.replaceWith(b);
        },
        [e.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](d) {
          d.replaceWith(d.node.expression);
        },
        CallExpression(d) {
          d.node.typeParameters = null;
        },
        OptionalCallExpression(d) {
          d.node.typeParameters = null;
        },
        NewExpression(d) {
          d.node.typeParameters = null;
        },
        JSXOpeningElement(d) {
          d.node.typeParameters = null;
        },
        TaggedTemplateExpression(d) {
          d.node.typeParameters = null;
        }
      }
    };
    function h(d) {
      return r.isTSQualifiedName(d) ? r.memberExpression(h(d.left), d.right) : d;
    }
    function y({
      node: d
    }) {
      d.typeAnnotation && (d.typeAnnotation = null), r.isIdentifier(d) && d.optional && (d.optional = null);
    }
    function v({
      binding: d,
      programPath: b,
      pragmaImportName: E,
      pragmaFragImportName: I
    }) {
      for (let k of d.referencePaths)
        if (!wge(k))
          return !1;
      if (d.identifier.name !== E && d.identifier.name !== I)
        return !0;
      let O = !1;
      return b.traverse({
        "JSXElement|JSXFragment"(k) {
          O = !0, k.stop();
        }
      }), !O;
    }
  });
});

// ../node_modules/@babel/plugin-syntax-jsx/lib/index.js
var L_ = T((If) => {
  "use strict";
  Object.defineProperty(If, "__esModule", {
    value: !0
  });
  If.default = void 0;
  var Dge = la(), P_e = If.default = (0, Dge.declare)((e) => (e.assertVersion(7), {
    name: "syntax-jsx",
    manipulateOptions(t, r) {
      r.plugins.some((n) => (Array.isArray(n) ? n[0] : n) === "typescript") || r.plugins.push("jsx");
    }
  }));
});

// ../node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js
var q_ = T((s1) => {
  "use strict";
  Object.defineProperty(s1, "__esModule", {
    value: !0
  });
  s1.transformDynamicImport = Oge;
  var M_ = gt(), Ige = So(), R_ = /* @__PURE__ */ s((e) => M_.template.expression.ast`require(${e})`, "requireNoInterop"), _ge = /* @__PURE__ */ s(
  (e, t) => M_.types.callExpression(t.addHelper("interopRequireWildcard"), [R_(e)]), "requireInterop");
  function Oge(e, t, r) {
    let n = t ? R_ : _ge;
    e.replaceWith((0, Ige.buildDynamicImport)(e.node, !0, !1, (i) => n(i, r)));
  }
  s(Oge, "transformDynamicImport");
});

// ../node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js
var V_ = T((_f) => {
  "use strict";
  Object.defineProperty(_f, "__esModule", {
    value: !0
  });
  _f.lazyImportsHook = void 0;
  var U_ = gt(), Nge = So(), Bge = /* @__PURE__ */ s((e) => ({
    name: "@babel/plugin-transform-modules-commonjs/lazy",
    version: "7.24.7",
    getWrapperPayload(t, r) {
      if ((0, Nge.isSideEffectImport)(r) || r.reexportAll)
        return null;
      if (e === !0)
        return /\./.test(t) ? null : "lazy/function";
      if (Array.isArray(e))
        return e.indexOf(t) === -1 ? null : "lazy/function";
      if (typeof e == "function")
        return e(t) ? "lazy/function" : null;
    },
    buildRequireWrapper(t, r, n, i) {
      if (n === "lazy/function")
        return i ? U_.template.statement.ast`
        function ${t}() {
          const data = ${r};
          ${t} = function(){ return data; };
          return data;
        }
      ` : !1;
    },
    wrapReference(t, r) {
      if (r === "lazy/function") return U_.types.callExpression(t, []);
    }
  }), "lazyImportsHook");
  _f.lazyImportsHook = Bge;
});

// ../node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js
var $_ = T((Of) => {
  "use strict";
  Object.defineProperty(Of, "__esModule", {
    value: !0
  });
  Of.defineCommonJSHook = kge;
  Of.makeInvokers = Fge;
  var a1 = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
  function kge(e, t) {
    let r = e.get(a1);
    r || e.set(a1, r = []), r.push(t);
  }
  s(kge, "defineCommonJSHook");
  function i1(e, t) {
    if (e)
      for (let r of e) {
        let n = t(r);
        if (n != null) return n;
      }
  }
  s(i1, "findMap");
  function Fge(e) {
    let t = e.get(a1);
    return {
      getWrapperPayload(...r) {
        return i1(t, (n) => n.getWrapperPayload == null ? void 0 : n.getWrapperPayload(...r));
      },
      wrapReference(...r) {
        return i1(t, (n) => n.wrapReference == null ? void 0 : n.wrapReference(...r));
      },
      buildRequireWrapper(...r) {
        return i1(t, (n) => n.buildRequireWrapper == null ? void 0 : n.buildRequireWrapper(...r));
      }
    };
  }
  s(Fge, "makeInvokers");
});

// ../node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js
var W_ = T((sl) => {
  "use strict";
  Object.defineProperty(sl, "__esModule", {
    value: !0
  });
  sl.default = void 0;
  Object.defineProperty(sl, "defineCommonJSHook", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return o1.defineCommonJSHook;
    }, "get")
  });
  var jge = la(), di = So(), Lge = Uy(), en = gt(), Mge = q_(), Rge = V_(), o1 = $_(), N_e = sl.default = (0, jge.declare)((e, t) => {
    var r, n, i;
    e.assertVersion(7);
    let {
      strictNamespace: a = !1,
      mjsStrictNamespace: o = a,
      allowTopLevelThis: l,
      strict: u,
      strictMode: c,
      noInterop: f,
      importInterop: p,
      lazy: h = !1,
      allowCommonJSExports: y = !0,
      loose: v = !1
    } = t, d = (r = e.assumption("constantReexports")) != null ? r : v, b = (n = e.assumption("enumerableModuleMeta")) != null ? n : v, E = (i =
    e.assumption("noIncompleteNsImportDetection")) != null ? i : !1;
    if (typeof h != "boolean" && typeof h != "function" && (!Array.isArray(h) || !h.every((k) => typeof k == "string")))
      throw new Error(".lazy must be a boolean, array of strings, or a function");
    if (typeof a != "boolean")
      throw new Error(".strictNamespace must be a boolean, or undefined");
    if (typeof o != "boolean")
      throw new Error(".mjsStrictNamespace must be a boolean, or undefined");
    let I = /* @__PURE__ */ s((k) => en.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${k}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, "getAssertion"), O = {
      ReferencedIdentifier(k) {
        let j = k.node.name;
        if (j !== "module" && j !== "exports") return;
        let R = k.scope.getBinding(j);
        this.scope.getBinding(j) !== R || k.parentPath.isObjectProperty({
          value: k.node
        }) && k.parentPath.parentPath.isObjectPattern() || k.parentPath.isAssignmentExpression({
          left: k.node
        }) || k.isAssignmentExpression({
          left: k.node
        }) || k.replaceWith(I(j));
      },
      UpdateExpression(k) {
        let j = k.get("argument");
        if (!j.isIdentifier()) return;
        let R = j.node.name;
        if (R !== "module" && R !== "exports") return;
        let U = k.scope.getBinding(R);
        this.scope.getBinding(R) === U && k.replaceWith(en.types.assignmentExpression(k.node.operator[0] + "=", j.node, I(R)));
      },
      AssignmentExpression(k) {
        let j = k.get("left");
        if (j.isIdentifier()) {
          let R = j.node.name;
          if (R !== "module" && R !== "exports") return;
          let U = k.scope.getBinding(R);
          if (this.scope.getBinding(R) !== U) return;
          let W = k.get("right");
          W.replaceWith(en.types.sequenceExpression([W.node, I(R)]));
        } else if (j.isPattern()) {
          let R = j.getOuterBindingIdentifiers(), U = Object.keys(R).filter((Q) => Q !== "module" && Q !== "exports" ? !1 : this.scope.getBinding(
          Q) === k.scope.getBinding(Q))[0];
          if (U) {
            let Q = k.get("right");
            Q.replaceWith(en.types.sequenceExpression([Q.node, I(U)]));
          }
        }
      }
    };
    return {
      name: "transform-modules-commonjs",
      pre() {
        this.file.set("@babel/plugin-transform-modules-*", "commonjs"), h && (0, o1.defineCommonJSHook)(this.file, (0, Rge.lazyImportsHook)(
        h));
      },
      visitor: {
        ["CallExpression" + (e.types.importExpression ? "|ImportExpression" : "")](k) {
          if (!this.file.has("@babel/plugin-proposal-dynamic-import") || k.isCallExpression() && !en.types.isImport(k.node.callee)) return;
          let {
            scope: j
          } = k;
          do
            j.rename("require");
          while (j = j.parent);
          (0, Mge.transformDynamicImport)(k, f, this.file);
        },
        Program: {
          exit(k, j) {
            if (!(0, di.isModule)(k)) return;
            k.scope.rename("exports"), k.scope.rename("module"), k.scope.rename("require"), k.scope.rename("__filename"), k.scope.rename("__\
dirname"), y || ((0, Lge.default)(k, /* @__PURE__ */ new Set(["module", "exports"]), !1), k.traverse(O, {
              scope: k.scope
            }));
            let R = (0, di.getModuleName)(this.file.opts, t);
            R && (R = en.types.stringLiteral(R));
            let U = (0, o1.makeInvokers)(this.file), {
              meta: Q,
              headers: W
            } = (0, di.rewriteModuleStatementsAndPrepareHeader)(k, {
              exportName: "exports",
              constantReexports: d,
              enumerableModuleMeta: b,
              strict: u,
              strictMode: c,
              allowTopLevelThis: l,
              noInterop: f,
              importInterop: p,
              wrapReference: U.wrapReference,
              getWrapperPayload: U.getWrapperPayload,
              esNamespaceOnly: typeof j.filename == "string" && /\.mjs$/.test(j.filename) ? o : a,
              noIncompleteNsImportDetection: E,
              filename: this.file.opts.filename
            });
            for (let [M, K] of Q.source) {
              let fe = en.types.callExpression(en.types.identifier("require"), [en.types.stringLiteral(M)]), ie;
              if ((0, di.isSideEffectImport)(K)) {
                if (h && K.wrap === "function")
                  throw new Error("Assertion failure");
                ie = en.types.expressionStatement(fe);
              } else {
                var q;
                let X = (0, di.wrapInterop)(k, fe, K.interop) || fe;
                if (K.wrap) {
                  let J = U.buildRequireWrapper(K.name, X, K.wrap, K.referenced);
                  if (J === !1) continue;
                  ie = J;
                }
                (q = ie) != null || (ie = en.template.statement.ast`
                var ${K.name} = ${X};
              `);
              }
              ie.loc = K.loc, W.push(ie), W.push(...(0, di.buildNamespaceInitStatements)(Q, K, d, U.wrapReference));
            }
            (0, di.ensureStatementsHoisted)(W), k.unshiftContainer("body", W), k.get("body").forEach((M) => {
              W.indexOf(M.node) !== -1 && M.isVariableDeclaration() && M.scope.registerDeclaration(M);
            });
          }
        }
      }
    };
  });
});

// ../node_modules/@babel/preset-typescript/lib/index.js
var Y_ = T((l1) => {
  "use strict";
  Object.defineProperty(l1, "__esModule", { value: !0 });
  var G_ = la(), qge = j_();
  L_();
  var Uge = W_(), Vge = Fc();
  function H_(e) {
    return e && e.__esModule ? e : { default: e };
  }
  s(H_, "_interopDefault");
  var K_ = /* @__PURE__ */ H_(qge), $ge = /* @__PURE__ */ H_(Uge), Gn = new Vge.OptionValidator("@babel/preset-typescript");
  function Wge(e = {}) {
    let {
      allowNamespaces: t = !0,
      jsxPragma: r,
      onlyRemoveTypeImports: n
    } = e, i = {
      ignoreExtensions: "ignoreExtensions",
      allowNamespaces: "allowNamespaces",
      disallowAmbiguousJSXLike: "disallowAmbiguousJSXLike",
      jsxPragma: "jsxPragma",
      jsxPragmaFrag: "jsxPragmaFrag",
      onlyRemoveTypeImports: "onlyRemoveTypeImports",
      optimizeConstEnums: "optimizeConstEnums",
      rewriteImportExtensions: "rewriteImportExtensions",
      allExtensions: "allExtensions",
      isTSX: "isTSX"
    }, a = Gn.validateStringOption(i.jsxPragmaFrag, e.jsxPragmaFrag, "React.Fragment");
    {
      var o = Gn.validateBooleanOption(i.allExtensions, e.allExtensions, !1), l = Gn.validateBooleanOption(i.isTSX, e.isTSX, !1);
      l && Gn.invariant(o, "isTSX:true requires allExtensions:true");
    }
    let u = Gn.validateBooleanOption(i.ignoreExtensions, e.ignoreExtensions, !1), c = Gn.validateBooleanOption(i.disallowAmbiguousJSXLike, e.
    disallowAmbiguousJSXLike, !1);
    c && Gn.invariant(o, "disallowAmbiguousJSXLike:true requires allExtensions:true");
    let f = Gn.validateBooleanOption(i.optimizeConstEnums, e.optimizeConstEnums, !1), p = Gn.validateBooleanOption(i.rewriteImportExtensions,
    e.rewriteImportExtensions, !1), h = {
      ignoreExtensions: u,
      allowNamespaces: t,
      disallowAmbiguousJSXLike: c,
      jsxPragma: r,
      jsxPragmaFrag: a,
      onlyRemoveTypeImports: n,
      optimizeConstEnums: f,
      rewriteImportExtensions: p
    };
    return h.allExtensions = o, h.isTSX = l, h;
  }
  s(Wge, "normalizeOptions");
  var Kge = G_.declare(function({
    types: e
  }) {
    return {
      name: "preset-typescript/plugin-rewrite-ts-imports",
      visitor: {
        "ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration"({
          node: t
        }) {
          let {
            source: r
          } = t;
          (e.isImportDeclaration(t) ? t.importKind : t.exportKind) === "value" && r && /[\\/]/.test(r.value) && (r.value = r.value.replace(/(\.[mc]?)ts$/,
          "$1js").replace(/\.tsx$/, ".js"));
        }
      }
    };
  }), Gge = G_.declarePreset((e, t) => {
    e.assertVersion(7);
    let {
      allExtensions: r,
      ignoreExtensions: n,
      allowNamespaces: i,
      disallowAmbiguousJSXLike: a,
      isTSX: o,
      jsxPragma: l,
      jsxPragmaFrag: u,
      onlyRemoveTypeImports: c,
      optimizeConstEnums: f,
      rewriteImportExtensions: p
    } = Wge(t), h = /* @__PURE__ */ s((d) => ({
      allowDeclareFields: t.allowDeclareFields,
      allowNamespaces: i,
      disallowAmbiguousJSXLike: d,
      jsxPragma: l,
      jsxPragmaFrag: u,
      onlyRemoveTypeImports: c,
      optimizeConstEnums: f
    }), "pluginOptions"), y = /* @__PURE__ */ s((d, b) => [[K_.default, Object.assign({
      isTSX: d
    }, h(b))]], "getPlugins");
    return {
      plugins: p ? [Kge] : [],
      overrides: r || n ? [{
        plugins: y(o, a)
      }] : [{
        test: /\.ts$/,
        plugins: y(!1, !1)
      }, {
        test: /\.mts$/,
        sourceType: "module",
        plugins: y(!1, !0)
      }, {
        test: /\.cts$/,
        sourceType: "unambiguous",
        plugins: [[$ge.default, {
          allowTopLevelThis: !0
        }], [K_.default, h(!0)]]
      }, {
        test: /\.tsx$/,
        plugins: y(!0, !1)
      }]
    };
  });
  l1.default = Gge;
});

// ../node_modules/@babel/core/lib/config/files/module-types.js
var m1 = T((il) => {
  "use strict";
  Object.defineProperty(il, "__esModule", {
    value: !0
  });
  il.default = Xge;
  il.supportsESM = void 0;
  var z_ = Gi();
  function p1() {
    let e = require("path");
    return p1 = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(p1, "_path");
  function X_() {
    let e = require("url");
    return X_ = /* @__PURE__ */ s(function() {
      return e;
    }, "_url"), e;
  }
  s(X_, "_url");
  function d1() {
    let e = require("semver");
    return d1 = /* @__PURE__ */ s(function() {
      return e;
    }, "_semver"), e;
  }
  s(d1, "_semver");
  function Q_() {
    let e = Rs();
    return Q_ = /* @__PURE__ */ s(function() {
      return e;
    }, "_debug"), e;
  }
  s(Q_, "_debug");
  var Z_ = Fn(), h1 = ti(), Hge = sb();
  function J_(e, t, r, n, i, a, o) {
    try {
      var l = e[a](o), u = l.value;
    } catch (c) {
      r(c);
      return;
    }
    l.done ? t(u) : Promise.resolve(u).then(n, i);
  }
  s(J_, "asyncGeneratorStep");
  function Yge(e) {
    return function() {
      var t = this, r = arguments;
      return new Promise(function(n, i) {
        var a = e.apply(t, r);
        function o(u) {
          J_(a, n, i, o, l, "next", u);
        }
        s(o, "_next");
        function l(u) {
          J_(a, n, i, o, l, "throw", u);
        }
        s(l, "_throw"), o(void 0);
      });
    };
  }
  s(Yge, "_asyncToGenerator");
  var zge = Q_()("babel:config:loading:files:module-types");
  try {
    c1 = SI();
  } catch {
  }
  var c1, L_e = il.supportsESM = d1().satisfies(process.versions.node, "^12.17 || >=13.2"), u1 = /* @__PURE__ */ new Set();
  function f1(e) {
    if (u1.has(e))
      return zge("Auto-ignoring usage of config %o.", e), {};
    let t;
    try {
      u1.add(e), t = (0, Z_.endHiddenCallStack)(require)(e);
    } finally {
      u1.delete(e);
    }
    {
      var r;
      return (r = t) != null && r.__esModule ? t.default || (arguments[1] ? t : void 0) : t;
    }
  }
  s(f1, "loadCjsDefault");
  var Jge = (0, Z_.endHiddenCallStack)(function() {
    var e = Yge(function* (r) {
      let n = (0, X_().pathToFileURL)(r).toString();
      {
        if (!c1)
          throw new h1.default(`Internal error: Native ECMAScript modules aren't supported by this platform.
`, r);
        return (yield c1(n)).default;
      }
    });
    function t(r) {
      return e.apply(this, arguments);
    }
    return s(t, "loadMjsDefault"), t;
  }());
  function* Xge(e, t) {
    switch (p1().extname(e)) {
      case ".cjs":
        return f1(e, arguments[2]);
      case ".mjs":
        break;
      case ".cts":
        return Qge(e);
      default:
        try {
          return f1(e, arguments[2]);
        } catch (r) {
          if (r.code !== "ERR_REQUIRE_ESM") throw r;
        }
    }
    if (yield* (0, z_.isAsync)())
      return yield* (0, z_.waitFor)(Jge(e));
    throw new h1.default(t, e);
  }
  s(Xge, "loadCodeDefault");
  function Qge(e) {
    let t = ".cts", r = !!(require.extensions[".ts"] || require.extensions[".cts"] || require.extensions[".mts"]), n;
    if (!r) {
      let i = {
        babelrc: !1,
        configFile: !1,
        sourceType: "unambiguous",
        sourceMaps: "inline",
        sourceFileName: p1().basename(e),
        presets: [[Zge(e), Object.assign({
          onlyRemoveTypeImports: !0,
          optimizeConstEnums: !0
        }, {
          allowDeclareFields: !0
        })]]
      };
      n = /* @__PURE__ */ s(function(a, o) {
        if (n && o.endsWith(t))
          try {
            return a._compile((0, Hge.transformFileSync)(o, Object.assign({}, i, {
              filename: o
            })).code, o);
          } catch (l) {
            if (!r) {
              let u = PI();
              d1().lt(u.version, "7.21.4") && console.error("`.cts` configuration file failed to load, please try to update `@babel/preset-t\
ypescript`.");
            }
            throw l;
          }
        return require.extensions[".js"](a, o);
      }, "handler"), require.extensions[t] = n;
    }
    try {
      return f1(e);
    } finally {
      r || (require.extensions[t] === n && delete require.extensions[t], n = void 0);
    }
  }
  s(Qge, "loadCtsDefault");
  function Zge(e) {
    try {
      return Y_();
    } catch (t) {
      if (t.code !== "MODULE_NOT_FOUND") throw t;
      let r = "You appear to be using a .cts file as Babel configuration, but the `@babel/preset-typescript` package was not found: please i\
nstall it!";
      throw process.versions.pnp && (r += `
If you are using Yarn Plug'n'Play, you may also need to add the following configuration to your .yarnrc.yml file:

packageExtensions:
	"@babel/core@*":
		peerDependencies:
			"@babel/preset-typescript": "*"
`), new h1.default(r, e);
    }
  }
  s(Zge, "getTSPreset");
});

// ../node_modules/@babel/core/lib/config/files/configuration.js
var uO = T((Hn) => {
  "use strict";
  Object.defineProperty(Hn, "__esModule", {
    value: !0
  });
  Hn.ROOT_CONFIG_FILENAMES = void 0;
  Hn.findConfigUpwards = dbe;
  Hn.findRelativeConfig = hbe;
  Hn.findRootConfig = mbe;
  Hn.loadConfig = ybe;
  Hn.resolveShowConfigPath = gbe;
  function tO() {
    let e = Rs();
    return tO = /* @__PURE__ */ s(function() {
      return e;
    }, "_debug"), e;
  }
  s(tO, "_debug");
  function y1() {
    let e = require("fs");
    return y1 = /* @__PURE__ */ s(function() {
      return e;
    }, "_fs"), e;
  }
  s(y1, "_fs");
  function Sr() {
    let e = require("path");
    return Sr = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(Sr, "_path");
  function rO() {
    let e = a2();
    return rO = /* @__PURE__ */ s(function() {
      return e;
    }, "_json"), e;
  }
  s(rO, "_json");
  function nO() {
    let e = Er();
    return nO = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(nO, "_gensync");
  var sO = ei(), ebe = P0(), iO = p0(), tbe = m1(), rbe = fg(), tn = ti(), nbe = uc(), sbe = Fn(), g1 = tO()("babel:config:loading:files:con\
figuration"), aO = Hn.ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json", "babel.config\
.cts"], ibe = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json", ".babelrc.cts"], abe = ".babelignore", obe = (0, sO.
  makeWeakCache)(/* @__PURE__ */ s(function* (t, r) {
    return yield* [], {
      options: (0, sbe.endHiddenCallStack)(t)((0, ebe.makeConfigAPI)(r)),
      cacheNeedsConfiguration: !r.configured()
    };
  }, "runConfig"));
  function* lbe(e, t) {
    if (!y1().existsSync(e)) return null;
    let r = yield* (0, tbe.default)(e, "You appear to be using a native ECMAScript module configuration file, which is only supported when r\
unning Babel asynchronously."), n = !1;
    if (typeof r == "function" && ({
      options: r,
      cacheNeedsConfiguration: n
    } = yield* obe(r, t)), !r || typeof r != "object" || Array.isArray(r))
      throw new tn.default("Configuration should be an exported JavaScript object.", e);
    if (typeof r.then == "function")
      throw r.catch == null || r.catch(() => {
      }), new tn.default("You appear to be using an async configuration, which your current version of Babel does not support. We may add su\
pport for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synch\
ronously return your config.", e);
    return n && bbe(e), ube(r, e);
  }
  s(lbe, "readConfigCode");
  var eO = /* @__PURE__ */ new WeakMap();
  function ube(e, t) {
    let r = eO.get(e);
    r || eO.set(e, r = /* @__PURE__ */ new Map());
    let n = r.get(t);
    return n || (n = {
      filepath: t,
      dirname: Sr().dirname(t),
      options: e
    }, r.set(t, n)), n;
  }
  s(ube, "buildConfigFileObject");
  var cbe = (0, sO.makeWeakCacheSync)((e) => {
    let t = e.options.babel;
    if (typeof t > "u") return null;
    if (typeof t != "object" || Array.isArray(t) || t === null)
      throw new tn.default(".babel property must be an object", e.filepath);
    return {
      filepath: e.filepath,
      dirname: e.dirname,
      options: t
    };
  }), fbe = (0, iO.makeStaticFileCache)((e, t) => {
    let r;
    try {
      r = rO().parse(t);
    } catch (n) {
      throw new tn.default(`Error while parsing config - ${n.message}`, e);
    }
    if (!r) throw new tn.default("No config detected", e);
    if (typeof r != "object")
      throw new tn.default(`Config returned typeof ${typeof r}`, e);
    if (Array.isArray(r))
      throw new tn.default("Expected config object but found array", e);
    return delete r.$schema, {
      filepath: e,
      dirname: Sr().dirname(e),
      options: r
    };
  }), pbe = (0, iO.makeStaticFileCache)((e, t) => {
    let r = Sr().dirname(e), n = t.split(`
`).map((i) => i.replace(/#.*$/, "").trim()).filter((i) => !!i);
    for (let i of n)
      if (i[0] === "!")
        throw new tn.default("Negation of file paths is not supported.", e);
    return {
      filepath: e,
      dirname: Sr().dirname(e),
      ignore: n.map((i) => (0, rbe.default)(i, r))
    };
  });
  function dbe(e) {
    let t = e;
    for (; ; ) {
      for (let n of aO)
        if (y1().existsSync(Sr().join(t, n)))
          return t;
      let r = Sr().dirname(t);
      if (t === r) break;
      t = r;
    }
    return null;
  }
  s(dbe, "findConfigUpwards");
  function* hbe(e, t, r) {
    let n = null, i = null, a = Sr().dirname(e.filepath);
    for (let l of e.directories) {
      if (!n) {
        var o;
        n = yield* oO(ibe, l, t, r, ((o = e.pkg) == null ? void 0 : o.dirname) === l ? cbe(e.pkg) : null);
      }
      if (!i) {
        let u = Sr().join(l, abe);
        i = yield* pbe(u), i && g1("Found ignore %o from %o.", i.filepath, a);
      }
    }
    return {
      config: n,
      ignore: i
    };
  }
  s(hbe, "findRelativeConfig");
  function mbe(e, t, r) {
    return oO(aO, e, t, r);
  }
  s(mbe, "findRootConfig");
  function* oO(e, t, r, n, i = null) {
    let o = (yield* nO().all(e.map((l) => lO(Sr().join(t, l), r, n)))).reduce((l, u) => {
      if (u && l)
        throw new tn.default(`Multiple configuration files found. Please remove one:
 - ${Sr().basename(l.filepath)}
 - ${u.filepath}
from ${t}`);
      return u || l;
    }, i);
    return o && g1("Found configuration %o from %o.", o.filepath, t), o;
  }
  s(oO, "loadOneConfig");
  function* ybe(e, t, r, n) {
    let i = (((o, l) => (o = o.split("."), l = l.split("."), +o[0] > +l[0] || o[0] == l[0] && +o[1] >= +l[1]))(process.versions.node, "8.9") ?
    require.resolve : (o, {
      paths: [l]
    }, u = require("module")) => {
      let c = u._findPath(o, u._nodeModulePaths(l).concat(l));
      if (c) return c;
      throw c = new Error(`Cannot resolve module '${o}'`), c.code = "MODULE_NOT_FOUND", c;
    })(e, {
      paths: [t]
    }), a = yield* lO(i, r, n);
    if (!a)
      throw new tn.default("Config file contains no configuration data", i);
    return g1("Loaded config %o from %o.", e, t), a;
  }
  s(ybe, "loadConfig");
  function lO(e, t, r) {
    switch (Sr().extname(e)) {
      case ".js":
      case ".cjs":
      case ".mjs":
      case ".cts":
        return lbe(e, {
          envName: t,
          caller: r
        });
      default:
        return fbe(e);
    }
  }
  s(lO, "readConfig");
  function* gbe(e) {
    let t = process.env.BABEL_SHOW_CONFIG_FOR;
    if (t != null) {
      let r = Sr().resolve(e, t);
      if (!(yield* nbe.stat(r)).isFile())
        throw new Error(`${r}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
      return r;
    }
    return null;
  }
  s(gbe, "resolveShowConfigPath");
  function bbe(e) {
    throw new tn.default(`Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === "production");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === "production");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};`, e);
  }
  s(bbe, "throwConfigError");
});

// ../node_modules/@babel/core/lib/vendor/import-meta-resolve.js
var kO = T((Lf) => {
  "use strict";
  Object.defineProperty(Lf, "__esModule", {
    value: !0
  });
  Lf.moduleResolve = BO;
  Lf.resolve = c1e;
  function bn() {
    let e = require("assert");
    return bn = /* @__PURE__ */ s(function() {
      return e;
    }, "_assert"), e;
  }
  s(bn, "_assert");
  function ul() {
    let e = Ebe(require("fs"), !0);
    return ul = /* @__PURE__ */ s(function() {
      return e;
    }, "_fs"), e;
  }
  s(ul, "_fs");
  function Cs() {
    let e = require("process");
    return Cs = /* @__PURE__ */ s(function() {
      return e;
    }, "_process"), e;
  }
  s(Cs, "_process");
  function ve() {
    let e = require("url");
    return ve = /* @__PURE__ */ s(function() {
      return e;
    }, "_url"), e;
  }
  s(ve, "_url");
  function kf() {
    let e = require("path");
    return kf = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(kf, "_path");
  function Ff() {
    let e = require("module");
    return Ff = /* @__PURE__ */ s(function() {
      return e;
    }, "_module"), e;
  }
  s(Ff, "_module");
  function xO() {
    let e = require("v8");
    return xO = /* @__PURE__ */ s(function() {
      return e;
    }, "_v"), e;
  }
  s(xO, "_v");
  function ll() {
    let e = require("util");
    return ll = /* @__PURE__ */ s(function() {
      return e;
    }, "_util"), e;
  }
  s(ll, "_util");
  function SO(e) {
    if (typeof WeakMap != "function") return null;
    var t = /* @__PURE__ */ new WeakMap(), r = /* @__PURE__ */ new WeakMap();
    return (SO = /* @__PURE__ */ s(function(n) {
      return n ? r : t;
    }, "_getRequireWildcardCache"))(e);
  }
  s(SO, "_getRequireWildcardCache");
  function Ebe(e, t) {
    if (!t && e && e.__esModule) return e;
    if (e === null || typeof e != "object" && typeof e != "function") return { default: e };
    var r = SO(t);
    if (r && r.has(e)) return r.get(e);
    var n = { __proto__: null }, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var a in e) if (a !== "default" && {}.hasOwnProperty.call(e, a)) {
      var o = i ? Object.getOwnPropertyDescriptor(e, a) : null;
      o && (o.get || o.set) ? Object.defineProperty(n, a, o) : n[a] = e[a];
    }
    return n.default = e, r && r.set(e, n), n;
  }
  s(Ebe, "_interopRequireWildcard");
  var vbe = {}.hasOwnProperty, Tbe = /^([A-Z][a-z\d]*)+$/, xbe = /* @__PURE__ */ new Set(["string", "function", "number", "object", "Functio\
n", "Object", "boolean", "bigint", "symbol"]), Kt = {};
  function b1(e, t = "and") {
    return e.length < 3 ? e.join(` ${t} `) : `${e.slice(0, -1).join(", ")}, ${t} ${e[e.length - 1]}`;
  }
  s(b1, "formatList");
  var PO = /* @__PURE__ */ new Map(), Sbe = "__node_internal_", cO;
  Kt.ERR_INVALID_ARG_TYPE = qr("ERR_INVALID_ARG_TYPE", (e, t, r) => {
    bn()(typeof e == "string", "'name' must be a string"), Array.isArray(t) || (t = [t]);
    let n = "The ";
    if (e.endsWith(" argument"))
      n += `${e} `;
    else {
      let l = e.includes(".") ? "property" : "argument";
      n += `"${e}" ${l} `;
    }
    n += "must be ";
    let i = [], a = [], o = [];
    for (let l of t)
      bn()(typeof l == "string", "All expected entries have to be of type string"), xbe.has(l) ? i.push(l.toLowerCase()) : Tbe.exec(l) === null ?
      (bn()(l !== "object", 'The value "object" should be written as "Object"'), o.push(l)) : a.push(l);
    if (a.length > 0) {
      let l = i.indexOf("object");
      l !== -1 && (i.slice(l, 1), a.push("Object"));
    }
    return i.length > 0 && (n += `${i.length > 1 ? "one of type" : "of type"} ${b1(i, "or")}`, (a.length > 0 || o.length > 0) && (n += " or ")),
    a.length > 0 && (n += `an instance of ${b1(a, "or")}`, o.length > 0 && (n += " or ")), o.length > 0 && (o.length > 1 ? n += `one of ${b1(
    o, "or")}` : (o[0].toLowerCase() !== o[0] && (n += "an "), n += `${o[0]}`)), n += `. Received ${Dbe(r)}`, n;
  }, TypeError);
  Kt.ERR_INVALID_MODULE_SPECIFIER = qr("ERR_INVALID_MODULE_SPECIFIER", (e, t, r = void 0) => `Invalid module "${e}" ${t}${r ? ` imported fro\
m ${r}` : ""}`, TypeError);
  Kt.ERR_INVALID_PACKAGE_CONFIG = qr("ERR_INVALID_PACKAGE_CONFIG", (e, t, r) => `Invalid package config ${e}${t ? ` while importing ${t}` : ""}${r ?
  `. ${r}` : ""}`, Error);
  Kt.ERR_INVALID_PACKAGE_TARGET = qr("ERR_INVALID_PACKAGE_TARGET", (e, t, r, n = !1, i = void 0) => {
    let a = typeof r == "string" && !n && r.length > 0 && !r.startsWith("./");
    return t === "." ? (bn()(n === !1), `Invalid "exports" main target ${JSON.stringify(r)} defined in the package config ${e}package.json${i ?
    ` imported from ${i}` : ""}${a ? '; targets must start with "./"' : ""}`) : `Invalid "${n ? "imports" : "exports"}" target ${JSON.stringify(
    r)} defined for '${t}' in the package config ${e}package.json${i ? ` imported from ${i}` : ""}${a ? '; targets must start with "./"' : ""}`;
  }, Error);
  Kt.ERR_MODULE_NOT_FOUND = qr("ERR_MODULE_NOT_FOUND", (e, t, r = !1) => `Cannot find ${r ? "module" : "package"} '${e}' imported from ${t}`,
  Error);
  Kt.ERR_NETWORK_IMPORT_DISALLOWED = qr("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error);
  Kt.ERR_PACKAGE_IMPORT_NOT_DEFINED = qr("ERR_PACKAGE_IMPORT_NOT_DEFINED", (e, t, r) => `Package import specifier "${e}" is not defined${t ?
  ` in package ${t}package.json` : ""} imported from ${r}`, TypeError);
  Kt.ERR_PACKAGE_PATH_NOT_EXPORTED = qr("ERR_PACKAGE_PATH_NOT_EXPORTED", (e, t, r = void 0) => t === "." ? `No "exports" main defined in ${e}\
package.json${r ? ` imported from ${r}` : ""}` : `Package subpath '${t}' is not defined by "exports" in ${e}package.json${r ? ` imported fro\
m ${r}` : ""}`, Error);
  Kt.ERR_UNSUPPORTED_DIR_IMPORT = qr("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported fro\
m %s", Error);
  Kt.ERR_UNSUPPORTED_RESOLVE_REQUEST = qr("ERR_UNSUPPORTED_RESOLVE_REQUEST", 'Failed to resolve module specifier "%s" from "%s": Invalid rel\
ative URL or base scheme is not hierarchical.', TypeError);
  Kt.ERR_UNKNOWN_FILE_EXTENSION = qr("ERR_UNKNOWN_FILE_EXTENSION", (e, t) => `Unknown file extension "${e}" for ${t}`, TypeError);
  Kt.ERR_INVALID_ARG_VALUE = qr("ERR_INVALID_ARG_VALUE", (e, t, r = "is invalid") => {
    let n = (0, ll().inspect)(t);
    return n.length > 128 && (n = `${n.slice(0, 128)}...`), `The ${e.includes(".") ? "property" : "argument"} '${e}' ${r}. Received ${n}`;
  }, TypeError);
  function qr(e, t, r) {
    return PO.set(e, t), Pbe(r, e);
  }
  s(qr, "createError");
  function Pbe(e, t) {
    return r;
    function r(...n) {
      let i = Error.stackTraceLimit;
      x1() && (Error.stackTraceLimit = 0);
      let a = new e();
      x1() && (Error.stackTraceLimit = i);
      let o = wbe(t, n, a);
      return Object.defineProperties(a, {
        message: {
          value: o,
          enumerable: !1,
          writable: !0,
          configurable: !0
        },
        toString: {
          value() {
            return `${this.name} [${t}]: ${this.message}`;
          },
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), Cbe(a), a.code = t, a;
    }
  }
  s(Pbe, "makeNodeErrorWithCode");
  function x1() {
    try {
      if (xO().startupSnapshot.isBuildingSnapshot())
        return !1;
    } catch {
    }
    let e = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
    return e === void 0 ? Object.isExtensible(Error) : vbe.call(e, "writable") && e.writable !== void 0 ? e.writable : e.set !== void 0;
  }
  s(x1, "isErrorStackTraceLimitWritable");
  function Abe(e) {
    let t = Sbe + e.name;
    return Object.defineProperty(e, "name", {
      value: t
    }), e;
  }
  s(Abe, "hideStackFrames");
  var Cbe = Abe(function(e) {
    let t = x1();
    return t && (cO = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(e), t && (Error.stackTraceLimit =
    cO), e;
  });
  function wbe(e, t, r) {
    let n = PO.get(e);
    if (bn()(n !== void 0, "expected `message` to be found"), typeof n == "function")
      return bn()(n.length <= t.length, `Code: ${e}; The provided arguments length (${t.length}) does not match the required ones (${n.length}\
).`), Reflect.apply(n, r, t);
    let i = /%[dfijoOs]/g, a = 0;
    for (; i.exec(n) !== null; ) a++;
    return bn()(a === t.length, `Code: ${e}; The provided arguments length (${t.length}) does not match the required ones (${a}).`), t.length ===
    0 ? n : (t.unshift(n), Reflect.apply(ll().format, null, t));
  }
  s(wbe, "getMessage");
  function Dbe(e) {
    if (e == null)
      return String(e);
    if (typeof e == "function" && e.name)
      return `function ${e.name}`;
    if (typeof e == "object")
      return e.constructor && e.constructor.name ? `an instance of ${e.constructor.name}` : `${(0, ll().inspect)(e, {
        depth: -1
      })}`;
    let t = (0, ll().inspect)(e, {
      colors: !1
    });
    return t.length > 28 && (t = `${t.slice(0, 25)}...`), `type ${typeof e} (${t})`;
  }
  s(Dbe, "determineSpecificType");
  var al = {}.hasOwnProperty, {
    ERR_INVALID_PACKAGE_CONFIG: Ibe
  } = Kt, fO = /* @__PURE__ */ new Map();
  function AO(e, {
    base: t,
    specifier: r
  }) {
    let n = fO.get(e);
    if (n)
      return n;
    let i;
    try {
      i = ul().default.readFileSync(kf().toNamespacedPath(e), "utf8");
    } catch (o) {
      let l = o;
      if (l.code !== "ENOENT")
        throw l;
    }
    let a = {
      exists: !1,
      pjsonPath: e,
      main: void 0,
      name: void 0,
      type: "none",
      exports: void 0,
      imports: void 0
    };
    if (i !== void 0) {
      let o;
      try {
        o = JSON.parse(i);
      } catch (l) {
        let u = l, c = new Ibe(e, (t ? `"${r}" from ` : "") + (0, ve().fileURLToPath)(t || r), u.message);
        throw c.cause = u, c;
      }
      a.exists = !0, al.call(o, "name") && typeof o.name == "string" && (a.name = o.name), al.call(o, "main") && typeof o.main == "string" &&
      (a.main = o.main), al.call(o, "exports") && (a.exports = o.exports), al.call(o, "imports") && (a.imports = o.imports), al.call(o, "typ\
e") && (o.type === "commonjs" || o.type === "module") && (a.type = o.type);
    }
    return fO.set(e, a), a;
  }
  s(AO, "read");
  function S1(e) {
    let t = new URL("package.json", e);
    for (; !t.pathname.endsWith("node_modules/package.json"); ) {
      let i = AO((0, ve().fileURLToPath)(t), {
        specifier: e
      });
      if (i.exists)
        return i;
      let a = t;
      if (t = new URL("../package.json", t), t.pathname === a.pathname)
        break;
    }
    return {
      pjsonPath: (0, ve().fileURLToPath)(t),
      exists: !1,
      type: "none"
    };
  }
  s(S1, "getPackageScopeConfig");
  function pO(e) {
    return S1(e).type;
  }
  s(pO, "getPackageType");
  var {
    ERR_UNKNOWN_FILE_EXTENSION: _be
  } = Kt, Obe = {}.hasOwnProperty, Nbe = {
    __proto__: null,
    ".cjs": "commonjs",
    ".js": "module",
    ".json": "json",
    ".mjs": "module"
  };
  function Bbe(e) {
    return e && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(e) ? "module" : e === "application/json" ? "json" : null;
  }
  s(Bbe, "mimeToFormat");
  var dO = {
    __proto__: null,
    "data:": kbe,
    "file:": jbe,
    "http:": hO,
    "https:": hO,
    "node:"() {
      return "builtin";
    }
  };
  function kbe(e) {
    let {
      1: t
    } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(e.pathname) || [null, null, null];
    return Bbe(t);
  }
  s(kbe, "getDataProtocolModuleFormat");
  function Fbe(e) {
    let t = e.pathname, r = t.length;
    for (; r--; ) {
      let n = t.codePointAt(r);
      if (n === 47)
        return "";
      if (n === 46)
        return t.codePointAt(r - 1) === 47 ? "" : t.slice(r);
    }
    return "";
  }
  s(Fbe, "extname");
  function jbe(e, t, r) {
    let n = Fbe(e);
    if (n === ".js") {
      let o = pO(e);
      return o !== "none" ? o : "commonjs";
    }
    if (n === "") {
      let o = pO(e);
      return o === "none" || o === "commonjs" ? "commonjs" : "module";
    }
    let i = Nbe[n];
    if (i) return i;
    if (r)
      return;
    let a = (0, ve().fileURLToPath)(e);
    throw new _be(n, a);
  }
  s(jbe, "getFileProtocolModuleFormat");
  function hO() {
  }
  s(hO, "getHttpProtocolModuleFormat");
  function CO(e, t) {
    let r = e.protocol;
    return Obe.call(dO, r) && dO[r](e, t, !0) || null;
  }
  s(CO, "defaultGetFormatWithoutErrors");
  var {
    ERR_INVALID_ARG_VALUE: Lbe
  } = Kt, wO = Object.freeze(["node", "import"]), Mbe = new Set(wO);
  function Rbe() {
    return wO;
  }
  s(Rbe, "getDefaultConditions");
  function qbe() {
    return Mbe;
  }
  s(qbe, "getDefaultConditionsSet");
  function Ube(e) {
    if (e !== void 0 && e !== Rbe()) {
      if (!Array.isArray(e))
        throw new Lbe("conditions", e, "expected an array");
      return new Set(e);
    }
    return qbe();
  }
  s(Ube, "getConditionsSet");
  var Nf = RegExp.prototype[Symbol.replace], {
    ERR_NETWORK_IMPORT_DISALLOWED: E1,
    ERR_INVALID_MODULE_SPECIFIER: jf,
    ERR_INVALID_PACKAGE_CONFIG: DO,
    ERR_INVALID_PACKAGE_TARGET: Vbe,
    ERR_MODULE_NOT_FOUND: P1,
    ERR_PACKAGE_IMPORT_NOT_DEFINED: $be,
    ERR_PACKAGE_PATH_NOT_EXPORTED: Wbe,
    ERR_UNSUPPORTED_DIR_IMPORT: Kbe,
    ERR_UNSUPPORTED_RESOLVE_REQUEST: mO
  } = Kt, IO = {}.hasOwnProperty, yO = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i,
  gO = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i,
  Gbe = /^\.|%|\\/, Bf = /\*/g, Hbe = /%2f|%5c/i, bO = /* @__PURE__ */ new Set(), Ybe = /[/\\]{2}/;
  function EO(e, t, r, n, i, a, o) {
    if (Cs().noDeprecation)
      return;
    let l = (0, ve().fileURLToPath)(n), u = Ybe.exec(o ? e : t) !== null;
    Cs().emitWarning(`Use of deprecated ${u ? "double slash" : "leading or trailing slash matching"} resolving "${e}" for module request "${t}\
" ${t === r ? "" : `matched to "${r}" `}in the "${i ? "imports" : "exports"}" field module resolution of the package at ${l}${a ? ` imported\
 from ${(0, ve().fileURLToPath)(a)}` : ""}.`, "DeprecationWarning", "DEP0166");
  }
  s(EO, "emitInvalidSegmentDeprecation");
  function vO(e, t, r, n) {
    if (Cs().noDeprecation || CO(e, {
      parentURL: r.href
    }) !== "module") return;
    let a = (0, ve().fileURLToPath)(e.href), o = (0, ve().fileURLToPath)(new (ve()).URL(".", t)), l = (0, ve().fileURLToPath)(r);
    n ? kf().resolve(o, n) !== a && Cs().emitWarning(`Package ${o} has a "main" field set to "${n}", excluding the full filename and extensi\
on to the resolved file at "${a.slice(o.length)}", imported from ${l}.
 Automatic extension resolution of the "main" field is deprecated for ES modules.`, "DeprecationWarning", "DEP0151") : Cs().emitWarning(`No \
"main" or "exports" field defined in the package.json for ${o} resolving the main entry point "${a.slice(o.length)}", imported from ${l}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
  }
  s(vO, "emitLegacyIndexDeprecation");
  function _O(e) {
    try {
      return (0, ul().statSync)(e);
    } catch {
    }
  }
  s(_O, "tryStatSync");
  function v1(e) {
    let t = (0, ul().statSync)(e, {
      throwIfNoEntry: !1
    }), r = t ? t.isFile() : void 0;
    return r ?? !1;
  }
  s(v1, "fileExists");
  function zbe(e, t, r) {
    let n;
    if (t.main !== void 0) {
      if (n = new (ve()).URL(t.main, e), v1(n)) return n;
      let o = [`./${t.main}.js`, `./${t.main}.json`, `./${t.main}.node`, `./${t.main}/index.js`, `./${t.main}/index.json`, `./${t.main}/inde\
x.node`], l = -1;
      for (; ++l < o.length && (n = new (ve()).URL(o[l], e), !v1(n)); )
        n = void 0;
      if (n)
        return vO(n, e, r, t.main), n;
    }
    let i = ["./index.js", "./index.json", "./index.node"], a = -1;
    for (; ++a < i.length && (n = new (ve()).URL(i[a], e), !v1(n)); )
      n = void 0;
    if (n)
      return vO(n, e, r, t.main), n;
    throw new P1((0, ve().fileURLToPath)(new (ve()).URL(".", e)), (0, ve().fileURLToPath)(r));
  }
  s(zbe, "legacyMainResolve");
  function Jbe(e, t, r) {
    if (Hbe.exec(e.pathname) !== null)
      throw new jf(e.pathname, 'must not include encoded "/" or "\\" characters', (0, ve().fileURLToPath)(t));
    let n;
    try {
      n = (0, ve().fileURLToPath)(e);
    } catch (a) {
      let o = a;
      throw Object.defineProperty(o, "input", {
        value: String(e)
      }), Object.defineProperty(o, "module", {
        value: String(t)
      }), o;
    }
    let i = _O(n.endsWith("/") ? n.slice(-1) : n);
    if (i && i.isDirectory()) {
      let a = new Kbe(n, (0, ve().fileURLToPath)(t));
      throw a.url = String(e), a;
    }
    if (!i || !i.isFile()) {
      let a = new P1(n || e.pathname, t && (0, ve().fileURLToPath)(t), !0);
      throw a.url = String(e), a;
    }
    if (!r) {
      let a = (0, ul().realpathSync)(n), {
        search: o,
        hash: l
      } = e;
      e = (0, ve().pathToFileURL)(a + (n.endsWith(kf().sep) ? "/" : "")), e.search = o, e.hash = l;
    }
    return e;
  }
  s(Jbe, "finalizeResolution");
  function Xbe(e, t, r) {
    return new $be(e, t && (0, ve().fileURLToPath)(new (ve()).URL(".", t)), (0, ve().fileURLToPath)(r));
  }
  s(Xbe, "importNotDefined");
  function T1(e, t, r) {
    return new Wbe((0, ve().fileURLToPath)(new (ve()).URL(".", t)), e, r && (0, ve().fileURLToPath)(r));
  }
  s(T1, "exportsNotFound");
  function Qbe(e, t, r, n, i) {
    let a = `request is not a valid match in pattern "${t}" for the "${n ? "imports" : "exports"}" resolution of ${(0, ve().fileURLToPath)(r)}`;
    throw new jf(e, a, i && (0, ve().fileURLToPath)(i));
  }
  s(Qbe, "throwInvalidSubpath");
  function ol(e, t, r, n, i) {
    return t = typeof t == "object" && t !== null ? JSON.stringify(t, null, "") : `${t}`, new Vbe((0, ve().fileURLToPath)(new (ve()).URL(".",
    r)), e, t, n, i && (0, ve().fileURLToPath)(i));
  }
  s(ol, "invalidPackageTarget");
  function Zbe(e, t, r, n, i, a, o, l, u) {
    if (t !== "" && !a && e[e.length - 1] !== "/") throw ol(r, e, n, o, i);
    if (!e.startsWith("./")) {
      if (o && !e.startsWith("../") && !e.startsWith("/")) {
        let h = !1;
        try {
          new (ve()).URL(e), h = !0;
        } catch {
        }
        if (!h) {
          let y = a ? Nf.call(Bf, e, () => t) : e + t;
          return NO(y, n, u);
        }
      }
      throw ol(r, e, n, o, i);
    }
    if (yO.exec(e.slice(2)) !== null)
      if (gO.exec(e.slice(2)) === null) {
        if (!l) {
          let h = a ? r.replace("*", () => t) : r + t, y = a ? Nf.call(Bf, e, () => t) : e;
          EO(y, h, r, n, o, i, !0);
        }
      } else
        throw ol(r, e, n, o, i);
    let c = new (ve()).URL(e, n), f = c.pathname, p = new (ve()).URL(".", n).pathname;
    if (!f.startsWith(p)) throw ol(r, e, n, o, i);
    if (t === "") return c;
    if (yO.exec(t) !== null) {
      let h = a ? r.replace("*", () => t) : r + t;
      if (gO.exec(t) === null) {
        if (!l) {
          let y = a ? Nf.call(Bf, e, () => t) : e;
          EO(y, h, r, n, o, i, !1);
        }
      } else
        Qbe(h, r, n, o, i);
    }
    return a ? new (ve()).URL(Nf.call(Bf, c.href, () => t)) : new (ve()).URL(t, c);
  }
  s(Zbe, "resolvePackageTargetString");
  function e1e(e) {
    let t = Number(e);
    return `${t}` !== e ? !1 : t >= 0 && t < 4294967295;
  }
  s(e1e, "isArrayIndex");
  function ga(e, t, r, n, i, a, o, l, u) {
    if (typeof t == "string")
      return Zbe(t, r, n, e, i, a, o, l, u);
    if (Array.isArray(t)) {
      let c = t;
      if (c.length === 0) return null;
      let f, p = -1;
      for (; ++p < c.length; ) {
        let h = c[p], y;
        try {
          y = ga(e, h, r, n, i, a, o, l, u);
        } catch (v) {
          let d = v;
          if (f = d, d.code === "ERR_INVALID_PACKAGE_TARGET") continue;
          throw v;
        }
        if (y !== void 0) {
          if (y === null) {
            f = null;
            continue;
          }
          return y;
        }
      }
      if (f == null)
        return null;
      throw f;
    }
    if (typeof t == "object" && t !== null) {
      let c = Object.getOwnPropertyNames(t), f = -1;
      for (; ++f < c.length; ) {
        let p = c[f];
        if (e1e(p))
          throw new DO((0, ve().fileURLToPath)(e), i, '"exports" cannot contain numeric property keys.');
      }
      for (f = -1; ++f < c.length; ) {
        let p = c[f];
        if (p === "default" || u && u.has(p)) {
          let h = t[p], y = ga(e, h, r, n, i, a, o, l, u);
          if (y === void 0) continue;
          return y;
        }
      }
      return null;
    }
    if (t === null)
      return null;
    throw ol(n, t, e, o, i);
  }
  s(ga, "resolvePackageTarget");
  function t1e(e, t, r) {
    if (typeof e == "string" || Array.isArray(e)) return !0;
    if (typeof e != "object" || e === null) return !1;
    let n = Object.getOwnPropertyNames(e), i = !1, a = 0, o = -1;
    for (; ++o < n.length; ) {
      let l = n[o], u = l === "" || l[0] !== ".";
      if (a++ === 0)
        i = u;
      else if (i !== u)
        throw new DO((0, ve().fileURLToPath)(t), r, `"exports" cannot contain some keys starting with '.' and some not. The exports object m\
ust either be an object of package subpath keys or an object of main entry condition name keys only.`);
    }
    return i;
  }
  s(t1e, "isConditionalExportsMainSugar");
  function r1e(e, t, r) {
    if (Cs().noDeprecation)
      return;
    let n = (0, ve().fileURLToPath)(t);
    bO.has(n + "|" + e) || (bO.add(n + "|" + e), Cs().emitWarning(`Use of deprecated trailing slash pattern mapping "${e}" in the "exports" \
field module resolution of the package at ${n}${r ? ` imported from ${(0, ve().fileURLToPath)(r)}` : ""}. Mapping specifiers ending in "/" i\
s no longer supported.`, "DeprecationWarning", "DEP0155"));
  }
  s(r1e, "emitTrailingSlashPatternDeprecation");
  function TO(e, t, r, n, i) {
    let a = r.exports;
    if (t1e(a, e, n) && (a = {
      ".": a
    }), IO.call(a, t) && !t.includes("*") && !t.endsWith("/")) {
      let f = a[t], p = ga(e, f, "", t, n, !1, !1, !1, i);
      if (p == null)
        throw T1(t, e, n);
      return p;
    }
    let o = "", l = "", u = Object.getOwnPropertyNames(a), c = -1;
    for (; ++c < u.length; ) {
      let f = u[c], p = f.indexOf("*");
      if (p !== -1 && t.startsWith(f.slice(0, p))) {
        t.endsWith("/") && r1e(t, e, n);
        let h = f.slice(p + 1);
        t.length >= f.length && t.endsWith(h) && OO(o, f) === 1 && f.lastIndexOf("*") === p && (o = f, l = t.slice(p, t.length - h.length));
      }
    }
    if (o) {
      let f = a[o], p = ga(e, f, l, o, n, !0, !1, t.endsWith("/"), i);
      if (p == null)
        throw T1(t, e, n);
      return p;
    }
    throw T1(t, e, n);
  }
  s(TO, "packageExportsResolve");
  function OO(e, t) {
    let r = e.indexOf("*"), n = t.indexOf("*"), i = r === -1 ? e.length : r + 1, a = n === -1 ? t.length : n + 1;
    return i > a ? -1 : a > i || r === -1 ? 1 : n === -1 || e.length > t.length ? -1 : t.length > e.length ? 1 : 0;
  }
  s(OO, "patternKeyCompare");
  function n1e(e, t, r) {
    if (e === "#" || e.startsWith("#/") || e.endsWith("/")) {
      let a = "is not a valid internal imports specifier name";
      throw new jf(e, a, (0, ve().fileURLToPath)(t));
    }
    let n, i = S1(t);
    if (i.exists) {
      n = (0, ve().pathToFileURL)(i.pjsonPath);
      let a = i.imports;
      if (a)
        if (IO.call(a, e) && !e.includes("*")) {
          let o = ga(n, a[e], "", e, t, !1, !0, !1, r);
          if (o != null)
            return o;
        } else {
          let o = "", l = "", u = Object.getOwnPropertyNames(a), c = -1;
          for (; ++c < u.length; ) {
            let f = u[c], p = f.indexOf("*");
            if (p !== -1 && e.startsWith(f.slice(0, -1))) {
              let h = f.slice(p + 1);
              e.length >= f.length && e.endsWith(h) && OO(o, f) === 1 && f.lastIndexOf("*") === p && (o = f, l = e.slice(p, e.length - h.length));
            }
          }
          if (o) {
            let f = a[o], p = ga(n, f, l, o, t, !0, !0, !1, r);
            if (p != null)
              return p;
          }
        }
    }
    throw Xbe(e, n, t);
  }
  s(n1e, "packageImportsResolve");
  function s1e(e, t) {
    let r = e.indexOf("/"), n = !0, i = !1;
    e[0] === "@" && (i = !0, r === -1 || e.length === 0 ? n = !1 : r = e.indexOf("/", r + 1));
    let a = r === -1 ? e : e.slice(0, r);
    if (Gbe.exec(a) !== null && (n = !1), !n)
      throw new jf(e, "is not a valid package name", (0, ve().fileURLToPath)(t));
    let o = "." + (r === -1 ? "" : e.slice(r));
    return {
      packageName: a,
      packageSubpath: o,
      isScoped: i
    };
  }
  s(s1e, "parsePackageName");
  function NO(e, t, r) {
    if (Ff().builtinModules.includes(e))
      return new (ve()).URL("node:" + e);
    let {
      packageName: n,
      packageSubpath: i,
      isScoped: a
    } = s1e(e, t), o = S1(t);
    if (o.exists) {
      let f = (0, ve().pathToFileURL)(o.pjsonPath);
      if (o.name === n && o.exports !== void 0 && o.exports !== null)
        return TO(f, i, o, t, r);
    }
    let l = new (ve()).URL("./node_modules/" + n + "/package.json", t), u = (0, ve().fileURLToPath)(l), c;
    do {
      let f = _O(u.slice(0, -13));
      if (!f || !f.isDirectory()) {
        c = u, l = new (ve()).URL((a ? "../../../../node_modules/" : "../../../node_modules/") + n + "/package.json", l), u = (0, ve().fileURLToPath)(
        l);
        continue;
      }
      let p = AO(u, {
        base: t,
        specifier: e
      });
      return p.exports !== void 0 && p.exports !== null ? TO(l, i, p, t, r) : i === "." ? zbe(l, p, t) : new (ve()).URL(i, l);
    } while (u.length !== c.length);
    throw new P1(n, (0, ve().fileURLToPath)(t), !1);
  }
  s(NO, "packageResolve");
  function i1e(e) {
    return e[0] === "." && (e.length === 1 || e[1] === "/" || e[1] === "." && (e.length === 2 || e[2] === "/"));
  }
  s(i1e, "isRelativeSpecifier");
  function A1(e) {
    return e === "" ? !1 : e[0] === "/" ? !0 : i1e(e);
  }
  s(A1, "shouldBeTreatedAsRelativeOrAbsolutePath");
  function BO(e, t, r, n) {
    let i = t.protocol, o = i === "data:" || i === "http:" || i === "https:", l;
    if (A1(e))
      try {
        l = new (ve()).URL(e, t);
      } catch (u) {
        let c = new mO(e, t);
        throw c.cause = u, c;
      }
    else if (i === "file:" && e[0] === "#")
      l = n1e(e, t, r);
    else
      try {
        l = new (ve()).URL(e);
      } catch (u) {
        if (o && !Ff().builtinModules.includes(e)) {
          let c = new mO(e, t);
          throw c.cause = u, c;
        }
        l = NO(e, t, r);
      }
    return bn()(l !== void 0, "expected to be defined"), l.protocol !== "file:" ? l : Jbe(l, t, n);
  }
  s(BO, "moduleResolve");
  function a1e(e, t, r) {
    if (r) {
      let n = r.protocol;
      if (n === "http:" || n === "https:") {
        if (A1(e)) {
          let i = t?.protocol;
          if (i && i !== "https:" && i !== "http:")
            throw new E1(e, r, "remote imports cannot import from a local location.");
          return {
            url: t?.href || ""
          };
        }
        throw Ff().builtinModules.includes(e) ? new E1(e, r, "remote imports cannot import from a local location.") : new E1(e, r, "only rel\
ative and absolute specifiers are supported.");
      }
    }
  }
  s(a1e, "checkIfDisallowedImport");
  function o1e(e) {
    return !!(e && typeof e == "object" && "href" in e && typeof e.href == "string" && "protocol" in e && typeof e.protocol == "string" && e.
    href && e.protocol);
  }
  s(o1e, "isURL");
  function l1e(e) {
    if (e !== void 0 && typeof e != "string" && !o1e(e))
      throw new Kt.ERR_INVALID_ARG_TYPE("parentURL", ["string", "URL"], e);
  }
  s(l1e, "throwIfInvalidParentURL");
  function u1e(e, t = {}) {
    let {
      parentURL: r
    } = t;
    bn()(r !== void 0, "expected `parentURL` to be defined"), l1e(r);
    let n;
    if (r)
      try {
        n = new (ve()).URL(r);
      } catch {
      }
    let i, a;
    try {
      if (i = A1(e) ? new (ve()).URL(e, n) : new (ve()).URL(e), a = i.protocol, a === "data:")
        return {
          url: i.href,
          format: null
        };
    } catch {
    }
    let o = a1e(e, i, n);
    if (o) return o;
    if (a === void 0 && i && (a = i.protocol), a === "node:")
      return {
        url: e
      };
    if (i && i.protocol === "node:") return {
      url: e
    };
    let l = Ube(t.conditions), u = BO(e, new (ve()).URL(r), l, !1);
    return {
      url: u.href,
      format: CO(u, {
        parentURL: r
      })
    };
  }
  s(u1e, "defaultResolve");
  function c1e(e, t) {
    if (!t)
      throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");
    try {
      return u1e(e, {
        parentURL: t
      }).url;
    } catch (r) {
      let n = r;
      if ((n.code === "ERR_UNSUPPORTED_DIR_IMPORT" || n.code === "ERR_MODULE_NOT_FOUND") && typeof n.url == "string")
        return n.url;
      throw r;
    }
  }
  s(c1e, "resolve");
});

// ../node_modules/@babel/core/lib/config/files/plugins.js
var $O = T((ws) => {
  "use strict";
  Object.defineProperty(ws, "__esModule", {
    value: !0
  });
  ws.loadPlugin = x1e;
  ws.loadPreset = S1e;
  ws.resolvePreset = ws.resolvePlugin = void 0;
  function jO() {
    let e = Rs();
    return jO = /* @__PURE__ */ s(function() {
      return e;
    }, "_debug"), e;
  }
  s(jO, "_debug");
  function D1() {
    let e = require("path");
    return D1 = /* @__PURE__ */ s(function() {
      return e;
    }, "_path"), e;
  }
  s(D1, "_path");
  var I1 = Gi(), LO = m1();
  function w1() {
    let e = require("url");
    return w1 = /* @__PURE__ */ s(function() {
      return e;
    }, "_url"), e;
  }
  s(w1, "_url");
  var f1e = kO();
  function MO() {
    let e = require("fs");
    return MO = /* @__PURE__ */ s(function() {
      return e;
    }, "_fs"), e;
  }
  s(MO, "_fs");
  var RO = jO()("babel:config:loading:files:plugins"), p1e = /^module:/, d1e = /^(?!@|module:|[^/]+\/|babel-plugin-)/, h1e = /^(?!@|module:|[^/]+\/|babel-preset-)/,
  m1e = /^(@babel\/)(?!plugin-|[^/]+\/)/, y1e = /^(@babel\/)(?!preset-|[^/]+\/)/, g1e = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/,
  b1e = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/, E1e = /^(@(?!babel$)[^/]+)$/, v1e = ws.resolvePlugin = UO.bind(null,
  "plugin"), T1e = ws.resolvePreset = UO.bind(null, "preset");
  function* x1e(e, t) {
    let r = v1e(e, t, yield* (0, I1.isAsync)()), n = yield* VO("plugin", r);
    return RO("Loaded plugin %o from %o.", e, t), {
      filepath: r,
      value: n
    };
  }
  s(x1e, "loadPlugin");
  function* S1e(e, t) {
    let r = T1e(e, t, yield* (0, I1.isAsync)()), n = yield* VO("preset", r);
    return RO("Loaded preset %o from %o.", e, t), {
      filepath: r,
      value: n
    };
  }
  s(S1e, "loadPreset");
  function C1(e, t) {
    if (D1().isAbsolute(t)) return t;
    let r = e === "preset";
    return t.replace(r ? h1e : d1e, `babel-${e}-`).replace(r ? y1e : m1e, `$1${e}-`).replace(r ? b1e : g1e, `$1babel-${e}-`).replace(E1e, `$\
1/babel-${e}`).replace(p1e, "");
  }
  s(C1, "standardizeName");
  function* qO(e, t) {
    let r = C1(e, t), {
      error: n,
      value: i
    } = yield r;
    if (!n) return i;
    if (n.code !== "MODULE_NOT_FOUND") throw n;
    r !== t && !(yield t).error && (n.message += `
- If you want to resolve "${t}", use "module:${t}"`), (yield C1(e, "@babel/" + t)).error || (n.message += `
- Did you mean "@babel/${t}"?`);
    let a = e === "preset" ? "plugin" : "preset";
    if ((yield C1(a, t)).error || (n.message += `
- Did you accidentally pass a ${a} as a ${e}?`), e === "plugin") {
      let o = r.replace("-proposal-", "-transform-");
      o !== r && !(yield o).error && (n.message += `
- Did you mean "${o}"?`);
    }
    throw n.message += `

Make sure that all the Babel plugins and presets you are using
are defined as dependencies or devDependencies in your package.json
file. It's possible that the missing plugin is loaded by a preset
you are using that forgot to add the plugin to its dependencies: you
can workaround this problem by explicitly adding the missing package
to your top-level package.json.
`, n;
  }
  s(qO, "resolveAlternativesHelper");
  function P1e(e, t) {
    try {
      return t ? {
        error: null,
        value: (((r, n) => (r = r.split("."), n = n.split("."), +r[0] > +n[0] || r[0] == n[0] && +r[1] >= +n[1]))(process.versions.node, "8.\
9") ? require.resolve : (r, {
          paths: [n]
        }, i = require("module")) => {
          let a = i._findPath(r, i._nodeModulePaths(n).concat(n));
          if (a) return a;
          throw a = new Error(`Cannot resolve module '${r}'`), a.code = "MODULE_NOT_FOUND", a;
        })(e, {
          paths: [t]
        })
      } : {
        error: null,
        value: require.resolve(e)
      };
    } catch (r) {
      return {
        error: r,
        value: null
      };
    }
  }
  s(P1e, "tryRequireResolve");
  function A1e(e, t) {
    try {
      return {
        error: null,
        value: (0, f1e.resolve)(e, t)
      };
    } catch (r) {
      return {
        error: r,
        value: null
      };
    }
  }
  s(A1e, "tryImportMetaResolve");
  function FO(e, t, r) {
    let n = qO(e, t), i = n.next();
    for (; !i.done; )
      i = n.next(P1e(i.value, r));
    return i.value;
  }
  s(FO, "resolveStandardizedNameForRequire");
  function C1e(e, t, r) {
    let n = (0, w1().pathToFileURL)(D1().join(r, "./babel-virtual-resolve-base.js")).href, i = qO(e, t), a = i.next();
    for (; !a.done; )
      a = i.next(A1e(a.value, n));
    return (0, w1().fileURLToPath)(a.value);
  }
  s(C1e, "resolveStandardizedNameForImport");
  function UO(e, t, r, n) {
    if (!LO.supportsESM || !n)
      return FO(e, t, r);
    try {
      let i = C1e(e, t, r);
      if (!(0, MO().existsSync)(i))
        throw Object.assign(new Error(`Could not resolve "${t}" in file ${r}.`), {
          type: "MODULE_NOT_FOUND"
        });
      return i;
    } catch (i) {
      try {
        return FO(e, t, r);
      } catch (a) {
        throw i.type === "MODULE_NOT_FOUND" ? i : a.type === "MODULE_NOT_FOUND" ? a : i;
      }
    }
  }
  s(UO, "resolveStandardizedName");
  Mf = /* @__PURE__ */ new Set();
  var Mf;
  function* VO(e, t) {
    if (!(yield* (0, I1.isAsync)()) && Mf.has(t))
      throw new Error(`Reentrant ${e} detected trying to load "${t}". This module is not ignored and is trying to load itself while compilin\
g itself, leading to a dependency cycle. We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.`);
    try {
      return Mf.add(t), yield* (0, LO.default)(t, `You appear to be using a native ECMAScript module ${e}, which is only supported when runn\
ing Babel asynchronously.`, !0);
    } catch (r) {
      throw r.message = `[BABEL]: ${r.message} (While processing: ${t})`, r;
    } finally {
      Mf.delete(t);
    }
  }
  s(VO, "requireModule");
});

// ../node_modules/@babel/core/lib/config/files/index.js
var Lo = T((Pr) => {
  "use strict";
  Object.defineProperty(Pr, "__esModule", {
    value: !0
  });
  Object.defineProperty(Pr, "ROOT_CONFIG_FILENAMES", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ba.ROOT_CONFIG_FILENAMES;
    }, "get")
  });
  Object.defineProperty(Pr, "findConfigUpwards", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ba.findConfigUpwards;
    }, "get")
  });
  Object.defineProperty(Pr, "findPackageData", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return w1e.findPackageData;
    }, "get")
  });
  Object.defineProperty(Pr, "findRelativeConfig", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ba.findRelativeConfig;
    }, "get")
  });
  Object.defineProperty(Pr, "findRootConfig", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ba.findRootConfig;
    }, "get")
  });
  Object.defineProperty(Pr, "loadConfig", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ba.loadConfig;
    }, "get")
  });
  Object.defineProperty(Pr, "loadPlugin", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Rf.loadPlugin;
    }, "get")
  });
  Object.defineProperty(Pr, "loadPreset", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Rf.loadPreset;
    }, "get")
  });
  Object.defineProperty(Pr, "resolvePlugin", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Rf.resolvePlugin;
    }, "get")
  });
  Object.defineProperty(Pr, "resolvePreset", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return Rf.resolvePreset;
    }, "get")
  });
  Object.defineProperty(Pr, "resolveShowConfigPath", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ba.resolveShowConfigPath;
    }, "get")
  });
  var w1e = zC(), ba = uO(), Rf = $O();
});

// ../node_modules/@babel/core/lib/transform.js
var KO = T((Ea) => {
  "use strict";
  Object.defineProperty(Ea, "__esModule", {
    value: !0
  });
  Ea.transform = void 0;
  Ea.transformAsync = O1e;
  Ea.transformSync = _1e;
  function WO() {
    let e = Er();
    return WO = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(WO, "_gensync");
  var D1e = oa(), I1e = ff(), qf = Fn(), Uf = WO()(/* @__PURE__ */ s(function* (t, r) {
    let n = yield* (0, D1e.default)(r);
    return n === null ? null : yield* (0, I1e.run)(n, t);
  }, "transform")), Y_e = Ea.transform = /* @__PURE__ */ s(function(t, r, n) {
    let i, a;
    if (typeof r == "function" ? (a = r, i = void 0) : (i = r, a = n), a === void 0)
      return (0, qf.beginHiddenCallStack)(Uf.sync)(t, i);
    (0, qf.beginHiddenCallStack)(Uf.errback)(t, i, a);
  }, "transform");
  function _1e(...e) {
    return (0, qf.beginHiddenCallStack)(Uf.sync)(...e);
  }
  s(_1e, "transformSync");
  function O1e(...e) {
    return (0, qf.beginHiddenCallStack)(Uf.async)(...e);
  }
  s(O1e, "transformAsync");
});

// ../node_modules/@babel/core/lib/transform-ast.js
var HO = T((va) => {
  "use strict";
  Object.defineProperty(va, "__esModule", {
    value: !0
  });
  va.transformFromAst = void 0;
  va.transformFromAstAsync = F1e;
  va.transformFromAstSync = k1e;
  function GO() {
    let e = Er();
    return GO = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(GO, "_gensync");
  var N1e = oa(), B1e = ff(), Vf = Fn(), $f = GO()(function* (e, t, r) {
    let n = yield* (0, N1e.default)(r);
    if (n === null) return null;
    if (!e) throw new Error("No AST given");
    return yield* (0, B1e.run)(n, t, e);
  }), X_e = va.transformFromAst = /* @__PURE__ */ s(function(t, r, n, i) {
    let a, o;
    if (typeof n == "function" ? (o = n, a = void 0) : (a = n, o = i), o === void 0)
      return (0, Vf.beginHiddenCallStack)($f.sync)(t, r, a);
    (0, Vf.beginHiddenCallStack)($f.errback)(t, r, a, o);
  }, "transformFromAst");
  function k1e(...e) {
    return (0, Vf.beginHiddenCallStack)($f.sync)(...e);
  }
  s(k1e, "transformFromAstSync");
  function F1e(...e) {
    return (0, Vf.beginHiddenCallStack)($f.async)(...e);
  }
  s(F1e, "transformFromAstAsync");
});

// ../node_modules/@babel/core/lib/parse.js
var zO = T((Ta) => {
  "use strict";
  Object.defineProperty(Ta, "__esModule", {
    value: !0
  });
  Ta.parse = void 0;
  Ta.parseAsync = q1e;
  Ta.parseSync = R1e;
  function YO() {
    let e = Er();
    return YO = /* @__PURE__ */ s(function() {
      return e;
    }, "_gensync"), e;
  }
  s(YO, "_gensync");
  var j1e = oa(), L1e = $g(), M1e = Mg(), Wf = Fn(), Kf = YO()(/* @__PURE__ */ s(function* (t, r) {
    let n = yield* (0, j1e.default)(r);
    return n === null ? null : yield* (0, L1e.default)(n.passes, (0, M1e.default)(n), t);
  }, "parse")), eOe = Ta.parse = /* @__PURE__ */ s(function(t, r, n) {
    if (typeof r == "function" && (n = r, r = void 0), n === void 0)
      return (0, Wf.beginHiddenCallStack)(Kf.sync)(t, r);
    (0, Wf.beginHiddenCallStack)(Kf.errback)(t, r, n);
  }, "parse");
  function R1e(...e) {
    return (0, Wf.beginHiddenCallStack)(Kf.sync)(...e);
  }
  s(R1e, "parseSync");
  function q1e(...e) {
    return (0, Wf.beginHiddenCallStack)(Kf.async)(...e);
  }
  s(q1e, "parseAsync");
});

// ../node_modules/@babel/core/lib/index.js
var gt = T((Ue) => {
  "use strict";
  Object.defineProperty(Ue, "__esModule", {
    value: !0
  });
  Ue.DEFAULT_EXTENSIONS = void 0;
  Object.defineProperty(Ue, "File", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return U1e.default;
    }, "get")
  });
  Object.defineProperty(Ue, "buildExternalHelpers", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return V1e.default;
    }, "get")
  });
  Object.defineProperty(Ue, "createConfigItem", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return En.createConfigItem;
    }, "get")
  });
  Object.defineProperty(Ue, "createConfigItemAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return En.createConfigItemAsync;
    }, "get")
  });
  Object.defineProperty(Ue, "createConfigItemSync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return En.createConfigItemSync;
    }, "get")
  });
  Object.defineProperty(Ue, "getEnv", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return $1e.getEnv;
    }, "get")
  });
  Object.defineProperty(Ue, "loadOptions", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return En.loadOptions;
    }, "get")
  });
  Object.defineProperty(Ue, "loadOptionsAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return En.loadOptionsAsync;
    }, "get")
  });
  Object.defineProperty(Ue, "loadOptionsSync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return En.loadOptionsSync;
    }, "get")
  });
  Object.defineProperty(Ue, "loadPartialConfig", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return En.loadPartialConfig;
    }, "get")
  });
  Object.defineProperty(Ue, "loadPartialConfigAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return En.loadPartialConfigAsync;
    }, "get")
  });
  Object.defineProperty(Ue, "loadPartialConfigSync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return En.loadPartialConfigSync;
    }, "get")
  });
  Object.defineProperty(Ue, "parse", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return B1.parse;
    }, "get")
  });
  Object.defineProperty(Ue, "parseAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return B1.parseAsync;
    }, "get")
  });
  Object.defineProperty(Ue, "parseSync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return B1.parseSync;
    }, "get")
  });
  Object.defineProperty(Ue, "resolvePlugin", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return JO.resolvePlugin;
    }, "get")
  });
  Object.defineProperty(Ue, "resolvePreset", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return JO.resolvePreset;
    }, "get")
  });
  Object.defineProperty(Ue, "template", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return eN().default;
    }, "get")
  });
  Object.defineProperty(Ue, "tokTypes", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return QO().tokTypes;
    }, "get")
  });
  Object.defineProperty(Ue, "transform", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return _1.transform;
    }, "get")
  });
  Object.defineProperty(Ue, "transformAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return _1.transformAsync;
    }, "get")
  });
  Object.defineProperty(Ue, "transformFile", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return O1.transformFile;
    }, "get")
  });
  Object.defineProperty(Ue, "transformFileAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return O1.transformFileAsync;
    }, "get")
  });
  Object.defineProperty(Ue, "transformFileSync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return O1.transformFileSync;
    }, "get")
  });
  Object.defineProperty(Ue, "transformFromAst", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return N1.transformFromAst;
    }, "get")
  });
  Object.defineProperty(Ue, "transformFromAstAsync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return N1.transformFromAstAsync;
    }, "get")
  });
  Object.defineProperty(Ue, "transformFromAstSync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return N1.transformFromAstSync;
    }, "get")
  });
  Object.defineProperty(Ue, "transformSync", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return _1.transformSync;
    }, "get")
  });
  Object.defineProperty(Ue, "traverse", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return ZO().default;
    }, "get")
  });
  Ue.version = Ue.types = void 0;
  var U1e = Xy(), V1e = xC(), JO = Lo(), $1e = Cg();
  function XO() {
    let e = Se();
    return XO = /* @__PURE__ */ s(function() {
      return e;
    }, "_types"), e;
  }
  s(XO, "_types");
  Object.defineProperty(Ue, "types", {
    enumerable: !0,
    get: /* @__PURE__ */ s(function() {
      return XO();
    }, "get")
  });
  function QO() {
    let e = js();
    return QO = /* @__PURE__ */ s(function() {
      return e;
    }, "_parser"), e;
  }
  s(QO, "_parser");
  function ZO() {
    let e = Ir();
    return ZO = /* @__PURE__ */ s(function() {
      return e;
    }, "_traverse"), e;
  }
  s(ZO, "_traverse");
  function eN() {
    let e = Oi();
    return eN = /* @__PURE__ */ s(function() {
      return e;
    }, "_template"), e;
  }
  s(eN, "_template");
  var En = oa(), _1 = KO(), O1 = sb(), N1 = HO(), B1 = zO(), nOe = gt(), sOe = Ue.version = "7.25.2", iOe = Ue.DEFAULT_EXTENSIONS = Object.freeze(
  [".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
  Ue.OptionManager = class {
    static {
      s(this, "OptionManager");
    }
    init(t) {
      return (0, En.loadOptionsSync)(t);
    }
  }, Ue.Plugin = /* @__PURE__ */ s(function(t) {
    throw new Error(`The (${t}) Babel 5 plugin is being run with an unsupported Babel version.`);
  }, "Plugin");
});

// src/babel/index.ts
var tEe = {};
uN(tEe, {
  BabelFileClass: () => eEe,
  babelParse: () => K1e,
  babelParseExpression: () => H1e,
  babelPrint: () => G1e,
  core: () => Y1e,
  generate: () => Z1e,
  parser: () => z1e,
  parserOptions: () => k1,
  recast: () => X1e,
  transformSync: () => tN.transformSync,
  traverse: () => Q1e,
  types: () => J1e
});
module.exports = cN(tEe);
var tN = an(gt(), 1), Y1e = an(gt(), 1), rN = an(gt(), 1), F1 = an(fo(), 1), z1e = an(js(), 1), j1 = an(Ir(), 1), J1e = an(Se(), 1), X1e = an(require("recast"), 1);

// src/babel/babelParse.ts
var Gf = an(js(), 1), Hf = an(require("recast"), 1);
function W1e(e, t) {
  let i = /^\s*\/\/\s*@flow/.test(e) ? ["flow"] : ["typescript"], a = {
    ...t,
    plugins: [...t.plugins ?? [], ...i]
  };
  return Gf.parse(e, a);
}
s(W1e, "parseWithFlowOrTypescript");
var k1 = {
  sourceType: "module",
  // FIXME: we should get this from the project config somehow?
  plugins: ["jsx", "decorators-legacy", "classProperties"],
  tokens: !0
}, K1e = /* @__PURE__ */ s((e) => Hf.parse(e, {
  parser: {
    parse(t) {
      return W1e(t, k1);
    }
  }
}), "babelParse"), G1e = /* @__PURE__ */ s((e) => Hf.print(e, {
  quote: "single",
  trailingComma: !0,
  tabWidth: 2,
  wrapColumn: 80,
  arrowParensAlways: !0
}).code, "babelPrint"), H1e = /* @__PURE__ */ s((e) => Gf.parseExpression(e, k1), "babelParseExpression");

// src/babel/index.ts
var Q1e = j1.default.default || j1.default, Z1e = F1.default.default || F1.default, eEe = rN.File;

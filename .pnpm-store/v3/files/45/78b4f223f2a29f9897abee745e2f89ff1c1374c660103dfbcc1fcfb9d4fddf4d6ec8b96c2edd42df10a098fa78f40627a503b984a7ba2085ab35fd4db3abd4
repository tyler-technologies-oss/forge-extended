/** Generates random characters. Defaults to a length of 5. */
export declare function randomChars(length?: number): string;
/**
 * Checks if an object is undefined or null.
 * @param {object} obj The object to test.
 * @returns {boolean}
 */
export declare function isDefined(obj: any): boolean;
/**
 * Checks if an object is a string.
 * @param {object} obj The object to test.
 * @returns {boolean}
 */
export declare function isString(obj: any): obj is string;
/**
 * Checks if an object is a boolean.
 * @param {object} obj The object to test.
 * @returns {boolean}
 */
export declare function isBoolean(obj: any): obj is boolean;
/**
 * Checks if an object is a number.
 * @param {object} obj The object to test.
 * @returns {boolean}
 */
export declare function isNumber(obj: any): obj is number;
/** Determines if the provided string value can be parsed into a valid numeric value. */
export declare function isNumeric(str: string): boolean;
/**
 * Checks if an object is a date.
 * @param {object} obj The object to test.
 * @returns {boolean}
 */
export declare function isDate(obj: any): obj is Date;
/**
 * Checks if an object is a date and is a valid date.
 * @param {object} obj The object to test.
 * @returns {boolean}
 */
export declare function isValidDate(obj: any): obj is Date;
/**
 * Checks if an object is a function.
 * @param {object} obj The object to test.
 * @returns {boolean}
 */
export declare function isFunction(obj: any): boolean;
/**
 * Checks if an object is an array.
 * @param {object} obj The object to test.
 * @returns {boolean}
 */
export declare function isArray(obj: any): boolean;
/**
 * Checks if an object is an object.
 * @param {object} obj The object to test.
 * @returns {boolean}
 */
export declare function isObject(obj: any): boolean;
/**
 * Coerces a string to a boolean.
 * @param {string} value The value to convert.
 * @returns {boolean}
 */
export declare function coerceBoolean(value: string): boolean;
/**
 * Coerces a string to a number.
 * @param {string} value The value to convert.
 * @returns {number}
 */
export declare function coerceNumber(value: string): number;
/** Coerces a string representation of an array of numbers, for example: `"[1,2,3]"`, to an array instance. */
export declare function coerceNumberArray(strOrNumOrArray: string | Array<string | number>): number[];
/**
 * Compares two objects for deep equality.
 * @param a
 * @param b
 */
export declare function isDeepEqual(a: any, b: any): boolean;
/**
 * Debounce method.
 * @param {function} func The function to call.
 * @param {number} wait The amount of time (milliseconds) to wait.
 * @param {boolean} [immediate=false] Should the callback be executed once immeadiately.
 */
export declare function debounce(func: any, wait: number, immediate?: boolean): () => any;
/**
 * Throttle method.
 * @param {function} func The function to call.
 * @param {number} wait The amount of time (milliseconds) to wait.
 * @param {object=} options An options object with the following properties
 *   <ul>
 *     <li>**leading**: Should the callback be executed once immediately.</li>
 *     <li>**trailing**: Should the callback be executed once after the throttle completes.</li>
 *   </ul>
 */
export declare function throttle(func: any, wait: number, options?: any): () => any;
/**
 * A minification-safe nameof function for retrieving the name of a property or method at runtime.
 * Note: this function only works with properties/methods on an object. To get the name of a variable,
 *       you will need to wrap it within an object.
 * @param {Function} fn A function the returns a property or method that will be stringified.
 */
export declare function nameof(fn: () => any): string;
export declare function idleWatch(callback: () => void, timespan: number): void;

import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { ToolbarComponent as ToolbarComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class ToolbarComponent {
    protected elementRef: ElementRef<ToolbarComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-toolbar element. */
    readonly nativeElement: ToolbarComponentCustomElement;
    /** Controls whether a bottom divider (default) or top divider (true) is used. */
    set inverted(value: ToolbarComponentCustomElement['inverted']);
    get inverted(): ToolbarComponentCustomElement['inverted'];
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<ToolbarComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<ToolbarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ToolbarComponent, "forge-toolbar", never, { "inverted": { "alias": "inverted"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_inverted: unknown;
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineLinearProgressComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class LinearProgressComponent {
    /** Controls the determinate state. */
    set determinate(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.determinate = value;
        });
    }
    get determinate() {
        return this.nativeElement.determinate;
    }
    /** Controls the progress while in a determinate state. Accepts values from `0` to `1`. */
    set progress(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.progress = value;
        });
    }
    get progress() {
        return this.nativeElement.progress;
    }
    /** Controls the buffer progress while in a determinate state. Accepts values from `0` to `1`. */
    set buffer(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.buffer = value;
        });
    }
    get buffer() {
        return this.nativeElement.buffer;
    }
    /** Sets the theme. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-linear-progress element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineLinearProgressComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: LinearProgressComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: LinearProgressComponent, selector: "forge-linear-progress", inputs: { determinate: ["determinate", "determinate", booleanAttribute], progress: ["progress", "progress", numberAttribute], buffer: ["buffer", "buffer", numberAttribute], theme: "theme" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: LinearProgressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-linear-progress',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { determinate: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], progress: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], buffer: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], theme: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZWFyLXByb2dyZXNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9saW5lYXItcHJvZ3Jlc3MvbGluZWFyLXByb2dyZXNzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsZUFBZSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSixPQUFPLEVBQW1FLDZCQUE2QixFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBRWxJLE9BQU87QUFNUCxNQUFNLE9BQU8sdUJBQXVCO0lBS25DLHNDQUFzQztJQUN0QyxJQUNXLFdBQVcsQ0FBQyxLQUEwRDtRQUNoRixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxXQUFXO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDdkMsQ0FBQztJQUVELDBGQUEwRjtJQUMxRixJQUNXLFFBQVEsQ0FBQyxLQUF1RDtRQUMxRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxRQUFRO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDcEMsQ0FBQztJQUVELGlHQUFpRztJQUNqRyxJQUNXLE1BQU0sQ0FBQyxLQUFxRDtRQUN0RSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxNQUFNO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7SUFDbEMsQ0FBQztJQUVELHNCQUFzQjtJQUN0QixJQUNXLEtBQUssQ0FBQyxLQUFvRDtRQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRUQsWUFDQyxpQkFBb0MsRUFDMUIsVUFBNEQsRUFDNUQsSUFBWTtRQURaLGVBQVUsR0FBVixVQUFVLENBQWtEO1FBQzVELFNBQUksR0FBSixJQUFJLENBQVE7UUFsRHZCLHlDQUF5QztRQUN6QixrQkFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBbUQ3RCw2QkFBNkIsRUFBRSxDQUFDO1FBQ2hDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7OEdBeERXLHVCQUF1QjtrR0FBdkIsdUJBQXVCLDJGQU1mLGdCQUFnQixzQ0FXaEIsZUFBZSxnQ0FXZixlQUFlLDZDQTlCeEIsMkJBQTJCOzsyRkFFMUIsdUJBQXVCO2tCQUxuQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0QztvSUFRVyxXQUFXO3NCQURyQixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQVkzQixRQUFRO3NCQURsQixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRTtnQkFZMUIsTUFBTTtzQkFEaEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUU7Z0JBWTFCLEtBQUs7c0JBRGYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgbnVtYmVyQXR0cmlidXRlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGluZWFyUHJvZ3Jlc3NDb21wb25lbnQgYXMgTGluZWFyUHJvZ3Jlc3NDb21wb25lbnRDdXN0b21FbGVtZW50LCBkZWZpbmVMaW5lYXJQcm9ncmVzc0NvbXBvbmVudCB9IGZyb20gJ0B0eWxlcnRlY2gvZm9yZ2UnO1xuXG4vKiogICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JnZS1saW5lYXItcHJvZ3Jlc3MnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBMaW5lYXJQcm9ncmVzc0NvbXBvbmVudCB7XG5cblx0LyoqIFRoZSBmb3JnZS1saW5lYXItcHJvZ3Jlc3MgZWxlbWVudC4gKi9cblx0cHVibGljIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuXHQvKiogQ29udHJvbHMgdGhlIGRldGVybWluYXRlIHN0YXRlLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBkZXRlcm1pbmF0ZSh2YWx1ZTogTGluZWFyUHJvZ3Jlc3NDb21wb25lbnRDdXN0b21FbGVtZW50WydkZXRlcm1pbmF0ZSddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5kZXRlcm1pbmF0ZSA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgZGV0ZXJtaW5hdGUoKTogTGluZWFyUHJvZ3Jlc3NDb21wb25lbnRDdXN0b21FbGVtZW50WydkZXRlcm1pbmF0ZSddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmRldGVybWluYXRlO1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHRoZSBwcm9ncmVzcyB3aGlsZSBpbiBhIGRldGVybWluYXRlIHN0YXRlLiBBY2NlcHRzIHZhbHVlcyBmcm9tIGAwYCB0byBgMWAuICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogbnVtYmVyQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgcHJvZ3Jlc3ModmFsdWU6IExpbmVhclByb2dyZXNzQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncHJvZ3Jlc3MnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQucHJvZ3Jlc3MgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHByb2dyZXNzKCk6IExpbmVhclByb2dyZXNzQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncHJvZ3Jlc3MnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5wcm9ncmVzcztcblx0fVxuXG5cdC8qKiBDb250cm9scyB0aGUgYnVmZmVyIHByb2dyZXNzIHdoaWxlIGluIGEgZGV0ZXJtaW5hdGUgc3RhdGUuIEFjY2VwdHMgdmFsdWVzIGZyb20gYDBgIHRvIGAxYC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBidWZmZXIodmFsdWU6IExpbmVhclByb2dyZXNzQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnYnVmZmVyJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmJ1ZmZlciA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgYnVmZmVyKCk6IExpbmVhclByb2dyZXNzQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnYnVmZmVyJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuYnVmZmVyO1xuXHR9XG5cblx0LyoqIFNldHMgdGhlIHRoZW1lLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IHRoZW1lKHZhbHVlOiBMaW5lYXJQcm9ncmVzc0NvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RoZW1lJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnRoZW1lID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB0aGVtZSgpOiBMaW5lYXJQcm9ncmVzc0NvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RoZW1lJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQudGhlbWU7XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG5cdFx0cHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8TGluZWFyUHJvZ3Jlc3NDb21wb25lbnRDdXN0b21FbGVtZW50Pixcblx0XHRwcm90ZWN0ZWQgem9uZTogTmdab25lXG5cdCkge1xuXHRcdGRlZmluZUxpbmVhclByb2dyZXNzQ29tcG9uZW50KCk7XG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWYuZGV0YWNoKCk7XG5cdH1cbn1cbiJdfQ==
// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineTooltipComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class TooltipComponent {
    /** Whether or not the tooltip is open. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** The type of tooltip. Valid values are `presentation` (default), `label`, and `description`. */
    set type(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.type = value;
        });
    }
    get type() {
        return this.nativeElement.type;
    }
    /** The id of the element that the tooltip is anchored to. */
    set anchor(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.anchor = value;
        });
    }
    get anchor() {
        return this.nativeElement.anchor;
    }
    set anchorElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.anchorElement = value;
        });
    }
    get anchorElement() {
        return this.nativeElement.anchorElement;
    }
    set target(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.target = value;
        });
    }
    get target() {
        return this.nativeElement.target;
    }
    /** The placement of the tooltip relative to the anchor element. */
    set placement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.placement = value;
        });
    }
    get placement() {
        return this.nativeElement.placement;
    }
    set position(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.position = value;
        });
    }
    get position() {
        return this.nativeElement.position;
    }
    /** The delay in milliseconds before the tooltip is shown. */
    set delay(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.delay = value;
        });
    }
    get delay() {
        return this.nativeElement.delay;
    }
    /** The offset in pixels between the tooltip and the anchor element. */
    set offset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.offset = value;
        });
    }
    get offset() {
        return this.nativeElement.offset;
    }
    /** How the tooltip should place itself if there is not enough space at the desired placement. */
    set flip(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.flip = value;
        });
    }
    get flip() {
        return this.nativeElement.flip;
    }
    /** The id of the element that the tooltip should be constrained to. */
    set boundary(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.boundary = value;
        });
    }
    get boundary() {
        return this.nativeElement.boundary;
    }
    /** The element that the tooltip should be constrained to. */
    set boundaryElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.boundaryElement = value;
        });
    }
    get boundaryElement() {
        return this.nativeElement.boundaryElement;
    }
    /** The fallback placements of the tooltip relative to the anchor element. */
    set fallbackPlacements(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fallbackPlacements = value;
        });
    }
    get fallbackPlacements() {
        return this.nativeElement.fallbackPlacements;
    }
    /** The trigger type(s) that will open the tooltip. Valid values are `hover` (default), `longpress`, and `focus`. */
    set triggerType(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.triggerType = value;
        });
    }
    get triggerType() {
        return this.nativeElement.triggerType;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-tooltip element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineTooltipComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: TooltipComponent, selector: "forge-tooltip", inputs: { open: ["open", "open", booleanAttribute], type: "type", anchor: "anchor", anchorElement: "anchorElement", target: "target", placement: "placement", position: "position", delay: ["delay", "delay", numberAttribute], offset: ["offset", "offset", numberAttribute], flip: "flip", boundary: "boundary", boundaryElement: "boundaryElement", fallbackPlacements: "fallbackPlacements", triggerType: "triggerType" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: TooltipComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-tooltip',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], type: [{
                type: Input
            }], anchor: [{
                type: Input
            }], anchorElement: [{
                type: Input
            }], target: [{
                type: Input
            }], placement: [{
                type: Input
            }], position: [{
                type: Input
            }], delay: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], offset: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], flip: [{
                type: Input
            }], boundary: [{
                type: Input
            }], boundaryElement: [{
                type: Input
            }], fallbackPlacements: [{
                type: Input
            }], triggerType: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
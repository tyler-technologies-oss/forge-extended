/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { getFormState, getFormValue, setValidity } from '../constants';
import { BaseComponent, FormValue } from '../core';
import { IWithFocusable } from '../core/mixins/focus/with-focusable';
import { IWithFormAssociation } from '../core/mixins/form/with-form-associated';
import { IWithDefaultAria } from '../core/mixins/internals/with-default-aria';
import { IWithElementInternals } from '../core/mixins/internals/with-element-internals';
import { IWithLabelAwareness } from '../core/mixins/label/with-label-aware';
import { SwitchIconVisibility, SwitchLabelPosition } from './switch-constants';
export interface ISwitchComponent extends IWithFormAssociation, IWithFocusable, IWithLabelAwareness, IWithElementInternals, IWithDefaultAria {
    value: string;
    on: boolean;
    /**
     * @deprecated use `on` instead
     */
    selected: boolean;
    defaultOn: boolean;
    required: boolean;
    dense: boolean;
    icon: SwitchIconVisibility;
    labelPosition: SwitchLabelPosition;
    toggle(force?: boolean): void;
    setFormValue(value: FormValue | null, state?: FormValue | null | undefined): void;
    [setValidity](): void;
}
declare global {
    interface HTMLElementTagNameMap {
        'forge-switch': ISwitchComponent;
    }
    interface HTMLElementEventMap {
        'forge-switch-change': CustomEvent<boolean>;
    }
}
declare const SwitchComponent_base: import("../constants").AbstractConstructor<import("../core/mixins/form/with-form-associated").WithFormAssociationContract> & import("../constants").AbstractConstructor<import("../core/mixins/label/with-label-aware").WithLabelAwarenessContract> & import("../constants").AbstractConstructor<import("../core/mixins/focus/with-focusable").WithFocusableContract> & import("../constants").AbstractConstructor<import("../core/mixins/internals/with-default-aria").WithDefaultAriaContract> & import("../constants").AbstractConstructor<import("../core/mixins/internals/with-element-internals").WithElementInternalsContract> & typeof BaseComponent;
/**
 * @tag forge-switch
 *
 * @summary Switches toggle the state of a single setting on or off.
 *
 * @description
 * Use switches to:
 * - Toggle a single item on or off, on mobile and tablet
 * - Immediately activate or deactivate something
 *
 * @event {Event} change - Dispatches when the switch's value changes.
 * @event {CustomEvent<boolean>} forge-switch-change - Dispatches when the switch's value changes.
 *
 * @cssproperty --forge-theme-primary - The primary color of the switch.
 * @cssproperty --forge-theme-on-primary - The color of elements placed on top of the primary color (the handle icons for example).
 * @cssproperty --forge-switch-handle-on-color - The color of the handle in the switch's on state.
 * @cssproperty --forge-switch-handle-off-color - The color of the handle in the switch's off state.
 * @cssproperty --forge-switch-handle-active-on-color - The color of the handle when the switch is active (pressed) in its on state.
 * @cssproperty --forge-switch-handle-active-off-color - The color of the handle when the switch is active (pressed) in its off state.
 * @cssproperty --forge-switch-handle-size - The inline and block size of the handle.
 * @cssproperty --forge-switch-handle-width - The inline size of the handle.
 * @cssproperty --forge-switch-handle-height - The block size of the handle.
 * @cssproperty --forge-switch-handle-scale - The scale transformation applied to the handle.
 * @cssproperty --forge-switch-handle-on-scale - The scale transformation applied to the handle in the switch's on state.
 * @cssproperty --forge-switch-handle-off-scale - The scale transformation applied to the handle in the switch's off state.
 * @cssproperty --forge-switch-handle-active-scale - The scale transformation applied to the handle when the switch is active (pressed).
 * @cssproperty --forge-switch-handle-active-on-scale - The scale transformation applied to the handle when the switch is active (pressed) in its on state.
 * @cssproperty --forge-switch-handle-active-off-scale - The scale transformation applied to the handle when the switch is active (pressed) in its off state.
 * @cssproperty --forge-switch-handle-shape - The shape of the handle.
 * @cssproperty --forge-switch-handle-elevation - The handle's shadow.
 * @cssproperty --forge-switch-handle-on-elevation - The handle's shadow in the switch's on state.
 * @cssproperty --forge-switch-handle-off-elevation - The handle's shadow in the switch's off state.
 * @cssproperty --forge-switch-handle-active-elevation - The handle's shadow when the switch is active (pressed).
 * @cssproperty --forge-switch-handle-active-on-elevation - The handle's shadow when the switch is active (pressed) in its on state.
 * @cssproperty --forge-switch-handle-active-off-elevation - The handle's shadow when the switch is active (pressed) in its off state.
 * @cssproperty --forge-switch-track-on-color - The color of the track in the switch's on state.
 * @cssproperty --forge-switch-track-off-color - The color fo the track in the switch's off state.
 * @cssproperty --forge-switch-track-active-on-color - The color of the track when the switch is active (pressed) in its on state.
 * @cssproperty --forge-switch-track-active-off-color - The color fo the track when the switch is active (pressed) in its off state.
 * @cssproperty --forge-switch-track-width - The inline size of the track.
 * @cssproperty --forge-switch-track-height - The block size of the track.
 * @cssproperty --forge-switch-track-shape - The shape of the track.
 * @cssproperty --forge-switch-track-border-width - The width of the track border.
 * @cssproperty --forge-switch-track-on-border-width - The width of the track border in the switch's on state.
 * @cssproperty --forge-switch-track-off-border-width - The width of the track border in the switch's off state.
 * @cssproperty --forge-switch-track-active-on-border-width - The width of the track border when the switch is active (pressed) in its on state.
 * @cssproperty --forge-switch-track-active-off-border-width - The width of the track border when the switch is active (pressed) in its off state.
 * @cssproperty --forge-switch-track-border-color - The color of the track border.
 * @cssproperty --forge-switch-track-on-border-color - The color of the track border in the switch's on state.
 * @cssproperty --forge-switch-track-off-border-color - The color of the track border in the switch's off state.
 * @cssproperty --forge-switch-track-active-on-border-color - The color of the track border when the switch is active (pressed) in its on state.
 * @cssproperty --forge-switch-track-active-off-border-color - The color of the track border when the switch is active (pressed) in its off state.
 * @cssproperty --forge-switch-icon-color - The color of the handle icons.
 * @cssproperty --forge-switch-icon-on-color - The color of the handle icon in the switch's on state.
 * @cssproperty --forge-switch-icon-off-color - The color of the handle icon in the switch's off state.
 * @cssproperty --forge-switch-icon-active-on-color - The color of the handle icon when the switch is active (pressed) in its on state.
 * @cssproperty --forge-switch-icon-active-off-color - The color of the handle icon when the switch is active (pressed) in its off state.
 * @cssproperty --forge-switch-icon-size - The size of the handle icon.
 * @cssproperty --forge-switch-icon-on-size - The size of the handle icon in the switch's on state.
 * @cssproperty --forge-switch-icon-off-size - The size of the handle icon in the switch's off state.
 * @cssproperty --forge-switch-icon-scale - The scale transformation applied to the handle icons.
 * @cssproperty --forge-switch-icon-on-scale - The scale transformation applied to the handle icons in the switch's on state.
 * @cssproperty --forge-switch-icon-off-scale - The scale transformation applied to the handle icons in the switch's off state.
 * @cssproperty --forge-switch-icon-active-on-scale - The scale transformation applied to the handle icons when the switch is active (pressed) in its on state.
 * @cssproperty --forge-switch-icon-active-off-scale - The scale transformation applied to the handle icons when the switch is active (pressed) in its off state.
 * @cssproperty --forge-switch-gap - The space between the switch and label.
 * @cssproperty --forge-switch-justify - How the switch and label are distributed along their main axis.
 * @cssproperty --forge-switch-direction - Whether the switch and label are arranged along the inline or block axis.
 * @cssproperty --forge-switch-state-layer-size - The inline and block size of the handle's state layer.
 * @cssproperty --forge-switch-state-layer-width - The inline size of the handle's state layer.
 * @cssproperty --forge-switch-state-layer-height - The block size of the handle's state layer.
 * @cssproperty --forge-switch-state-layer-on-color - The color of the handle's state layer when the switch is in its on state.
 * @cssproperty --forge-switch-state-layer-off-color - The color of the handle's state layer when the switch is in its off state.
 * @cssproperty --forge-switch-state-layer-dense-size - The inline and block size of the handle's state layer when the dense switch is used.
 * @cssproperty --forge-switch-state-layer-dense-width - The inline size of the handle's state layer when the dense switch is used.
 * @cssproperty --forge-switch-state-layer-dense-height - The block size of the handle's state layer when the dense switch is used.
 * @cssproperty --forge-switch-disabled-opacity - The opacity of the switch when disabled.
 * @cssproperty --forge-switch-animation-duration - The duration of animations.
 * @cssproperty --forge-switch-animation-timing - The timing function used in most animations.
 * @cssproperty --forge-switch-active-animation-timing - The timing function used in active state animations.
 *
 * @csspart switch - Styles the switch container element.
 * @csspart track - Styles the track element.
 * @csspart handle - Styles the handle element.
 * @csspart icon-on - Styles the on icon element.
 * @csspart icon-off - Styles the off icon element.
 * @csspart label - Styles the label element.
 * @csspart state-layer - Styles the state layer root element.
 * @csspart focus-indicator - Styles the focus indicator root element.
 *
 * @cssclass forge-switch - Apply to the root element _(required)_.
 * @cssclass forge-switch--dense - Makes the switch dense.
 * @cssclass forge-switch__thumb - Apply to a child of the root element to render the thumb _(required)_.
 * @cssclass forge-switch__icon - Apply to one or more children of the thumb element to style them as icons.
 * @cssclass forge-switch__icon--on - Apply to the the icon representing the switch's "on" state. It will be hidden when the switch is off.
 * @cssclass forge-switch__icon--off - Apply to the the icon representing the switch's "off" state. It will be hidden when the switch is on.
 */
export declare class SwitchComponent extends SwitchComponent_base implements ISwitchComponent {
    static get observedAttributes(): string[];
    private readonly _core;
    constructor();
    connectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    [getFormValue](): FormValue | null;
    [getFormState](): string;
    [setValidity](): void;
    formResetCallback(): void;
    formStateRestoreCallback(state: string): void;
    labelClickedCallback(): void;
    labelChangedCallback(value: string | null): void;
    /** @ignore */
    setFormValue(value: FormValue | null, state?: FormValue | null | undefined): void;
    /**
     * Gets/sets whether the switch is on or off.
     * @default false
     * @attribute
     */
    on: boolean;
    /**
     * Alias for `on` _(deprecated)_.
     * @deprecated use `on` instead
     * @default false
     * @attribute
     */
    selected: boolean;
    /**
     * Gets/sets whether the switch is on or off by default.
     * @default false
     * @attribute default-on
     */
    defaultOn: boolean;
    /**
     * Gets/sets the value of the switch.
     * @default 'on'
     * @attribute
     */
    value: string;
    /**
     * Controls whether the switch is dense.
     * @default false
     * @attribute
     */
    dense: boolean;
    /**
     * Controls whether the switch is disabled.
     * @default false
     * @attribute
     */
    disabled: boolean;
    /**
     * Controls whether the switch is required.
     * @default false
     * @attribute
     */
    required: boolean;
    /**
     * Controls whether the switch is readonly.
     * @default false
     * @attribute
     */
    readonly: boolean;
    /**
     * Controls the presence of the off and on icons.
     * @default 'both'
     * @attribute
     */
    icon: SwitchIconVisibility;
    /**
     * Controls whether the label appears before or after the switch.
     * @default 'end'
     * @attribute label-position
     */
    labelPosition: SwitchLabelPosition;
    /**
     * Toggles the switch on or off.
     * @param force Whether to set the switch on or off.
     */
    toggle(force?: boolean): void;
}
export {};

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineProfileCardComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ProfileCardComponent {
    set fullName(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fullName = value;
        });
    }
    get fullName() {
        return this.nativeElement.fullName;
    }
    set email(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.email = value;
        });
    }
    get email() {
        return this.nativeElement.email;
    }
    set signOut(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.signOut = value;
        });
    }
    get signOut() {
        return this.nativeElement.signOut;
    }
    set profile(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.profile = value;
        });
    }
    get profile() {
        return this.nativeElement.profile;
    }
    set signOutText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.signOutText = value;
        });
    }
    get signOutText() {
        return this.nativeElement.signOutText;
    }
    set profileText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.profileText = value;
        });
    }
    get profileText() {
        return this.nativeElement.profileText;
    }
    set avatarText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.avatarText = value;
        });
    }
    get avatarText() {
        return this.nativeElement.avatarText;
    }
    set avatarIcon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.avatarIcon = value;
        });
    }
    get avatarIcon() {
        return this.nativeElement.avatarIcon;
    }
    set avatarImageUrl(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.avatarImageUrl = value;
        });
    }
    get avatarImageUrl() {
        return this.nativeElement.avatarImageUrl;
    }
    set avatarLetterCount(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.avatarLetterCount = value;
        });
    }
    get avatarLetterCount() {
        return this.nativeElement.avatarLetterCount;
    }
    focus(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-profile-card element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineProfileCardComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ProfileCardComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ProfileCardComponent, selector: "forge-profile-card", inputs: { fullName: "fullName", email: "email", signOut: ["signOut", "signOut", booleanAttribute], profile: ["profile", "profile", booleanAttribute], signOutText: "signOutText", profileText: "profileText", avatarText: "avatarText", avatarIcon: "avatarIcon", avatarImageUrl: "avatarImageUrl", avatarLetterCount: ["avatarLetterCount", "avatarLetterCount", numberAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ProfileCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-profile-card',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { fullName: [{
                type: Input
            }], email: [{
                type: Input
            }], signOut: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], profile: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], signOutText: [{
                type: Input
            }], profileText: [{
                type: Input
            }], avatarText: [{
                type: Input
            }], avatarIcon: [{
                type: Input
            }], avatarImageUrl: [{
                type: Input
            }], avatarLetterCount: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { BaseSelectCore, IBaseSelectCore, ISelectOption } from '../core';
import { ISelectAdapter } from './select-adapter';
export interface ISelectCore extends IBaseSelectCore {
    label: string;
    placeholder: string;
    readonly required: boolean;
    syncFloatingLabelState(opts: {
        force?: boolean;
    }): void;
    setDisabled(value: boolean): void;
}
export declare class SelectCore extends BaseSelectCore<ISelectAdapter> implements ISelectCore {
    private _label;
    private _placeholder;
    private readonly _required;
    private _permanentlyFloatLabel;
    private _mousedownListener;
    constructor(adapter: ISelectAdapter);
    initialize(): void;
    destroy(): void;
    syncFloatingLabelState({ force }?: {
        force?: boolean;
    }): void;
    setDisabled(value: boolean): void;
    private _initializeLabel;
    protected _initializeValue(): void;
    private _initializeAccessibility;
    private _onMouseDown;
    protected _onClick(evt: MouseEvent): void;
    protected _openDropdown(): void;
    protected _closeDropdown(): void;
    protected _onDismiss(): void;
    protected _onDropdownScrollEnd(): void;
    /**
     * Handles selecting an item in the dropdown.
     * @param {ISelectOption} option The selected option.
     * @param {number} optionIndex The index of the selected option.
     */
    protected _onSelect(option: ISelectOption, optionIndex: number, closeDropdown?: boolean): Promise<boolean>;
    protected _reset(): void;
    private _tryFloatLabel;
    private _updateLabel;
    protected _applyValue(value: string | string[]): void;
    /** Gets/sets the label text. */
    get label(): string;
    set label(value: string);
    get placeholder(): string;
    set placeholder(value: string);
    get multiple(): boolean;
    set multiple(value: boolean);
    /** Sets whether the select is required. */
    set required(value: boolean);
}

/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { BaseComponent, IBaseComponent } from '../../core/base/base-component';
import { ChipTheme, ChipType } from '../chip/chip-constants';
export interface IChipSetComponent extends IBaseComponent {
    vertical: boolean;
    type: ChipType;
    dense: boolean;
    disabled: boolean;
    invalid: boolean;
    theme: ChipTheme;
}
declare global {
    interface HTMLElementTagNameMap {
        'forge-chip-set': IChipSetComponent;
    }
}
/**
 * @tag forge-chip-set
 *
 * @summary Chips sets are used to group multiple chips together and orchestrate their behavior.
 *
 * @property {boolean} [vertical=false] - Whether the chip set is vertical.
 * @property {ChipType} [type='action'] - The type of chip.
 * @property {boolean} [dense=false] - Whether the chip set is dense.
 * @property {boolean} [disabled=false] - Whether the chip set is disabled.
 * @property {boolean} [invalid=false] - Whether the chip set is invalid.
 * @property {ChipTheme} [theme='primary'] - The theme of the chip set.
 *
 * @attribute {boolean} [vertical] - Whether the chip set is vertically oriented.
 * @attribute {ChipType} [type] - The type of chips.
 * @attribute {boolean} [dense] - Whether all chips in the chip set are dense.
 * @attribute {boolean} [disabled] - Whether all chips in the chip set are disabled.
 * @attribute {boolean} [invalid] - Whether all chips in the chip set are invalid.
 * @attribute {ChipTheme} [theme] - The theme of the chips.
 *
 * @cssproperty --forge-chip-set-spacing - The spacing between chips.
 *
 * @csspart root - The component's root element.
 *
 * @cssfilepath chips/forge-chips.css
 * @cssclass forge-chip-set - The chip container element.
 * @cssclass forge-chip-set--vertical - Renders the chips vertically.
 *
 * @slot - The chips to display in the chip set.
 */
export declare class ChipSetComponent extends BaseComponent implements IChipSetComponent {
    static get observedAttributes(): string[];
    private _vertical;
    private _type;
    private _dense;
    private _disabled;
    private _invalid;
    private _theme;
    constructor();
    connectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    private _onChipNavigate;
    private _findChipDescendants;
    private _syncChipsProperty;
    get vertical(): boolean;
    set vertical(value: boolean);
    get type(): ChipType;
    set type(value: ChipType);
    get dense(): boolean;
    set dense(value: boolean);
    get disabled(): boolean;
    set disabled(value: boolean);
    get invalid(): boolean;
    set invalid(value: boolean);
    get theme(): ChipTheme;
    set theme(value: ChipTheme);
}

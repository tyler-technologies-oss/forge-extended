// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineFloatingActionButtonComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class FloatingActionButtonComponent {
    /** Sets the theme of the button. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** Sets the density of the button. */
    set density(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.density = value;
        });
    }
    get density() {
        return this.nativeElement.density;
    }
    /** Sets the elevation of the button. */
    set elevation(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.elevation = value;
        });
    }
    get elevation() {
        return this.nativeElement.elevation;
    }
    get form() {
        return this.nativeElement.form;
    }
    /** The name of the button. */
    set name(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.name = value;
        });
    }
    get name() {
        return this.nativeElement.name;
    }
    /** The value of the button. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Sets the type of the button. Possible values are `button`, `submit`, and `reset`. */
    set type(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.type = value;
        });
    }
    get type() {
        return this.nativeElement.type;
    }
    /** Disables the button. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Shows a popover icon on the button. */
    set popoverIcon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popoverIcon = value;
        });
    }
    get popoverIcon() {
        return this.nativeElement.popoverIcon;
    }
    /** Sets the density of the button. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Clicks the button. */
    click(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.click(...args));
    }
    /** Focuses the button. */
    focus(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-fab element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineFloatingActionButtonComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: FloatingActionButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: FloatingActionButtonComponent, selector: "forge-fab", inputs: { theme: "theme", density: "density", elevation: "elevation", name: "name", value: "value", type: "type", disabled: ["disabled", "disabled", booleanAttribute], popoverIcon: ["popoverIcon", "popoverIcon", booleanAttribute], dense: ["dense", "dense", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: FloatingActionButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-fab',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { theme: [{
                type: Input
            }], density: [{
                type: Input
            }], elevation: [{
                type: Input
            }], name: [{
                type: Input
            }], value: [{
                type: Input
            }], type: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popoverIcon: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
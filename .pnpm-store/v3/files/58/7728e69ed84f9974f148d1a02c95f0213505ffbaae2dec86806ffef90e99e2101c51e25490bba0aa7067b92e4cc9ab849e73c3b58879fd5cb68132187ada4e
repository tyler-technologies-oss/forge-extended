/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { BaseAdapter, IBaseAdapter } from '../../core/base';
import { IStepComponent } from './step';
import { StepIcons } from './step-constants';
export interface IStepAdapter extends IBaseAdapter {
    component: IStepComponent;
    toggleDisabled(disabled: boolean): void;
    setIndex(value: number): void;
    initialize(): void;
    toggleRootClass(className: string, on: boolean): void;
    toggleIcon(name: StepIcons, show: boolean): void;
    setClickListener(listener: (evt: MouseEvent) => void): void;
    removeClickListener(listener: (evt: MouseEvent) => void): void;
    slotHasContent(): boolean;
    setExpanded(expanded: boolean): void;
    setSlotListener(listener: (evt: MouseEvent) => void): void;
    removeSlotListener(listener: (evt: MouseEvent) => void): void;
    setExpansionPanelAnimations: (animate: boolean) => void;
    addExpansionPanel: () => void;
    removeExpansionPanel: () => void;
    addExpansionIcon: () => void;
    removeExpansionIcon: () => void;
    addExpansionPanelListener(event: string, listener: EventListener): void;
    removeExpansionPanelListener(event: string, listener: EventListener): void;
    isExpandedContentInFocus(checkElement?: HTMLElement): boolean;
}
export declare class StepAdapter extends BaseAdapter<IStepComponent> implements IStepAdapter {
    private _stepContainer;
    private _container;
    private _expansionSlot;
    private _expansionPanel;
    private readonly _stateLayerElement;
    constructor(_component: IStepComponent);
    get component(): IStepComponent;
    initialize(): void;
    setIndex(value: number): void;
    toggleRootClass(className: string, on: boolean): void;
    toggleDisabled(disabled: boolean): void;
    toggleIcon(name: StepIcons, show: boolean): void;
    slotHasContent(): boolean;
    setClickListener(listener: (evt: MouseEvent) => void): void;
    removeClickListener(listener: (evt: MouseEvent) => void): void;
    setSlotListener(listener: (evt: MouseEvent) => void): void;
    removeSlotListener(listener: (evt: MouseEvent) => void): void;
    setExpanded(expanded: boolean): void;
    setExpansionPanelAnimations(animate: boolean): void;
    addExpansionPanel(): void;
    removeExpansionPanel(): void;
    addExpansionIcon(): void;
    removeExpansionIcon(): void;
    addExpansionPanelListener(event: string, listener: EventListener): void;
    removeExpansionPanelListener(event: string, listener: EventListener): void;
    isExpandedContentInFocus(checkElement?: HTMLElement): boolean;
    private _createExpansionPanel;
    private _createExpansionIcon;
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineListItemComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ListItemComponent {
    /** Applies the selected state to the list item. */
    set selected(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selected = value;
        });
    }
    get selected() {
        return this.nativeElement.selected;
    }
    /** Applies the active state to the list item by emulating its focused state. */
    set active(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.active = value;
        });
    }
    get active() {
        return this.nativeElement.active;
    }
    /** The unique value of the list item. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Applies the dense state to the list item. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Applies the indented state by adding margin to the start of the list item. */
    set indented(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.indented = value;
        });
    }
    get indented() {
        return this.nativeElement.indented;
    }
    /** Sets the list item height to support at least two lines of text. */
    set twoLine(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.twoLine = value;
        });
    }
    get twoLine() {
        return this.nativeElement.twoLine;
    }
    /** Sets the list item height to support at least three lines of text. */
    set threeLine(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.threeLine = value;
        });
    }
    get threeLine() {
        return this.nativeElement.threeLine;
    }
    /** Sets the list item to wrap its text content. */
    set wrap(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.wrap = value;
        });
    }
    get wrap() {
        return this.nativeElement.wrap;
    }
    /** Controls whether the list item will automatically attach itself to interactive slotted elements or not. */
    set noninteractive(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.noninteractive = value;
        });
    }
    get noninteractive() {
        return this.nativeElement.noninteractive;
    }
    /** Controls whether the interactive element will receive focus if a non-interactive element is clicked within the list item. */
    set focusPropagation(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.focusPropagation = value;
        });
    }
    get focusPropagation() {
        return this.nativeElement.focusPropagation;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-list-item element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineListItemComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ListItemComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ListItemComponent, selector: "forge-list-item", inputs: { selected: ["selected", "selected", booleanAttribute], active: ["active", "active", booleanAttribute], value: "value", dense: ["dense", "dense", booleanAttribute], indented: ["indented", "indented", booleanAttribute], twoLine: ["twoLine", "twoLine", booleanAttribute], threeLine: ["threeLine", "threeLine", booleanAttribute], wrap: ["wrap", "wrap", booleanAttribute], noninteractive: ["noninteractive", "noninteractive", booleanAttribute], focusPropagation: ["focusPropagation", "focusPropagation", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ListItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-list-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { selected: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], active: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], value: [{
                type: Input
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], indented: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], twoLine: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], threeLine: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], wrap: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], noninteractive: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], focusPropagation: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
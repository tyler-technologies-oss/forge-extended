// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineScaffoldComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ScaffoldComponent {
    /** Whether the scaffold should be full viewport height. */
    set viewport(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.viewport = value;
        });
    }
    get viewport() {
        return this.nativeElement.viewport;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-scaffold element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineScaffoldComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ScaffoldComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ScaffoldComponent, selector: "forge-scaffold", inputs: { viewport: ["viewport", "viewport", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ScaffoldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-scaffold',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { viewport: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhZmZvbGQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL3NjYWZmb2xkL3NjYWZmb2xkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBdUQsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFaEgsT0FBTztBQU1QLE1BQU0sT0FBTyxpQkFBaUI7SUFLN0IsMkRBQTJEO0lBQzNELElBQ1csUUFBUSxDQUFDLEtBQWlEO1FBQ3BFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLFFBQVE7UUFDbEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUNwQyxDQUFDO0lBRUQsWUFDQyxpQkFBb0MsRUFDMUIsVUFBc0QsRUFDdEQsSUFBWTtRQURaLGVBQVUsR0FBVixVQUFVLENBQTRDO1FBQ3RELFNBQUksR0FBSixJQUFJLENBQVE7UUFqQnZCLGtDQUFrQztRQUNsQixrQkFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBa0I3RCx1QkFBdUIsRUFBRSxDQUFDO1FBQzFCLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7OEdBdkJXLGlCQUFpQjtrR0FBakIsaUJBQWlCLDJFQU1ULGdCQUFnQiw2QkFSekIsMkJBQTJCOzsyRkFFMUIsaUJBQWlCO2tCQUw3QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0QztvSUFRVyxRQUFRO3NCQURsQixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBjb2RlIHdhcyBnZW5lcmF0ZWQgYnkgdGhlIGFuZ3VsYXItY3VzdG9tLWVsZW1lbnRzLXNjaGVtYXRpYy4gIEFueSBjaGFuZ2VzIHdpbGwgYmUgb3ZlcndyaXR0ZW4gbmV4dCB0aW1lIGl0IHJ1bnMuXG5pbXBvcnQgeyBib29sZWFuQXR0cmlidXRlLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2NhZmZvbGRDb21wb25lbnQgYXMgU2NhZmZvbGRDb21wb25lbnRDdXN0b21FbGVtZW50LCBkZWZpbmVTY2FmZm9sZENvbXBvbmVudCB9IGZyb20gJ0B0eWxlcnRlY2gvZm9yZ2UnO1xuXG4vKiogICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JnZS1zY2FmZm9sZCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIFNjYWZmb2xkQ29tcG9uZW50IHtcblxuXHQvKiogVGhlIGZvcmdlLXNjYWZmb2xkIGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIFdoZXRoZXIgdGhlIHNjYWZmb2xkIHNob3VsZCBiZSBmdWxsIHZpZXdwb3J0IGhlaWdodC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgdmlld3BvcnQodmFsdWU6IFNjYWZmb2xkQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsndmlld3BvcnQnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQudmlld3BvcnQgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHZpZXdwb3J0KCk6IFNjYWZmb2xkQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsndmlld3BvcnQnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC52aWV3cG9ydDtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxTY2FmZm9sZENvbXBvbmVudEN1c3RvbUVsZW1lbnQ+LFxuXHRcdHByb3RlY3RlZCB6b25lOiBOZ1pvbmVcblx0KSB7XG5cdFx0ZGVmaW5lU2NhZmZvbGRDb21wb25lbnQoKTtcblx0XHRjaGFuZ2VEZXRlY3RvclJlZi5kZXRhY2goKTtcblx0fVxufVxuIl19
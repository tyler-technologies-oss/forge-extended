// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineStackComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class StackComponent {
    /** Controls the direction of the stack. */
    set inline(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.inline = value;
        });
    }
    get inline() {
        return this.nativeElement.inline;
    }
    /** Controls if items wrap to a new line in inline mode */
    set wrap(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.wrap = value;
        });
    }
    get wrap() {
        return this.nativeElement.wrap;
    }
    /** Controls if items stretch and take up the maximum amount of space */
    set stretch(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.stretch = value;
        });
    }
    get stretch() {
        return this.nativeElement.stretch;
    }
    /** Controls the gap between the children within the stack */
    set gap(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.gap = value;
        });
    }
    get gap() {
        return this.nativeElement.gap;
    }
    /** Controls the align-items property of a row or column */
    set alignment(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.alignment = value;
        });
    }
    get alignment() {
        return this.nativeElement.alignment;
    }
    /** Controls the justify-content property of a row or column */
    set justify(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.justify = value;
        });
    }
    get justify() {
        return this.nativeElement.justify;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-stack element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineStackComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: StackComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: StackComponent, selector: "forge-stack", inputs: { inline: ["inline", "inline", booleanAttribute], wrap: ["wrap", "wrap", booleanAttribute], stretch: ["stretch", "stretch", booleanAttribute], gap: "gap", alignment: "alignment", justify: "justify" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: StackComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-stack',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { inline: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], wrap: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], stretch: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], gap: [{
                type: Input
            }], alignment: [{
                type: Input
            }], justify: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2suY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL3N0YWNrL3N0YWNrLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBaUQsb0JBQW9CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFdkcsT0FBTztBQU1QLE1BQU0sT0FBTyxjQUFjO0lBSzFCLDJDQUEyQztJQUMzQyxJQUNXLE1BQU0sQ0FBQyxLQUE0QztRQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxNQUFNO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7SUFDbEMsQ0FBQztJQUVELDBEQUEwRDtJQUMxRCxJQUNXLElBQUksQ0FBQyxLQUEwQztRQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxJQUFJO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBRUQsd0VBQXdFO0lBQ3hFLElBQ1csT0FBTyxDQUFDLEtBQTZDO1FBQy9ELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLE9BQU87UUFDakIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztJQUNuQyxDQUFDO0lBRUQsNkRBQTZEO0lBQzdELElBQ1csR0FBRyxDQUFDLEtBQXlDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLEdBQUc7UUFDYixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO0lBQy9CLENBQUM7SUFFRCwyREFBMkQ7SUFDM0QsSUFDVyxTQUFTLENBQUMsS0FBK0M7UUFDbkUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsU0FBUztRQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0lBQ3JDLENBQUM7SUFFRCwrREFBK0Q7SUFDL0QsSUFDVyxPQUFPLENBQUMsS0FBNkM7UUFDL0QsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsT0FBTztRQUNqQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQ25DLENBQUM7SUFFRCxZQUNDLGlCQUFvQyxFQUMxQixVQUFtRCxFQUNuRCxJQUFZO1FBRFosZUFBVSxHQUFWLFVBQVUsQ0FBeUM7UUFDbkQsU0FBSSxHQUFKLElBQUksQ0FBUTtRQXhFdkIsK0JBQStCO1FBQ2Ysa0JBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQXlFN0Qsb0JBQW9CLEVBQUUsQ0FBQztRQUN2QixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QixDQUFDOzhHQTlFVyxjQUFjO2tHQUFkLGNBQWMsa0VBTU4sZ0JBQWdCLDBCQVdoQixnQkFBZ0IsbUNBV2hCLGdCQUFnQixxRkE5QnpCLDJCQUEyQjs7MkZBRTFCLGNBQWM7a0JBTDFCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0QztvSUFRVyxNQUFNO3NCQURoQixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQVkzQixJQUFJO3NCQURkLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLE9BQU87c0JBRGpCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLEdBQUc7c0JBRGIsS0FBSztnQkFZSyxTQUFTO3NCQURuQixLQUFLO2dCQVlLLE9BQU87c0JBRGpCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGNvZGUgd2FzIGdlbmVyYXRlZCBieSB0aGUgYW5ndWxhci1jdXN0b20tZWxlbWVudHMtc2NoZW1hdGljLiAgQW55IGNoYW5nZXMgd2lsbCBiZSBvdmVyd3JpdHRlbiBuZXh0IHRpbWUgaXQgcnVucy5cbmltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBOZ1pvbmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdGFja0NvbXBvbmVudCBhcyBTdGFja0NvbXBvbmVudEN1c3RvbUVsZW1lbnQsIGRlZmluZVN0YWNrQ29tcG9uZW50IH0gZnJvbSAnQHR5bGVydGVjaC9mb3JnZSc7XG5cbi8qKiAgKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZvcmdlLXN0YWNrJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgU3RhY2tDb21wb25lbnQge1xuXG5cdC8qKiBUaGUgZm9yZ2Utc3RhY2sgZWxlbWVudC4gKi9cblx0cHVibGljIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuXHQvKiogQ29udHJvbHMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgc3RhY2suICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IGlubGluZSh2YWx1ZTogU3RhY2tDb21wb25lbnRDdXN0b21FbGVtZW50WydpbmxpbmUnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQuaW5saW5lID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBpbmxpbmUoKTogU3RhY2tDb21wb25lbnRDdXN0b21FbGVtZW50WydpbmxpbmUnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5pbmxpbmU7XG5cdH1cblxuXHQvKiogQ29udHJvbHMgaWYgaXRlbXMgd3JhcCB0byBhIG5ldyBsaW5lIGluIGlubGluZSBtb2RlICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IHdyYXAodmFsdWU6IFN0YWNrQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnd3JhcCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC53cmFwID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB3cmFwKCk6IFN0YWNrQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnd3JhcCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LndyYXA7XG5cdH1cblxuXHQvKiogQ29udHJvbHMgaWYgaXRlbXMgc3RyZXRjaCBhbmQgdGFrZSB1cCB0aGUgbWF4aW11bSBhbW91bnQgb2Ygc3BhY2UgKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgc3RyZXRjaCh2YWx1ZTogU3RhY2tDb21wb25lbnRDdXN0b21FbGVtZW50WydzdHJldGNoJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnN0cmV0Y2ggPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHN0cmV0Y2goKTogU3RhY2tDb21wb25lbnRDdXN0b21FbGVtZW50WydzdHJldGNoJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuc3RyZXRjaDtcblx0fVxuXG5cdC8qKiBDb250cm9scyB0aGUgZ2FwIGJldHdlZW4gdGhlIGNoaWxkcmVuIHdpdGhpbiB0aGUgc3RhY2sgKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCBnYXAodmFsdWU6IFN0YWNrQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZ2FwJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmdhcCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgZ2FwKCk6IFN0YWNrQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZ2FwJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuZ2FwO1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHRoZSBhbGlnbi1pdGVtcyBwcm9wZXJ0eSBvZiBhIHJvdyBvciBjb2x1bW4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCBhbGlnbm1lbnQodmFsdWU6IFN0YWNrQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnYWxpZ25tZW50J10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmFsaWdubWVudCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgYWxpZ25tZW50KCk6IFN0YWNrQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnYWxpZ25tZW50J10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuYWxpZ25tZW50O1xuXHR9XG5cblx0LyoqIENvbnRyb2xzIHRoZSBqdXN0aWZ5LWNvbnRlbnQgcHJvcGVydHkgb2YgYSByb3cgb3IgY29sdW1uICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQganVzdGlmeSh2YWx1ZTogU3RhY2tDb21wb25lbnRDdXN0b21FbGVtZW50WydqdXN0aWZ5J10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50Lmp1c3RpZnkgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGp1c3RpZnkoKTogU3RhY2tDb21wb25lbnRDdXN0b21FbGVtZW50WydqdXN0aWZ5J10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuanVzdGlmeTtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxTdGFja0NvbXBvbmVudEN1c3RvbUVsZW1lbnQ+LFxuXHRcdHByb3RlY3RlZCB6b25lOiBOZ1pvbmVcblx0KSB7XG5cdFx0ZGVmaW5lU3RhY2tDb21wb25lbnQoKTtcblx0XHRjaGFuZ2VEZXRlY3RvclJlZi5kZXRhY2goKTtcblx0fVxufVxuIl19
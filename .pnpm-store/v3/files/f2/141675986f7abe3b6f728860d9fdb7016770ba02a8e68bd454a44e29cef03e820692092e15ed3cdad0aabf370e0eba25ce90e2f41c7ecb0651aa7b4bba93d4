// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineAvatarComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class AvatarComponent {
    /** The text to display in the avatar. */
    set text(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.text = value;
        });
    }
    get text() {
        return this.nativeElement.text;
    }
    /** Controls the number of letters to display from the text. By default the text is split on spaces and the first character of each word is used. */
    set letterCount(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.letterCount = value;
        });
    }
    get letterCount() {
        return this.nativeElement.letterCount;
    }
    /** The background image URL to use. */
    set imageUrl(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.imageUrl = value;
        });
    }
    get imageUrl() {
        return this.nativeElement.imageUrl;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-avatar element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineAvatarComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AvatarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: AvatarComponent, selector: "forge-avatar", inputs: { text: "text", letterCount: ["letterCount", "letterCount", numberAttribute], imageUrl: "imageUrl" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AvatarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-avatar',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { text: [{
                type: Input
            }], letterCount: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], imageUrl: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9hdmF0YXIvYXZhdGFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsZUFBZSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsSSxPQUFPLEVBQW1ELHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBRTFHLE9BQU87QUFNUCxNQUFNLE9BQU8sZUFBZTtJQUszQix5Q0FBeUM7SUFDekMsSUFDVyxJQUFJLENBQUMsS0FBMkM7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsSUFBSTtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7SUFDaEMsQ0FBQztJQUVELG9KQUFvSjtJQUNwSixJQUNXLFdBQVcsQ0FBQyxLQUFrRDtRQUN4RSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxXQUFXO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDdkMsQ0FBQztJQUVELHVDQUF1QztJQUN2QyxJQUNXLFFBQVEsQ0FBQyxLQUErQztRQUNsRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxRQUFRO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDcEMsQ0FBQztJQUVELFlBQ0MsaUJBQW9DLEVBQzFCLFVBQW9ELEVBQ3BELElBQVk7UUFEWixlQUFVLEdBQVYsVUFBVSxDQUEwQztRQUNwRCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBdkN2QixnQ0FBZ0M7UUFDaEIsa0JBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQXdDN0QscUJBQXFCLEVBQUUsQ0FBQztRQUN4QixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QixDQUFDOzhHQTdDVyxlQUFlO2tHQUFmLGVBQWUsZ0dBaUJQLGVBQWUsbURBbkJ4QiwyQkFBMkI7OzJGQUUxQixlQUFlO2tCQUwzQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO29CQUN4QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7b0lBUVcsSUFBSTtzQkFEZCxLQUFLO2dCQVlLLFdBQVc7c0JBRHJCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFO2dCQVkxQixRQUFRO3NCQURsQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBjb2RlIHdhcyBnZW5lcmF0ZWQgYnkgdGhlIGFuZ3VsYXItY3VzdG9tLWVsZW1lbnRzLXNjaGVtYXRpYy4gIEFueSBjaGFuZ2VzIHdpbGwgYmUgb3ZlcndyaXR0ZW4gbmV4dCB0aW1lIGl0IHJ1bnMuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBudW1iZXJBdHRyaWJ1dGUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdmF0YXJDb21wb25lbnQgYXMgQXZhdGFyQ29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lQXZhdGFyQ29tcG9uZW50IH0gZnJvbSAnQHR5bGVydGVjaC9mb3JnZSc7XG5cbi8qKiAgKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZvcmdlLWF2YXRhcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIEF2YXRhckNvbXBvbmVudCB7XG5cblx0LyoqIFRoZSBmb3JnZS1hdmF0YXIgZWxlbWVudC4gKi9cblx0cHVibGljIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuXHQvKiogVGhlIHRleHQgdG8gZGlzcGxheSBpbiB0aGUgYXZhdGFyLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IHRleHQodmFsdWU6IEF2YXRhckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RleHQnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQudGV4dCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgdGV4dCgpOiBBdmF0YXJDb21wb25lbnRDdXN0b21FbGVtZW50Wyd0ZXh0J10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQudGV4dDtcblx0fVxuXG5cdC8qKiBDb250cm9scyB0aGUgbnVtYmVyIG9mIGxldHRlcnMgdG8gZGlzcGxheSBmcm9tIHRoZSB0ZXh0LiBCeSBkZWZhdWx0IHRoZSB0ZXh0IGlzIHNwbGl0IG9uIHNwYWNlcyBhbmQgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBlYWNoIHdvcmQgaXMgdXNlZC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBsZXR0ZXJDb3VudCh2YWx1ZTogQXZhdGFyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnbGV0dGVyQ291bnQnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQubGV0dGVyQ291bnQgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGxldHRlckNvdW50KCk6IEF2YXRhckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2xldHRlckNvdW50J10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQubGV0dGVyQ291bnQ7XG5cdH1cblxuXHQvKiogVGhlIGJhY2tncm91bmQgaW1hZ2UgVVJMIHRvIHVzZS4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCBpbWFnZVVybCh2YWx1ZTogQXZhdGFyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaW1hZ2VVcmwnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQuaW1hZ2VVcmwgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGltYWdlVXJsKCk6IEF2YXRhckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2ltYWdlVXJsJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuaW1hZ2VVcmw7XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG5cdFx0cHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8QXZhdGFyQ29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVBdmF0YXJDb21wb25lbnQoKTtcblx0XHRjaGFuZ2VEZXRlY3RvclJlZi5kZXRhY2goKTtcblx0fVxufVxuIl19
import { Tree } from '@angular-devkit/schematics';
import * as schema from 'custom-elements-manifest/schema';
import { ICliOptions } from './options.interface';
export declare type CustomElementClassDeclaration = schema.CustomElement & schema.CustomElementDeclaration;
export declare type TaggedCustomElement = CustomElementClassDeclaration & {
    tagName: string;
};
/**
 * Returns a declaration matching the provided selector.
 * @param modules The array of modules from the manifest.
 * @param selector A selector to use to locate a declaration within any of the modules.
 * @returns The matching declaration if found, or undefined.
 */
export declare function getDeclaration(modules: schema.Module[], selector: (x: schema.Declaration) => boolean): schema.Declaration | undefined;
/**
 * Determine if a declared export of a module represents a custom element, accounting for inheritance.
 * @param declaration A declared export from the manifest.
 * @param modules The array of modules from the manifest.
 * @returns True if the declaration represents a custom element, false otherwise.
 */
export declare function isCustomElement(declaration: schema.Declaration | undefined, modules: schema.Module[]): declaration is CustomElementClassDeclaration;
/**
 * Processes schematic configuration to return the appropriate directory to output a generated custom element proxy.
 * @param cliOptions The schematic options
 * @param tagName The tag name of the custom element.
 * @param options.relative Whether to generate the path relative to the base configured outDir.
 * @returns The output directory to use for the custom element proxy.
 */
export declare function getOutDir(cliOptions: ICliOptions, tagName: string, options?: {
    relative?: boolean;
}): string;
/**
 * Strips off the 'Component' suffix from a class name.
 * @param className A component class name.
 * @returns The component name without the 'Component' suffix.
 */
export declare function toBaseName(className: string): string;
/**
 * Checks if a non-generated module exists in the target directory.
 * @param tree The filesystem tree context the schematic is being run in.
 * @param targetDir The directory to look in.
 * @returns True if a `.module.ts` file exists in the target directory without the header comment, false otherwise
 */
export declare function moduleExists(tree: Tree, targetDir: string): boolean;
/**
 * Converts a description string into a JSDoc block comment.
 * @param description The description string, which can be multi-line.
 * @param indentLevel Optional level of indentation, defaults to zero.
 * @return The description formatted as a JSDoc block comment.
 */
export declare function toJsDocBlock(description: string, indentLevel?: number): string;

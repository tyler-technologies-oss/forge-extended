// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineTabBarComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class TabBarComponent {
    /** Sets the disabled state of all child tabs.  If true, any new tabs added to the DOM will be disabled by default. This can be used instead of setting individual tab disabled properties, mixing the two methods of disabling is not supported. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** The index of the active tab. */
    set activeTab(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.activeTab = value;
        });
    }
    get activeTab() {
        return this.nativeElement.activeTab;
    }
    /** Controls whether the tab bar is vertical or horizontal. */
    set vertical(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.vertical = value;
        });
    }
    get vertical() {
        return this.nativeElement.vertical;
    }
    /** Controls whether the tabs stretch the full width of their container or cluster together at their minimum width. */
    set clustered(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.clustered = value;
        });
    }
    get clustered() {
        return this.nativeElement.clustered;
    }
    /** Controls whether the tabs are taller to allow for slotted leading/trailing elements. */
    set stacked(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.stacked = value;
        });
    }
    get stacked() {
        return this.nativeElement.stacked;
    }
    /** Controls whether the tabs are styled as secondary tab navigation. */
    set secondary(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.secondary = value;
        });
    }
    get secondary() {
        return this.nativeElement.secondary;
    }
    /** Controls whether the tabs are rendered inverted (tab indicator at top instead of bottom). */
    set inverted(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.inverted = value;
        });
    }
    get inverted() {
        return this.nativeElement.inverted;
    }
    /** Controls whether the tabs are automatically activated when receiving focus. */
    set autoActivate(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.autoActivate = value;
        });
    }
    get autoActivate() {
        return this.nativeElement.autoActivate;
    }
    /** Controls whether scroll buttons are displayed when the tabs overflow their container. */
    set scrollButtons(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.scrollButtons = value;
        });
    }
    get scrollButtons() {
        return this.nativeElement.scrollButtons;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-tab-bar element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineTabBarComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: TabBarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: TabBarComponent, selector: "forge-tab-bar", inputs: { disabled: ["disabled", "disabled", booleanAttribute], activeTab: ["activeTab", "activeTab", numberAttribute], vertical: ["vertical", "vertical", booleanAttribute], clustered: ["clustered", "clustered", booleanAttribute], stacked: ["stacked", "stacked", booleanAttribute], secondary: ["secondary", "secondary", booleanAttribute], inverted: ["inverted", "inverted", booleanAttribute], autoActivate: ["autoActivate", "autoActivate", booleanAttribute], scrollButtons: ["scrollButtons", "scrollButtons", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: TabBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-tab-bar',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], activeTab: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], vertical: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], clustered: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], stacked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], secondary: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], inverted: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoActivate: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], scrollButtons: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
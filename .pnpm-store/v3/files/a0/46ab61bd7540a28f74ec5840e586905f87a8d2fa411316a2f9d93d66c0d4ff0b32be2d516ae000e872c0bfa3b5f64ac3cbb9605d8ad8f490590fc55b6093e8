// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineSplitViewComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class SplitViewComponent {
    /** Whether child split view panels are laid out and resize horizontally or vertically. */
    set orientation(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.orientation = value;
        });
    }
    get orientation() {
        return this.nativeElement.orientation;
    }
    /** Whether child split view panels have resize interactions disabled or enabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether child split view panels can be closed via keyboard interaction. */
    set allowClose(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowClose = value;
        });
    }
    get allowClose() {
        return this.nativeElement.allowClose;
    }
    /** Whether child split view panels automatically close when they reach a size of 0. */
    set autoClose(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.autoClose = value;
        });
    }
    get autoClose() {
        return this.nativeElement.autoClose;
    }
    /** The size at which panels auto close. */
    set autoCloseThreshold(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.autoCloseThreshold = value;
        });
    }
    get autoCloseThreshold() {
        return this.nativeElement.autoCloseThreshold;
    }
    /** Arranges split view panels to avoid overlapping during animations. */
    layerSlottedPanels(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.layerSlottedPanels(...args));
    }
    /** Removes presentation data set during an animation. */
    unlayerSlottedPanels(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.unlayerSlottedPanels(...args));
    }
    /** Updates the provided characteristics of each slotted panel. */
    update(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.update(...args));
    }
    /** Resizes panels within the split view to avoid overflow. */
    refit(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.refit(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-split-view element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineSplitViewComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SplitViewComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: SplitViewComponent, selector: "forge-split-view", inputs: { orientation: "orientation", disabled: ["disabled", "disabled", booleanAttribute], allowClose: ["allowClose", "allowClose", booleanAttribute], autoClose: ["autoClose", "autoClose", booleanAttribute], autoCloseThreshold: ["autoCloseThreshold", "autoCloseThreshold", numberAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SplitViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-split-view',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { orientation: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], allowClose: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoClose: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoCloseThreshold: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
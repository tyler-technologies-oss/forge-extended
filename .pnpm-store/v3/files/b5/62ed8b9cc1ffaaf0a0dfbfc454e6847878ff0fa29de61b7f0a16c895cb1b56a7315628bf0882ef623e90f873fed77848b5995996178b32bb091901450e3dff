import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { ExpansionPanelComponent as ExpansionPanelComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class ExpansionPanelComponent {
    protected elementRef: ElementRef<ExpansionPanelComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-expansion-panel element. */
    readonly nativeElement: ExpansionPanelComponentCustomElement;
    /** Whether the panel is open or closed. */
    set open(value: ExpansionPanelComponentCustomElement['open']);
    get open(): ExpansionPanelComponentCustomElement['open'];
    /** The orientation of the panel. */
    set orientation(value: ExpansionPanelComponentCustomElement['orientation']);
    get orientation(): ExpansionPanelComponentCustomElement['orientation'];
    /** The type of animation to use when opening/closing the panel. */
    set animationType(value: ExpansionPanelComponentCustomElement['animationType']);
    get animationType(): ExpansionPanelComponentCustomElement['animationType'];
    /** Toggles the open state of the panel. */
    toggle(...args: Parameters<ExpansionPanelComponentCustomElement['toggle']>): ReturnType<ExpansionPanelComponentCustomElement['toggle']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<ExpansionPanelComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<ExpansionPanelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ExpansionPanelComponent, "forge-expansion-panel", never, { "open": { "alias": "open"; "required": false; }; "orientation": { "alias": "orientation"; "required": false; }; "animationType": { "alias": "animationType"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_open: unknown;
}

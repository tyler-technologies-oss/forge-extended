import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { StackComponent as StackComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class StackComponent {
    protected elementRef: ElementRef<StackComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-stack element. */
    readonly nativeElement: StackComponentCustomElement;
    /** Controls the direction of the stack. */
    set inline(value: StackComponentCustomElement['inline']);
    get inline(): StackComponentCustomElement['inline'];
    /** Controls if items wrap to a new line in inline mode */
    set wrap(value: StackComponentCustomElement['wrap']);
    get wrap(): StackComponentCustomElement['wrap'];
    /** Controls if items stretch and take up the maximum amount of space */
    set stretch(value: StackComponentCustomElement['stretch']);
    get stretch(): StackComponentCustomElement['stretch'];
    /** Controls the gap between the children within the stack */
    set gap(value: StackComponentCustomElement['gap']);
    get gap(): StackComponentCustomElement['gap'];
    /** Controls the align-items property of a row or column */
    set alignment(value: StackComponentCustomElement['alignment']);
    get alignment(): StackComponentCustomElement['alignment'];
    /** Controls the justify-content property of a row or column */
    set justify(value: StackComponentCustomElement['justify']);
    get justify(): StackComponentCustomElement['justify'];
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<StackComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<StackComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StackComponent, "forge-stack", never, { "inline": { "alias": "inline"; "required": false; }; "wrap": { "alias": "wrap"; "required": false; }; "stretch": { "alias": "stretch"; "required": false; }; "gap": { "alias": "gap"; "required": false; }; "alignment": { "alias": "alignment"; "required": false; }; "justify": { "alias": "justify"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_inline: unknown;
    static ngAcceptInputType_wrap: unknown;
    static ngAcceptInputType_stretch: unknown;
}

import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { ToastComponent as ToastComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class ToastComponent {
    protected elementRef: ElementRef<ToastComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-toast element. */
    readonly nativeElement: ToastComponentCustomElement;
    /** The open state. */
    set open(value: ToastComponentCustomElement['open']);
    get open(): ToastComponentCustomElement['open'];
    /** The duration in milliseconds that the toast is displayed. */
    set duration(value: ToastComponentCustomElement['duration']);
    get duration(): ToastComponentCustomElement['duration'];
    /** The placement of the toast. */
    set placement(value: ToastComponentCustomElement['placement']);
    get placement(): ToastComponentCustomElement['placement'];
    /** The text for the action button. This controls the visibility of the action button. */
    set actionText(value: ToastComponentCustomElement['actionText']);
    get actionText(): ToastComponentCustomElement['actionText'];
    /** Whether the toast is dismissible (displays a close button). */
    set dismissible(value: ToastComponentCustomElement['dismissible']);
    get dismissible(): ToastComponentCustomElement['dismissible'];
    /** The accessible label for the dismiss button. */
    set dismissLabel(value: ToastComponentCustomElement['dismissLabel']);
    get dismissLabel(): ToastComponentCustomElement['dismissLabel'];
    /** The theme of the toast. */
    set theme(value: ToastComponentCustomElement['theme']);
    get theme(): ToastComponentCustomElement['theme'];
    /** Shows the toast. */
    show(...args: Parameters<ToastComponentCustomElement['show']>): ReturnType<ToastComponentCustomElement['show']>;
    /** Hides the toast. */
    hide(...args: Parameters<ToastComponentCustomElement['hide']>): ReturnType<ToastComponentCustomElement['hide']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<ToastComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<ToastComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ToastComponent, "forge-toast", never, { "open": { "alias": "open"; "required": false; }; "duration": { "alias": "duration"; "required": false; }; "placement": { "alias": "placement"; "required": false; }; "actionText": { "alias": "actionText"; "required": false; }; "dismissible": { "alias": "dismissible"; "required": false; }; "dismissLabel": { "alias": "dismissLabel"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_open: unknown;
    static ngAcceptInputType_duration: unknown;
    static ngAcceptInputType_dismissible: unknown;
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineAccordionComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class AccordionComponent {
    /**
     * Gets/sets the selector to use for finding the child expansion panels. Defaults to searching the direct children for `<forge-expansion-panel>` elements.
     * Use this if you need to scope this accordion to a specific set of expansion panels, or your expansion panels are not direct children of the accordion.
     */
    set panelSelector(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.panelSelector = value;
        });
    }
    get panelSelector() {
        return this.nativeElement.panelSelector;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-accordion element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineAccordionComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AccordionComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.7", type: AccordionComponent, selector: "forge-accordion", inputs: { panelSelector: "panelSelector" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AccordionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-accordion',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { panelSelector: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9hY2NvcmRpb24vYWNjb3JkaW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pILE9BQU8sRUFBeUQsd0JBQXdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFbkgsT0FBTztBQU1QLE1BQU0sT0FBTyxrQkFBa0I7SUFLOUI7OztPQUdHO0lBQ0gsSUFDVyxhQUFhLENBQUMsS0FBdUQ7UUFDL0UsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsYUFBYTtRQUN2QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxZQUNDLGlCQUFvQyxFQUMxQixVQUF1RCxFQUN2RCxJQUFZO1FBRFosZUFBVSxHQUFWLFVBQVUsQ0FBNkM7UUFDdkQsU0FBSSxHQUFKLElBQUksQ0FBUTtRQXBCdkIsbUNBQW1DO1FBQ25CLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFxQjdELHdCQUF3QixFQUFFLENBQUM7UUFDM0IsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs4R0ExQlcsa0JBQWtCO2tHQUFsQixrQkFBa0IsbUdBRm5CLDJCQUEyQjs7MkZBRTFCLGtCQUFrQjtrQkFMOUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7b0lBV1csYUFBYTtzQkFEdkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjY29yZGlvbkNvbXBvbmVudCBhcyBBY2NvcmRpb25Db21wb25lbnRDdXN0b21FbGVtZW50LCBkZWZpbmVBY2NvcmRpb25Db21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2UtYWNjb3JkaW9uJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uQ29tcG9uZW50IHtcblxuXHQvKiogVGhlIGZvcmdlLWFjY29yZGlvbiBlbGVtZW50LiAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgbmF0aXZlRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG5cdC8qKlxuXHQgKiBHZXRzL3NldHMgdGhlIHNlbGVjdG9yIHRvIHVzZSBmb3IgZmluZGluZyB0aGUgY2hpbGQgZXhwYW5zaW9uIHBhbmVscy4gRGVmYXVsdHMgdG8gc2VhcmNoaW5nIHRoZSBkaXJlY3QgY2hpbGRyZW4gZm9yIGA8Zm9yZ2UtZXhwYW5zaW9uLXBhbmVsPmAgZWxlbWVudHMuXG5cdCAqIFVzZSB0aGlzIGlmIHlvdSBuZWVkIHRvIHNjb3BlIHRoaXMgYWNjb3JkaW9uIHRvIGEgc3BlY2lmaWMgc2V0IG9mIGV4cGFuc2lvbiBwYW5lbHMsIG9yIHlvdXIgZXhwYW5zaW9uIHBhbmVscyBhcmUgbm90IGRpcmVjdCBjaGlsZHJlbiBvZiB0aGUgYWNjb3JkaW9uLlxuXHQgKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCBwYW5lbFNlbGVjdG9yKHZhbHVlOiBBY2NvcmRpb25Db21wb25lbnRDdXN0b21FbGVtZW50WydwYW5lbFNlbGVjdG9yJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnBhbmVsU2VsZWN0b3IgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHBhbmVsU2VsZWN0b3IoKTogQWNjb3JkaW9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncGFuZWxTZWxlY3RvciddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnBhbmVsU2VsZWN0b3I7XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG5cdFx0cHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8QWNjb3JkaW9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVBY2NvcmRpb25Db21wb25lbnQoKTtcblx0XHRjaGFuZ2VEZXRlY3RvclJlZi5kZXRhY2goKTtcblx0fVxufVxuIl19
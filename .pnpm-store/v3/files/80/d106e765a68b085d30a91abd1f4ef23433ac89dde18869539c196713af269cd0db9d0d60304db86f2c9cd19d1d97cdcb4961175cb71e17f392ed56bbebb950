/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { ITimePickerOption, TimePickerParseCallback, TimePickerValidationCallback, TimePickerFormatCallback, TimePickerCoercionCallback, TimePickerPrepareMaskCallback } from './time-picker-constants';
import { BaseComponent, IBaseComponent } from '../core/base/base-component';
export interface ITimePickerComponent extends IBaseComponent {
    value: string | null | undefined;
    open: boolean;
    allowSeconds: boolean;
    masked: boolean;
    showMaskFormat: boolean;
    use24HourTime: boolean;
    allowInvalidTime: boolean;
    min: string | null | undefined;
    max: string | null | undefined;
    restrictedTimes: string[];
    startTime: string | null | undefined;
    step: number;
    allowInput: boolean;
    showNow: boolean;
    showHourOptions: boolean;
    customOptions: ITimePickerOption[];
    validationCallback: TimePickerValidationCallback;
    parseCallback: TimePickerParseCallback;
    formatCallback: TimePickerFormatCallback;
    coercionCallback: TimePickerCoercionCallback;
    prepareMaskCallback: TimePickerPrepareMaskCallback;
    disabled: boolean;
    popupClasses: string | string[];
    allowDropdown: boolean;
    popupTarget: string;
}
declare global {
    interface HTMLElementTagNameMap {
        'forge-time-picker': ITimePickerComponent;
    }
    interface HTMLElementEventMap {
        'forge-time-picker-open': CustomEvent<void>;
        'forge-time-picker-close': CustomEvent<void>;
        'forge-time-picker-input': Event;
        'forge-time-picker-change': CustomEvent<string | null>;
    }
}
/**
 * @tag forge-time-picker
 */
export declare class TimePickerComponent extends BaseComponent implements ITimePickerComponent {
    static get observedAttributes(): string[];
    private _core;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /**
     * The current value of the time picker.
     * @default undefined
     * @attribute
     */
    value: string | null | undefined;
    /**
     * Whether or not the time picker is open.
     * @default false
     * @attribute
     */
    open: boolean;
    /**
     * Whether or not to allow seconds in the time picker.
     * @default false
     * @attribute allow-seconds
     */
    allowSeconds: boolean;
    /**
     * Whether or not the time picker input should be masked.
     * @default false
     * @attribute
     */
    masked: boolean;
    /**
     * Whether or not to show the mask format in the input.
     * @default false
     * @attribute show-mask-format
     */
    showMaskFormat: boolean;
    /**
     * Whether or not to use 24-hour time.
     * @default false
     * @attribute use-24-hour-time
     */
    use24HourTime: boolean;
    /**
     * Whether or not to allow invalid times.
     * @default false
     * @attribute allow-invalid-time
     */
    allowInvalidTime: boolean;
    /**
     * The minimum time that can be selected.
     * @default undefined
     * @attribute
     */
    min: string | null | undefined;
    /**
     * The maximum time that can be selected.
     * @default undefined
     * @attribute
     */
    max: string | null | undefined;
    /**
     * An array of times that cannot be selected.
     * @default []
     * @attribute restricted-times
     */
    restrictedTimes: string[];
    /**
     * The time to start the time picker at.
     * @default undefined
     * @attribute start-time
     */
    startTime: string | null | undefined;
    /**
     * The step interval for the time picker.
     * @default undefined
     * @attribute
     */
    step: number;
    /**
     * Whether or not to allow manual input of the time.
     * @default false
     * @attribute allow-input
     */
    allowInput: boolean;
    /**
     * Whether or not to show a "Now" button.
     * @default false
     * @attribute show-now
     */
    showNow: boolean;
    /**
     * Whether or not to display hour options in dropdown.
     * @default false
     * @attribute show-hour-options
     */
    showHourOptions: boolean;
    /**
     * An array of custom time picker options.
     * @default []
     * @attribute custom-options
     */
    customOptions: ITimePickerOption[];
    /**
     * A callback function to validate the time.
     * @default undefined
     * @attribute validation-callback
     */
    validationCallback: TimePickerValidationCallback;
    /**
     * A callback function to parse the time.
     * @default undefined
     * @attribute parse-callback
     */
    parseCallback: TimePickerParseCallback;
    /**
     * A callback function to format the time.
     * @default undefined
     * @attribute format-callback
     */
    formatCallback: TimePickerFormatCallback;
    /**
     * A callback function to coerce the time.
     * @default undefined
     * @attribute coercion-callback
     */
    coercionCallback: TimePickerCoercionCallback;
    /**
     * A callback function to prepare the mask.
     * @default undefined
     * @attribute prepare-mask-callback
     */
    prepareMaskCallback: TimePickerPrepareMaskCallback;
    /**
     * Whether or not the time picker is disabled.
     * @default false
     * @attribute disabled
     */
    disabled: boolean;
    /**
     * The classes to apply to the time picker popup.
     * @default undefined
     * @attribute popup-classes
     */
    popupClasses: string | string[];
    /**
     * Whether or not to allow the time picker to be a dropdown.
     * @default false
     * @attribute allow-dropdown
     */
    allowDropdown: boolean;
    /**
     * The target element to attach the popup to.
     * @default undefined
     * @attribute popup-target
     */
    popupTarget: string;
}

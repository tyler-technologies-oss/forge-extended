// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineFocusIndicatorComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class FocusIndicatorComponent {
    /** The element to attach the focus indicator to. */
    set targetElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.targetElement = value;
        });
    }
    get targetElement() {
        return this.nativeElement.targetElement;
    }
    /** The id of the element to attach the focus indicator to. */
    set target(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.target = value;
        });
    }
    get target() {
        return this.nativeElement.target;
    }
    /** Controls whether the indicator is active. */
    set active(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.active = value;
        });
    }
    get active() {
        return this.nativeElement.active;
    }
    /** Controls whether the indicator renders inward. */
    set inward(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.inward = value;
        });
    }
    get inward() {
        return this.nativeElement.inward;
    }
    /** Controls whether the indicator renders circular. */
    set circular(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.circular = value;
        });
    }
    get circular() {
        return this.nativeElement.circular;
    }
    /** Controls whether the indicator renders when the target element matches `:focus` instead of `:focus-visible`. */
    set allowFocus(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowFocus = value;
        });
    }
    get allowFocus() {
        return this.nativeElement.allowFocus;
    }
    /** The focus mode to use. */
    set focusMode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.focusMode = value;
        });
    }
    get focusMode() {
        return this.nativeElement.focusMode;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-focus-indicator element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineFocusIndicatorComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: FocusIndicatorComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: FocusIndicatorComponent, selector: "forge-focus-indicator", inputs: { targetElement: "targetElement", target: "target", active: ["active", "active", booleanAttribute], inward: ["inward", "inward", booleanAttribute], circular: ["circular", "circular", booleanAttribute], allowFocus: ["allowFocus", "allowFocus", booleanAttribute], focusMode: "focusMode" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: FocusIndicatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-focus-indicator',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { targetElement: [{
                type: Input
            }], target: [{
                type: Input
            }], active: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], inward: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], circular: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], allowFocus: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], focusMode: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
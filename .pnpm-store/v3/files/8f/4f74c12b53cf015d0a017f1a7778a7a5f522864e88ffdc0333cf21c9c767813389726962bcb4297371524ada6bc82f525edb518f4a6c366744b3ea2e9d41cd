// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineLabelValueComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class LabelValueComponent {
    /** If true, the value will be displayed in an alternative emphasized style. */
    set empty(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.empty = value;
        });
    }
    get empty() {
        return this.nativeElement.empty;
    }
    /** If true, the value will be truncated with an ellipsis if it overflows its container. */
    set ellipsis(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.ellipsis = value;
        });
    }
    get ellipsis() {
        return this.nativeElement.ellipsis;
    }
    /** If true, the label and value will be displayed on the same line. */
    set inline(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.inline = value;
        });
    }
    get inline() {
        return this.nativeElement.inline;
    }
    /** Deprecated. Use `inline` instead. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-label-value element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineLabelValueComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: LabelValueComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: LabelValueComponent, selector: "forge-label-value", inputs: { empty: ["empty", "empty", booleanAttribute], ellipsis: ["ellipsis", "ellipsis", booleanAttribute], inline: ["inline", "inline", booleanAttribute], dense: ["dense", "dense", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: LabelValueComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-label-value',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { empty: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], ellipsis: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], inline: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwtdmFsdWUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL2xhYmVsLXZhbHVlL2xhYmVsLXZhbHVlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBMkQseUJBQXlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFdEgsT0FBTztBQU1QLE1BQU0sT0FBTyxtQkFBbUI7SUFLL0IsK0VBQStFO0lBQy9FLElBQ1csS0FBSyxDQUFDLEtBQWdEO1FBQ2hFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLEtBQUs7UUFDZixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFFRCwyRkFBMkY7SUFDM0YsSUFDVyxRQUFRLENBQUMsS0FBbUQ7UUFDdEUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsUUFBUTtRQUNsQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCx1RUFBdUU7SUFDdkUsSUFDVyxNQUFNLENBQUMsS0FBaUQ7UUFDbEUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsTUFBTTtRQUNoQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO0lBQ2xDLENBQUM7SUFFRCx3Q0FBd0M7SUFDeEMsSUFDVyxLQUFLLENBQUMsS0FBZ0Q7UUFDaEUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVELFlBQ0MsaUJBQW9DLEVBQzFCLFVBQXdELEVBQ3hELElBQVk7UUFEWixlQUFVLEdBQVYsVUFBVSxDQUE4QztRQUN4RCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBbER2QixxQ0FBcUM7UUFDckIsa0JBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQW1EN0QseUJBQXlCLEVBQUUsQ0FBQztRQUM1QixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QixDQUFDOzhHQXhEVyxtQkFBbUI7a0dBQW5CLG1CQUFtQixxRUFNWCxnQkFBZ0Isc0NBV2hCLGdCQUFnQixnQ0FXaEIsZ0JBQWdCLDZCQVdoQixnQkFBZ0IsNkJBekN6QiwyQkFBMkI7OzJGQUUxQixtQkFBbUI7a0JBTC9CLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDO29JQVFXLEtBQUs7c0JBRGYsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsUUFBUTtzQkFEbEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsTUFBTTtzQkFEaEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsS0FBSztzQkFEZixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBjb2RlIHdhcyBnZW5lcmF0ZWQgYnkgdGhlIGFuZ3VsYXItY3VzdG9tLWVsZW1lbnRzLXNjaGVtYXRpYy4gIEFueSBjaGFuZ2VzIHdpbGwgYmUgb3ZlcndyaXR0ZW4gbmV4dCB0aW1lIGl0IHJ1bnMuXG5pbXBvcnQgeyBib29sZWFuQXR0cmlidXRlLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGFiZWxWYWx1ZUNvbXBvbmVudCBhcyBMYWJlbFZhbHVlQ29tcG9uZW50Q3VzdG9tRWxlbWVudCwgZGVmaW5lTGFiZWxWYWx1ZUNvbXBvbmVudCB9IGZyb20gJ0B0eWxlcnRlY2gvZm9yZ2UnO1xuXG4vKiogICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JnZS1sYWJlbC12YWx1ZScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIExhYmVsVmFsdWVDb21wb25lbnQge1xuXG5cdC8qKiBUaGUgZm9yZ2UtbGFiZWwtdmFsdWUgZWxlbWVudC4gKi9cblx0cHVibGljIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuXHQvKiogSWYgdHJ1ZSwgdGhlIHZhbHVlIHdpbGwgYmUgZGlzcGxheWVkIGluIGFuIGFsdGVybmF0aXZlIGVtcGhhc2l6ZWQgc3R5bGUuICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IGVtcHR5KHZhbHVlOiBMYWJlbFZhbHVlQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZW1wdHknXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQuZW1wdHkgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGVtcHR5KCk6IExhYmVsVmFsdWVDb21wb25lbnRDdXN0b21FbGVtZW50WydlbXB0eSddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmVtcHR5O1xuXHR9XG5cblx0LyoqIElmIHRydWUsIHRoZSB2YWx1ZSB3aWxsIGJlIHRydW5jYXRlZCB3aXRoIGFuIGVsbGlwc2lzIGlmIGl0IG92ZXJmbG93cyBpdHMgY29udGFpbmVyLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBlbGxpcHNpcyh2YWx1ZTogTGFiZWxWYWx1ZUNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2VsbGlwc2lzJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmVsbGlwc2lzID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBlbGxpcHNpcygpOiBMYWJlbFZhbHVlQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZWxsaXBzaXMnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5lbGxpcHNpcztcblx0fVxuXG5cdC8qKiBJZiB0cnVlLCB0aGUgbGFiZWwgYW5kIHZhbHVlIHdpbGwgYmUgZGlzcGxheWVkIG9uIHRoZSBzYW1lIGxpbmUuICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IGlubGluZSh2YWx1ZTogTGFiZWxWYWx1ZUNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2lubGluZSddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5pbmxpbmUgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGlubGluZSgpOiBMYWJlbFZhbHVlQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaW5saW5lJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuaW5saW5lO1xuXHR9XG5cblx0LyoqIERlcHJlY2F0ZWQuIFVzZSBgaW5saW5lYCBpbnN0ZWFkLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBkZW5zZSh2YWx1ZTogTGFiZWxWYWx1ZUNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2RlbnNlJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmRlbnNlID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBkZW5zZSgpOiBMYWJlbFZhbHVlQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZGVuc2UnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5kZW5zZTtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxMYWJlbFZhbHVlQ29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVMYWJlbFZhbHVlQ29tcG9uZW50KCk7XG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWYuZGV0YWNoKCk7XG5cdH1cbn1cbiJdfQ==
// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineOpenIconComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class OpenIconComponent {
    /** Whether the icon is open or closed. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** The orientation of the rotation. */
    set orientation(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.orientation = value;
        });
    }
    get orientation() {
        return this.nativeElement.orientation;
    }
    /** The rotation amount. */
    set rotation(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.rotation = value;
        });
    }
    get rotation() {
        return this.nativeElement.rotation;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-open-icon element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineOpenIconComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: OpenIconComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: OpenIconComponent, selector: "forge-open-icon", inputs: { open: ["open", "open", booleanAttribute], orientation: "orientation", rotation: "rotation" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: OpenIconComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-open-icon',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], orientation: [{
                type: Input
            }], rotation: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi1pY29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9vcGVuLWljb24vb3Blbi1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBdUQsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFaEgsT0FBTztBQU1QLE1BQU0sT0FBTyxpQkFBaUI7SUFLN0IsMENBQTBDO0lBQzFDLElBQ1csSUFBSSxDQUFDLEtBQTZDO1FBQzVELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLElBQUk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCx1Q0FBdUM7SUFDdkMsSUFDVyxXQUFXLENBQUMsS0FBb0Q7UUFDMUUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsV0FBVztRQUNyQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCwyQkFBMkI7SUFDM0IsSUFDVyxRQUFRLENBQUMsS0FBaUQ7UUFDcEUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsUUFBUTtRQUNsQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxZQUNDLGlCQUFvQyxFQUMxQixVQUFzRCxFQUN0RCxJQUFZO1FBRFosZUFBVSxHQUFWLFVBQVUsQ0FBNEM7UUFDdEQsU0FBSSxHQUFKLElBQUksQ0FBUTtRQXZDdkIsbUNBQW1DO1FBQ25CLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUF3QzdELHVCQUF1QixFQUFFLENBQUM7UUFDMUIsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs4R0E3Q1csaUJBQWlCO2tHQUFqQixpQkFBaUIsZ0VBTVQsZ0JBQWdCLCtFQVJ6QiwyQkFBMkI7OzJGQUUxQixpQkFBaUI7a0JBTDdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDO29JQVFXLElBQUk7c0JBRGQsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFZM0IsV0FBVztzQkFEckIsS0FBSztnQkFZSyxRQUFRO3NCQURsQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBjb2RlIHdhcyBnZW5lcmF0ZWQgYnkgdGhlIGFuZ3VsYXItY3VzdG9tLWVsZW1lbnRzLXNjaGVtYXRpYy4gIEFueSBjaGFuZ2VzIHdpbGwgYmUgb3ZlcndyaXR0ZW4gbmV4dCB0aW1lIGl0IHJ1bnMuXG5pbXBvcnQgeyBib29sZWFuQXR0cmlidXRlLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3Blbkljb25Db21wb25lbnQgYXMgT3Blbkljb25Db21wb25lbnRDdXN0b21FbGVtZW50LCBkZWZpbmVPcGVuSWNvbkNvbXBvbmVudCB9IGZyb20gJ0B0eWxlcnRlY2gvZm9yZ2UnO1xuXG4vKiogICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JnZS1vcGVuLWljb24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBPcGVuSWNvbkNvbXBvbmVudCB7XG5cblx0LyoqIFRoZSBmb3JnZS1vcGVuLWljb24gZWxlbWVudC4gKi9cblx0cHVibGljIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuXHQvKiogV2hldGhlciB0aGUgaWNvbiBpcyBvcGVuIG9yIGNsb3NlZC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgb3Blbih2YWx1ZTogT3Blbkljb25Db21wb25lbnRDdXN0b21FbGVtZW50WydvcGVuJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50Lm9wZW4gPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IG9wZW4oKTogT3Blbkljb25Db21wb25lbnRDdXN0b21FbGVtZW50WydvcGVuJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQub3Blbjtcblx0fVxuXG5cdC8qKiBUaGUgb3JpZW50YXRpb24gb2YgdGhlIHJvdGF0aW9uLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IG9yaWVudGF0aW9uKHZhbHVlOiBPcGVuSWNvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ29yaWVudGF0aW9uJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50Lm9yaWVudGF0aW9uID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBvcmllbnRhdGlvbigpOiBPcGVuSWNvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ29yaWVudGF0aW9uJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQub3JpZW50YXRpb247XG5cdH1cblxuXHQvKiogVGhlIHJvdGF0aW9uIGFtb3VudC4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCByb3RhdGlvbih2YWx1ZTogT3Blbkljb25Db21wb25lbnRDdXN0b21FbGVtZW50Wydyb3RhdGlvbiddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5yb3RhdGlvbiA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgcm90YXRpb24oKTogT3Blbkljb25Db21wb25lbnRDdXN0b21FbGVtZW50Wydyb3RhdGlvbiddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnJvdGF0aW9uO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPE9wZW5JY29uQ29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVPcGVuSWNvbkNvbXBvbmVudCgpO1xuXHRcdGNoYW5nZURldGVjdG9yUmVmLmRldGFjaCgpO1xuXHR9XG59XG4iXX0=
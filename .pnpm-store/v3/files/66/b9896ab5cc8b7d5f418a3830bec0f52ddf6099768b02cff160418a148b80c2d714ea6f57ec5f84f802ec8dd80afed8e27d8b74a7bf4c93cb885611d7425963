// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineLabelComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class LabelComponent {
    /** The id of the associated element. */
    set for(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.for = value;
        });
    }
    get for() {
        return this.nativeElement.for;
    }
    /** The associated element. */
    set forElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.forElement = value;
        });
    }
    get forElement() {
        return this.nativeElement.forElement;
    }
    /** The element that a click should be simulated on. If not defined clicks act on the associated element. */
    set clickTarget(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.clickTarget = value;
        });
    }
    get clickTarget() {
        return this.nativeElement.clickTarget;
    }
    /** Propagates changes in the label's text content to the associated element. */
    set dynamic(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dynamic = value;
        });
    }
    get dynamic() {
        return this.nativeElement.dynamic;
    }
    /** Removes click handling from the label. */
    set nonInteractive(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.nonInteractive = value;
        });
    }
    get nonInteractive() {
        return this.nativeElement.nonInteractive;
    }
    /** Whether or not the label should be associated with an ancestor element. */
    set legend(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.legend = value;
        });
    }
    get legend() {
        return this.nativeElement.legend;
    }
    /** Updates the targeted element with the label's current text content. */
    update(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.update(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-label element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineLabelComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: LabelComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: LabelComponent, selector: "forge-label", inputs: { for: "for", forElement: "forElement", clickTarget: "clickTarget", dynamic: ["dynamic", "dynamic", booleanAttribute], nonInteractive: ["nonInteractive", "nonInteractive", booleanAttribute], legend: ["legend", "legend", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: LabelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-label',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { for: [{
                type: Input
            }], forElement: [{
                type: Input
            }], clickTarget: [{
                type: Input
            }], dynamic: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], nonInteractive: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], legend: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
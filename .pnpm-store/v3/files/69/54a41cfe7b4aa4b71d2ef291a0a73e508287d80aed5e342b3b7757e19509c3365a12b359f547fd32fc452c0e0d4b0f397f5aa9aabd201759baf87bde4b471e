// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineOptionComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class OptionComponent {
    /** Gets/sets the value of this option. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Gets/sets the label of this option. */
    set label(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.label = value;
        });
    }
    get label() {
        return this.nativeElement.label;
    }
    /** Gets/sets the secondary label of this option. */
    set secondaryLabel(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.secondaryLabel = value;
        });
    }
    get secondaryLabel() {
        return this.nativeElement.secondaryLabel;
    }
    /** Gets/sets the disabled status of this option. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Gets/sets the whether this option is a divider. */
    set divider(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.divider = value;
        });
    }
    get divider() {
        return this.nativeElement.divider;
    }
    /** Gets/sets the classes of this option. */
    set optionClass(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optionClass = value;
        });
    }
    get optionClass() {
        return this.nativeElement.optionClass;
    }
    /** Gets/sets the leading icon of this option. */
    set leadingIcon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.leadingIcon = value;
        });
    }
    get leadingIcon() {
        return this.nativeElement.leadingIcon;
    }
    /** Gets/sets the leading icon class of this option. */
    set leadingIconClass(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.leadingIconClass = value;
        });
    }
    get leadingIconClass() {
        return this.nativeElement.leadingIconClass;
    }
    /** Gets/sets the leading icon type of this option. */
    set leadingIconType(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.leadingIconType = value;
        });
    }
    get leadingIconType() {
        return this.nativeElement.leadingIconType;
    }
    /** Gets/sets properties on leading icon component. */
    set leadingIconComponentProps(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.leadingIconComponentProps = value;
        });
    }
    get leadingIconComponentProps() {
        return this.nativeElement.leadingIconComponentProps;
    }
    /** Gets/sets the trailing icon of this option. */
    set trailingIcon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.trailingIcon = value;
        });
    }
    get trailingIcon() {
        return this.nativeElement.trailingIcon;
    }
    /** Gets/sets the trailing icon class of this option. */
    set trailingIconClass(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.trailingIconClass = value;
        });
    }
    get trailingIconClass() {
        return this.nativeElement.trailingIconClass;
    }
    /** Gets/sets the trailing icon type of this option. */
    set trailingIconType(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.trailingIconType = value;
        });
    }
    get trailingIconType() {
        return this.nativeElement.trailingIconType;
    }
    /** Gets/sets properties on trailing icon component. */
    set trailingIconComponentProps(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.trailingIconComponentProps = value;
        });
    }
    get trailingIconComponentProps() {
        return this.nativeElement.trailingIconComponentProps;
    }
    /** Gets/sets the leading builder of this option. */
    set leadingBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.leadingBuilder = value;
        });
    }
    get leadingBuilder() {
        return this.nativeElement.leadingBuilder;
    }
    /** Gets/sets the trailing builder of this option. */
    set trailingBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.trailingBuilder = value;
        });
    }
    get trailingBuilder() {
        return this.nativeElement.trailingBuilder;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-option element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineOptionComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: OptionComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: OptionComponent, selector: "forge-option", inputs: { value: "value", label: "label", secondaryLabel: "secondaryLabel", disabled: ["disabled", "disabled", booleanAttribute], divider: ["divider", "divider", booleanAttribute], optionClass: "optionClass", leadingIcon: "leadingIcon", leadingIconClass: "leadingIconClass", leadingIconType: "leadingIconType", leadingIconComponentProps: "leadingIconComponentProps", trailingIcon: "trailingIcon", trailingIconClass: "trailingIconClass", trailingIconType: "trailingIconType", trailingIconComponentProps: "trailingIconComponentProps", leadingBuilder: "leadingBuilder", trailingBuilder: "trailingBuilder" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: OptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-option',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { value: [{
                type: Input
            }], label: [{
                type: Input
            }], secondaryLabel: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], divider: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], optionClass: [{
                type: Input
            }], leadingIcon: [{
                type: Input
            }], leadingIconClass: [{
                type: Input
            }], leadingIconType: [{
                type: Input
            }], leadingIconComponentProps: [{
                type: Input
            }], trailingIcon: [{
                type: Input
            }], trailingIconClass: [{
                type: Input
            }], trailingIconType: [{
                type: Input
            }], trailingIconComponentProps: [{
                type: Input
            }], leadingBuilder: [{
                type: Input
            }], trailingBuilder: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
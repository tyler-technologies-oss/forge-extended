// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineBackdropComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class BackdropComponent {
    /** Whether the backdrop is visible. */
    set visible(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.visible = value;
        });
    }
    get visible() {
        return this.nativeElement.visible;
    }
    /** Whether the backdrop uses "fixed" or "relative" positioning. */
    set fixed(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fixed = value;
        });
    }
    get fixed() {
        return this.nativeElement.fixed;
    }
    /** Immediately shows the backdrop by setting the `visibility` to `true` without animations. */
    show(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.show(...args));
    }
    /** Immediately hides the backdrop by setting the `visibility` to `false` without animations. */
    hide(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.hide(...args));
    }
    /** Sets the `visibility` to `true` and animates in. */
    fadeIn(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.fadeIn(...args));
    }
    /** Sets the `visibility` to `false` and animates out. */
    fadeOut(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.fadeOut(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-backdrop element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineBackdropComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: BackdropComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: BackdropComponent, selector: "forge-backdrop", inputs: { visible: ["visible", "visible", booleanAttribute], fixed: ["fixed", "fixed", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: BackdropComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-backdrop',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { visible: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], fixed: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2Ryb3AuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL2JhY2tkcm9wL2JhY2tkcm9wLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBdUQsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFaEgsT0FBTztBQU1QLE1BQU0sT0FBTyxpQkFBaUI7SUFLN0IsdUNBQXVDO0lBQ3ZDLElBQ1csT0FBTyxDQUFDLEtBQWdEO1FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLE9BQU87UUFDakIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztJQUNuQyxDQUFDO0lBRUQsbUVBQW1FO0lBQ25FLElBQ1csS0FBSyxDQUFDLEtBQThDO1FBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLEtBQUs7UUFDZixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFFRCwrRkFBK0Y7SUFDeEYsSUFBSSxDQUFDLEdBQUcsSUFBd0Q7UUFDdEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsZ0dBQWdHO0lBQ3pGLElBQUksQ0FBQyxHQUFHLElBQXdEO1FBQ3RFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELHVEQUF1RDtJQUNoRCxNQUFNLENBQUMsR0FBRyxJQUEwRDtRQUMxRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCx5REFBeUQ7SUFDbEQsT0FBTyxDQUFDLEdBQUcsSUFBMkQ7UUFDNUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQsWUFDQyxpQkFBb0MsRUFDMUIsVUFBc0QsRUFDdEQsSUFBWTtRQURaLGVBQVUsR0FBVixVQUFVLENBQTRDO1FBQ3RELFNBQUksR0FBSixJQUFJLENBQVE7UUFoRHZCLGtDQUFrQztRQUNsQixrQkFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBaUQ3RCx1QkFBdUIsRUFBRSxDQUFDO1FBQzFCLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7OEdBdERXLGlCQUFpQjtrR0FBakIsaUJBQWlCLHdFQU1ULGdCQUFnQiw2QkFXaEIsZ0JBQWdCLDZCQW5CekIsMkJBQTJCOzsyRkFFMUIsaUJBQWlCO2tCQUw3QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0QztvSUFRVyxPQUFPO3NCQURqQixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQVkzQixLQUFLO3NCQURmLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGNvZGUgd2FzIGdlbmVyYXRlZCBieSB0aGUgYW5ndWxhci1jdXN0b20tZWxlbWVudHMtc2NoZW1hdGljLiAgQW55IGNoYW5nZXMgd2lsbCBiZSBvdmVyd3JpdHRlbiBuZXh0IHRpbWUgaXQgcnVucy5cbmltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBOZ1pvbmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYWNrZHJvcENvbXBvbmVudCBhcyBCYWNrZHJvcENvbXBvbmVudEN1c3RvbUVsZW1lbnQsIGRlZmluZUJhY2tkcm9wQ29tcG9uZW50IH0gZnJvbSAnQHR5bGVydGVjaC9mb3JnZSc7XG5cbi8qKiAgKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZvcmdlLWJhY2tkcm9wJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgQmFja2Ryb3BDb21wb25lbnQge1xuXG5cdC8qKiBUaGUgZm9yZ2UtYmFja2Ryb3AgZWxlbWVudC4gKi9cblx0cHVibGljIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuXHQvKiogV2hldGhlciB0aGUgYmFja2Ryb3AgaXMgdmlzaWJsZS4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgdmlzaWJsZSh2YWx1ZTogQmFja2Ryb3BDb21wb25lbnRDdXN0b21FbGVtZW50Wyd2aXNpYmxlJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnZpc2libGUgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHZpc2libGUoKTogQmFja2Ryb3BDb21wb25lbnRDdXN0b21FbGVtZW50Wyd2aXNpYmxlJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQudmlzaWJsZTtcblx0fVxuXG5cdC8qKiBXaGV0aGVyIHRoZSBiYWNrZHJvcCB1c2VzIFwiZml4ZWRcIiBvciBcInJlbGF0aXZlXCIgcG9zaXRpb25pbmcuICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IGZpeGVkKHZhbHVlOiBCYWNrZHJvcENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2ZpeGVkJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmZpeGVkID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBmaXhlZCgpOiBCYWNrZHJvcENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2ZpeGVkJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuZml4ZWQ7XG5cdH1cblxuXHQvKiogSW1tZWRpYXRlbHkgc2hvd3MgdGhlIGJhY2tkcm9wIGJ5IHNldHRpbmcgdGhlIGB2aXNpYmlsaXR5YCB0byBgdHJ1ZWAgd2l0aG91dCBhbmltYXRpb25zLiAqL1xuXHRwdWJsaWMgc2hvdyguLi5hcmdzOiBQYXJhbWV0ZXJzPEJhY2tkcm9wQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnc2hvdyddPik6IFJldHVyblR5cGU8QmFja2Ryb3BDb21wb25lbnRDdXN0b21FbGVtZW50WydzaG93J10+IHtcblx0XHRyZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMubmF0aXZlRWxlbWVudC5zaG93KC4uLmFyZ3MpKTtcblx0fVxuXG5cdC8qKiBJbW1lZGlhdGVseSBoaWRlcyB0aGUgYmFja2Ryb3AgYnkgc2V0dGluZyB0aGUgYHZpc2liaWxpdHlgIHRvIGBmYWxzZWAgd2l0aG91dCBhbmltYXRpb25zLiAqL1xuXHRwdWJsaWMgaGlkZSguLi5hcmdzOiBQYXJhbWV0ZXJzPEJhY2tkcm9wQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaGlkZSddPik6IFJldHVyblR5cGU8QmFja2Ryb3BDb21wb25lbnRDdXN0b21FbGVtZW50WydoaWRlJ10+IHtcblx0XHRyZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMubmF0aXZlRWxlbWVudC5oaWRlKC4uLmFyZ3MpKTtcblx0fVxuXG5cdC8qKiBTZXRzIHRoZSBgdmlzaWJpbGl0eWAgdG8gYHRydWVgIGFuZCBhbmltYXRlcyBpbi4gKi9cblx0cHVibGljIGZhZGVJbiguLi5hcmdzOiBQYXJhbWV0ZXJzPEJhY2tkcm9wQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZmFkZUluJ10+KTogUmV0dXJuVHlwZTxCYWNrZHJvcENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2ZhZGVJbiddPiB7XG5cdFx0cmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLm5hdGl2ZUVsZW1lbnQuZmFkZUluKC4uLmFyZ3MpKTtcblx0fVxuXG5cdC8qKiBTZXRzIHRoZSBgdmlzaWJpbGl0eWAgdG8gYGZhbHNlYCBhbmQgYW5pbWF0ZXMgb3V0LiAqL1xuXHRwdWJsaWMgZmFkZU91dCguLi5hcmdzOiBQYXJhbWV0ZXJzPEJhY2tkcm9wQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZmFkZU91dCddPik6IFJldHVyblR5cGU8QmFja2Ryb3BDb21wb25lbnRDdXN0b21FbGVtZW50WydmYWRlT3V0J10+IHtcblx0XHRyZXR1cm4gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMubmF0aXZlRWxlbWVudC5mYWRlT3V0KC4uLmFyZ3MpKTtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxCYWNrZHJvcENvbXBvbmVudEN1c3RvbUVsZW1lbnQ+LFxuXHRcdHByb3RlY3RlZCB6b25lOiBOZ1pvbmVcblx0KSB7XG5cdFx0ZGVmaW5lQmFja2Ryb3BDb21wb25lbnQoKTtcblx0XHRjaGFuZ2VEZXRlY3RvclJlZi5kZXRhY2goKTtcblx0fVxufVxuIl19
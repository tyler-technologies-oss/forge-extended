/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { DayOfWeek } from '../../calendar/calendar-constants';
import { BaseComponent, IBaseComponent } from '../../core/base/base-component';
import { DatePickerFormatCallback, DatePickerParseCallback, DatePickerPrepareMaskCallback, DatePickerValueMode, IDatePickerCalendarDropdownText } from './base-date-picker-constants';
import { BaseDatePickerCore } from './base-date-picker-core';
import { IBaseDatePickerAdapter } from './base-date-picker-adapter';
export interface IBaseDatePickerComponent<TValue> extends IBaseComponent {
    value: TValue | null | undefined;
    min: Date | string | null | undefined;
    max: Date | string | null | undefined;
    disabledDates: Date | Date[] | null | undefined;
    open: boolean;
    parseCallback: DatePickerParseCallback;
    formatCallback: DatePickerFormatCallback;
    prepareMaskCallback: DatePickerPrepareMaskCallback;
    disableDayCallback: (date: Date) => boolean;
    popupClasses: string | string[];
    disabled: boolean;
    masked: boolean;
    maskFormat: string;
    showMaskFormat: boolean;
    valueMode: DatePickerValueMode;
    notifyInputValueChanges: boolean;
    allowInvalidDate: boolean;
    showToday: boolean;
    showClear: boolean;
    disabledDaysOfWeek: DayOfWeek[];
    yearRange: string;
    locale: string | undefined;
    calendarText: IDatePickerCalendarDropdownText;
}
/**
 * @property {boolean} [allowInvalidDate=false] - Whether to allow an invalid date to be input. When true, the date picker will not clear out the value of the input if the date was invalid (i.e. could not be parsed).
 * @property {DatePickerCalendarDropdownText} calendarText - Customized strings to display in the calendar dropdown UI.
 * @property {boolean} [disabled=false] - Whether the date picker is disabled or not.
 * @property {(date: Date) => boolean} disableDayCallback - The callback to use for testing whether a specific date should be disabled or not.
 * @property {Date | Date[] | null | undefined} disabledDates - The dates that are restricted from being selected.
 * @property {DayOfWeek[]} disabledDaysOfWeek - The days of the week to disable from selection.
 * @property {DatePickerFormatCallback} formatCallback - The callback to use for formatting `Date` value to a custom string format.
 * @property {string | undefined} locale - The locale to use.
 * @property {boolean} [masked=false] - Whether the input mask is applied or not.
 * @property {string} maskFormat - The mask format that displayed in the input. Default is `MM/DD/YYYY`.
 * @property {Date | string | null | undefined} max - The maximum date the calendar will allow.
 * @property {Date | string | null | undefined} min - The minimum date the calendar will allow.
 * @property {boolean} [notifyInputValueChanges=false] - Whether the native input will be notified of value changes via the `input` and `change` events.
 * @property {boolean} [open=false] - Whether the calendar dropdown is open.
 * @property {DatePickerParseCallback} parseCallback - The callback to use for parsing a date value string to a `Date` object.
 * @property {string | string[]} popupClasses - The CSS classes that are applied to the popup element.
 * @property {DatePickerPrepareMaskCallback} prepareMaskCallback - The callback to use when altering default mask entry.
 * @property {boolean} [showClear=false] - Whether the clear button is visible in the popup.
 * @property {boolean} [showMaskFormat=false] - Whether the mask format is displayed in the input or not. Only applies if `masked` is `true`.
 * @property {boolean} [showToday=false] - Whether the today button is visible in the popup.
 * @property {TValue} value - The value of the date picker.
 * @property {DatePickerValueMode} valueMode - The type for the `value` property and `forge-date-picker-change` event.
 * @property {string} yearRange - The year range.
 *
 * @attribute {boolean} [allow-invalid-date=false] - Whether to allow an invalid date to be input. When true, the date picker will not clear out the value of the input if the date was invalid (i.e. could not be parsed).
 * @attribute {DatePickerCalendarDropdownText} [calendar-text] - Customized strings to display in the calendar dropdown UI.
 * @attribute {boolean} [disabled=false] - Whether the date picker is disabled or not.
 * @attribute {string} [disabled-days-of-week] - The days of the week to disable from selection.
 * @attribute {string} [locale] - The locale to use.
 * @attribute {boolean} [masked=false] - Whether the input mask is applied or not.
 * @attribute {string} [mask-format=MM/DD/YYYY] - The mask format that displayed in the input.
 * @attribute {string} [max] - The maximum date the calendar will allow.
 * @attribute {string} [min] - The minimum date the calendar will allow.
 * @attribute {boolean} [open=false] - Whether the calendar dropdown is open.
 * @attribute {string} [popup-classes] - The CSS classes that are applied to the popup element.
 * @attribute {boolean} [show-clear=false] - Whether the clear button is visible in the popup.
 * @attribute {boolean} [show-mask-format=false] - Whether the mask format is displayed in the input or not. Only applies if `masked` is `true`.
 * @attribute {boolean} [show-today=false] - Whether the today button is visible in the popup.
 * @attribute {DatePickerValueMode} [value-mode=string] - The type for the `value` property and `forge-date-picker-change` event.
 * @attribute {string} [year-range] - The year range.
 */
export declare abstract class BaseDatePickerComponent<TPublicValue, TPrivateValue, TCore extends BaseDatePickerCore<IBaseDatePickerAdapter, TPublicValue, TPrivateValue>> extends BaseComponent implements IBaseDatePickerComponent<TPublicValue> {
    protected _core: TCore;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    value: TPublicValue | null | undefined;
    min: Date | string | null | undefined;
    max: Date | string | null | undefined;
    disabledDates: Date | Date[] | null | undefined;
    open: boolean;
    popupClasses: string | string[];
    disabled: boolean;
    masked: boolean;
    maskFormat: string;
    showMaskFormat: boolean;
    valueMode: DatePickerValueMode;
    notifyInputValueChanges: boolean;
    allowInvalidDate: boolean;
    showToday: boolean;
    showClear: boolean;
    parseCallback: DatePickerParseCallback;
    formatCallback: DatePickerFormatCallback;
    prepareMaskCallback: DatePickerPrepareMaskCallback;
    disabledDaysOfWeek: DayOfWeek[];
    disableDayCallback: (date: Date) => boolean;
    yearRange: string;
    locale: string | undefined;
    calendarText: IDatePickerCalendarDropdownText;
}

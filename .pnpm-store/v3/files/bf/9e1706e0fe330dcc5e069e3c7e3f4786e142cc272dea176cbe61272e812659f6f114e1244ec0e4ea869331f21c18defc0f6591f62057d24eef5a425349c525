// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineOverlayComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class OverlayComponent {
    /** The element to use as the arrow for the overlay. */
    set arrowElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.arrowElement = value;
        });
    }
    get arrowElement() {
        return this.nativeElement.arrowElement;
    }
    /** The offset to apply to the arrow element. */
    set arrowElementOffset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.arrowElementOffset = value;
        });
    }
    get arrowElementOffset() {
        return this.nativeElement.arrowElementOffset;
    }
    /** Whether or not the overlay is open. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Whether or not the overlay should be rendered inline (not in the :top-layer). */
    set inline(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.inline = value;
        });
    }
    get inline() {
        return this.nativeElement.inline;
    }
    /** The element to anchor the overlay to. */
    set anchorElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.anchorElement = value;
        });
    }
    get anchorElement() {
        return this.nativeElement.anchorElement;
    }
    /** The id of the element to anchor the overlay to. */
    set anchor(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.anchor = value;
        });
    }
    get anchor() {
        return this.nativeElement.anchor;
    }
    /** Whether or not the overlay should be rendered without an anchor (centered on page by default). */
    set noAnchor(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.noAnchor = value;
        });
    }
    get noAnchor() {
        return this.nativeElement.noAnchor;
    }
    /** The placement of the overlay relative to the anchor element. */
    set placement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.placement = value;
        });
    }
    get placement() {
        return this.nativeElement.placement;
    }
    /** The positioning strategy to use for the overlay. Valid values are `'fixed'` and `'absolute'`. */
    set positionStrategy(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.positionStrategy = value;
        });
    }
    get positionStrategy() {
        return this.nativeElement.positionStrategy;
    }
    /** The offset to apply to the overlay position relative to the anchor element. */
    set offset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.offset = value;
        });
    }
    get offset() {
        return this.nativeElement.offset;
    }
    /** Whether or not the anchor element should shift along the side of the overlay when scrolling. */
    set shift(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.shift = value;
        });
    }
    get shift() {
        return this.nativeElement.shift;
    }
    /** Whether or not the overlay should hide itself when the anchor element is out of view. */
    set hide(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.hide = value;
        });
    }
    get hide() {
        return this.nativeElement.hide;
    }
    /** Whether or not the overlay handles light dismiss itself or not. */
    set persistent(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.persistent = value;
        });
    }
    get persistent() {
        return this.nativeElement.persistent;
    }
    /** Whether or not the overlay should flip to the opposite placement when not enough room. */
    set flip(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.flip = value;
        });
    }
    get flip() {
        return this.nativeElement.flip;
    }
    /** The id of the element to use as the boundary for the overlay. */
    set boundary(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.boundary = value;
        });
    }
    get boundary() {
        return this.nativeElement.boundary;
    }
    /** The element to use as the boundary for the overlay. */
    set boundaryElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.boundaryElement = value;
        });
    }
    get boundaryElement() {
        return this.nativeElement.boundaryElement;
    }
    /** The fallback placements to use when the overlay cannot be placed in the desired placement. */
    set fallbackPlacements(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fallbackPlacements = value;
        });
    }
    get fallbackPlacements() {
        return this.nativeElement.fallbackPlacements;
    }
    position(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.position(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-overlay element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineOverlayComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: OverlayComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: OverlayComponent, selector: "forge-overlay", inputs: { arrowElement: "arrowElement", arrowElementOffset: ["arrowElementOffset", "arrowElementOffset", numberAttribute], open: ["open", "open", booleanAttribute], inline: ["inline", "inline", booleanAttribute], anchorElement: "anchorElement", anchor: "anchor", noAnchor: ["noAnchor", "noAnchor", booleanAttribute], placement: "placement", positionStrategy: "positionStrategy", offset: "offset", shift: ["shift", "shift", booleanAttribute], hide: "hide", persistent: ["persistent", "persistent", booleanAttribute], flip: "flip", boundary: "boundary", boundaryElement: "boundaryElement", fallbackPlacements: "fallbackPlacements" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: OverlayComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-overlay',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { arrowElement: [{
                type: Input
            }], arrowElementOffset: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], inline: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], anchorElement: [{
                type: Input
            }], anchor: [{
                type: Input
            }], noAnchor: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], placement: [{
                type: Input
            }], positionStrategy: [{
                type: Input
            }], offset: [{
                type: Input
            }], shift: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hide: [{
                type: Input
            }], persistent: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], flip: [{
                type: Input
            }], boundary: [{
                type: Input
            }], boundaryElement: [{
                type: Input
            }], fallbackPlacements: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
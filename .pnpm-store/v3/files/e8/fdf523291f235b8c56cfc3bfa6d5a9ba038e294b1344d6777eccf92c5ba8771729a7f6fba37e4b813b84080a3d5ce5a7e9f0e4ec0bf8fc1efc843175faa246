// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineAppBarNotificationButtonComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class AppBarNotificationButtonComponent {
    /** The number to display in the badge. */
    set count(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.count = value;
        });
    }
    get count() {
        return this.nativeElement.count;
    }
    /** Whether to display the dot variant of the badge or not. */
    set dot(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dot = value;
        });
    }
    get dot() {
        return this.nativeElement.dot;
    }
    /** The theme to apply to the badge. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** The name of an alternative icon to display. */
    set icon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.icon = value;
        });
    }
    get icon() {
        return this.nativeElement.icon;
    }
    /** Whether to display the badge or not. */
    set showBadge(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showBadge = value;
        });
    }
    get showBadge() {
        return this.nativeElement.showBadge;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-app-bar-notification-button element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineAppBarNotificationButtonComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AppBarNotificationButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: AppBarNotificationButtonComponent, selector: "forge-app-bar-notification-button", inputs: { count: "count", dot: ["dot", "dot", booleanAttribute], theme: "theme", icon: "icon", showBadge: ["showBadge", "showBadge", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AppBarNotificationButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-app-bar-notification-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { count: [{
                type: Input
            }], dot: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], theme: [{
                type: Input
            }], icon: [{
                type: Input
            }], showBadge: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWJhci1ub3RpZmljYXRpb24tYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9hcHAtYmFyLW5vdGlmaWNhdGlvbi1idXR0b24vYXBwLWJhci1ub3RpZmljYXRpb24tYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBdUYsdUNBQXVDLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFaEssT0FBTztBQU1QLE1BQU0sT0FBTyxpQ0FBaUM7SUFLN0MsMENBQTBDO0lBQzFDLElBQ1csS0FBSyxDQUFDLEtBQThEO1FBQzlFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLEtBQUs7UUFDZixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFFRCw4REFBOEQ7SUFDOUQsSUFDVyxHQUFHLENBQUMsS0FBNEQ7UUFDMUUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsR0FBRztRQUNiLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUM7SUFDL0IsQ0FBQztJQUVELHVDQUF1QztJQUN2QyxJQUNXLEtBQUssQ0FBQyxLQUE4RDtRQUM5RSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRUQsa0RBQWtEO0lBQ2xELElBQ1csSUFBSSxDQUFDLEtBQTZEO1FBQzVFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLElBQUk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCwyQ0FBMkM7SUFDM0MsSUFDVyxTQUFTLENBQUMsS0FBa0U7UUFDdEYsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsU0FBUztRQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxZQUNDLGlCQUFvQyxFQUMxQixVQUFzRSxFQUN0RSxJQUFZO1FBRFosZUFBVSxHQUFWLFVBQVUsQ0FBNEQ7UUFDdEUsU0FBSSxHQUFKLElBQUksQ0FBUTtRQTdEdkIscURBQXFEO1FBQ3JDLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUE4RDdELHVDQUF1QyxFQUFFLENBQUM7UUFDMUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs4R0FuRVcsaUNBQWlDO2tHQUFqQyxpQ0FBaUMsK0ZBaUJ6QixnQkFBZ0IsdUVBaUNoQixnQkFBZ0IsNkJBcER6QiwyQkFBMkI7OzJGQUUxQixpQ0FBaUM7a0JBTDdDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG1DQUFtQztvQkFDN0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDO29JQVFXLEtBQUs7c0JBRGYsS0FBSztnQkFZSyxHQUFHO3NCQURiLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLEtBQUs7c0JBRGYsS0FBSztnQkFZSyxJQUFJO3NCQURkLEtBQUs7Z0JBWUssU0FBUztzQkFEbkIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcEJhck5vdGlmaWNhdGlvbkJ1dHRvbkNvbXBvbmVudCBhcyBBcHBCYXJOb3RpZmljYXRpb25CdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50LCBkZWZpbmVBcHBCYXJOb3RpZmljYXRpb25CdXR0b25Db21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2UtYXBwLWJhci1ub3RpZmljYXRpb24tYnV0dG9uJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgQXBwQmFyTm90aWZpY2F0aW9uQnV0dG9uQ29tcG9uZW50IHtcblxuXHQvKiogVGhlIGZvcmdlLWFwcC1iYXItbm90aWZpY2F0aW9uLWJ1dHRvbiBlbGVtZW50LiAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgbmF0aXZlRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG5cdC8qKiBUaGUgbnVtYmVyIHRvIGRpc3BsYXkgaW4gdGhlIGJhZGdlLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IGNvdW50KHZhbHVlOiBBcHBCYXJOb3RpZmljYXRpb25CdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50Wydjb3VudCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5jb3VudCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgY291bnQoKTogQXBwQmFyTm90aWZpY2F0aW9uQnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnY291bnQnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5jb3VudDtcblx0fVxuXG5cdC8qKiBXaGV0aGVyIHRvIGRpc3BsYXkgdGhlIGRvdCB2YXJpYW50IG9mIHRoZSBiYWRnZSBvciBub3QuICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IGRvdCh2YWx1ZTogQXBwQmFyTm90aWZpY2F0aW9uQnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZG90J10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmRvdCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgZG90KCk6IEFwcEJhck5vdGlmaWNhdGlvbkJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2RvdCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmRvdDtcblx0fVxuXG5cdC8qKiBUaGUgdGhlbWUgdG8gYXBwbHkgdG8gdGhlIGJhZGdlLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IHRoZW1lKHZhbHVlOiBBcHBCYXJOb3RpZmljYXRpb25CdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50Wyd0aGVtZSddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC50aGVtZSA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgdGhlbWUoKTogQXBwQmFyTm90aWZpY2F0aW9uQnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsndGhlbWUnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC50aGVtZTtcblx0fVxuXG5cdC8qKiBUaGUgbmFtZSBvZiBhbiBhbHRlcm5hdGl2ZSBpY29uIHRvIGRpc3BsYXkuICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgaWNvbih2YWx1ZTogQXBwQmFyTm90aWZpY2F0aW9uQnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaWNvbiddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5pY29uID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBpY29uKCk6IEFwcEJhck5vdGlmaWNhdGlvbkJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2ljb24nXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5pY29uO1xuXHR9XG5cblx0LyoqIFdoZXRoZXIgdG8gZGlzcGxheSB0aGUgYmFkZ2Ugb3Igbm90LiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBzaG93QmFkZ2UodmFsdWU6IEFwcEJhck5vdGlmaWNhdGlvbkJ1dHRvbkNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3Nob3dCYWRnZSddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5zaG93QmFkZ2UgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHNob3dCYWRnZSgpOiBBcHBCYXJOb3RpZmljYXRpb25CdXR0b25Db21wb25lbnRDdXN0b21FbGVtZW50WydzaG93QmFkZ2UnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5zaG93QmFkZ2U7XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG5cdFx0cHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8QXBwQmFyTm90aWZpY2F0aW9uQnV0dG9uQ29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVBcHBCYXJOb3RpZmljYXRpb25CdXR0b25Db21wb25lbnQoKTtcblx0XHRjaGFuZ2VEZXRlY3RvclJlZi5kZXRhY2goKTtcblx0fVxufVxuIl19
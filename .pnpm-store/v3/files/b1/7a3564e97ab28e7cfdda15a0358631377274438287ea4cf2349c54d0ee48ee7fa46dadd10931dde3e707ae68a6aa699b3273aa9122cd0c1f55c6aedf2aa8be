// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineSliderComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class SliderComponent {
    get form() {
        return this.nativeElement.form;
    }
    get labels() {
        return this.nativeElement.labels;
    }
    /** The form control name. */
    set name(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.name = value;
        });
    }
    get name() {
        return this.nativeElement.name;
    }
    /** The form control name for the start handle in range mode. */
    set nameStart(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.nameStart = value;
        });
    }
    get nameStart() {
        return this.nativeElement.nameStart;
    }
    /** The form control name for the end handle in range mode. */
    set nameEnd(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.nameEnd = value;
        });
    }
    get nameEnd() {
        return this.nativeElement.nameEnd;
    }
    /** The current value of the slider. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** The current start value of the slider. */
    set valueStart(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.valueStart = value;
        });
    }
    get valueStart() {
        return this.nativeElement.valueStart;
    }
    /** The current end value of the slider. */
    set valueEnd(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.valueEnd = value;
        });
    }
    get valueEnd() {
        return this.nativeElement.valueEnd;
    }
    /** The label text for the slider handle. */
    set label(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.label = value;
        });
    }
    get label() {
        return this.nativeElement.label;
    }
    /** The label text for the start slider handle. */
    set labelStart(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelStart = value;
        });
    }
    get labelStart() {
        return this.nativeElement.labelStart;
    }
    /** The label text for the end slider handle. */
    set labelEnd(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelEnd = value;
        });
    }
    get labelEnd() {
        return this.nativeElement.labelEnd;
    }
    /** A function that returns a label for the slider handle. */
    set labelBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelBuilder = value;
        });
    }
    get labelBuilder() {
        return this.nativeElement.labelBuilder;
    }
    /** The minimum value of the slider. */
    set min(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.min = value;
        });
    }
    get min() {
        return this.nativeElement.min;
    }
    /** The maximum value of the slider. */
    set max(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.max = value;
        });
    }
    get max() {
        return this.nativeElement.max;
    }
    /** The step value of the slider. */
    set step(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.step = value;
        });
    }
    get step() {
        return this.nativeElement.step;
    }
    /** Controls if tickmarks are visible. */
    set tickmarks(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.tickmarks = value;
        });
    }
    get tickmarks() {
        return this.nativeElement.tickmarks;
    }
    /** Controls if labels are visible. */
    set labeled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labeled = value;
        });
    }
    get labeled() {
        return this.nativeElement.labeled;
    }
    /** Controls range mode. */
    set range(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.range = value;
        });
    }
    get range() {
        return this.nativeElement.range;
    }
    /** Controls if the slider is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Controls if the slider is readonly. */
    set readonly(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.readonly = value;
        });
    }
    get readonly() {
        return this.nativeElement.readonly;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-slider element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineSliderComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SliderComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: SliderComponent, selector: "forge-slider", inputs: { name: "name", nameStart: "nameStart", nameEnd: "nameEnd", value: ["value", "value", numberAttribute], valueStart: ["valueStart", "valueStart", numberAttribute], valueEnd: ["valueEnd", "valueEnd", numberAttribute], label: "label", labelStart: "labelStart", labelEnd: "labelEnd", labelBuilder: "labelBuilder", min: ["min", "min", numberAttribute], max: ["max", "max", numberAttribute], step: ["step", "step", numberAttribute], tickmarks: ["tickmarks", "tickmarks", booleanAttribute], labeled: ["labeled", "labeled", booleanAttribute], range: ["range", "range", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], readonly: ["readonly", "readonly", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SliderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-slider',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { name: [{
                type: Input
            }], nameStart: [{
                type: Input
            }], nameEnd: [{
                type: Input
            }], value: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], valueStart: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], valueEnd: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], label: [{
                type: Input
            }], labelStart: [{
                type: Input
            }], labelEnd: [{
                type: Input
            }], labelBuilder: [{
                type: Input
            }], min: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], max: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], step: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], tickmarks: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], labeled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], range: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], readonly: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
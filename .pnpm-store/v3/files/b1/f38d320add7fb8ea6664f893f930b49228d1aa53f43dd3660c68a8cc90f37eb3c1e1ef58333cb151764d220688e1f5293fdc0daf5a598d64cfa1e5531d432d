import { findWhere, createPredicate } from './object-utils';
export class ItemManager {
    constructor(_key) {
        this._key = _key;
        this._items = [];
    }
    /**
     * Returns all items.
     */
    getItems() {
        return [...this._items];
    }
    /**
     * Returns the number of items.
     */
    count() {
        return this._items.length;
    }
    /**
     * Sets the item key.
     * @param key The item key(s).
     */
    setKey(key) {
        this._key = key;
    }
    /**
     * Addes the provided items.
     * @param data The item data.
     */
    add(data) {
        if (!(data instanceof Array)) {
            data = [data];
        }
        data.forEach(item => {
            if (!this.exists(item)) {
                this._items.push(item);
            }
        });
        return this;
    }
    /**
     * Removes an item from the selections.
     * @param data The data to be deselected.
     */
    remove(data) {
        if (!(data instanceof Array)) {
            data = [data];
        }
        for (let i = data.length - 1; i >= 0; i--) {
            if (this.exists(data[i])) {
                this._items.splice(this._items.indexOf(this._getItem(data[i])), 1);
            }
        }
        return this;
    }
    /**
     * Removes all selected items.
     */
    clear() {
        this._items = [];
        return this;
    }
    /**
     * Determines if the provided item exists in the selections or not.
     * @param data The data value.
     */
    exists(data) {
        return this._getItem(data) !== null;
    }
    /**
     * Gets the item from the items collection, or null if not found.
     * @param data The data value.
     */
    _getItem(data) {
        if (this._key) {
            return findWhere(this._items, createPredicate(this._key, data)) || null;
        }
        else {
            return this._items.find(item => item === data) || null;
        }
    }
}

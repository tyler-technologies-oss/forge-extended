/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { BaseComponent, IBaseComponent } from '../core/base/base-component';
export interface ILabelValueComponent extends IBaseComponent {
    empty: boolean;
    ellipsis: boolean;
    inline: boolean;
    /** @deprecated Use `inline` instead. */
    dense: boolean;
}
declare global {
    interface HTMLElementTagNameMap {
        'forge-label-value': ILabelValueComponent;
    }
}
/**
 * @tag forge-label-value
 *
 * @summary Label-value pairs are used to display a label and a value in a compact format.
 *
 * @property {boolean} [empty=false] - If true, the value will be displayed in an alternative emphasized style.
 * @property {boolean} [ellipsis=false] - If true, the value will be truncated with an ellipsis if it overflows its container.
 * @property {boolean} [inline=false] - If true, the label and value will be displayed on the same line.
 * @property {boolean} [dense=false] - Deprecated. Use `inline` instead.
 *
 * @attribute {boolean} [empty=false] - If present, the value will be displayed in an alternative emphasized style.
 * @attribute {boolean} [ellipsis=false] - If present, the value will be truncated with an ellipsis if it overflows its container.
 * @attribute {boolean} [inline=false] - If present, the label and value will be displayed on the same line.
 *
 * @cssproperty --forge-label-value-align - Aligns the label and value. Possible values: `start` (default), `center`, `end`.
 * @cssproperty --forge-label-value-label-spacing - The spacing between the label and value.
 * @cssproperty --forge-label-value-label-block-start-spacing - The block start spacing for the label.
 * @cssproperty --forge-label-value-label-block-end-spacing - The block end spacing for the label.
 * @cssproperty --forge-label-value-label-color - The color to apply to the label.
 * @cssproperty --forge-label-value-icon-spacing - The spacing between the icon and the label.
 * @cssproperty --forge-label-value-inline-label-spacing - The spacing between the label and value when displayed inline.
 * @cssproperty --forge-label-value-empty-color - The color to apply to the value when empty.
 * @cssproperty --forge-label-value-empty-style - The font-style to apply to the value when empty.
 *
 * @csspart root - The root layout container element.
 * @csspart label - The label container element.
 * @csspart value - The value container element.
 * @csspart icon - The icon container element.
 *
 * @cssclass forge-label-value - The container element for the label and value elements.
 * @cssclass forge-label-value--inline - Applied to the container element when the label and value are displayed inline next to each other.
 * @cssclass forge-label-value--empty - Applied to the container element when the value is empty.
 * @cssclass forge-label-value--ellipsis - Applied to the container element when the value is truncated with an ellipsis if overflowing
 * @cssclass forge-label-value__label - The label element.
 * @cssclass forge-label-value__value - The value element.
 * @cssclass forge-label-value__icon - The icon element.
 *
 * @slot label - The label to display.
 * @slot value - The value to display.
 * @slot icon - An icon to display next to the label.
 */
export declare class LabelValueComponent extends BaseComponent implements ILabelValueComponent {
    static get observedAttributes(): string[];
    private _empty;
    private _ellipsis;
    private _inline;
    constructor();
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    get empty(): boolean;
    set empty(value: boolean);
    get ellipsis(): boolean;
    set ellipsis(value: boolean);
    get inline(): boolean;
    set inline(value: boolean);
    /** @deprecated Use `inline` instead. */
    get dense(): boolean;
    set dense(value: boolean);
}

import { Injectable, createComponent, createEnvironmentInjector } from '@angular/core';
import { defineBottomSheetComponent } from '@tylertech/forge';
import { BottomSheetConfig } from './bottom-sheet-config';
import { BottomSheetRef } from './bottom-sheet-ref';
import * as i0 from "@angular/core";
export class BottomSheetService {
    constructor(_appRef, _injector, _ngZone) {
        this._appRef = _appRef;
        this._injector = _injector;
        this._ngZone = _ngZone;
        defineBottomSheetComponent();
    }
    /**
     * Displays a components within a Forge bottom sheet instance.
     * @param component The component reference.
     * @param options The component reference.
     * @param config The configuration to provide to the dynamic component as an injectable token.
     * @param moduleRef An NgModuleRef to create the component factory from. (should the injector also inherit from this?)
     * @param envInjector An environment injector to provide to the component.
     * @returns A reference for interacting with the created bottom sheet.
     */
    show(component, options, config, moduleRef, envInjector) {
        // Contains tokens that will be provided to components through our custom bottom sheet injector
        const providers = [];
        // If we got a config, we should provide it as an injection token
        if (config) {
            providers.push({ provide: BottomSheetConfig, useValue: config });
        }
        // Create the Forge bottom sheet element
        const bottomSheetElement = document.createElement('forge-bottom-sheet');
        // Configure the bottom sheet with the provided options
        if (options) {
            const { bottomSheetClass, attributes, ...restOptions } = options;
            if (bottomSheetClass) {
                bottomSheetElement.classList.add(bottomSheetClass);
            }
            if (attributes) {
                attributes.forEach((value, key) => bottomSheetElement.setAttribute(key, value));
            }
            Object.assign(bottomSheetElement, restOptions);
        }
        // Create the ref that will allow the consumer to control the bottom sheet
        const bottomSheetRef = new BottomSheetRef(bottomSheetElement);
        // Always provide the bottom sheet ref as an injection token
        providers.push({ provide: BottomSheetRef, useValue: bottomSheetRef });
        // Create and attach the dynamic component to the bottom sheet element
        this._ngZone.run(() => {
            const parentInjector = envInjector ?? moduleRef?.injector ?? this._injector;
            const environmentInjector = createEnvironmentInjector(providers, parentInjector);
            const componentRef = createComponent(component, { environmentInjector });
            this._appRef.attachView(componentRef.hostView);
            const element = componentRef.hostView.rootNodes[0];
            bottomSheetElement.appendChild(element);
            bottomSheetElement.addEventListener('forge-bottom-sheet-close', () => {
                if (bottomSheetRef.nativeElement.open) {
                    bottomSheetRef.close();
                    return;
                }
                componentRef.destroy();
                bottomSheetElement.remove();
            });
        });
        bottomSheetElement.open = true;
        document.body.appendChild(bottomSheetElement);
        return bottomSheetRef;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: BottomSheetService, deps: [{ token: i0.ApplicationRef }, { token: i0.EnvironmentInjector }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: BottomSheetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: BottomSheetService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i0.ApplicationRef }, { type: i0.EnvironmentInjector }, { type: i0.NgZone }] });
//# sourceMappingURL=data:application/json;base64,
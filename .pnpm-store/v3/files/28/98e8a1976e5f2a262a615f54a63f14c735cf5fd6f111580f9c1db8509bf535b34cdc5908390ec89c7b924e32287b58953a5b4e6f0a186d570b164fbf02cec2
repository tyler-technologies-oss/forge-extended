// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineSwitchComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class SwitchComponent {
    /** Gets/sets whether the switch is on or off. */
    set on(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.on = value;
        });
    }
    get on() {
        return this.nativeElement.on;
    }
    /** Alias for `on` _(deprecated)_. */
    set selected(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selected = value;
        });
    }
    get selected() {
        return this.nativeElement.selected;
    }
    /** Gets/sets whether the switch is on or off by default. */
    set defaultOn(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.defaultOn = value;
        });
    }
    get defaultOn() {
        return this.nativeElement.defaultOn;
    }
    /** Gets/sets the value of the switch. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Controls whether the switch is dense. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Controls whether the switch is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Controls whether the switch is required. */
    set required(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.required = value;
        });
    }
    get required() {
        return this.nativeElement.required;
    }
    /** Controls whether the switch is readonly. */
    set readonly(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.readonly = value;
        });
    }
    get readonly() {
        return this.nativeElement.readonly;
    }
    /** Controls the presence of the off and on icons. */
    set icon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.icon = value;
        });
    }
    get icon() {
        return this.nativeElement.icon;
    }
    /** Controls whether the label appears before or after the switch. */
    set labelPosition(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.labelPosition = value;
        });
    }
    get labelPosition() {
        return this.nativeElement.labelPosition;
    }
    /** Toggles the switch on or off. */
    toggle(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.toggle(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-switch element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineSwitchComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SwitchComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: SwitchComponent, selector: "forge-switch", inputs: { on: ["on", "on", booleanAttribute], selected: ["selected", "selected", booleanAttribute], defaultOn: ["defaultOn", "defaultOn", booleanAttribute], value: "value", dense: ["dense", "dense", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], required: ["required", "required", booleanAttribute], readonly: ["readonly", "readonly", booleanAttribute], icon: "icon", labelPosition: "labelPosition" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SwitchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-switch',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { on: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], selected: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], defaultOn: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], value: [{
                type: Input
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], readonly: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], icon: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
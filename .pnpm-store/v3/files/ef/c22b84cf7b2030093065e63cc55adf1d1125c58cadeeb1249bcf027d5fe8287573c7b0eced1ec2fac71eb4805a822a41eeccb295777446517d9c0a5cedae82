/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { updateTarget } from '../constants';
import { BaseComponent, IBaseComponent } from '../core';
import { ILabelAware } from './label-aware';
export interface ILabelComponent extends IBaseComponent {
    for: string | null | undefined;
    forElement: HTMLElement | null | undefined;
    dynamic: boolean;
    nonInteractive: boolean;
    legend: boolean;
    update(): void;
    [updateTarget](target: HTMLElement & ILabelAware): boolean;
}
declare global {
    interface HTMLElementTagNameMap {
        'forge-label': ILabelComponent;
    }
}
/**
 * @tag forge-label
 *
 * @summary The Forge Label component is used to associate a text label with a compatible Forge component.
 *
 * @cssclass forge-label - Apply to the root element of the label to align the label and associated element horizontally.
 * @cssclass forge-label-block - Apply to the root element instead of `forge-label` to align the label and associated element vertically.
 * @cssclass forge-label-inline - Alias for `forge-label`.
 * @cssclass forge-label--large - Uses the large typography style typically applied to inset field labels.
 * @cssclass forge-support-text - Applies the support text typography style and a top margin.
 */
export declare class LabelComponent extends BaseComponent implements ILabelComponent {
    static get observedAttributes(): string[];
    private _core;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /**
     * The id of the associated element.
     * @default null
     * @attribute
     */
    for: string | null | undefined;
    /**
     * The associated element.
     * @default null
     */
    forElement: HTMLElement | null | undefined;
    /**
     * The element that a click should be simulated on. If not defined clicks act on the associated element.
     * @default null
     */
    clickTarget: HTMLElement | null | undefined;
    /**
     * Propagates changes in the label's text content to the associated element.
     * @default false
     * @attribute
     */
    dynamic: boolean;
    /**
     * Removes click handling from the label.
     * @default false
     * @attribute non-interactive
     */
    nonInteractive: boolean;
    /**
     * Whether or not the label should be associated with an ancestor element.
     * @default false
     * @attribute
     */
    legend: boolean;
    /**
     * Updates the targeted element with the label's current text content.
     */
    update(): void;
    /**
     * Attempts to locate and connect to the target element.
     *
     * @internal
     * @returns Whether the target element was located.
     */
    [updateTarget](target: HTMLElement & ILabelAware): boolean;
}

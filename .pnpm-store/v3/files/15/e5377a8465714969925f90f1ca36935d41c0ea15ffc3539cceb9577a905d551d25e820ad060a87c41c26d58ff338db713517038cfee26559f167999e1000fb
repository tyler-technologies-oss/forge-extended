import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { FieldComponent as FieldComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class FieldComponent {
    protected elementRef: ElementRef<FieldComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-field element. */
    readonly nativeElement: FieldComponentCustomElement;
    /** The position of the label relative to the input area. */
    set labelPosition(value: FieldComponentCustomElement['labelPosition']);
    get labelPosition(): FieldComponentCustomElement['labelPosition'];
    /** The alignment of the label relative to the input area. */
    set labelAlignment(value: FieldComponentCustomElement['labelAlignment']);
    get labelAlignment(): FieldComponentCustomElement['labelAlignment'];
    /** Whether an inset positioned label is floated to the top of the container. */
    set floatLabel(value: FieldComponentCustomElement['floatLabel']);
    get floatLabel(): FieldComponentCustomElement['floatLabel'];
    /** Whether the field is in an invalid state. */
    set invalid(value: FieldComponentCustomElement['invalid']);
    get invalid(): FieldComponentCustomElement['invalid'];
    /** Whether the field is required. */
    set required(value: FieldComponentCustomElement['required']);
    get required(): FieldComponentCustomElement['required'];
    /** Whether the field is optional. */
    set optional(value: FieldComponentCustomElement['optional']);
    get optional(): FieldComponentCustomElement['optional'];
    /** Whether the field is disabled. */
    set disabled(value: FieldComponentCustomElement['disabled']);
    get disabled(): FieldComponentCustomElement['disabled'];
    /** The variant of the field. */
    set variant(value: FieldComponentCustomElement['variant']);
    get variant(): FieldComponentCustomElement['variant'];
    /** The theme of the field. */
    set theme(value: FieldComponentCustomElement['theme']);
    get theme(): FieldComponentCustomElement['theme'];
    /** The border radius of the field's corners. */
    set shape(value: FieldComponentCustomElement['shape']);
    get shape(): FieldComponentCustomElement['shape'];
    /** The density of the field. */
    set density(value: FieldComponentCustomElement['density']);
    get density(): FieldComponentCustomElement['density'];
    /** Whether the field is at the "extra-small" density level. */
    set dense(value: FieldComponentCustomElement['dense']);
    get dense(): FieldComponentCustomElement['dense'];
    /** Whether the field has a popover icon. */
    set popoverIcon(value: FieldComponentCustomElement['popoverIcon']);
    get popoverIcon(): FieldComponentCustomElement['popoverIcon'];
    /** Whether the field's popover icon is in the expanded orientation. */
    set popoverExpanded(value: FieldComponentCustomElement['popoverExpanded']);
    get popoverExpanded(): FieldComponentCustomElement['popoverExpanded'];
    /** Whether the field contains a multiline input. */
    set multiline(value: FieldComponentCustomElement['multiline']);
    get multiline(): FieldComponentCustomElement['multiline'];
    /** Whether the field's support text is inset from either side. */
    set supportTextInset(value: FieldComponentCustomElement['supportTextInset']);
    get supportTextInset(): FieldComponentCustomElement['supportTextInset'];
    /** The element to attach the focus indicator to. */
    set focusIndicatorTargetElement(value: FieldComponentCustomElement['focusIndicatorTargetElement']);
    get focusIndicatorTargetElement(): FieldComponentCustomElement['focusIndicatorTargetElement'];
    /** The focus mode to use on the focus indicator. */
    set focusIndicatorFocusMode(value: FieldComponentCustomElement['focusIndicatorFocusMode']);
    get focusIndicatorFocusMode(): FieldComponentCustomElement['focusIndicatorFocusMode'];
    /** Whether the focus indicator should render when the target element matches `:focus` instead of `:focus-visible`. */
    set focusIndicatorAllowFocus(value: FieldComponentCustomElement['focusIndicatorAllowFocus']);
    get focusIndicatorAllowFocus(): FieldComponentCustomElement['focusIndicatorAllowFocus'];
    /** Sets the floating label without animating the transition. */
    floatLabelWithoutAnimation(...args: Parameters<FieldComponentCustomElement['floatLabelWithoutAnimation']>): ReturnType<FieldComponentCustomElement['floatLabelWithoutAnimation']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<FieldComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<FieldComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FieldComponent, "forge-field", never, { "labelPosition": { "alias": "labelPosition"; "required": false; }; "labelAlignment": { "alias": "labelAlignment"; "required": false; }; "floatLabel": { "alias": "floatLabel"; "required": false; }; "invalid": { "alias": "invalid"; "required": false; }; "required": { "alias": "required"; "required": false; }; "optional": { "alias": "optional"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "variant": { "alias": "variant"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; "shape": { "alias": "shape"; "required": false; }; "density": { "alias": "density"; "required": false; }; "dense": { "alias": "dense"; "required": false; }; "popoverIcon": { "alias": "popoverIcon"; "required": false; }; "popoverExpanded": { "alias": "popoverExpanded"; "required": false; }; "multiline": { "alias": "multiline"; "required": false; }; "supportTextInset": { "alias": "supportTextInset"; "required": false; }; "focusIndicatorTargetElement": { "alias": "focusIndicatorTargetElement"; "required": false; }; "focusIndicatorFocusMode": { "alias": "focusIndicatorFocusMode"; "required": false; }; "focusIndicatorAllowFocus": { "alias": "focusIndicatorAllowFocus"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_floatLabel: unknown;
    static ngAcceptInputType_invalid: unknown;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_optional: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_dense: unknown;
    static ngAcceptInputType_popoverIcon: unknown;
    static ngAcceptInputType_popoverExpanded: unknown;
    static ngAcceptInputType_multiline: unknown;
    static ngAcceptInputType_focusIndicatorAllowFocus: unknown;
}

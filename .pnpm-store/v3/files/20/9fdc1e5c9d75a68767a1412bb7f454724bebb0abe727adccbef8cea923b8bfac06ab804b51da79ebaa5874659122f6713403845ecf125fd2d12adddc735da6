/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { PositionPlacement } from '../core/utils/position-utils';
import { IListDropdownAware, ListDropdownAware } from '../list-dropdown/list-dropdown-aware';
import type { IOverlayOffset } from '../overlay/overlay-constants';
import { IMenuActiveChangeEventData, IMenuOption, IMenuOptionGroup, IMenuSelectEventData, MenuMode, MenuOptionBuilder, MenuOptionFactory } from './menu-constants';
export interface IMenuComponent extends IListDropdownAware {
    open: boolean;
    options: Array<IMenuOption | IMenuOptionGroup> | MenuOptionFactory;
    selectedIndex: number;
    selectedValue: number;
    placement: PositionPlacement;
    fallbackPlacements: PositionPlacement[];
    dense: boolean;
    iconClass: string;
    persistSelection: boolean;
    mode: MenuMode;
    popupOffset: IOverlayOffset;
    optionBuilder: MenuOptionBuilder | undefined;
    popupElement: HTMLElement | undefined;
    propagateKeyEvent(evt: KeyboardEvent): void;
    activateFirstOption(): void;
}
declare global {
    interface HTMLElementTagNameMap {
        'forge-menu': IMenuComponent;
    }
    interface HTMLElementEventMap {
        'forge-menu-select': CustomEvent<IMenuSelectEventData>;
        'forge-menu-open': CustomEvent<void>;
        'forge-menu-close': CustomEvent<void>;
        'forge-menu-active-change': CustomEvent<IMenuActiveChangeEventData>;
    }
}
/**
 * @tag forge-menu
 *
 * @dependency forge-popover
 * @dependency forge-list
 */
export declare class MenuComponent extends ListDropdownAware implements IMenuComponent {
    static get observedAttributes(): string[];
    private _core;
    constructor();
    connectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    disconnectedCallback(): void;
    /**
     * Gets/sets the open state.
     * @default false
     * @attribute
     */
    open: boolean;
    /**
     * Gets/sets the array of options to display in the menu.
     * @default []
     */
    options: Array<IMenuOption | IMenuOptionGroup> | MenuOptionFactory;
    /**
     * Gets/sets the selected option to the index. Does not support cascading menus.
     * @attribute selected-index
     * @deprecated Do not use menus for selection. Consider a `<forge-select>` instead.
     */
    selectedIndex: number;
    /**
     * Gets/sets the value of the option to select.
     * @deprecated Do not use menus for selection. Consider a `<forge-select>` instead.
     * @attribute selected-value
     */
    selectedValue: any;
    /**
     * Gets/sets the menu placement (default is bottom-left).
     * @default "bottom-start"
     * @attribute
     */
    placement: `${PositionPlacement}`;
    /**
     * Gets/sets the fallback menu placement for overriding the default of any side.
     * @attribute fallback-placements
     */
    fallbackPlacements: `${PositionPlacement}`[];
    /**
     * Gets/sets dense state of the list options used in the menu popup.
     * @default false
     * @attribute
     */
    dense: boolean;
    /**
     * Gets/sets the class name to use for option icons.
     * @attribute icon-class
     */
    iconClass: string;
    /**
     * Gets/sets whether selection of menu items is persisted.
     * @deprecated Please use `<forge-select-dropdown>` for handling selection states.
     */
    persistSelection: boolean;
    /**
     * Gets/sets the mode that this menu is using.
     * @default "click"
     * @attribute
     */
    mode: MenuMode;
    /**
     * Sets the position adjustment on the internal popup element.
     */
    popupOffset: IOverlayOffset;
    /**
     * Sets the callback that will be executed for each option in the dropdown for producing custom option templates.
     */
    optionBuilder: MenuOptionBuilder;
    /**
     * Gets the currently active popup element when the dropdown is open.
     * @readonly
     */
    popupElement: HTMLElement | undefined;
    /**
     * Force propagates the key event from another element to this component.
     */
    propagateKeyEvent(evt: KeyboardEvent): void;
    /**
     * Activates the first option in the menu when open.
     */
    activateFirstOption(): void;
}

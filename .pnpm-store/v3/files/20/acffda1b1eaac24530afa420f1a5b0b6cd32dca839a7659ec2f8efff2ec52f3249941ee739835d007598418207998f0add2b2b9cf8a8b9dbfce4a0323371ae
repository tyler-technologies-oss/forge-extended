/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { __decorate } from "tslib";
import { coerceBoolean, coreProperty } from '@tylertech/forge-core';
import { tylIconArrowDropDown } from '@tylertech/tyler-icons/standard';
import { IconRegistry } from '../../icon/icon-registry';
import { BaseComponent } from '../../core/base/base-component';
import { internals, setDefaultAria } from '../../constants';
import { BASE_BUTTON_CONSTANTS } from './base-button-constants';
import { WithLabelAwareness } from '../../core/mixins/label/with-label-aware';
import { WithElementInternals } from '../../core/mixins/internals/with-element-internals';
import { WithDefaultAria } from '../../core/mixins/internals/with-default-aria';
/**
 * @property {ButtonType} [type="button"] - Sets the type of the button. Possible values are `button`, `submit`, and `reset`.
 * @property {boolean} [disabled=false] - Disables the button.
 * @property {boolean} [popoverIcon=false] - Shows a popover icon on the button.
 * @property {boolean} [dense=false] - Sets the density of the button.
 * @property {string} [name=""] - The name of the button.
 * @property {string} [value=""] - The value of the button.
 *
 * @attribute {ButtonType} [type="button"] - Sets the type of the button. Possible values are `button`, `submit`, and `reset`.
 * @attribute {boolean} [disabled=false] - Disables the button.
 * @attribute {boolean} [popover-icon=false] - Shows a popover icon on the button.
 * @attribute {boolean} [dense=false] - Sets the density of the button.
 * @attribute {string} [name=""] - The name of the button.
 * @attribute {string} [value=""] - The value of the button.
 *
 * @fires {PointerEvent} click - Fires when the button is clicked.
 */
export class BaseButton extends WithDefaultAria(WithElementInternals(WithLabelAwareness(BaseComponent))) {
    static get observedAttributes() {
        return Object.values(BASE_BUTTON_CONSTANTS.observedAttributes);
    }
    constructor() {
        super();
        // PopoverInvokerElement
        /** @ignore */
        this.popoverTargetElement = null;
        /** @ignore */
        this.popoverTargetAction = 'click';
        IconRegistry.define(tylIconArrowDropDown);
    }
    connectedCallback() {
        super.connectedCallback();
        this._core.initialize();
    }
    attributeChangedCallback(name, oldValue, newValue) {
        switch (name) {
            case BASE_BUTTON_CONSTANTS.observedAttributes.TYPE:
                this.type = newValue;
                return;
            case BASE_BUTTON_CONSTANTS.observedAttributes.DISABLED:
                this.disabled = coerceBoolean(newValue);
                return;
            case BASE_BUTTON_CONSTANTS.observedAttributes.POPOVER_ICON:
                this.popoverIcon = coerceBoolean(newValue);
                return;
            case BASE_BUTTON_CONSTANTS.observedAttributes.DENSE:
                this.dense = coerceBoolean(newValue);
                return;
        }
    }
    labelClickedCallback() {
        this._core.click({ animateStateLayer: true });
    }
    labelChangedCallback(value) {
        this[setDefaultAria]({ ariaLabel: value }, { setAttribute: !this.hasAttribute('aria-label') });
    }
    get form() {
        return this[internals].form;
    }
    get name() {
        return this.getAttribute('name') ?? '';
    }
    set name(name) {
        this.setAttribute('name', name);
    }
    get value() {
        return this.getAttribute('value') ?? '';
    }
    set value(value) {
        this.setAttribute('value', value);
    }
    /** Clicks the button. */
    click() {
        this._core.click({ animateStateLayer: true });
    }
    /** Focuses the button. */
    focus(options) {
        this._core.focus(options);
    }
}
BaseButton.formAssociated = true;
__decorate([
    coreProperty()
], BaseButton.prototype, "type", void 0);
__decorate([
    coreProperty()
], BaseButton.prototype, "disabled", void 0);
__decorate([
    coreProperty()
], BaseButton.prototype, "popoverIcon", void 0);
__decorate([
    coreProperty()
], BaseButton.prototype, "dense", void 0);

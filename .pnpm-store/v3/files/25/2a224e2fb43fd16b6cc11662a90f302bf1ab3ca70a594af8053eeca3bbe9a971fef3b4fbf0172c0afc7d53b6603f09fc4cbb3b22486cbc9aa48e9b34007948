import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { SplitViewPanelComponent as SplitViewPanelComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class SplitViewPanelComponent {
    protected elementRef: ElementRef<SplitViewPanelComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-split-view-panel element. */
    readonly nativeElement: SplitViewPanelComponentCustomElement;
    /** Controls which side of the panel the resize handle appears on. */
    set resizable(value: SplitViewPanelComponentCustomElement['resizable']);
    get resizable(): SplitViewPanelComponentCustomElement['resizable'];
    /** The initial size along the axis of orientation. */
    set size(value: SplitViewPanelComponentCustomElement['size']);
    get size(): SplitViewPanelComponentCustomElement['size'];
    /** The smallest size the panel can take along its axis of orientation. */
    set min(value: SplitViewPanelComponentCustomElement['min']);
    get min(): SplitViewPanelComponentCustomElement['min'];
    /** The largest size the panel can take along its axis of orientation. */
    set max(value: SplitViewPanelComponentCustomElement['max']);
    get max(): SplitViewPanelComponentCustomElement['max'];
    /** The ARIA label given to the resize handle. */
    set accessibleLabel(value: SplitViewPanelComponentCustomElement['accessibleLabel']);
    get accessibleLabel(): SplitViewPanelComponentCustomElement['accessibleLabel'];
    /** Controls the open state of the panel. */
    set open(value: SplitViewPanelComponentCustomElement['open']);
    get open(): SplitViewPanelComponentCustomElement['open'];
    /** Whether resize interactions are disabled or enabled. */
    set disabled(value: SplitViewPanelComponentCustomElement['disabled']);
    get disabled(): SplitViewPanelComponentCustomElement['disabled'];
    /** Whether the panel can be closed via keyboard interaction. */
    set allowClose(value: SplitViewPanelComponentCustomElement['allowClose']);
    get allowClose(): SplitViewPanelComponentCustomElement['allowClose'];
    /** Whether the panel automatically closes when it reaches a size of 0. */
    set autoClose(value: SplitViewPanelComponentCustomElement['autoClose']);
    get autoClose(): SplitViewPanelComponentCustomElement['autoClose'];
    /** The size at which the panel auto closes. */
    set autoCloseThreshold(value: SplitViewPanelComponentCustomElement['autoCloseThreshold']);
    get autoCloseThreshold(): SplitViewPanelComponentCustomElement['autoCloseThreshold'];
    /** Gets the size of content along the axis of orientation. */
    getContentSize(...args: Parameters<SplitViewPanelComponentCustomElement['getContentSize']>): ReturnType<SplitViewPanelComponentCustomElement['getContentSize']>;
    /**
     * Gets the amount that the content can shrink along the axis of orientation before reaching its
     * min size.
     */
    getCollapsibleSize(...args: Parameters<SplitViewPanelComponentCustomElement['getCollapsibleSize']>): ReturnType<SplitViewPanelComponentCustomElement['getCollapsibleSize']>;
    /** Sets the size of content along the axis of orientation. */
    setContentSize(...args: Parameters<SplitViewPanelComponentCustomElement['setContentSize']>): ReturnType<SplitViewPanelComponentCustomElement['setContentSize']>;
    /** Updates the provided characteristics. */
    update(...args: Parameters<SplitViewPanelComponentCustomElement['update']>): ReturnType<SplitViewPanelComponentCustomElement['update']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<SplitViewPanelComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<SplitViewPanelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SplitViewPanelComponent, "forge-split-view-panel", never, { "resizable": { "alias": "resizable"; "required": false; }; "size": { "alias": "size"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "accessibleLabel": { "alias": "accessibleLabel"; "required": false; }; "open": { "alias": "open"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "allowClose": { "alias": "allowClose"; "required": false; }; "autoClose": { "alias": "autoClose"; "required": false; }; "autoCloseThreshold": { "alias": "autoCloseThreshold"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_open: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_allowClose: unknown;
    static ngAcceptInputType_autoClose: unknown;
    static ngAcceptInputType_autoCloseThreshold: unknown;
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineFilePickerComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class FilePickerComponent {
    /** Gets/sets the allowed file types. */
    set accept(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.accept = value;
        });
    }
    get accept() {
        return this.nativeElement.accept;
    }
    /** Gets/sets the maximum allowed file size. */
    set maxSize(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.maxSize = value;
        });
    }
    get maxSize() {
        return this.nativeElement.maxSize;
    }
    /** Gets/sets the camera to use when capturing video or images. */
    set capture(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.capture = value;
        });
    }
    get capture() {
        return this.nativeElement.capture;
    }
    /** Gets/sets whether multiple files are allowed. */
    set multiple(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.multiple = value;
        });
    }
    get multiple() {
        return this.nativeElement.multiple;
    }
    /** Gets/sets whether the file picker is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Gets/sets whether the file picker uses the compact variant. */
    set compact(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.compact = value;
        });
    }
    get compact() {
        return this.nativeElement.compact;
    }
    /** Gets and sets whether the file picker is borderless. */
    set borderless(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.borderless = value;
        });
    }
    get borderless() {
        return this.nativeElement.borderless;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-file-picker element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineFilePickerComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: FilePickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: FilePickerComponent, selector: "forge-file-picker", inputs: { accept: "accept", maxSize: "maxSize", capture: "capture", multiple: ["multiple", "multiple", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], compact: ["compact", "compact", booleanAttribute], borderless: ["borderless", "borderless", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: FilePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-file-picker',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { accept: [{
                type: Input
            }], maxSize: [{
                type: Input
            }], capture: [{
                type: Input
            }], multiple: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], compact: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], borderless: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
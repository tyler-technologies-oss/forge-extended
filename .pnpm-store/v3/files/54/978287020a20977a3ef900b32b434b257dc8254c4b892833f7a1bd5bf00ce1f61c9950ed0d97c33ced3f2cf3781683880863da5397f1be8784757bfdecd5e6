// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineTableComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class TableComponent {
    /** The data to be display in the table body. */
    set data(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.data = value;
        });
    }
    get data() {
        return this.nativeElement.data;
    }
    /** The column configuration options. */
    set columnConfigurations(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.columnConfigurations = value;
        });
    }
    get columnConfigurations() {
        return this.nativeElement.columnConfigurations;
    }
    /** Controls the visibility of the select column. */
    set select(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.select = value;
        });
    }
    get select() {
        return this.nativeElement.select;
    }
    /** Controls the visibility of the select all checkbox (only applied when `select` is `true`). */
    set multiselect(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.multiselect = value;
        });
    }
    get multiselect() {
        return this.nativeElement.multiselect;
    }
    /** The row key for matching data to selections. */
    set selectKey(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectKey = value;
        });
    }
    get selectKey() {
        return this.nativeElement.selectKey;
    }
    /** The tooltip to display when hovering over the select column. */
    set tooltipSelect(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.tooltipSelect = value;
        });
    }
    get tooltipSelect() {
        return this.nativeElement.tooltipSelect;
    }
    /** The tooltip to display when hovering over the select all checkbox. */
    set tooltipSelectAll(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.tooltipSelectAll = value;
        });
    }
    get tooltipSelectAll() {
        return this.nativeElement.tooltipSelectAll;
    }
    /** Controls whether the table is dense or not. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Controls whether the table is roomy or not. */
    set roomy(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.roomy = value;
        });
    }
    get roomy() {
        return this.nativeElement.roomy;
    }
    /** Controls whether the table shows its column filter row. */
    set filter(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.filter = value;
        });
    }
    get filter() {
        return this.nativeElement.filter;
    }
    /** Controls whether the table applies fixed headers when in scroll containers. */
    set fixedHeaders(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fixedHeaders = value;
        });
    }
    get fixedHeaders() {
        return this.nativeElement.fixedHeaders;
    }
    /** Controls the table layout algorithm. */
    set layoutType(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.layoutType = value;
        });
    }
    get layoutType() {
        return this.nativeElement.layoutType;
    }
    /** Controls whether the content in each cell wraps or not (true by default). */
    set wrapContent(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.wrapContent = value;
        });
    }
    get wrapContent() {
        return this.nativeElement.wrapContent;
    }
    /** Controls whether the columns are resizable or not. */
    set resizable(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.resizable = value;
        });
    }
    get resizable() {
        return this.nativeElement.resizable;
    }
    /** Gets/sets the minimum width that a column can be resized to by the user dragging the resize handle. */
    set minResizeWidth(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.minResizeWidth = value;
        });
    }
    get minResizeWidth() {
        return this.nativeElement.minResizeWidth;
    }
    /** Gets/sets whether the rows respond to (and emit) row click events. */
    set allowRowClick(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowRowClick = value;
        });
    }
    get allowRowClick() {
        return this.nativeElement.allowRowClick;
    }
    /** Gets/sets whether the table supports multi-column sorting. */
    set multiColumnSort(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.multiColumnSort = value;
        });
    }
    get multiColumnSort() {
        return this.nativeElement.multiColumnSort;
    }
    /** Callback for when a row is clicked. This allows for custom logic to run after each `<tr>` is created. */
    set rowCreated(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.rowCreated = value;
        });
    }
    get rowCreated() {
        return this.nativeElement.rowCreated;
    }
    /** Callback for when a cell is clicked. This allows for custom logic to run after each `<td>` is created. */
    set cellCreated(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.cellCreated = value;
        });
    }
    get cellCreated() {
        return this.nativeElement.cellCreated;
    }
    /** The template to use for the select all checkbox in the header. */
    set selectAllTemplate(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectAllTemplate = value;
        });
    }
    get selectAllTemplate() {
        return this.nativeElement.selectAllTemplate;
    }
    /** Controls the alignment of the select checkbox. */
    set selectCheckboxAlignment(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectCheckboxAlignment = value;
        });
    }
    get selectCheckboxAlignment() {
        return this.nativeElement.selectCheckboxAlignment;
    }
    /** Hides a column from the table. */
    hideColumn(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.hideColumn(...args));
    }
    /** Shows a hidden column in th table. */
    showColumn(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.showColumn(...args));
    }
    /** Determines if a column at the given index is hidden or not. */
    isColumnHidden(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.isColumnHidden(...args));
    }
    /** Returns the selected row instances. */
    getSelectedRows(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.getSelectedRows(...args));
    }
    /** Selects a row in the table. Only applicable if `select` is true. */
    selectRow(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.selectRow(...args));
    }
    /** Selects one or more rows in the table. Only applicable if `select` is true. */
    selectRows(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.selectRows(...args));
    }
    /** Deselects a single row in the table. */
    deselectRow(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.deselectRow(...args));
    }
    /** Deselects one or more rows in the table. */
    deselectRows(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.deselectRows(...args));
    }
    /** Clears all selected table rows. */
    clearSelections(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.clearSelections(...args));
    }
    /** Forces the table to re-render based on its current configuration. */
    render(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.render(...args));
    }
    /** Expands a collapsed row. */
    expandRow(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.expandRow(...args));
    }
    /** Collapses an expanded row. */
    collapseRow(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.collapseRow(...args));
    }
    /** Checks if a row is expanded or not. */
    isRowExpanded(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.isRowExpanded(...args));
    }
    /** Selects a rows by an index or array of indexes. */
    selectRowsByIndex(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.selectRowsByIndex(...args));
    }
    /** Deselects a rows by an index or array of indexes. */
    deselectRowsByIndex(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.deselectRowsByIndex(...args));
    }
    /** Checks if a row is selected or not. */
    isRowSelected(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.isRowSelected(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-table element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineTableComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: TableComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: TableComponent, selector: "forge-table", inputs: { data: "data", columnConfigurations: "columnConfigurations", select: ["select", "select", booleanAttribute], multiselect: ["multiselect", "multiselect", booleanAttribute], selectKey: "selectKey", tooltipSelect: "tooltipSelect", tooltipSelectAll: "tooltipSelectAll", dense: ["dense", "dense", booleanAttribute], roomy: ["roomy", "roomy", booleanAttribute], filter: ["filter", "filter", booleanAttribute], fixedHeaders: ["fixedHeaders", "fixedHeaders", booleanAttribute], layoutType: "layoutType", wrapContent: ["wrapContent", "wrapContent", booleanAttribute], resizable: ["resizable", "resizable", booleanAttribute], minResizeWidth: ["minResizeWidth", "minResizeWidth", numberAttribute], allowRowClick: ["allowRowClick", "allowRowClick", booleanAttribute], multiColumnSort: ["multiColumnSort", "multiColumnSort", booleanAttribute], rowCreated: "rowCreated", cellCreated: "cellCreated", selectAllTemplate: "selectAllTemplate", selectCheckboxAlignment: "selectCheckboxAlignment" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: TableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-table',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { data: [{
                type: Input
            }], columnConfigurations: [{
                type: Input
            }], select: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], multiselect: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], selectKey: [{
                type: Input
            }], tooltipSelect: [{
                type: Input
            }], tooltipSelectAll: [{
                type: Input
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], roomy: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], filter: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], fixedHeaders: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], layoutType: [{
                type: Input
            }], wrapContent: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], resizable: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], minResizeWidth: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], allowRowClick: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], multiColumnSort: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], rowCreated: [{
                type: Input
            }], cellCreated: [{
                type: Input
            }], selectAllTemplate: [{
                type: Input
            }], selectCheckboxAlignment: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
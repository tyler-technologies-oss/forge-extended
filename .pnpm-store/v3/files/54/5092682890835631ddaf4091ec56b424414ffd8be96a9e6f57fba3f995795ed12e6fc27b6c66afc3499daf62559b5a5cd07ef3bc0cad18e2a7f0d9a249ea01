/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { BaseAdapter, IBaseAdapter } from '../../core/base/base-adapter';
import { IFieldComponent } from '../field';
import { IBaseField } from './base-field';
export interface IBaseFieldAdapter extends IBaseAdapter {
    click(): void;
    applyLabel(value: string | null): void;
    setFieldProperty<K extends keyof IFieldComponent>(name: K, value: IFieldComponent[K]): void;
    floatLabelWithoutAnimation(value: boolean): void;
    tryFloatLabel(force?: boolean): void;
    readonly hasValue: boolean;
    readonly hasPlaceholder: boolean;
}
export declare abstract class BaseFieldAdapter extends BaseAdapter<IBaseField> implements IBaseFieldAdapter {
    protected abstract _fieldElement: IFieldComponent;
    abstract click(): void;
    abstract applyLabel(value: string | null): void;
    abstract tryFloatLabel(force?: boolean): void;
    abstract get hasValue(): boolean;
    abstract get hasPlaceholder(): boolean;
    setFieldProperty<K extends keyof IFieldComponent>(name: K, value: IFieldComponent[K]): void;
    floatLabelWithoutAnimation(value: boolean): void;
}

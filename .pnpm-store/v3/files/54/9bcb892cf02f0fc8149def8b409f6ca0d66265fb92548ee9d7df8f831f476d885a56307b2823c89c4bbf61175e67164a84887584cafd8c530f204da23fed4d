// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineDatePickerComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class DatePickerComponent {
    /** The value of the date picker. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** The minimum date the calendar will allow. */
    set min(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.min = value;
        });
    }
    get min() {
        return this.nativeElement.min;
    }
    /** The maximum date the calendar will allow. */
    set max(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.max = value;
        });
    }
    get max() {
        return this.nativeElement.max;
    }
    /** The dates that are restricted from being selected. */
    set disabledDates(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabledDates = value;
        });
    }
    get disabledDates() {
        return this.nativeElement.disabledDates;
    }
    /** Whether the calendar dropdown is open. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** The CSS classes that are applied to the popup element. */
    set popupClasses(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupClasses = value;
        });
    }
    get popupClasses() {
        return this.nativeElement.popupClasses;
    }
    /** Whether the date picker is disabled or not. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether the input mask is applied or not. */
    set masked(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.masked = value;
        });
    }
    get masked() {
        return this.nativeElement.masked;
    }
    /** The mask format that displayed in the input. Default is `MM/DD/YYYY`. */
    set maskFormat(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.maskFormat = value;
        });
    }
    get maskFormat() {
        return this.nativeElement.maskFormat;
    }
    /** Whether the mask format is displayed in the input or not. Only applies if `masked` is `true`. */
    set showMaskFormat(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showMaskFormat = value;
        });
    }
    get showMaskFormat() {
        return this.nativeElement.showMaskFormat;
    }
    /** The type for the `value` property and `forge-date-picker-change` event. */
    set valueMode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.valueMode = value;
        });
    }
    get valueMode() {
        return this.nativeElement.valueMode;
    }
    /** Whether the native input will be notified of value changes via the `input` and `change` events. */
    set notifyInputValueChanges(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.notifyInputValueChanges = value;
        });
    }
    get notifyInputValueChanges() {
        return this.nativeElement.notifyInputValueChanges;
    }
    /** Whether to allow an invalid date to be input. When true, the date picker will not clear out the value of the input if the date was invalid (i.e. could not be parsed). */
    set allowInvalidDate(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowInvalidDate = value;
        });
    }
    get allowInvalidDate() {
        return this.nativeElement.allowInvalidDate;
    }
    /** Whether the today button is visible in the popup. */
    set showToday(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showToday = value;
        });
    }
    get showToday() {
        return this.nativeElement.showToday;
    }
    /** Whether the clear button is visible in the popup. */
    set showClear(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.showClear = value;
        });
    }
    get showClear() {
        return this.nativeElement.showClear;
    }
    /** The callback to use for parsing a date value string to a `Date` object. */
    set parseCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.parseCallback = value;
        });
    }
    get parseCallback() {
        return this.nativeElement.parseCallback;
    }
    /** The callback to use for formatting `Date` value to a custom string format. */
    set formatCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.formatCallback = value;
        });
    }
    get formatCallback() {
        return this.nativeElement.formatCallback;
    }
    /** The callback to use when altering default mask entry. */
    set prepareMaskCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.prepareMaskCallback = value;
        });
    }
    get prepareMaskCallback() {
        return this.nativeElement.prepareMaskCallback;
    }
    /** The days of the week to disable from selection. */
    set disabledDaysOfWeek(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabledDaysOfWeek = value;
        });
    }
    get disabledDaysOfWeek() {
        return this.nativeElement.disabledDaysOfWeek;
    }
    /** The callback to use for testing whether a specific date should be disabled or not. */
    set disableDayCallback(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disableDayCallback = value;
        });
    }
    get disableDayCallback() {
        return this.nativeElement.disableDayCallback;
    }
    /** The year range. */
    set yearRange(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.yearRange = value;
        });
    }
    get yearRange() {
        return this.nativeElement.yearRange;
    }
    /** The locale to use. */
    set locale(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.locale = value;
        });
    }
    get locale() {
        return this.nativeElement.locale;
    }
    /** Customized strings to display in the calendar dropdown UI. */
    set calendarText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.calendarText = value;
        });
    }
    get calendarText() {
        return this.nativeElement.calendarText;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-date-picker element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineDatePickerComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DatePickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: DatePickerComponent, selector: "forge-date-picker", inputs: { value: "value", min: "min", max: "max", disabledDates: "disabledDates", open: ["open", "open", booleanAttribute], popupClasses: "popupClasses", disabled: ["disabled", "disabled", booleanAttribute], masked: ["masked", "masked", booleanAttribute], maskFormat: "maskFormat", showMaskFormat: ["showMaskFormat", "showMaskFormat", booleanAttribute], valueMode: "valueMode", notifyInputValueChanges: ["notifyInputValueChanges", "notifyInputValueChanges", booleanAttribute], allowInvalidDate: ["allowInvalidDate", "allowInvalidDate", booleanAttribute], showToday: ["showToday", "showToday", booleanAttribute], showClear: ["showClear", "showClear", booleanAttribute], parseCallback: "parseCallback", formatCallback: "formatCallback", prepareMaskCallback: "prepareMaskCallback", disabledDaysOfWeek: "disabledDaysOfWeek", disableDayCallback: "disableDayCallback", yearRange: "yearRange", locale: "locale", calendarText: "calendarText" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DatePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-date-picker',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { value: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledDates: [{
                type: Input
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popupClasses: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], masked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], maskFormat: [{
                type: Input
            }], showMaskFormat: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], valueMode: [{
                type: Input
            }], notifyInputValueChanges: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], allowInvalidDate: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showToday: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showClear: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], parseCallback: [{
                type: Input
            }], formatCallback: [{
                type: Input
            }], prepareMaskCallback: [{
                type: Input
            }], disabledDaysOfWeek: [{
                type: Input
            }], disableDayCallback: [{
                type: Input
            }], yearRange: [{
                type: Input
            }], locale: [{
                type: Input
            }], calendarText: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
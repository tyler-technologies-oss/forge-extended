// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineButtonComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ButtonComponent {
    /** The variant of the button. */
    set variant(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.variant = value;
        });
    }
    get variant() {
        return this.nativeElement.variant;
    }
    /** Whether or not the button is pill-shaped. */
    set pill(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.pill = value;
        });
    }
    get pill() {
        return this.nativeElement.pill;
    }
    /** The theme of the button. Defaults to `primary`. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** Whether or not the button is full-width. */
    set fullWidth(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fullWidth = value;
        });
    }
    get fullWidth() {
        return this.nativeElement.fullWidth;
    }
    /** The type of button. Valid values are `button`, `submit`, and `reset`. */
    set type(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.type = value;
        });
    }
    get type() {
        return this.nativeElement.type;
    }
    /** Whether or not the button is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether or not the button shows a built-in popover icon. */
    set popoverIcon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popoverIcon = value;
        });
    }
    get popoverIcon() {
        return this.nativeElement.popoverIcon;
    }
    /** The name of the button. */
    set name(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.name = value;
        });
    }
    get name() {
        return this.nativeElement.name;
    }
    /** The form value of the button. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Whether or not the button is dense. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** The form reference of the button if within a `<form>` element. */
    get form() {
        return this.nativeElement.form;
    }
    /** Clicks the button. */
    click(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.click(...args));
    }
    /** Focuses the button. */
    focus(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.focus(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-button element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineButtonComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ButtonComponent, selector: "forge-button", inputs: { variant: "variant", pill: ["pill", "pill", booleanAttribute], theme: "theme", fullWidth: ["fullWidth", "fullWidth", booleanAttribute], type: "type", disabled: ["disabled", "disabled", booleanAttribute], popoverIcon: ["popoverIcon", "popoverIcon", booleanAttribute], name: "name", value: "value", dense: ["dense", "dense", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { variant: [{
                type: Input
            }], pill: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], theme: [{
                type: Input
            }], fullWidth: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], type: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popoverIcon: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], name: [{
                type: Input
            }], value: [{
                type: Input
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
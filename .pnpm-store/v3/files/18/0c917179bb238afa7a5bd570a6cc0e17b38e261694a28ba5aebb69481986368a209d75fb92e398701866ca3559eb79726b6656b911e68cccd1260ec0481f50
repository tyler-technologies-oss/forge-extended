import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { BackdropComponent as BackdropComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class BackdropComponent {
    protected elementRef: ElementRef<BackdropComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-backdrop element. */
    readonly nativeElement: BackdropComponentCustomElement;
    /** Whether the backdrop is visible. */
    set visible(value: BackdropComponentCustomElement['visible']);
    get visible(): BackdropComponentCustomElement['visible'];
    /** Whether the backdrop uses "fixed" or "relative" positioning. */
    set fixed(value: BackdropComponentCustomElement['fixed']);
    get fixed(): BackdropComponentCustomElement['fixed'];
    /** Immediately shows the backdrop by setting the `visibility` to `true` without animations. */
    show(...args: Parameters<BackdropComponentCustomElement['show']>): ReturnType<BackdropComponentCustomElement['show']>;
    /** Immediately hides the backdrop by setting the `visibility` to `false` without animations. */
    hide(...args: Parameters<BackdropComponentCustomElement['hide']>): ReturnType<BackdropComponentCustomElement['hide']>;
    /** Sets the `visibility` to `true` and animates in. */
    fadeIn(...args: Parameters<BackdropComponentCustomElement['fadeIn']>): ReturnType<BackdropComponentCustomElement['fadeIn']>;
    /** Sets the `visibility` to `false` and animates out. */
    fadeOut(...args: Parameters<BackdropComponentCustomElement['fadeOut']>): ReturnType<BackdropComponentCustomElement['fadeOut']>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<BackdropComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<BackdropComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BackdropComponent, "forge-backdrop", never, { "visible": { "alias": "visible"; "required": false; }; "fixed": { "alias": "fixed"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_visible: unknown;
    static ngAcceptInputType_fixed: unknown;
}

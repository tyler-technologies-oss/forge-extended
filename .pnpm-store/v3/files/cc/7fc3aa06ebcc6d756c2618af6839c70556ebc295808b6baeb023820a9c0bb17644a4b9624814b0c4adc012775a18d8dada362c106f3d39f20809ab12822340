// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineSkipLinkComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class SkipLinkComponent {
    /** The IDREF of the element to which the skip link should navigate. */
    set target(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.target = value;
        });
    }
    get target() {
        return this.nativeElement.target;
    }
    /** The theme applied to the skip link. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** Whether or not the skip link uses a muted color scheme. */
    set muted(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.muted = value;
        });
    }
    get muted() {
        return this.nativeElement.muted;
    }
    /** Whether or not the skip link should remain visible when not focused. */
    set persistent(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.persistent = value;
        });
    }
    get persistent() {
        return this.nativeElement.persistent;
    }
    /** Whether or not the skip link renders within its container. */
    set inline(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.inline = value;
        });
    }
    get inline() {
        return this.nativeElement.inline;
    }
    /** Sets the skip link to skip browser navigation and scroll to the target element. */
    set skipUrlChange(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.skipUrlChange = value;
        });
    }
    get skipUrlChange() {
        return this.nativeElement.skipUrlChange;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-skip-link element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineSkipLinkComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SkipLinkComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: SkipLinkComponent, selector: "forge-skip-link", inputs: { target: "target", theme: "theme", muted: ["muted", "muted", booleanAttribute], persistent: ["persistent", "persistent", booleanAttribute], inline: ["inline", "inline", booleanAttribute], skipUrlChange: ["skipUrlChange", "skipUrlChange", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: SkipLinkComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-skip-link',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { target: [{
                type: Input
            }], theme: [{
                type: Input
            }], muted: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], persistent: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], inline: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], skipUrlChange: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpcC1saW5rLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ZvcmdlLWFuZ3VsYXIvc3JjL2xpYi9za2lwLWxpbmsvc2tpcC1saW5rLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBdUQsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFaEgsT0FBTztBQU1QLE1BQU0sT0FBTyxpQkFBaUI7SUFLN0IsdUVBQXVFO0lBQ3ZFLElBQ1csTUFBTSxDQUFDLEtBQStDO1FBQ2hFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLE1BQU07UUFDaEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztJQUNsQyxDQUFDO0lBRUQsMENBQTBDO0lBQzFDLElBQ1csS0FBSyxDQUFDLEtBQThDO1FBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLEtBQUs7UUFDZixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFFRCw4REFBOEQ7SUFDOUQsSUFDVyxLQUFLLENBQUMsS0FBOEM7UUFDOUQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVELDJFQUEyRTtJQUMzRSxJQUNXLFVBQVUsQ0FBQyxLQUFtRDtRQUN4RSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxVQUFVO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7SUFDdEMsQ0FBQztJQUVELGlFQUFpRTtJQUNqRSxJQUNXLE1BQU0sQ0FBQyxLQUErQztRQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxNQUFNO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7SUFDbEMsQ0FBQztJQUVELHNGQUFzRjtJQUN0RixJQUNXLGFBQWEsQ0FBQyxLQUFzRDtRQUM5RSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxhQUFhO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUM7SUFDekMsQ0FBQztJQUVELFlBQ0MsaUJBQW9DLEVBQzFCLFVBQXNELEVBQ3RELElBQVk7UUFEWixlQUFVLEdBQVYsVUFBVSxDQUE0QztRQUN0RCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBeEV2QixtQ0FBbUM7UUFDbkIsa0JBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQXlFN0QsdUJBQXVCLEVBQUUsQ0FBQztRQUMxQixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QixDQUFDOzhHQTlFVyxpQkFBaUI7a0dBQWpCLGlCQUFpQixxR0E0QlQsZ0JBQWdCLDRDQVdoQixnQkFBZ0IsZ0NBV2hCLGdCQUFnQixxREFXaEIsZ0JBQWdCLDZCQS9EekIsMkJBQTJCOzsyRkFFMUIsaUJBQWlCO2tCQUw3QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO2lCQUN0QztvSUFRVyxNQUFNO3NCQURoQixLQUFLO2dCQVlLLEtBQUs7c0JBRGYsS0FBSztnQkFZSyxLQUFLO3NCQURmLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLFVBQVU7c0JBRHBCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLE1BQU07c0JBRGhCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLGFBQWE7c0JBRHZCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGNvZGUgd2FzIGdlbmVyYXRlZCBieSB0aGUgYW5ndWxhci1jdXN0b20tZWxlbWVudHMtc2NoZW1hdGljLiAgQW55IGNoYW5nZXMgd2lsbCBiZSBvdmVyd3JpdHRlbiBuZXh0IHRpbWUgaXQgcnVucy5cbmltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBOZ1pvbmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTa2lwTGlua0NvbXBvbmVudCBhcyBTa2lwTGlua0NvbXBvbmVudEN1c3RvbUVsZW1lbnQsIGRlZmluZVNraXBMaW5rQ29tcG9uZW50IH0gZnJvbSAnQHR5bGVydGVjaC9mb3JnZSc7XG5cbi8qKiAgKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZvcmdlLXNraXAtbGluaycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIFNraXBMaW5rQ29tcG9uZW50IHtcblxuXHQvKiogVGhlIGZvcmdlLXNraXAtbGluayBlbGVtZW50LiAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgbmF0aXZlRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG5cdC8qKiBUaGUgSURSRUYgb2YgdGhlIGVsZW1lbnQgdG8gd2hpY2ggdGhlIHNraXAgbGluayBzaG91bGQgbmF2aWdhdGUuICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgdGFyZ2V0KHZhbHVlOiBTa2lwTGlua0NvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RhcmdldCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC50YXJnZXQgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHRhcmdldCgpOiBTa2lwTGlua0NvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RhcmdldCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnRhcmdldDtcblx0fVxuXG5cdC8qKiBUaGUgdGhlbWUgYXBwbGllZCB0byB0aGUgc2tpcCBsaW5rLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IHRoZW1lKHZhbHVlOiBTa2lwTGlua0NvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RoZW1lJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnRoZW1lID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB0aGVtZSgpOiBTa2lwTGlua0NvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RoZW1lJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQudGhlbWU7XG5cdH1cblxuXHQvKiogV2hldGhlciBvciBub3QgdGhlIHNraXAgbGluayB1c2VzIGEgbXV0ZWQgY29sb3Igc2NoZW1lLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBtdXRlZCh2YWx1ZTogU2tpcExpbmtDb21wb25lbnRDdXN0b21FbGVtZW50WydtdXRlZCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5tdXRlZCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgbXV0ZWQoKTogU2tpcExpbmtDb21wb25lbnRDdXN0b21FbGVtZW50WydtdXRlZCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50Lm11dGVkO1xuXHR9XG5cblx0LyoqIFdoZXRoZXIgb3Igbm90IHRoZSBza2lwIGxpbmsgc2hvdWxkIHJlbWFpbiB2aXNpYmxlIHdoZW4gbm90IGZvY3VzZWQuICovXG5cdEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuXHRwdWJsaWMgc2V0IHBlcnNpc3RlbnQodmFsdWU6IFNraXBMaW5rQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncGVyc2lzdGVudCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5wZXJzaXN0ZW50ID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBwZXJzaXN0ZW50KCk6IFNraXBMaW5rQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsncGVyc2lzdGVudCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnBlcnNpc3RlbnQ7XG5cdH1cblxuXHQvKiogV2hldGhlciBvciBub3QgdGhlIHNraXAgbGluayByZW5kZXJzIHdpdGhpbiBpdHMgY29udGFpbmVyLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBpbmxpbmUodmFsdWU6IFNraXBMaW5rQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaW5saW5lJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmlubGluZSA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgaW5saW5lKCk6IFNraXBMaW5rQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaW5saW5lJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuaW5saW5lO1xuXHR9XG5cblx0LyoqIFNldHMgdGhlIHNraXAgbGluayB0byBza2lwIGJyb3dzZXIgbmF2aWdhdGlvbiBhbmQgc2Nyb2xsIHRvIHRoZSB0YXJnZXQgZWxlbWVudC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgc2tpcFVybENoYW5nZSh2YWx1ZTogU2tpcExpbmtDb21wb25lbnRDdXN0b21FbGVtZW50Wydza2lwVXJsQ2hhbmdlJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnNraXBVcmxDaGFuZ2UgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHNraXBVcmxDaGFuZ2UoKTogU2tpcExpbmtDb21wb25lbnRDdXN0b21FbGVtZW50Wydza2lwVXJsQ2hhbmdlJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuc2tpcFVybENoYW5nZTtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxTa2lwTGlua0NvbXBvbmVudEN1c3RvbUVsZW1lbnQ+LFxuXHRcdHByb3RlY3RlZCB6b25lOiBOZ1pvbmVcblx0KSB7XG5cdFx0ZGVmaW5lU2tpcExpbmtDb21wb25lbnQoKTtcblx0XHRjaGFuZ2VEZXRlY3RvclJlZi5kZXRhY2goKTtcblx0fVxufVxuIl19
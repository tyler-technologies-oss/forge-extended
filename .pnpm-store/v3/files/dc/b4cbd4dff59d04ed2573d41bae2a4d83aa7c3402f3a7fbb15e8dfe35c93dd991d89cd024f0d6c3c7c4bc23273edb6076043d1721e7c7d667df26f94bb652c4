// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineAppBarComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class AppBarComponent {
    /** The text to display in the title. */
    set titleText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.titleText = value;
        });
    }
    get titleText() {
        return this.nativeElement.titleText;
    }
    /** The elevation of the app bar. */
    set elevation(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.elevation = value;
        });
    }
    get elevation() {
        return this.nativeElement.elevation;
    }
    /** The theme of the app bar. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    /** The href that will be used to make the logo and title area a clickable link. */
    set href(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.href = value;
        });
    }
    get href() {
        return this.nativeElement.href;
    }
    /** The `<a>` target of the logo + title area link when `href` is set. */
    set target(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.target = value;
        });
    }
    get target() {
        return this.nativeElement.target;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-app-bar element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineAppBarComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AppBarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.7", type: AppBarComponent, selector: "forge-app-bar", inputs: { titleText: "titleText", elevation: "elevation", theme: "theme", href: "href", target: "target" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AppBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-app-bar',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { titleText: [{
                type: Input
            }], elevation: [{
                type: Input
            }], theme: [{
                type: Input
            }], href: [{
                type: Input
            }], target: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9mb3JnZS1hbmd1bGFyL3NyYy9saWIvYXBwLWJhci9hcHAtYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pILE9BQU8sRUFBbUQscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFMUcsT0FBTztBQU1QLE1BQU0sT0FBTyxlQUFlO0lBSzNCLHdDQUF3QztJQUN4QyxJQUNXLFNBQVMsQ0FBQyxLQUFnRDtRQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxTQUFTO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDckMsQ0FBQztJQUVELG9DQUFvQztJQUNwQyxJQUNXLFNBQVMsQ0FBQyxLQUFnRDtRQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxTQUFTO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDckMsQ0FBQztJQUVELGdDQUFnQztJQUNoQyxJQUNXLEtBQUssQ0FBQyxLQUE0QztRQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRUQsbUZBQW1GO0lBQ25GLElBQ1csSUFBSSxDQUFDLEtBQTJDO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLElBQUk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCx5RUFBeUU7SUFDekUsSUFDVyxNQUFNLENBQUMsS0FBNkM7UUFDOUQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsTUFBTTtRQUNoQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxZQUNDLGlCQUFvQyxFQUMxQixVQUFvRCxFQUNwRCxJQUFZO1FBRFosZUFBVSxHQUFWLFVBQVUsQ0FBMEM7UUFDcEQsU0FBSSxHQUFKLElBQUksQ0FBUTtRQTdEdkIsaUNBQWlDO1FBQ2pCLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUE4RDdELHFCQUFxQixFQUFFLENBQUM7UUFDeEIsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs4R0FuRVcsZUFBZTtrR0FBZixlQUFlLGlLQUZoQiwyQkFBMkI7OzJGQUUxQixlQUFlO2tCQUwzQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7b0lBUVcsU0FBUztzQkFEbkIsS0FBSztnQkFZSyxTQUFTO3NCQURuQixLQUFLO2dCQVlLLEtBQUs7c0JBRGYsS0FBSztnQkFZSyxJQUFJO3NCQURkLEtBQUs7Z0JBWUssTUFBTTtzQkFEaEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcEJhckNvbXBvbmVudCBhcyBBcHBCYXJDb21wb25lbnRDdXN0b21FbGVtZW50LCBkZWZpbmVBcHBCYXJDb21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2UtYXBwLWJhcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIEFwcEJhckNvbXBvbmVudCB7XG5cblx0LyoqIFRoZSBmb3JnZS1hcHAtYmFyIGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIHRpdGxlLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IHRpdGxlVGV4dCh2YWx1ZTogQXBwQmFyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsndGl0bGVUZXh0J10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnRpdGxlVGV4dCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgdGl0bGVUZXh0KCk6IEFwcEJhckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RpdGxlVGV4dCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnRpdGxlVGV4dDtcblx0fVxuXG5cdC8qKiBUaGUgZWxldmF0aW9uIG9mIHRoZSBhcHAgYmFyLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IGVsZXZhdGlvbih2YWx1ZTogQXBwQmFyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZWxldmF0aW9uJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmVsZXZhdGlvbiA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgZWxldmF0aW9uKCk6IEFwcEJhckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2VsZXZhdGlvbiddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmVsZXZhdGlvbjtcblx0fVxuXG5cdC8qKiBUaGUgdGhlbWUgb2YgdGhlIGFwcCBiYXIuICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgdGhlbWUodmFsdWU6IEFwcEJhckNvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RoZW1lJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnRoZW1lID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB0aGVtZSgpOiBBcHBCYXJDb21wb25lbnRDdXN0b21FbGVtZW50Wyd0aGVtZSddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnRoZW1lO1xuXHR9XG5cblx0LyoqIFRoZSBocmVmIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1ha2UgdGhlIGxvZ28gYW5kIHRpdGxlIGFyZWEgYSBjbGlja2FibGUgbGluay4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCBocmVmKHZhbHVlOiBBcHBCYXJDb21wb25lbnRDdXN0b21FbGVtZW50WydocmVmJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmhyZWYgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IGhyZWYoKTogQXBwQmFyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaHJlZiddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmhyZWY7XG5cdH1cblxuXHQvKiogVGhlIGA8YT5gIHRhcmdldCBvZiB0aGUgbG9nbyArIHRpdGxlIGFyZWEgbGluayB3aGVuIGBocmVmYCBpcyBzZXQuICovXG5cdEBJbnB1dCgpXG5cdHB1YmxpYyBzZXQgdGFyZ2V0KHZhbHVlOiBBcHBCYXJDb21wb25lbnRDdXN0b21FbGVtZW50Wyd0YXJnZXQnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQudGFyZ2V0ID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB0YXJnZXQoKTogQXBwQmFyQ29tcG9uZW50Q3VzdG9tRWxlbWVudFsndGFyZ2V0J10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQudGFyZ2V0O1xuXHR9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEFwcEJhckNvbXBvbmVudEN1c3RvbUVsZW1lbnQ+LFxuXHRcdHByb3RlY3RlZCB6b25lOiBOZ1pvbmVcblx0KSB7XG5cdFx0ZGVmaW5lQXBwQmFyQ29tcG9uZW50KCk7XG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWYuZGV0YWNoKCk7XG5cdH1cbn1cbiJdfQ==
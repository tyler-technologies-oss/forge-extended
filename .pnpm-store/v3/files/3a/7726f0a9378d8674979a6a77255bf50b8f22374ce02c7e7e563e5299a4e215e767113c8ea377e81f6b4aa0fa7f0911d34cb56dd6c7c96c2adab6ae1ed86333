/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
import { BaseComponent, IBaseComponent } from '../core/base/base-component';
export interface ICardComponent extends IBaseComponent {
    raised: boolean;
}
declare global {
    interface HTMLElementTagNameMap {
        'forge-card': ICardComponent;
    }
}
/**
 * @tag forge-card
 *
 * @summary Cards are used to group related information and actions about a single subject.
 *
 * @property {boolean} [raised=false] - Whether the card has elevation or not.
 *
 * @attribute {boolean} [raised=false] - Whether the card has elevation or not.
 * @attribute {boolean} [no-padding=false] - Removes the default padding from the card.
 *
 * @cssproperty --forge-card-background - The background color of the card.
 * @cssproperty --forge-card-height - The height of the card.
 * @cssproperty --forge-card-width - The width of the card.
 * @cssproperty --forge-card-outline-color - The outline color of the card.
 * @cssproperty --forge-card-outline-width - The outline width of the card.
 * @cssproperty --forge-card-outline-style - The outline style of the card.
 * @cssproperty --forge-card-elevation - The elevation/shadow of the card.
 * @cssproperty --forge-card-padding - The padding of the card.
 * @cssproperty --forge-card-shape - The shape (border-radius) of the card.
 * @cssproperty --forge-card-overflow - The overflow of the card.
 * @cssproperty --forge-card-raised-elevation - The elevation/shadow of the card when raised.
 * @cssproperty --forge-card-raised-outline-width - The outline width of the card when raised.
 *
 * @csspart root - The root container element.
 *
 * @cssclass forge-card - The card container element _(required)_.
 * @cssclass forge-card--raised - The card container element when raised _(required)_.
 */
export declare class CardComponent extends BaseComponent implements ICardComponent {
    static get observedAttributes(): string[];
    private _raised;
    constructor();
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    get raised(): boolean;
    set raised(value: boolean);
}

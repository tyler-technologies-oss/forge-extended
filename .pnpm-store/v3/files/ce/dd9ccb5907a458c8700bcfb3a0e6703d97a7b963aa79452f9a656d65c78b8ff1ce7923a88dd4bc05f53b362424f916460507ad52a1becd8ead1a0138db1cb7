// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineAppBarProfileButtonComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class AppBarProfileButtonComponent {
    /** The full name. */
    set fullName(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fullName = value;
        });
    }
    get fullName() {
        return this.nativeElement.fullName;
    }
    /** The email address. */
    set email(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.email = value;
        });
    }
    get email() {
        return this.nativeElement.email;
    }
    /** The url of the avatar image to display. */
    set avatarImageUrl(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.avatarImageUrl = value;
        });
    }
    get avatarImageUrl() {
        return this.nativeElement.avatarImageUrl;
    }
    /** The number of letters to display in the avatar. */
    set avatarLetterCount(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.avatarLetterCount = value;
        });
    }
    get avatarLetterCount() {
        return this.nativeElement.avatarLetterCount;
    }
    /** The text to display in the avatar. */
    set avatarText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.avatarText = value;
        });
    }
    get avatarText() {
        return this.nativeElement.avatarText;
    }
    /** The name of an alternative icon to display in the avatar. */
    set avatarIcon(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.avatarIcon = value;
        });
    }
    get avatarIcon() {
        return this.nativeElement.avatarIcon;
    }
    /** Whether to display the sign out button or not. Defaults to `true`. */
    set signOutButton(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.signOutButton = value;
        });
    }
    get signOutButton() {
        return this.nativeElement.signOutButton;
    }
    /** Whether to display the profile button or not. */
    set profileButton(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.profileButton = value;
        });
    }
    get profileButton() {
        return this.nativeElement.profileButton;
    }
    /** The text to display in the sign out button. */
    set signOutButtonText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.signOutButtonText = value;
        });
    }
    get signOutButtonText() {
        return this.nativeElement.signOutButtonText;
    }
    /** The text to display in the profile button. */
    set profileButtonText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.profileButtonText = value;
        });
    }
    get profileButtonText() {
        return this.nativeElement.profileButtonText;
    }
    /** Whether the profile card is open or not. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** The popup element when open. */
    get popupElement() {
        return this.nativeElement.popupElement;
    }
    /** Sets the profile card builder callback that will be used to add extra content to the profile card. */
    set profileCardBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.profileCardBuilder = value;
        });
    }
    get profileCardBuilder() {
        return this.nativeElement.profileCardBuilder;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-app-bar-profile-button element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineAppBarProfileButtonComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AppBarProfileButtonComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: AppBarProfileButtonComponent, selector: "forge-app-bar-profile-button", inputs: { fullName: "fullName", email: "email", avatarImageUrl: "avatarImageUrl", avatarLetterCount: ["avatarLetterCount", "avatarLetterCount", numberAttribute], avatarText: "avatarText", avatarIcon: "avatarIcon", signOutButton: ["signOutButton", "signOutButton", booleanAttribute], profileButton: ["profileButton", "profileButton", booleanAttribute], signOutButtonText: "signOutButtonText", profileButtonText: "profileButtonText", open: ["open", "open", booleanAttribute], profileCardBuilder: "profileCardBuilder" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AppBarProfileButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-app-bar-profile-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { fullName: [{
                type: Input
            }], email: [{
                type: Input
            }], avatarImageUrl: [{
                type: Input
            }], avatarLetterCount: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], avatarText: [{
                type: Input
            }], avatarIcon: [{
                type: Input
            }], signOutButton: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], profileButton: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], signOutButtonText: [{
                type: Input
            }], profileButtonText: [{
                type: Input
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], profileCardBuilder: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { CircularProgressComponent as CircularProgressComponentCustomElement } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export declare class CircularProgressComponent {
    protected elementRef: ElementRef<CircularProgressComponentCustomElement>;
    protected zone: NgZone;
    /** The forge-circular-progress element. */
    readonly nativeElement: CircularProgressComponentCustomElement;
    /** Controls the determinate state. */
    set determinate(value: CircularProgressComponentCustomElement['determinate']);
    get determinate(): CircularProgressComponentCustomElement['determinate'];
    /** Controls the progress while in a determinate state. Accepts values from `0` to `1`. */
    set progress(value: CircularProgressComponentCustomElement['progress']);
    get progress(): CircularProgressComponentCustomElement['progress'];
    /** Controls the theme of the progress indicator. */
    set theme(value: CircularProgressComponentCustomElement['theme']);
    get theme(): CircularProgressComponentCustomElement['theme'];
    /** Controls the visibility of the track background. */
    set track(value: CircularProgressComponentCustomElement['track']);
    get track(): CircularProgressComponentCustomElement['track'];
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<CircularProgressComponentCustomElement>, zone: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<CircularProgressComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CircularProgressComponent, "forge-circular-progress", never, { "determinate": { "alias": "determinate"; "required": false; }; "progress": { "alias": "progress"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; "track": { "alias": "track"; "required": false; }; }, {}, never, ["*"], false, never>;
    static ngAcceptInputType_determinate: unknown;
    static ngAcceptInputType_progress: unknown;
    static ngAcceptInputType_track: unknown;
}

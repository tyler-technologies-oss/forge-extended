/**
 * @license
 * Copyright Tyler Technologies, Inc. 
 * License: Apache-2.0
 */
/**
 * Represents a deferred promise.
 *
 * Use deferred promises when you need to return a promise but you don't have the result yet.
 */
export class Deferred {
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this._resolveFn = resolve;
            this._rejectFn = reject;
        });
    }
    /**
     * Resolves the promise.
     * @param param The value to resolve the promise with.
     */
    resolve(param) {
        this._resolveFn(param);
    }
    /**
     * Rejects the promise.
     * @param reason The reason for rejecting the promise.
     */
    reject(reason) {
        this._rejectFn(reason);
    }
}

// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineAutocompleteComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class AutocompleteComponent {
    /** Gets/sets the interaction mode. */
    set mode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.mode = value;
        });
    }
    get mode() {
        return this.nativeElement.mode;
    }
    /** Gets/sets the multi-select state. */
    set multiple(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.multiple = value;
        });
    }
    get multiple() {
        return this.nativeElement.multiple;
    }
    /** Gets/sets the value. */
    set value(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.value = value;
        });
    }
    get value() {
        return this.nativeElement.value;
    }
    /** Gets/sets the debounce delay (milliseconds) for keyboard events. */
    set debounce(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.debounce = value;
        });
    }
    get debounce() {
        return this.nativeElement.debounce;
    }
    /** Gets/sets filter on focus settings which controls whether the dropdown displays automatically when focused. */
    set filterOnFocus(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.filterOnFocus = value;
        });
    }
    get filterOnFocus() {
        return this.nativeElement.filterOnFocus;
    }
    /** Gets/sets whether the first option in the dropdown will be focused automatically when opened or not. */
    set filterFocusFirst(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.filterFocusFirst = value;
        });
    }
    get filterFocusFirst() {
        return this.nativeElement.filterFocusFirst;
    }
    /** Controls whether unmatched text entered by the user will stay visible an option in the dropdown is not found. */
    set allowUnmatched(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.allowUnmatched = value;
        });
    }
    get allowUnmatched() {
        return this.nativeElement.allowUnmatched;
    }
    /** Gets/sets the selector that will be used to find an element to attach the popup to. Defaults to the input element. */
    set popupTarget(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupTarget = value;
        });
    }
    get popupTarget() {
        return this.nativeElement.popupTarget;
    }
    /**
     * Gets/sets the filter text.
     *
     * Setting the filter text only applies when allowUnmatched is enabled.
     */
    set filterText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.filterText = value;
        });
    }
    get filterText() {
        return this.nativeElement.filterText;
    }
    /** Sets the option builder callback that will be executed when building the option list in the dropdown. */
    set optionBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optionBuilder = value;
        });
    }
    get optionBuilder() {
        return this.nativeElement.optionBuilder;
    }
    /** Sets the filter callback that will be executed when fetching options for the autocomplete dropdown. */
    set filter(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.filter = value;
        });
    }
    get filter() {
        return this.nativeElement.filter;
    }
    /** Sets the selected text builder callback that will be executed when getting the selected text. */
    set selectedTextBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selectedTextBuilder = value;
        });
    }
    get selectedTextBuilder() {
        return this.nativeElement.selectedTextBuilder;
    }
    /** Controls the open state of the dropdown. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** Gets/sets the property key to match the value to an option. */
    set matchKey(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.matchKey = value;
        });
    }
    get matchKey() {
        return this.nativeElement.matchKey;
    }
    /** Returns whether the component has been initialized or not yet. */
    get isInitialized() {
        return this.nativeElement.isInitialized;
    }
    /** Gets the currently active popup element when the dropdown is open. */
    get popupElement() {
        return this.nativeElement.popupElement;
    }
    /** Sets the callback to be executed when the user selects an option, before the UI is updated to allow for validation. */
    set beforeValueChange(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.beforeValueChange = value;
        });
    }
    get beforeValueChange() {
        return this.nativeElement.beforeValueChange;
    }
    /** Gets/sets the list of classes to apply to the popup element. */
    set popupClasses(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupClasses = value;
        });
    }
    get popupClasses() {
        return this.nativeElement.popupClasses;
    }
    /** Gets/sets the callback function for generating header content within the popup. */
    set popupHeaderBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupHeaderBuilder = value;
        });
    }
    get popupHeaderBuilder() {
        return this.nativeElement.popupHeaderBuilder;
    }
    /** Gets/sets the callback function for generating header content within the popup. */
    set popupFooterBuilder(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.popupFooterBuilder = value;
        });
    }
    get popupFooterBuilder() {
        return this.nativeElement.popupFooterBuilder;
    }
    /** Gets/sets whether the popup width is synchronized with the popup target width. */
    set syncPopupWidth(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.syncPopupWidth = value;
        });
    }
    get syncPopupWidth() {
        return this.nativeElement.syncPopupWidth;
    }
    /** Gets/sets the maximum number of options to display in the dropdown. */
    set optionLimit(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.optionLimit = value;
        });
    }
    get optionLimit() {
        return this.nativeElement.optionLimit;
    }
    /** Controls the observation of scroll events on the dropdown. */
    set observeScroll(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.observeScroll = value;
        });
    }
    get observeScroll() {
        return this.nativeElement.observeScroll;
    }
    /** The number of pixels from the bottom to trigger the scroll bottom event. Only applicable if `observeScroll` is true. */
    set observeScrollThreshold(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.observeScrollThreshold = value;
        });
    }
    get observeScrollThreshold() {
        return this.nativeElement.observeScrollThreshold;
    }
    /** Gets/sets whether the popup width will be constrained to a max width of the viewport width (default: `100vw`). */
    set constrainPopupWidth(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.constrainPopupWidth = value;
        });
    }
    get constrainPopupWidth() {
        return this.nativeElement.constrainPopupWidth;
    }
    /**
     * Gets/sets whether the options will wrap their text or not.
     * This only applies if `constrainPopupWidth` is `true`, if there is an explicit width set via CSS.
     */
    set wrapOptionText(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.wrapOptionText = value;
        });
    }
    get wrapOptionText() {
        return this.nativeElement.wrapOptionText;
    }
    /** Adds options to the dropdown while it is open. Has no effect if the dropdown is closed. */
    appendOptions(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.appendOptions(...args));
    }
    /** Opens the dropdown. */
    openDropdown(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.openDropdown(...args));
    }
    /** Closes the dropdown. */
    closeDropdown(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.closeDropdown(...args));
    }
    /** Forces the filter callback to be executed to update the current selection state with new options. */
    forceFilter(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.forceFilter(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-autocomplete element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineAutocompleteComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AutocompleteComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: AutocompleteComponent, selector: "forge-autocomplete", inputs: { mode: "mode", multiple: ["multiple", "multiple", booleanAttribute], value: "value", debounce: ["debounce", "debounce", numberAttribute], filterOnFocus: ["filterOnFocus", "filterOnFocus", booleanAttribute], filterFocusFirst: ["filterFocusFirst", "filterFocusFirst", booleanAttribute], allowUnmatched: ["allowUnmatched", "allowUnmatched", booleanAttribute], popupTarget: "popupTarget", filterText: "filterText", optionBuilder: "optionBuilder", filter: "filter", selectedTextBuilder: "selectedTextBuilder", open: ["open", "open", booleanAttribute], matchKey: "matchKey", beforeValueChange: "beforeValueChange", popupClasses: "popupClasses", popupHeaderBuilder: "popupHeaderBuilder", popupFooterBuilder: "popupFooterBuilder", syncPopupWidth: ["syncPopupWidth", "syncPopupWidth", booleanAttribute], optionLimit: ["optionLimit", "optionLimit", numberAttribute], observeScroll: ["observeScroll", "observeScroll", booleanAttribute], observeScrollThreshold: ["observeScrollThreshold", "observeScrollThreshold", numberAttribute], constrainPopupWidth: ["constrainPopupWidth", "constrainPopupWidth", booleanAttribute], wrapOptionText: ["wrapOptionText", "wrapOptionText", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: AutocompleteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-autocomplete',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { mode: [{
                type: Input
            }], multiple: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], value: [{
                type: Input
            }], debounce: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], filterOnFocus: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], filterFocusFirst: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], allowUnmatched: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], popupTarget: [{
                type: Input
            }], filterText: [{
                type: Input
            }], optionBuilder: [{
                type: Input
            }], filter: [{
                type: Input
            }], selectedTextBuilder: [{
                type: Input
            }], open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], matchKey: [{
                type: Input
            }], beforeValueChange: [{
                type: Input
            }], popupClasses: [{
                type: Input
            }], popupHeaderBuilder: [{
                type: Input
            }], popupFooterBuilder: [{
                type: Input
            }], syncPopupWidth: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], optionLimit: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], observeScroll: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], observeScrollThreshold: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], constrainPopupWidth: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], wrapOptionText: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
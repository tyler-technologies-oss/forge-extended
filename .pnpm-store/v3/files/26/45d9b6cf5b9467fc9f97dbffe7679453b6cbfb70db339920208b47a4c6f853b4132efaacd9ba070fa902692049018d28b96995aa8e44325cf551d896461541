// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineDialogComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class DialogComponent {
    /** Indicates whether the dialog is open. */
    set open(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.open = value;
        });
    }
    get open() {
        return this.nativeElement.open;
    }
    /** The mode of the dialog. */
    set mode(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.mode = value;
        });
    }
    get mode() {
        return this.nativeElement.mode;
    }
    /** The type of the dialog. */
    set type(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.type = value;
        });
    }
    get type() {
        return this.nativeElement.type;
    }
    /** The animation type of the dialog. */
    set animationType(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.animationType = value;
        });
    }
    get animationType() {
        return this.nativeElement.animationType;
    }
    /** The preset design that the dialog will apply. */
    set preset(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.preset = value;
        });
    }
    get preset() {
        return this.nativeElement.preset;
    }
    /** Indicates whether the dialog is dismissible via escape and backdrop click or not. */
    set persistent(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.persistent = value;
        });
    }
    get persistent() {
        return this.nativeElement.persistent;
    }
    /** Indicates whether the dialog is fullscreen or not. */
    set fullscreen(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fullscreen = value;
        });
    }
    get fullscreen() {
        return this.nativeElement.fullscreen;
    }
    /** The screen width at which the dialog will switch to fullscreen. */
    set fullscreenThreshold(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.fullscreenThreshold = value;
        });
    }
    get fullscreenThreshold() {
        return this.nativeElement.fullscreenThreshold;
    }
    /** The selector of the element that triggers the dialog. */
    set trigger(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.trigger = value;
        });
    }
    get trigger() {
        return this.nativeElement.trigger;
    }
    /** The element that triggers the dialog. */
    set triggerElement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.triggerElement = value;
        });
    }
    get triggerElement() {
        return this.nativeElement.triggerElement;
    }
    /** Indicates whether the dialog is moveable or not. */
    set moveable(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.moveable = value;
        });
    }
    get moveable() {
        return this.nativeElement.moveable;
    }
    /** Controls whether the dialog is rendered relative to the viewport or its nearest containing block. */
    set positionStrategy(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.positionStrategy = value;
        });
    }
    get positionStrategy() {
        return this.nativeElement.positionStrategy;
    }
    /** Controls the block and/or inline size of the dialog. Defaults to the size of the content it contains. */
    set sizeStrategy(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.sizeStrategy = value;
        });
    }
    get sizeStrategy() {
        return this.nativeElement.sizeStrategy;
    }
    /** The placement of the dialog. */
    set placement(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.placement = value;
        });
    }
    get placement() {
        return this.nativeElement.placement;
    }
    /** Shows the dialog. */
    show(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.show(...args));
    }
    /** Hides the dialog. */
    hide(...args) {
        return this.zone.runOutsideAngular(() => this.nativeElement.hide(...args));
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-dialog element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineDialogComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DialogComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: DialogComponent, selector: "forge-dialog", inputs: { open: ["open", "open", booleanAttribute], mode: "mode", type: "type", animationType: "animationType", preset: "preset", persistent: ["persistent", "persistent", booleanAttribute], fullscreen: ["fullscreen", "fullscreen", booleanAttribute], fullscreenThreshold: ["fullscreenThreshold", "fullscreenThreshold", numberAttribute], trigger: "trigger", triggerElement: "triggerElement", moveable: ["moveable", "moveable", booleanAttribute], positionStrategy: "positionStrategy", sizeStrategy: "sizeStrategy", placement: "placement" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: DialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-dialog',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { open: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], mode: [{
                type: Input
            }], type: [{
                type: Input
            }], animationType: [{
                type: Input
            }], preset: [{
                type: Input
            }], persistent: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], fullscreen: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], fullscreenThreshold: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], trigger: [{
                type: Input
            }], triggerElement: [{
                type: Input
            }], moveable: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], positionStrategy: [{
                type: Input
            }], sizeStrategy: [{
                type: Input
            }], placement: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
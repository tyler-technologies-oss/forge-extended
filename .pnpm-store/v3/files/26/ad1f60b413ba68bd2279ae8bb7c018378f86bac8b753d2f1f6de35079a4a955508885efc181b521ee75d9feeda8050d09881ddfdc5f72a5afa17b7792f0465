// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, numberAttribute, Input } from '@angular/core';
import { defineStepComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class StepComponent {
    /** Whether the step is in the alternative style. */
    set alternative(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.alternative = value;
        });
    }
    get alternative() {
        return this.nativeElement.alternative;
    }
    /** The index of the step. */
    set index(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.index = value;
        });
    }
    get index() {
        return this.nativeElement.index;
    }
    /** Whether the step is editable. */
    set editable(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.editable = value;
        });
    }
    get editable() {
        return this.nativeElement.editable;
    }
    /** Whether the step is completed. */
    set completed(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.completed = value;
        });
    }
    get completed() {
        return this.nativeElement.completed;
    }
    /** Whether the step has an error. */
    set error(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.error = value;
        });
    }
    get error() {
        return this.nativeElement.error;
    }
    /** Whether the step is selected. */
    set selected(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.selected = value;
        });
    }
    get selected() {
        return this.nativeElement.selected;
    }
    /** Whether the step is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether the step is in vertical mode. */
    set vertical(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.vertical = value;
        });
    }
    get vertical() {
        return this.nativeElement.vertical;
    }
    /** Whether the step is expanded. */
    set expanded(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.expanded = value;
        });
    }
    get expanded() {
        return this.nativeElement.expanded;
    }
    /** Whether the step should ignore user expansion. */
    set ignoreUserExpansion(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.ignoreUserExpansion = value;
        });
    }
    get ignoreUserExpansion() {
        return this.nativeElement.ignoreUserExpansion;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-step element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineStepComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: StepComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: StepComponent, selector: "forge-step", inputs: { alternative: ["alternative", "alternative", booleanAttribute], index: ["index", "index", numberAttribute], editable: ["editable", "editable", booleanAttribute], completed: ["completed", "completed", booleanAttribute], error: ["error", "error", booleanAttribute], selected: ["selected", "selected", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], vertical: ["vertical", "vertical", booleanAttribute], expanded: ["expanded", "expanded", booleanAttribute], ignoreUserExpansion: ["ignoreUserExpansion", "ignoreUserExpansion", booleanAttribute] }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: StepComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-step',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { alternative: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], index: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], editable: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], completed: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], error: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], selected: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], vertical: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], expanded: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], ignoreUserExpansion: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { booleanAttribute, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { defineChipSetComponent } from '@tylertech/forge';
import * as i0 from "@angular/core";
/**  */
export class ChipSetComponent {
    /** Whether the chip set is vertical. */
    set vertical(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.vertical = value;
        });
    }
    get vertical() {
        return this.nativeElement.vertical;
    }
    /** The type of chip. */
    set type(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.type = value;
        });
    }
    get type() {
        return this.nativeElement.type;
    }
    /** Whether the chip set is dense. */
    set dense(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.dense = value;
        });
    }
    get dense() {
        return this.nativeElement.dense;
    }
    /** Whether the chip set is disabled. */
    set disabled(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.disabled = value;
        });
    }
    get disabled() {
        return this.nativeElement.disabled;
    }
    /** Whether the chip set is invalid. */
    set invalid(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.invalid = value;
        });
    }
    get invalid() {
        return this.nativeElement.invalid;
    }
    /** The theme of the chip set. */
    set theme(value) {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.theme = value;
        });
    }
    get theme() {
        return this.nativeElement.theme;
    }
    constructor(changeDetectorRef, elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        /** The forge-chip-set element. */
        this.nativeElement = this.elementRef.nativeElement;
        defineChipSetComponent();
        changeDetectorRef.detach();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ChipSetComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.7", type: ChipSetComponent, selector: "forge-chip-set", inputs: { vertical: ["vertical", "vertical", booleanAttribute], type: "type", dense: ["dense", "dense", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], invalid: ["invalid", "invalid", booleanAttribute], theme: "theme" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.7", ngImport: i0, type: ChipSetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'forge-chip-set',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { vertical: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], type: [{
                type: Input
            }], dense: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], invalid: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], theme: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcC1zZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZm9yZ2UtYW5ndWxhci9zcmMvbGliL2NoaXAtc2V0L2NoaXAtc2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3SEFBd0g7QUFDeEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBYyx1QkFBdUIsRUFBNkIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBcUQsc0JBQXNCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFN0csT0FBTztBQU1QLE1BQU0sT0FBTyxnQkFBZ0I7SUFLNUIsd0NBQXdDO0lBQ3hDLElBQ1csUUFBUSxDQUFDLEtBQWdEO1FBQ25FLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLFFBQVE7UUFDbEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUNwQyxDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLElBQ1csSUFBSSxDQUFDLEtBQTRDO1FBQzNELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFXLElBQUk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxxQ0FBcUM7SUFDckMsSUFDVyxLQUFLLENBQUMsS0FBNkM7UUFDN0QsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELElBQVcsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVELHdDQUF3QztJQUN4QyxJQUNXLFFBQVEsQ0FBQyxLQUFnRDtRQUNuRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxRQUFRO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDcEMsQ0FBQztJQUVELHVDQUF1QztJQUN2QyxJQUNXLE9BQU8sQ0FBQyxLQUErQztRQUNqRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxPQUFPO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7SUFDbkMsQ0FBQztJQUVELGlDQUFpQztJQUNqQyxJQUNXLEtBQUssQ0FBQyxLQUE2QztRQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRUQsWUFDQyxpQkFBb0MsRUFDMUIsVUFBcUQsRUFDckQsSUFBWTtRQURaLGVBQVUsR0FBVixVQUFVLENBQTJDO1FBQ3JELFNBQUksR0FBSixJQUFJLENBQVE7UUF4RXZCLGtDQUFrQztRQUNsQixrQkFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBeUU3RCxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7OEdBOUVXLGdCQUFnQjtrR0FBaEIsZ0JBQWdCLDJFQU1SLGdCQUFnQiwyQ0FzQmhCLGdCQUFnQixzQ0FXaEIsZ0JBQWdCLG1DQVdoQixnQkFBZ0IsNkNBcER6QiwyQkFBMkI7OzJGQUUxQixnQkFBZ0I7a0JBTDVCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDO29JQVFXLFFBQVE7c0JBRGxCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLElBQUk7c0JBRGQsS0FBSztnQkFZSyxLQUFLO3NCQURmLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLFFBQVE7c0JBRGxCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLE9BQU87c0JBRGpCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBWTNCLEtBQUs7c0JBRGYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBhbmd1bGFyLWN1c3RvbS1lbGVtZW50cy1zY2hlbWF0aWMuICBBbnkgY2hhbmdlcyB3aWxsIGJlIG92ZXJ3cml0dGVuIG5leHQgdGltZSBpdCBydW5zLlxuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENoaXBTZXRDb21wb25lbnQgYXMgQ2hpcFNldENvbXBvbmVudEN1c3RvbUVsZW1lbnQsIGRlZmluZUNoaXBTZXRDb21wb25lbnQgfSBmcm9tICdAdHlsZXJ0ZWNoL2ZvcmdlJztcblxuLyoqICAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9yZ2UtY2hpcC1zZXQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBDaGlwU2V0Q29tcG9uZW50IHtcblxuXHQvKiogVGhlIGZvcmdlLWNoaXAtc2V0IGVsZW1lbnQuICovXG5cdHB1YmxpYyByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cblx0LyoqIFdoZXRoZXIgdGhlIGNoaXAgc2V0IGlzIHZlcnRpY2FsLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCB2ZXJ0aWNhbCh2YWx1ZTogQ2hpcFNldENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3ZlcnRpY2FsJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnZlcnRpY2FsID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB2ZXJ0aWNhbCgpOiBDaGlwU2V0Q29tcG9uZW50Q3VzdG9tRWxlbWVudFsndmVydGljYWwnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC52ZXJ0aWNhbDtcblx0fVxuXG5cdC8qKiBUaGUgdHlwZSBvZiBjaGlwLiAqL1xuXHRASW5wdXQoKVxuXHRwdWJsaWMgc2V0IHR5cGUodmFsdWU6IENoaXBTZXRDb21wb25lbnRDdXN0b21FbGVtZW50Wyd0eXBlJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnR5cGUgPSB2YWx1ZTtcblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgZ2V0IHR5cGUoKTogQ2hpcFNldENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3R5cGUnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC50eXBlO1xuXHR9XG5cblx0LyoqIFdoZXRoZXIgdGhlIGNoaXAgc2V0IGlzIGRlbnNlLiAqL1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0cHVibGljIHNldCBkZW5zZSh2YWx1ZTogQ2hpcFNldENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2RlbnNlJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LmRlbnNlID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCBkZW5zZSgpOiBDaGlwU2V0Q29tcG9uZW50Q3VzdG9tRWxlbWVudFsnZGVuc2UnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5kZW5zZTtcblx0fVxuXG5cdC8qKiBXaGV0aGVyIHRoZSBjaGlwIHNldCBpcyBkaXNhYmxlZC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgZGlzYWJsZWQodmFsdWU6IENoaXBTZXRDb21wb25lbnRDdXN0b21FbGVtZW50WydkaXNhYmxlZCddKSB7XG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdHRoaXMubmF0aXZlRWxlbWVudC5kaXNhYmxlZCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgZGlzYWJsZWQoKTogQ2hpcFNldENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2Rpc2FibGVkJ10ge1xuXHRcdHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuZGlzYWJsZWQ7XG5cdH1cblxuXHQvKiogV2hldGhlciB0aGUgY2hpcCBzZXQgaXMgaW52YWxpZC4gKi9cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHB1YmxpYyBzZXQgaW52YWxpZCh2YWx1ZTogQ2hpcFNldENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ2ludmFsaWQnXSkge1xuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHR0aGlzLm5hdGl2ZUVsZW1lbnQuaW52YWxpZCA9IHZhbHVlO1xuXHRcdH0pO1xuXHR9XG5cdHB1YmxpYyBnZXQgaW52YWxpZCgpOiBDaGlwU2V0Q29tcG9uZW50Q3VzdG9tRWxlbWVudFsnaW52YWxpZCddIHtcblx0XHRyZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmludmFsaWQ7XG5cdH1cblxuXHQvKiogVGhlIHRoZW1lIG9mIHRoZSBjaGlwIHNldC4gKi9cblx0QElucHV0KClcblx0cHVibGljIHNldCB0aGVtZSh2YWx1ZTogQ2hpcFNldENvbXBvbmVudEN1c3RvbUVsZW1lbnRbJ3RoZW1lJ10pIHtcblx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0dGhpcy5uYXRpdmVFbGVtZW50LnRoZW1lID0gdmFsdWU7XG5cdFx0fSk7XG5cdH1cblx0cHVibGljIGdldCB0aGVtZSgpOiBDaGlwU2V0Q29tcG9uZW50Q3VzdG9tRWxlbWVudFsndGhlbWUnXSB7XG5cdFx0cmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC50aGVtZTtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxDaGlwU2V0Q29tcG9uZW50Q3VzdG9tRWxlbWVudD4sXG5cdFx0cHJvdGVjdGVkIHpvbmU6IE5nWm9uZVxuXHQpIHtcblx0XHRkZWZpbmVDaGlwU2V0Q29tcG9uZW50KCk7XG5cdFx0Y2hhbmdlRGV0ZWN0b3JSZWYuZGV0YWNoKCk7XG5cdH1cbn1cbiJdfQ==